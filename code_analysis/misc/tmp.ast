TranslationUnitDecl 0x5634744cb688 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5634744cbf60 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5634744cbc20 '__int128'
|-TypedefDecl 0x5634744cbfd0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5634744cbc40 'unsigned __int128'
|-TypedefDecl 0x5634744cc338 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x5634744cc0c0 '__NSConstantString_tag'
|   `-CXXRecord 0x5634744cc028 '__NSConstantString_tag'
|-TypedefDecl 0x5634744cc3d0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5634744cc390 'char *'
|   `-BuiltinType 0x5634744cb720 'char'
|-TypedefDecl 0x5634745075b8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag [1]'
| `-ConstantArrayType 0x563474507560 '__va_list_tag [1]' 1 
|   `-RecordType 0x5634744cc4c0 '__va_list_tag'
|     `-CXXRecord 0x5634744cc428 '__va_list_tag'
|-NamespaceDecl 0x563474507668 <bitcoin/src/fs.h:22:1, line:94:1> line:22:11 fsbridge
| |-FullComment 0x563474738570 <line:21:4, col:33>
| | `-ParagraphComment 0x563474738540 <col:4, col:33>
| |   `-TextComment 0x563474738510 <col:4, col:33> Text=" Bridge operations to C stdio "
| |-FunctionDecl 0x5634745078d0 <line:23:5, col:52> col:11 invalid fopen 'int *(const int &, const char *)'
| | |-ParmVarDecl 0x563474507740 <col:17, col:33> col:33 invalid p 'const int &'
| | `-ParmVarDecl 0x5634745077c0 <col:36, col:48> col:48 mode 'const char *'
| |-CXXRecordDecl 0x563474507980 <line:25:5, line:43:5> line:25:11 invalid class FileLock definition
| | |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial defaulted_is_constexpr
| | | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists trivial user_declared
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment
| | | `-Destructor non_trivial user_declared
| | |-CXXRecordDecl 0x563474507a98 <col:5, col:11> col:11 implicit referenced class FileLock
| | |-AccessSpecDecl 0x563474507b28 <line:27:5, col:11> col:5 public
| | |-CXXConstructorDecl 0x563474507bd8 <line:28:9, col:27> col:9 FileLock 'void ()' delete
| | |-CXXConstructorDecl 0x563474507d78 <line:29:9, col:42> col:9 FileLock 'void (const fsbridge::FileLock &)' delete trivial
| | | `-ParmVarDecl 0x563474507cb8 <col:18, col:32> col:33 'const fsbridge::FileLock &'
| | |-CXXConstructorDecl 0x563474507f28 <line:30:9, col:37> col:9 FileLock 'void (fsbridge::FileLock &&)' delete trivial
| | | `-ParmVarDecl 0x563474507e68 <col:18, col:26> col:28 'fsbridge::FileLock &&'
| | |-CXXConstructorDecl 0x5634745080c8 <line:31:9, col:47> col:18 invalid FileLock 'void (const int &)'
| | | `-ParmVarDecl 0x563474508000 <col:27, col:43> col:43 invalid file 'const int &'
| | |-CXXDestructorDecl 0x5634745081c0 <line:32:9, col:19> col:9 ~FileLock 'void ()' noexcept-unevaluated 0x5634745081c0
| | |-CXXMethodDecl 0x5634745082e8 <line:33:9, col:22> col:14 TryLock 'bool ()'
| | |-CXXMethodDecl 0x5634745083f0 <line:34:9, col:50> col:21 invalid GetReason 'int ()'
| | | `-CompoundStmt 0x56347453d4e0 <col:33, col:50>
| | |-AccessSpecDecl 0x563474508490 <line:36:5, col:12> col:5 private
| | |-FieldDecl 0x56347453d3e0 <line:37:9, col:21> col:21 invalid reason 'int'
| | `-FieldDecl 0x56347453d448 <line:39:9, col:19> col:13 fd 'int'
| |   `-UnaryOperator 0x56347453d4b8 <col:18, col:19> 'int' prefix '-'
| |     `-IntegerLiteral 0x56347453d498 <col:19> 'int' 1
| |-FunctionDecl 0x56347453d5f0 <line:45:5, col:75> col:17 invalid get_filesystem_error_message 'int (const int &)'
| | `-ParmVarDecl 0x56347453d528 <col:46, col:74> col:74 invalid e 'const int &'
| |-TypedefDecl 0x56347453d6c0 <line:91:5, col:26> col:26 invalid ifstream 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| `-TypedefDecl 0x56347453d740 <line:92:5, col:26> col:26 invalid ofstream 'int'
|   `-BuiltinType 0x5634744cb780 'int'
|-EmptyDecl 0x56347453d798 <line:94:2> col:2
|-FunctionDecl 0x56347453d8c0 <bitcoin/src/compat/endian.h:156:1, line:159:1> line:156:17 invalid htobe16 'int (int)' inline
| |-ParmVarDecl 0x56347453d7f8 <col:25, col:34> col:34 invalid host_16bits 'int'
| `-CompoundStmt 0x56347453d9a8 <line:157:1, line:159:1>
|-FunctionDecl 0x56347453da88 <line:163:1, line:166:1> line:163:17 invalid htole16 'int (int)' inline
| |-ParmVarDecl 0x56347453d9f0 <col:25, col:34> col:34 invalid host_16bits 'int'
| `-CompoundStmt 0x56347453db30 <line:164:1, line:166:1>
|-FunctionDecl 0x56347453dc10 <line:170:1, line:173:1> line:170:17 invalid be16toh 'int (int)' inline
| |-ParmVarDecl 0x56347453db78 <col:25, col:34> col:34 invalid big_endian_16bits 'int'
| `-CompoundStmt 0x56347453dcf8 <line:171:1, line:173:1>
|-FunctionDecl 0x56347453ddd8 <line:177:1, line:180:1> line:177:17 invalid le16toh 'int (int)' inline
| |-ParmVarDecl 0x56347453dd40 <col:25, col:34> col:34 invalid little_endian_16bits 'int'
| `-CompoundStmt 0x56347453de80 <line:178:1, line:180:1>
|-FunctionDecl 0x56347453df60 <line:184:1, line:187:1> line:184:17 invalid htobe32 'int (int)' inline
| |-ParmVarDecl 0x56347453dec8 <col:25, col:34> col:34 invalid host_32bits 'int'
| `-CompoundStmt 0x56347453e048 <line:185:1, line:187:1>
|-FunctionDecl 0x56347453e128 <line:191:1, line:194:1> line:191:17 invalid htole32 'int (int)' inline
| |-ParmVarDecl 0x56347453e090 <col:25, col:34> col:34 invalid host_32bits 'int'
| `-CompoundStmt 0x56347453e1d0 <line:192:1, line:194:1>
|-FunctionDecl 0x56347453e2b0 <line:198:1, line:201:1> line:198:17 invalid be32toh 'int (int)' inline
| |-ParmVarDecl 0x56347453e218 <col:25, col:34> col:34 invalid big_endian_32bits 'int'
| `-CompoundStmt 0x56347453e398 <line:199:1, line:201:1>
|-FunctionDecl 0x563474542208 <line:205:1, line:208:1> line:205:17 invalid le32toh 'int (int)' inline
| |-ParmVarDecl 0x563474542170 <col:25, col:34> col:34 invalid little_endian_32bits 'int'
| `-CompoundStmt 0x5634745422b0 <line:206:1, line:208:1>
|-FunctionDecl 0x563474542390 <line:212:1, line:215:1> line:212:17 invalid htobe64 'int (int)' inline
| |-ParmVarDecl 0x5634745422f8 <col:25, col:34> col:34 invalid host_64bits 'int'
| `-CompoundStmt 0x563474542478 <line:213:1, line:215:1>
|-FunctionDecl 0x563474542558 <line:219:1, line:222:1> line:219:17 invalid htole64 'int (int)' inline
| |-ParmVarDecl 0x5634745424c0 <col:25, col:34> col:34 invalid host_64bits 'int'
| `-CompoundStmt 0x563474542600 <line:220:1, line:222:1>
|-FunctionDecl 0x5634745426e0 <line:226:1, line:229:1> line:226:17 invalid be64toh 'int (int)' inline
| |-ParmVarDecl 0x563474542648 <col:25, col:34> col:34 invalid big_endian_64bits 'int'
| `-CompoundStmt 0x5634745427c8 <line:227:1, line:229:1>
|-FunctionDecl 0x5634745428a8 <line:233:1, line:236:1> line:233:17 invalid le64toh 'int (int)' inline
| |-ParmVarDecl 0x563474542810 <col:25, col:34> col:34 invalid little_endian_64bits 'int'
| `-CompoundStmt 0x563474542950 <line:234:1, line:236:1>
|-ClassTemplateDecl 0x563474542d28 <bitcoin/src/prevector.h:37:1, line:525:1> line:38:7 prevector
| |-NonTypeTemplateParmDecl 0x5634745429c0 <line:37:10, col:23> col:23 referenced 'unsigned int' depth 0 index 0 N
| |-TemplateTypeParmDecl 0x563474542a20 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563474542ad8 <col:38, col:47> col:47 referenced typename depth 0 index 2 Size
| |-TemplateTypeParmDecl 0x563474542b88 <col:64, col:73> col:73 referenced typename depth 0 index 3 Diff
| |-CXXRecordDecl 0x563474542c58 <line:38:1, line:525:1> line:38:7 class prevector definition
| | |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial user_provided
| | | |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists non_trivial user_declared
| | | |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| | | |-MoveAssignment exists non_trivial user_declared
| | | `-Destructor non_trivial user_declared
| | |-MaxFieldAlignmentAttr 0x563474542ce8 <<invalid sloc>> Implicit 8
| | |-FullComment 0x563474738cb0 <line:19:4, line:35:42>
| | | |-ParagraphComment 0x563474738a50 <line:19:4, line:21:72>
| | | | |-TextComment 0x563474738980 <line:19:4, col:52> Text=" Implements a drop-in replacement for std::vector"
| | | | |-TextComment 0x5634747389a0 <col:53, col:54> Text="<T"
| | | | |-TextComment 0x5634747389c0 <col:55, col:76> Text="> which stores up to N"
| | | | |-TextComment 0x5634747389e0 <line:20:3, col:76> Text="  elements directly (without heap allocation). The types Size and Diff are"
| | | | `-TextComment 0x563474738a00 <line:21:3, col:72> Text="  used to store element counts, and can be any unsigned + signed type."
| | | |-ParagraphComment 0x563474738c00 <line:23:3, line:32:47>
| | | | |-TextComment 0x563474738a70 <line:23:3, col:29> Text="  Storage layout is either:"
| | | | |-TextComment 0x563474738a90 <line:24:3, col:24> Text="  - Direct allocation:"
| | | | |-TextComment 0x563474738ab0 <line:25:3, col:65> Text="    - Size _size: the number of used elements (between 0 and N)"
| | | | |-TextComment 0x563474738ad0 <line:26:3, col:53> Text="    - T direct[N]: an array of N elements of type T"
| | | | |-TextComment 0x563474738af0 <line:27:3, col:47> Text="      (only the first _size are initialized)."
| | | | |-TextComment 0x563474738b10 <line:28:3, col:26> Text="  - Indirect allocation:"
| | | | |-TextComment 0x563474738b30 <line:29:3, col:58> Text="    - Size _size: the number of used elements plus N + 1"
| | | | |-TextComment 0x563474738b50 <line:30:3, col:55> Text="    - Size capacity: the number of allocated elements"
| | | | |-TextComment 0x563474738b70 <line:31:3, col:73> Text="    - T* indirect: a pointer to an array of capacity elements of type T"
| | | | `-TextComment 0x563474738b90 <line:32:3, col:47> Text="      (only the first _size are initialized)."
| | | `-ParagraphComment 0x563474738c70 <line:34:3, line:35:42>
| | |   |-TextComment 0x563474738c20 <line:34:3, col:80> Text="  The data type T must be movable by memmove/realloc(). Once we switch to C++,"
| | |   `-TextComment 0x563474738c40 <line:35:3, col:42> Text="  move constructors can be used instead."
| | |-CXXRecordDecl 0x563474543040 <line:38:1, col:7> col:7 implicit referenced class prevector
| | |-AccessSpecDecl 0x5634745430d0 <line:39:1, col:7> col:1 public
| | |-TypedefDecl 0x563474543108 <line:40:5, col:18> col:18 referenced size_type 'Size'
| | | `-TemplateTypeParmType 0x563474542b50 'Size' dependent depth 0 index 2
| | |   `-TemplateTypeParm 0x563474542ad8 'Size'
| | |-TypedefDecl 0x563474544a70 <line:41:5, col:18> col:18 referenced difference_type 'Diff'
| | | `-TemplateTypeParmType 0x563474542c00 'Diff' dependent depth 0 index 3
| | |   `-TemplateTypeParm 0x563474542b88 'Diff'
| | |-TypedefDecl 0x563474544ad8 <line:42:5, col:15> col:15 referenced value_type 'T'
| | | `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | |   `-TemplateTypeParm 0x563474542a20 'T'
| | |-TypedefDecl 0x563474544bb8 <line:43:5, col:25> col:25 reference 'prevector::value_type &'
| | | `-LValueReferenceType 0x563474544b80 'prevector::value_type &' dependent
| | |   `-TypedefType 0x563474544b30 'prevector::value_type' sugar dependent
| | |     |-Typedef 0x563474544ad8 'value_type'
| | |     `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | |       `-TemplateTypeParm 0x563474542a20 'T'
| | |-TypedefDecl 0x563474544c78 <line:44:5, col:31> col:31 const_reference 'const prevector::value_type &'
| | | `-LValueReferenceType 0x563474544c40 'const prevector::value_type &' dependent
| | |   `-QualType 0x563474544b31 'const prevector::value_type' const
| | |     `-TypedefType 0x563474544b30 'prevector::value_type' sugar dependent
| | |       |-Typedef 0x563474544ad8 'value_type'
| | |       `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | |         `-TemplateTypeParm 0x563474542a20 'T'
| | |-TypedefDecl 0x563474544d38 <line:45:5, col:25> col:25 pointer 'prevector::value_type *'
| | | `-PointerType 0x563474544d00 'prevector::value_type *' dependent
| | |   `-TypedefType 0x563474544b30 'prevector::value_type' sugar dependent
| | |     |-Typedef 0x563474544ad8 'value_type'
| | |     `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | |       `-TemplateTypeParm 0x563474542a20 'T'
| | |-TypedefDecl 0x563474544df8 <line:46:5, col:31> col:31 const_pointer 'const prevector::value_type *'
| | | `-PointerType 0x563474544dc0 'const prevector::value_type *' dependent
| | |   `-QualType 0x563474544b31 'const prevector::value_type' const
| | |     `-TypedefType 0x563474544b30 'prevector::value_type' sugar dependent
| | |       |-Typedef 0x563474544ad8 'value_type'
| | |       `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | |         `-TemplateTypeParm 0x563474542a20 'T'
| | |-CXXRecordDecl 0x563474544e50 <line:48:5, line:76:5> line:48:11 referenced class iterator definition
| | | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | | |-DefaultConstructor
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-MaxFieldAlignmentAttr 0x563474544f00 <<invalid sloc>> Implicit 8
| | | |-CXXRecordDecl 0x563474544fa8 <col:5, col:11> col:11 implicit referenced class iterator
| | | |-FieldDecl 0x563474545078 <line:49:9, col:12> col:12 referenced ptr 'T *'
| | | |-AccessSpecDecl 0x5634745450c8 <line:50:5, col:11> col:5 public
| | | |-TypedefDecl 0x563474545100 <line:51:9, col:22> col:22 referenced difference_type 'Diff'
| | | | `-TemplateTypeParmType 0x563474542c00 'Diff' dependent depth 0 index 3
| | | |   `-TemplateTypeParm 0x563474542b88 'Diff'
| | | |-TypedefDecl 0x563474545168 <line:52:9, col:19> col:19 value_type 'T'
| | | | `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |   `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x5634745451d0 <line:53:9, col:20> col:20 pointer 'T *'
| | | | `-PointerType 0x563474545040 'T *' dependent
| | | |   `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |     `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x563474545268 <line:54:9, col:20> col:20 reference 'T &'
| | | | `-LValueReferenceType 0x563474545230 'T &' dependent
| | | |   `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |     `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x5634745452e8 <line:55:9, col:49> col:49 invalid iterator_category 'int'
| | | | `-BuiltinType 0x5634744cb780 'int'
| | | |-CXXConstructorDecl 0x563474545488 <line:56:9, col:40> col:9 iterator 'void (T *)'
| | | | |-ParmVarDecl 0x563474545350 <col:18, col:21> col:21 referenced ptr_ 'T *'
| | | | |-CXXCtorInitializer Field 0x563474545078 'ptr' 'T *'
| | | | | `-ParenListExpr 0x56347456e4b0 <col:32, col:37> 'NULL TYPE'
| | | | |   `-DeclRefExpr 0x56347456e490 <col:33> 'T *' lvalue ParmVar 0x563474545350 'ptr_' 'T *'
| | | | `-CompoundStmt 0x56347456e500 <col:39, col:40>
| | | |-CXXMethodDecl 0x5634745455e8 <line:57:9, col:45> col:12 operator* 'T &() const'
| | | | `-CompoundStmt 0x56347456e578 <col:30, col:45>
| | | |   `-ReturnStmt 0x56347456e568 <col:32, col:40>
| | | |     `-UnaryOperator 0x56347456e550 <col:39, col:40> '<dependent type>' prefix '*' cannot overflow
| | | |       `-MemberExpr 0x56347456e520 <col:40> 'T *const' lvalue ->ptr 0x563474545078
| | | |         `-CXXThisExpr 0x56347456e510 <col:40> 'const prevector::iterator *' implicit this
| | | |-CXXMethodDecl 0x563474545708 <line:58:9, col:45> col:12 operator-> 'T *() const'
| | | | `-CompoundStmt 0x56347456e5e0 <col:31, col:45>
| | | |   `-ReturnStmt 0x56347456e5d0 <col:33, col:40>
| | | |     `-MemberExpr 0x56347456e5a0 <col:40> 'T *const' lvalue ->ptr 0x563474545078
| | | |       `-CXXThisExpr 0x56347456e590 <col:40> 'const prevector::iterator *' implicit this
| | | |-CXXMethodDecl 0x5634745458d8 <line:59:9, col:57> col:12 operator[] 'T &(prevector::size_type)'
| | | | |-ParmVarDecl 0x5634745457e0 <col:23, col:33> col:33 referenced pos 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x56347456e688 <col:38, col:57>
| | | |   `-ReturnStmt 0x56347456e678 <col:40, col:54>
| | | |     `-ArraySubscriptExpr 0x56347456e658 <col:47, col:54> '<dependent type>' lvalue
| | | |       |-MemberExpr 0x56347456e608 <col:47> 'T *' lvalue ->ptr 0x563474545078
| | | |       | `-CXXThisExpr 0x56347456e5f8 <col:47> 'prevector::iterator *' implicit this
| | | |       `-DeclRefExpr 0x56347456e638 <col:51> 'prevector::size_type':'Size' lvalue ParmVar 0x5634745457e0 'pos' 'prevector::size_type':'Size'
| | | |-CXXMethodDecl 0x5634745466d8 <line:60:9, col:69> col:18 operator[] 'const T &(prevector::size_type) const'
| | | | |-ParmVarDecl 0x563474545990 <col:29, col:39> col:39 referenced pos 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x56347456e730 <col:50, col:69>
| | | |   `-ReturnStmt 0x56347456e720 <col:52, col:66>
| | | |     `-ArraySubscriptExpr 0x56347456e700 <col:59, col:66> '<dependent type>' lvalue
| | | |       |-MemberExpr 0x56347456e6b0 <col:59> 'T *const' lvalue ->ptr 0x563474545078
| | | |       | `-CXXThisExpr 0x56347456e6a0 <col:59> 'const prevector::iterator *' implicit this
| | | |       `-DeclRefExpr 0x56347456e6e0 <col:63> 'prevector::size_type':'Size' lvalue ParmVar 0x563474545990 'pos' 'prevector::size_type':'Size'
| | | |-CXXMethodDecl 0x5634745467f8 <line:61:9, col:55> col:19 operator++ 'prevector::iterator &()'
| | | | `-CompoundStmt 0x56347456e7f8 <col:32, col:55>
| | | |   |-UnaryOperator 0x56347456e7a8 <col:34, col:37> '<dependent type>' postfix '++' cannot overflow
| | | |   | `-MemberExpr 0x56347456e758 <col:34> 'T *' lvalue ->ptr 0x563474545078
| | | |   |   `-CXXThisExpr 0x56347456e748 <col:34> 'prevector::iterator *' implicit this
| | | |   `-ReturnStmt 0x56347456e7e8 <col:41, col:49>
| | | |     `-UnaryOperator 0x56347456e7d0 <col:48, col:49> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x56347456e7c0 <col:49> 'prevector::iterator *' this
| | | |-CXXMethodDecl 0x5634745468b8 <line:62:9, col:55> col:19 operator-- 'prevector::iterator &()'
| | | | `-CompoundStmt 0x56347456e8c8 <col:32, col:55>
| | | |   |-UnaryOperator 0x56347456e878 <col:34, col:37> '<dependent type>' postfix '--' cannot overflow
| | | |   | `-MemberExpr 0x56347456e828 <col:34> 'T *' lvalue ->ptr 0x563474545078
| | | |   |   `-CXXThisExpr 0x56347456e818 <col:34> 'prevector::iterator *' implicit this
| | | |   `-ReturnStmt 0x56347456e8b8 <col:41, col:49>
| | | |     `-UnaryOperator 0x56347456e8a0 <col:48, col:49> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x56347456e890 <col:49> 'prevector::iterator *' this
| | | |-CXXMethodDecl 0x563474546a38 <line:63:9, col:82> col:18 operator++ 'prevector::iterator (int)'
| | | | |-ParmVarDecl 0x563474546970 <col:29> col:32 'int'
| | | | `-CompoundStmt 0x56347456ea78 <col:34, col:82>
| | | |   |-DeclStmt 0x56347456e9c8 <col:36, col:56>
| | | |   | `-VarDecl 0x56347456e8f8 <col:36, col:55> col:45 referenced copy 'prevector::iterator' nrvo callinit
| | | |   |   `-ParenListExpr 0x56347456e9a8 <col:49, col:55> 'NULL TYPE'
| | | |   |     `-UnaryOperator 0x56347456e970 <col:50, col:51> '<dependent type>' prefix '*' cannot overflow
| | | |   |       `-CXXThisExpr 0x56347456e960 <col:51> 'prevector::iterator *' this
| | | |   |-UnaryOperator 0x56347456ea28 <col:58, col:66> '<dependent type>' prefix '++' cannot overflow
| | | |   | `-ParenExpr 0x56347456ea08 <col:60, col:66> '<dependent type>'
| | | |   |   `-UnaryOperator 0x56347456e9f0 <col:61, col:62> '<dependent type>' prefix '*' cannot overflow
| | | |   |     `-CXXThisExpr 0x56347456e9e0 <col:62> 'prevector::iterator *' this
| | | |   `-ReturnStmt 0x56347456ea60 <col:69, col:76>
| | | |     `-DeclRefExpr 0x56347456ea40 <col:76> 'prevector::iterator' lvalue Var 0x56347456e8f8 'copy' 'prevector::iterator'
| | | |-CXXMethodDecl 0x563474546b88 <line:64:9, col:82> col:18 operator-- 'prevector::iterator (int)'
| | | | |-ParmVarDecl 0x563474546af8 <col:29> col:32 'int'
| | | | `-CompoundStmt 0x563474572bb8 <col:34, col:82>
| | | |   |-DeclStmt 0x56347456eb80 <col:36, col:56>
| | | |   | `-VarDecl 0x56347456eab0 <col:36, col:55> col:45 referenced copy 'prevector::iterator' nrvo callinit
| | | |   |   `-ParenListExpr 0x56347456eb60 <col:49, col:55> 'NULL TYPE'
| | | |   |     `-UnaryOperator 0x56347456eb28 <col:50, col:51> '<dependent type>' prefix '*' cannot overflow
| | | |   |       `-CXXThisExpr 0x56347456eb18 <col:51> 'prevector::iterator *' this
| | | |   |-UnaryOperator 0x563474572b68 <col:58, col:66> '<dependent type>' prefix '--' cannot overflow
| | | |   | `-ParenExpr 0x563474572b48 <col:60, col:66> '<dependent type>'
| | | |   |   `-UnaryOperator 0x563474572b30 <col:61, col:62> '<dependent type>' prefix '*' cannot overflow
| | | |   |     `-CXXThisExpr 0x56347456eb98 <col:62> 'prevector::iterator *' this
| | | |   `-ReturnStmt 0x563474572ba0 <col:69, col:76>
| | | |     `-DeclRefExpr 0x563474572b80 <col:76> 'prevector::iterator' lvalue Var 0x56347456eab0 'copy' 'prevector::iterator'
| | | |-FriendDecl 0x563474546ef0 <line:65:9, col:92> col:32
| | | | `-FunctionDecl 0x563474546de8 parent 0x5634744cb688 <col:9, col:92> col:32 operator- 'prevector::iterator::difference_type (prevector::iterator, prevector::iterator)'
| | | |   |-ParmVarDecl 0x563474546c60 <col:42, col:51> col:51 referenced a 'prevector::iterator'
| | | |   |-ParmVarDecl 0x563474546cd8 <col:54, col:63> col:63 referenced b 'prevector::iterator'
| | | |   `-CompoundStmt 0x563474572d10 <col:66, col:92>
| | | |     `-ReturnStmt 0x563474572d00 <col:68, col:89>
| | | |       `-ParenExpr 0x563474572ce0 <col:75, col:89> '<dependent type>'
| | | |         `-BinaryOperator 0x563474572cc0 <col:76, col:88> '<dependent type>' '-'
| | | |           |-UnaryOperator 0x563474572c38 <col:76, col:80> '<dependent type>' prefix '&' cannot overflow
| | | |           | `-ParenExpr 0x563474572c18 <col:77, col:80> '<dependent type>'
| | | |           |   `-UnaryOperator 0x563474572c00 <col:78, col:79> '<dependent type>' prefix '*' cannot overflow
| | | |           |     `-DeclRefExpr 0x563474572be0 <col:79> 'prevector::iterator' lvalue ParmVar 0x563474546c60 'a' 'prevector::iterator'
| | | |           `-UnaryOperator 0x563474572ca8 <col:84, col:88> '<dependent type>' prefix '&' cannot overflow
| | | |             `-ParenExpr 0x563474572c88 <col:85, col:88> '<dependent type>'
| | | |               `-UnaryOperator 0x563474572c70 <col:86, col:87> '<dependent type>' prefix '*' cannot overflow
| | | |                 `-DeclRefExpr 0x563474572c50 <col:87> 'prevector::iterator' lvalue ParmVar 0x563474546cd8 'b' 'prevector::iterator'
| | | |-CXXMethodDecl 0x563474547038 <line:66:9, col:69> col:18 operator+ 'prevector::iterator (prevector::size_type)'
| | | | |-ParmVarDecl 0x563474546f40 <col:28, col:38> col:38 referenced n 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474572df0 <col:41, col:69>
| | | |   `-ReturnStmt 0x563474572de0 <col:43, col:66>
| | | |     `-CXXUnresolvedConstructExpr 0x563474572db8 <col:50, col:66> 'prevector::iterator' 'prevector::iterator'
| | | |       `-BinaryOperator 0x563474572d98 <col:59, col:65> '<dependent type>' '+'
| | | |         |-MemberExpr 0x563474572d48 <col:59> 'T *' lvalue ->ptr 0x563474545078
| | | |         | `-CXXThisExpr 0x563474572d38 <col:59> 'prevector::iterator *' implicit this
| | | |         `-DeclRefExpr 0x563474572d78 <col:65> 'prevector::size_type':'Size' lvalue ParmVar 0x563474546f40 'n' 'prevector::size_type':'Size'
| | | |-CXXMethodDecl 0x5634745471e8 <line:67:9, col:69> col:19 operator+= 'prevector::iterator &(prevector::size_type)'
| | | | |-ParmVarDecl 0x5634745470f0 <col:30, col:40> col:40 referenced n 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474572ed0 <col:43, col:69>
| | | |   |-CompoundAssignOperator 0x563474572e68 <col:45, col:52> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | | |   | |-MemberExpr 0x563474572e18 <col:45> 'T *' lvalue ->ptr 0x563474545078
| | | |   | | `-CXXThisExpr 0x563474572e08 <col:45> 'prevector::iterator *' implicit this
| | | |   | `-DeclRefExpr 0x563474572e48 <col:52> 'prevector::size_type':'Size' lvalue ParmVar 0x5634745470f0 'n' 'prevector::size_type':'Size'
| | | |   `-ReturnStmt 0x563474572ec0 <col:55, col:63>
| | | |     `-UnaryOperator 0x563474572ea8 <col:62, col:63> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x563474572e98 <col:63> 'prevector::iterator *' this
| | | |-CXXMethodDecl 0x563474547330 <line:68:9, col:69> col:18 operator- 'prevector::iterator (prevector::size_type)'
| | | | |-ParmVarDecl 0x5634745472a0 <col:28, col:38> col:38 referenced n 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474572fb8 <col:41, col:69>
| | | |   `-ReturnStmt 0x563474572fa8 <col:43, col:66>
| | | |     `-CXXUnresolvedConstructExpr 0x563474572f80 <col:50, col:66> 'prevector::iterator' 'prevector::iterator'
| | | |       `-BinaryOperator 0x563474572f60 <col:59, col:65> '<dependent type>' '-'
| | | |         |-MemberExpr 0x563474572f10 <col:59> 'T *' lvalue ->ptr 0x563474545078
| | | |         | `-CXXThisExpr 0x563474572f00 <col:59> 'prevector::iterator *' implicit this
| | | |         `-DeclRefExpr 0x563474572f40 <col:65> 'prevector::size_type':'Size' lvalue ParmVar 0x5634745472a0 'n' 'prevector::size_type':'Size'
| | | |-CXXMethodDecl 0x563474547478 <line:69:9, col:69> col:19 operator-= 'prevector::iterator &(prevector::size_type)'
| | | | |-ParmVarDecl 0x5634745473e8 <col:30, col:40> col:40 referenced n 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474573098 <col:43, col:69>
| | | |   |-CompoundAssignOperator 0x563474573030 <col:45, col:52> '<dependent type>' lvalue '-=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | | |   | |-MemberExpr 0x563474572fe0 <col:45> 'T *' lvalue ->ptr 0x563474545078
| | | |   | | `-CXXThisExpr 0x563474572fd0 <col:45> 'prevector::iterator *' implicit this
| | | |   | `-DeclRefExpr 0x563474573010 <col:52> 'prevector::size_type':'Size' lvalue ParmVar 0x5634745473e8 'n' 'prevector::size_type':'Size'
| | | |   `-ReturnStmt 0x563474573088 <col:55, col:63>
| | | |     `-UnaryOperator 0x563474573070 <col:62, col:63> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x563474573060 <col:63> 'prevector::iterator *' this
| | | |-CXXMethodDecl 0x563474549440 <line:70:9, col:66> col:14 operator== 'bool (prevector::iterator) const'
| | | | |-ParmVarDecl 0x563474547530 <col:25, col:34> col:34 referenced x 'prevector::iterator'
| | | | `-CompoundStmt 0x563474573190 <col:43, col:66>
| | | |   `-ReturnStmt 0x563474573180 <col:45, col:61>
| | | |     `-BinaryOperator 0x563474573160 <col:52, col:61> '<dependent type>' '=='
| | | |       |-MemberExpr 0x5634745730c8 <col:52> 'T *const' lvalue ->ptr 0x563474545078
| | | |       | `-CXXThisExpr 0x5634745730b8 <col:52> 'const prevector::iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474573118 <col:59, col:61> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x5634745730f8 <col:59> 'prevector::iterator' lvalue ParmVar 0x563474547530 'x' 'prevector::iterator'
| | | |-CXXMethodDecl 0x563474549588 <line:71:9, col:66> col:14 operator!= 'bool (prevector::iterator) const'
| | | | |-ParmVarDecl 0x5634745494f8 <col:25, col:34> col:34 referenced x 'prevector::iterator'
| | | | `-CompoundStmt 0x563474573280 <col:43, col:66>
| | | |   `-ReturnStmt 0x563474573270 <col:45, col:61>
| | | |     `-BinaryOperator 0x563474573250 <col:52, col:61> '<dependent type>' '!='
| | | |       |-MemberExpr 0x5634745731b8 <col:52> 'T *const' lvalue ->ptr 0x563474545078
| | | |       | `-CXXThisExpr 0x5634745731a8 <col:52> 'const prevector::iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474573208 <col:59, col:61> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x5634745731e8 <col:59> 'prevector::iterator' lvalue ParmVar 0x5634745494f8 'x' 'prevector::iterator'
| | | |-CXXMethodDecl 0x5634745496d0 <line:72:9, col:66> col:14 operator>= 'bool (prevector::iterator) const'
| | | | |-ParmVarDecl 0x563474549640 <col:25, col:34> col:34 referenced x 'prevector::iterator'
| | | | `-CompoundStmt 0x563474573370 <col:43, col:66>
| | | |   `-ReturnStmt 0x563474573360 <col:45, col:61>
| | | |     `-BinaryOperator 0x563474573340 <col:52, col:61> '<dependent type>' '>='
| | | |       |-MemberExpr 0x5634745732a8 <col:52> 'T *const' lvalue ->ptr 0x563474545078
| | | |       | `-CXXThisExpr 0x563474573298 <col:52> 'const prevector::iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x5634745732f8 <col:59, col:61> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x5634745732d8 <col:59> 'prevector::iterator' lvalue ParmVar 0x563474549640 'x' 'prevector::iterator'
| | | |-CXXMethodDecl 0x563474549818 <line:73:9, col:66> col:14 operator<= 'bool (prevector::iterator) const'
| | | | |-ParmVarDecl 0x563474549788 <col:25, col:34> col:34 referenced x 'prevector::iterator'
| | | | `-CompoundStmt 0x563474573460 <col:43, col:66>
| | | |   `-ReturnStmt 0x563474573450 <col:45, col:61>
| | | |     `-BinaryOperator 0x563474573430 <col:52, col:61> '<dependent type>' '<='
| | | |       |-MemberExpr 0x563474573398 <col:52> 'T *const' lvalue ->ptr 0x563474545078
| | | |       | `-CXXThisExpr 0x563474573388 <col:52> 'const prevector::iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x5634745733e8 <col:59, col:61> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x5634745733c8 <col:59> 'prevector::iterator' lvalue ParmVar 0x563474549788 'x' 'prevector::iterator'
| | | |-CXXMethodDecl 0x563474549960 <line:74:9, col:64> col:14 operator> 'bool (prevector::iterator) const'
| | | | |-ParmVarDecl 0x5634745498d0 <col:24, col:33> col:33 referenced x 'prevector::iterator'
| | | | `-CompoundStmt 0x563474573550 <col:42, col:64>
| | | |   `-ReturnStmt 0x563474573540 <col:44, col:59>
| | | |     `-BinaryOperator 0x563474573520 <col:51, col:59> '<dependent type>' '>'
| | | |       |-MemberExpr 0x563474573488 <col:51> 'T *const' lvalue ->ptr 0x563474545078
| | | |       | `-CXXThisExpr 0x563474573478 <col:51> 'const prevector::iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x5634745734d8 <col:57, col:59> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x5634745734b8 <col:57> 'prevector::iterator' lvalue ParmVar 0x5634745498d0 'x' 'prevector::iterator'
| | | `-CXXMethodDecl 0x563474549aa8 <line:75:9, col:64> col:14 operator< 'bool (prevector::iterator) const'
| | |   |-ParmVarDecl 0x563474549a18 <col:24, col:33> col:33 referenced x 'prevector::iterator'
| | |   `-CompoundStmt 0x563474573640 <col:42, col:64>
| | |     `-ReturnStmt 0x563474573630 <col:44, col:59>
| | |       `-BinaryOperator 0x563474573610 <col:51, col:59> '<dependent type>' '<'
| | |         |-MemberExpr 0x563474573578 <col:51> 'T *const' lvalue ->ptr 0x563474545078
| | |         | `-CXXThisExpr 0x563474573568 <col:51> 'const prevector::iterator *' implicit this
| | |         `-CXXDependentScopeMemberExpr 0x5634745735c8 <col:57, col:59> '<dependent type>' lvalue .ptr
| | |           `-DeclRefExpr 0x5634745735a8 <col:57> 'prevector::iterator' lvalue ParmVar 0x563474549a18 'x' 'prevector::iterator'
| | |-CXXRecordDecl 0x563474549b68 <line:78:5, line:97:5> line:78:11 referenced class reverse_iterator definition
| | | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | | |-DefaultConstructor
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-MaxFieldAlignmentAttr 0x563474549c20 <<invalid sloc>> Implicit 8
| | | |-CXXRecordDecl 0x563474549cc8 <col:5, col:11> col:11 implicit referenced class reverse_iterator
| | | |-FieldDecl 0x563474549d68 <line:79:9, col:12> col:12 referenced ptr 'T *'
| | | |-AccessSpecDecl 0x563474549db8 <line:80:5, col:11> col:5 public
| | | |-TypedefDecl 0x563474549df0 <line:81:9, col:22> col:22 difference_type 'Diff'
| | | | `-TemplateTypeParmType 0x563474542c00 'Diff' dependent depth 0 index 3
| | | |   `-TemplateTypeParm 0x563474542b88 'Diff'
| | | |-TypedefDecl 0x563474549e58 <line:82:9, col:19> col:19 value_type 'T'
| | | | `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |   `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x563474549ec0 <line:83:9, col:20> col:20 pointer 'T *'
| | | | `-PointerType 0x563474545040 'T *' dependent
| | | |   `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |     `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x563474549f28 <line:84:9, col:20> col:20 reference 'T &'
| | | | `-LValueReferenceType 0x563474545230 'T &' dependent
| | | |   `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |     `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x563474549fa8 <line:85:9, col:49> col:49 invalid iterator_category 'int'
| | | | `-BuiltinType 0x5634744cb780 'int'
| | | |-CXXConstructorDecl 0x56347454a0e8 <line:86:9, col:48> col:9 reverse_iterator 'void (T *)'
| | | | |-ParmVarDecl 0x56347454a010 <col:26, col:29> col:29 referenced ptr_ 'T *'
| | | | |-CXXCtorInitializer Field 0x563474549d68 'ptr' 'T *'
| | | | | `-ParenListExpr 0x563474573678 <col:40, col:45> 'NULL TYPE'
| | | | |   `-DeclRefExpr 0x563474573658 <col:41> 'T *' lvalue ParmVar 0x56347454a010 'ptr_' 'T *'
| | | | `-CompoundStmt 0x5634745736c8 <col:47, col:48>
| | | |-CXXMethodDecl 0x56347454a218 <line:87:9, col:39> col:12 operator* 'T &()'
| | | | `-CompoundStmt 0x563474573740 <col:24, col:39>
| | | |   `-ReturnStmt 0x563474573730 <col:26, col:34>
| | | |     `-UnaryOperator 0x563474573718 <col:33, col:34> '<dependent type>' prefix '*' cannot overflow
| | | |       `-MemberExpr 0x5634745736e8 <col:34> 'T *' lvalue ->ptr 0x563474549d68
| | | |         `-CXXThisExpr 0x5634745736d8 <col:34> 'prevector::reverse_iterator *' implicit this
| | | |-CXXMethodDecl 0x56347454a368 <line:88:9, col:51> col:18 operator* 'const T &() const'
| | | | `-CompoundStmt 0x5634745737c0 <col:36, col:51>
| | | |   `-ReturnStmt 0x5634745737b0 <col:38, col:46>
| | | |     `-UnaryOperator 0x563474573798 <col:45, col:46> '<dependent type>' prefix '*' cannot overflow
| | | |       `-MemberExpr 0x563474573768 <col:46> 'T *const' lvalue ->ptr 0x563474549d68
| | | |         `-CXXThisExpr 0x563474573758 <col:46> 'const prevector::reverse_iterator *' implicit this
| | | |-CXXMethodDecl 0x56347454c6b8 <line:89:9, col:39> col:12 operator-> 'T *()'
| | | | `-CompoundStmt 0x563474573828 <col:25, col:39>
| | | |   `-ReturnStmt 0x563474573818 <col:27, col:34>
| | | |     `-MemberExpr 0x5634745737e8 <col:34> 'T *' lvalue ->ptr 0x563474549d68
| | | |       `-CXXThisExpr 0x5634745737d8 <col:34> 'prevector::reverse_iterator *' implicit this
| | | |-CXXMethodDecl 0x56347454c808 <line:90:9, col:51> col:18 operator-> 'const T *() const'
| | | | `-CompoundStmt 0x563474573890 <col:37, col:51>
| | | |   `-ReturnStmt 0x563474573880 <col:39, col:46>
| | | |     `-MemberExpr 0x563474573850 <col:46> 'T *const' lvalue ->ptr 0x563474549d68
| | | |       `-CXXThisExpr 0x563474573840 <col:46> 'const prevector::reverse_iterator *' implicit this
| | | |-CXXMethodDecl 0x56347454c928 <line:91:9, col:63> col:27 operator-- 'prevector::reverse_iterator &()'
| | | | `-CompoundStmt 0x563474573958 <col:40, col:63>
| | | |   |-UnaryOperator 0x563474573908 <col:42, col:45> '<dependent type>' postfix '++' cannot overflow
| | | |   | `-MemberExpr 0x5634745738b8 <col:42> 'T *' lvalue ->ptr 0x563474549d68
| | | |   |   `-CXXThisExpr 0x5634745738a8 <col:42> 'prevector::reverse_iterator *' implicit this
| | | |   `-ReturnStmt 0x563474573948 <col:49, col:57>
| | | |     `-UnaryOperator 0x563474573930 <col:56, col:57> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x563474573920 <col:57> 'prevector::reverse_iterator *' this
| | | |-CXXMethodDecl 0x56347454c9e8 <line:92:9, col:63> col:27 operator++ 'prevector::reverse_iterator &()'
| | | | `-CompoundStmt 0x563474573a28 <col:40, col:63>
| | | |   |-UnaryOperator 0x5634745739d8 <col:42, col:45> '<dependent type>' postfix '--' cannot overflow
| | | |   | `-MemberExpr 0x563474573988 <col:42> 'T *' lvalue ->ptr 0x563474549d68
| | | |   |   `-CXXThisExpr 0x563474573978 <col:42> 'prevector::reverse_iterator *' implicit this
| | | |   `-ReturnStmt 0x563474573a18 <col:49, col:57>
| | | |     `-UnaryOperator 0x563474573a00 <col:56, col:57> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x5634745739f0 <col:57> 'prevector::reverse_iterator *' this
| | | |-CXXMethodDecl 0x56347454cb68 <line:93:9, col:98> col:26 operator++ 'prevector::reverse_iterator (int)'
| | | | |-ParmVarDecl 0x56347454caa0 <col:37> col:40 'int'
| | | | `-CompoundStmt 0x5634745759b0 <col:42, col:98>
| | | |   |-DeclStmt 0x563474575900 <col:44, col:72>
| | | |   | `-VarDecl 0x563474573a58 <col:44, col:71> col:61 referenced copy 'prevector::reverse_iterator' nrvo callinit
| | | |   |   `-ParenListExpr 0x563474573b08 <col:65, col:71> 'NULL TYPE'
| | | |   |     `-UnaryOperator 0x563474573ad0 <col:66, col:67> '<dependent type>' prefix '*' cannot overflow
| | | |   |       `-CXXThisExpr 0x563474573ac0 <col:67> 'prevector::reverse_iterator *' this
| | | |   |-UnaryOperator 0x563474575960 <col:74, col:82> '<dependent type>' prefix '++' cannot overflow
| | | |   | `-ParenExpr 0x563474575940 <col:76, col:82> '<dependent type>'
| | | |   |   `-UnaryOperator 0x563474575928 <col:77, col:78> '<dependent type>' prefix '*' cannot overflow
| | | |   |     `-CXXThisExpr 0x563474575918 <col:78> 'prevector::reverse_iterator *' this
| | | |   `-ReturnStmt 0x563474575998 <col:85, col:92>
| | | |     `-DeclRefExpr 0x563474575978 <col:92> 'prevector::reverse_iterator' lvalue Var 0x563474573a58 'copy' 'prevector::reverse_iterator'
| | | |-CXXMethodDecl 0x56347454ccb8 <line:94:9, col:98> col:26 operator-- 'prevector::reverse_iterator (int)'
| | | | |-ParmVarDecl 0x56347454cc28 <col:37> col:40 'int'
| | | | `-CompoundStmt 0x563474575b68 <col:42, col:98>
| | | |   |-DeclStmt 0x563474575ab8 <col:44, col:72>
| | | |   | `-VarDecl 0x5634745759e8 <col:44, col:71> col:61 referenced copy 'prevector::reverse_iterator' nrvo callinit
| | | |   |   `-ParenListExpr 0x563474575a98 <col:65, col:71> 'NULL TYPE'
| | | |   |     `-UnaryOperator 0x563474575a60 <col:66, col:67> '<dependent type>' prefix '*' cannot overflow
| | | |   |       `-CXXThisExpr 0x563474575a50 <col:67> 'prevector::reverse_iterator *' this
| | | |   |-UnaryOperator 0x563474575b18 <col:74, col:82> '<dependent type>' prefix '--' cannot overflow
| | | |   | `-ParenExpr 0x563474575af8 <col:76, col:82> '<dependent type>'
| | | |   |   `-UnaryOperator 0x563474575ae0 <col:77, col:78> '<dependent type>' prefix '*' cannot overflow
| | | |   |     `-CXXThisExpr 0x563474575ad0 <col:78> 'prevector::reverse_iterator *' this
| | | |   `-ReturnStmt 0x563474575b50 <col:85, col:92>
| | | |     `-DeclRefExpr 0x563474575b30 <col:92> 'prevector::reverse_iterator' lvalue Var 0x5634745759e8 'copy' 'prevector::reverse_iterator'
| | | |-CXXMethodDecl 0x56347454ce38 <line:95:9, col:74> col:14 operator== 'bool (prevector::reverse_iterator) const'
| | | | |-ParmVarDecl 0x56347454cd70 <col:25, col:42> col:42 referenced x 'prevector::reverse_iterator'
| | | | `-CompoundStmt 0x563474575c68 <col:51, col:74>
| | | |   `-ReturnStmt 0x563474575c58 <col:53, col:69>
| | | |     `-BinaryOperator 0x563474575c38 <col:60, col:69> '<dependent type>' '=='
| | | |       |-MemberExpr 0x563474575ba0 <col:60> 'T *const' lvalue ->ptr 0x563474549d68
| | | |       | `-CXXThisExpr 0x563474575b90 <col:60> 'const prevector::reverse_iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474575bf0 <col:67, col:69> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x563474575bd0 <col:67> 'prevector::reverse_iterator' lvalue ParmVar 0x56347454cd70 'x' 'prevector::reverse_iterator'
| | | `-CXXMethodDecl 0x56347454cf80 <line:96:9, col:74> col:14 operator!= 'bool (prevector::reverse_iterator) const'
| | |   |-ParmVarDecl 0x56347454cef0 <col:25, col:42> col:42 referenced x 'prevector::reverse_iterator'
| | |   `-CompoundStmt 0x563474575d58 <col:51, col:74>
| | |     `-ReturnStmt 0x563474575d48 <col:53, col:69>
| | |       `-BinaryOperator 0x563474575d28 <col:60, col:69> '<dependent type>' '!='
| | |         |-MemberExpr 0x563474575c90 <col:60> 'T *const' lvalue ->ptr 0x563474549d68
| | |         | `-CXXThisExpr 0x563474575c80 <col:60> 'const prevector::reverse_iterator *' implicit this
| | |         `-CXXDependentScopeMemberExpr 0x563474575ce0 <col:67, col:69> '<dependent type>' lvalue .ptr
| | |           `-DeclRefExpr 0x563474575cc0 <col:67> 'prevector::reverse_iterator' lvalue ParmVar 0x56347454cef0 'x' 'prevector::reverse_iterator'
| | |-CXXRecordDecl 0x56347454d040 <line:99:5, line:127:5> line:99:11 referenced class const_iterator definition
| | | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | | |-DefaultConstructor
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-MaxFieldAlignmentAttr 0x56347454d0f0 <<invalid sloc>> Implicit 8
| | | |-CXXRecordDecl 0x56347454d198 <col:5, col:11> col:11 implicit referenced class const_iterator
| | | |-FieldDecl 0x56347454d238 <line:100:9, col:18> col:18 referenced ptr 'const T *'
| | | |-AccessSpecDecl 0x56347454d288 <line:101:5, col:11> col:5 public
| | | |-TypedefDecl 0x56347454d2c0 <line:102:9, col:22> col:22 referenced difference_type 'Diff'
| | | | `-TemplateTypeParmType 0x563474542c00 'Diff' dependent depth 0 index 3
| | | |   `-TemplateTypeParm 0x563474542b88 'Diff'
| | | |-TypedefDecl 0x56347454d328 <line:103:9, col:25> col:25 value_type 'const T'
| | | | `-QualType 0x563474542aa1 'const T' const
| | | |   `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |     `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x56347454d390 <line:104:9, col:26> col:26 pointer 'const T *'
| | | | `-PointerType 0x56347454c760 'const T *' dependent
| | | |   `-QualType 0x563474542aa1 'const T' const
| | | |     `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |       `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x56347454d3f8 <line:105:9, col:26> col:26 reference 'const T &'
| | | | `-LValueReferenceType 0x563474545a00 'const T &' dependent
| | | |   `-QualType 0x563474542aa1 'const T' const
| | | |     `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |       `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x56347454d478 <line:106:9, col:49> col:49 invalid iterator_category 'int'
| | | | `-BuiltinType 0x5634744cb780 'int'
| | | |-CXXConstructorDecl 0x56347454ea30 <line:107:9, col:52> col:9 const_iterator 'void (const T *)'
| | | | |-ParmVarDecl 0x56347454d4e0 <col:24, col:33> col:33 referenced ptr_ 'const T *'
| | | | |-CXXCtorInitializer Field 0x56347454d238 'ptr' 'const T *'
| | | | | `-ParenListExpr 0x563474575d90 <col:44, col:49> 'NULL TYPE'
| | | | |   `-DeclRefExpr 0x563474575d70 <col:45> 'const T *' lvalue ParmVar 0x56347454d4e0 'ptr_' 'const T *'
| | | | `-CompoundStmt 0x563474575de0 <col:51, col:52>
| | | |-CXXConstructorDecl 0x56347454ebb8 <line:108:9, col:50> col:9 const_iterator 'void (prevector::iterator)'
| | | | |-ParmVarDecl 0x56347454eaf0 <col:24, col:33> col:33 referenced x 'prevector::iterator'
| | | | |-CXXCtorInitializer Field 0x56347454d238 'ptr' 'const T *'
| | | | | `-ParenListExpr 0x563474575e60 <col:41, col:47> 'NULL TYPE'
| | | | |   `-UnaryOperator 0x563474575e48 <col:42, col:46> '<dependent type>' prefix '&' cannot overflow
| | | | |     `-ParenExpr 0x563474575e28 <col:43, col:46> '<dependent type>'
| | | | |       `-UnaryOperator 0x563474575e10 <col:44, col:45> '<dependent type>' prefix '*' cannot overflow
| | | | |         `-DeclRefExpr 0x563474575df0 <col:45> 'prevector::iterator' lvalue ParmVar 0x56347454eaf0 'x' 'prevector::iterator'
| | | | `-CompoundStmt 0x563474575eb0 <col:49, col:50>
| | | |-CXXMethodDecl 0x56347454ecb8 <line:109:9, col:51> col:18 operator* 'const T &() const'
| | | | `-CompoundStmt 0x563474575f28 <col:36, col:51>
| | | |   `-ReturnStmt 0x563474575f18 <col:38, col:46>
| | | |     `-UnaryOperator 0x563474575f00 <col:45, col:46> '<dependent type>' prefix '*' cannot overflow
| | | |       `-MemberExpr 0x563474575ed0 <col:46> 'const T *const' lvalue ->ptr 0x56347454d238
| | | |         `-CXXThisExpr 0x563474575ec0 <col:46> 'const prevector::const_iterator *' implicit this
| | | |-CXXMethodDecl 0x56347454ed78 <line:110:9, col:51> col:18 operator-> 'const T *() const'
| | | | `-CompoundStmt 0x563474575f90 <col:37, col:51>
| | | |   `-ReturnStmt 0x563474575f80 <col:39, col:46>
| | | |     `-MemberExpr 0x563474575f50 <col:46> 'const T *const' lvalue ->ptr 0x56347454d238
| | | |       `-CXXThisExpr 0x563474575f40 <col:46> 'const prevector::const_iterator *' implicit this
| | | |-CXXMethodDecl 0x56347454eeb8 <line:111:9, col:69> col:18 operator[] 'const T &(prevector::size_type) const'
| | | | |-ParmVarDecl 0x56347454ee28 <col:29, col:39> col:39 referenced pos 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474576038 <col:50, col:69>
| | | |   `-ReturnStmt 0x563474576028 <col:52, col:66>
| | | |     `-ArraySubscriptExpr 0x563474576008 <col:59, col:66> '<dependent type>' lvalue
| | | |       |-MemberExpr 0x563474575fb8 <col:59> 'const T *const' lvalue ->ptr 0x56347454d238
| | | |       | `-CXXThisExpr 0x563474575fa8 <col:59> 'const prevector::const_iterator *' implicit this
| | | |       `-DeclRefExpr 0x563474575fe8 <col:63> 'prevector::size_type':'Size' lvalue ParmVar 0x56347454ee28 'pos' 'prevector::size_type':'Size'
| | | |-CXXMethodDecl 0x56347454efd8 <line:112:9, col:61> col:25 operator++ 'prevector::const_iterator &()'
| | | | `-CompoundStmt 0x563474576100 <col:38, col:61>
| | | |   |-UnaryOperator 0x5634745760b0 <col:40, col:43> '<dependent type>' postfix '++' cannot overflow
| | | |   | `-MemberExpr 0x563474576060 <col:40> 'const T *' lvalue ->ptr 0x56347454d238
| | | |   |   `-CXXThisExpr 0x563474576050 <col:40> 'prevector::const_iterator *' implicit this
| | | |   `-ReturnStmt 0x5634745760f0 <col:47, col:55>
| | | |     `-UnaryOperator 0x5634745760d8 <col:54, col:55> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x5634745760c8 <col:55> 'prevector::const_iterator *' this
| | | |-CXXMethodDecl 0x56347454f098 <line:113:9, col:61> col:25 operator-- 'prevector::const_iterator &()'
| | | | `-CompoundStmt 0x5634745761d0 <col:38, col:61>
| | | |   |-UnaryOperator 0x563474576180 <col:40, col:43> '<dependent type>' postfix '--' cannot overflow
| | | |   | `-MemberExpr 0x563474576130 <col:40> 'const T *' lvalue ->ptr 0x56347454d238
| | | |   |   `-CXXThisExpr 0x563474576120 <col:40> 'prevector::const_iterator *' implicit this
| | | |   `-ReturnStmt 0x5634745761c0 <col:47, col:55>
| | | |     `-UnaryOperator 0x5634745761a8 <col:54, col:55> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x563474576198 <col:55> 'prevector::const_iterator *' this
| | | |-CXXMethodDecl 0x56347454f218 <line:114:9, col:94> col:24 operator++ 'prevector::const_iterator (int)'
| | | | |-ParmVarDecl 0x56347454f150 <col:35> col:38 'int'
| | | | `-CompoundStmt 0x563474576380 <col:40, col:94>
| | | |   |-DeclStmt 0x5634745762d0 <col:42, col:68>
| | | |   | `-VarDecl 0x563474576200 <col:42, col:67> col:57 referenced copy 'prevector::const_iterator' nrvo callinit
| | | |   |   `-ParenListExpr 0x5634745762b0 <col:61, col:67> 'NULL TYPE'
| | | |   |     `-UnaryOperator 0x563474576278 <col:62, col:63> '<dependent type>' prefix '*' cannot overflow
| | | |   |       `-CXXThisExpr 0x563474576268 <col:63> 'prevector::const_iterator *' this
| | | |   |-UnaryOperator 0x563474576330 <col:70, col:78> '<dependent type>' prefix '++' cannot overflow
| | | |   | `-ParenExpr 0x563474576310 <col:72, col:78> '<dependent type>'
| | | |   |   `-UnaryOperator 0x5634745762f8 <col:73, col:74> '<dependent type>' prefix '*' cannot overflow
| | | |   |     `-CXXThisExpr 0x5634745762e8 <col:74> 'prevector::const_iterator *' this
| | | |   `-ReturnStmt 0x563474576368 <col:81, col:88>
| | | |     `-DeclRefExpr 0x563474576348 <col:88> 'prevector::const_iterator' lvalue Var 0x563474576200 'copy' 'prevector::const_iterator'
| | | |-CXXMethodDecl 0x56347454f368 <line:115:9, col:94> col:24 operator-- 'prevector::const_iterator (int)'
| | | | |-ParmVarDecl 0x56347454f2d8 <col:35> col:38 'int'
| | | | `-CompoundStmt 0x563474576538 <col:40, col:94>
| | | |   |-DeclStmt 0x563474576488 <col:42, col:68>
| | | |   | `-VarDecl 0x5634745763b8 <col:42, col:67> col:57 referenced copy 'prevector::const_iterator' nrvo callinit
| | | |   |   `-ParenListExpr 0x563474576468 <col:61, col:67> 'NULL TYPE'
| | | |   |     `-UnaryOperator 0x563474576430 <col:62, col:63> '<dependent type>' prefix '*' cannot overflow
| | | |   |       `-CXXThisExpr 0x563474576420 <col:63> 'prevector::const_iterator *' this
| | | |   |-UnaryOperator 0x5634745764e8 <col:70, col:78> '<dependent type>' prefix '--' cannot overflow
| | | |   | `-ParenExpr 0x5634745764c8 <col:72, col:78> '<dependent type>'
| | | |   |   `-UnaryOperator 0x5634745764b0 <col:73, col:74> '<dependent type>' prefix '*' cannot overflow
| | | |   |     `-CXXThisExpr 0x5634745764a0 <col:74> 'prevector::const_iterator *' this
| | | |   `-ReturnStmt 0x563474576520 <col:81, col:88>
| | | |     `-DeclRefExpr 0x563474576500 <col:88> 'prevector::const_iterator' lvalue Var 0x5634745763b8 'copy' 'prevector::const_iterator'
| | | |-FriendDecl 0x56347454f688 <line:116:9, col:104> col:32
| | | | `-FunctionDecl 0x56347454f5c8 parent 0x5634744cb688 <col:9, col:104> col:32 operator- 'prevector::const_iterator::difference_type (prevector::const_iterator, prevector::const_iterator)'
| | | |   |-ParmVarDecl 0x56347454f440 <col:42, col:57> col:57 referenced a 'prevector::const_iterator'
| | | |   |-ParmVarDecl 0x56347454f4b8 <col:60, col:75> col:75 referenced b 'prevector::const_iterator'
| | | |   `-CompoundStmt 0x563474576690 <col:78, col:104>
| | | |     `-ReturnStmt 0x563474576680 <col:80, col:101>
| | | |       `-ParenExpr 0x563474576660 <col:87, col:101> '<dependent type>'
| | | |         `-BinaryOperator 0x563474576640 <col:88, col:100> '<dependent type>' '-'
| | | |           |-UnaryOperator 0x5634745765b8 <col:88, col:92> '<dependent type>' prefix '&' cannot overflow
| | | |           | `-ParenExpr 0x563474576598 <col:89, col:92> '<dependent type>'
| | | |           |   `-UnaryOperator 0x563474576580 <col:90, col:91> '<dependent type>' prefix '*' cannot overflow
| | | |           |     `-DeclRefExpr 0x563474576560 <col:91> 'prevector::const_iterator' lvalue ParmVar 0x56347454f440 'a' 'prevector::const_iterator'
| | | |           `-UnaryOperator 0x563474576628 <col:96, col:100> '<dependent type>' prefix '&' cannot overflow
| | | |             `-ParenExpr 0x563474576608 <col:97, col:100> '<dependent type>'
| | | |               `-UnaryOperator 0x5634745765f0 <col:98, col:99> '<dependent type>' prefix '*' cannot overflow
| | | |                 `-DeclRefExpr 0x5634745765d0 <col:99> 'prevector::const_iterator' lvalue ParmVar 0x56347454f4b8 'b' 'prevector::const_iterator'
| | | |-CXXMethodDecl 0x56347454f7c8 <line:117:9, col:81> col:24 operator+ 'prevector::const_iterator (prevector::size_type)'
| | | | |-ParmVarDecl 0x56347454f6d8 <col:34, col:44> col:44 referenced n 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474576770 <col:47, col:81>
| | | |   `-ReturnStmt 0x563474576760 <col:49, col:78>
| | | |     `-CXXUnresolvedConstructExpr 0x563474576738 <col:56, col:78> 'prevector::const_iterator' 'prevector::const_iterator'
| | | |       `-BinaryOperator 0x563474576718 <col:71, col:77> '<dependent type>' '+'
| | | |         |-MemberExpr 0x5634745766c8 <col:71> 'const T *' lvalue ->ptr 0x56347454d238
| | | |         | `-CXXThisExpr 0x5634745766b8 <col:71> 'prevector::const_iterator *' implicit this
| | | |         `-DeclRefExpr 0x5634745766f8 <col:77> 'prevector::size_type':'Size' lvalue ParmVar 0x56347454f6d8 'n' 'prevector::size_type':'Size'
| | | |-CXXMethodDecl 0x56347454f978 <line:118:9, col:75> col:25 operator+= 'prevector::const_iterator &(prevector::size_type)'
| | | | |-ParmVarDecl 0x56347454f880 <col:36, col:46> col:46 referenced n 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474576850 <col:49, col:75>
| | | |   |-CompoundAssignOperator 0x5634745767e8 <col:51, col:58> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | | |   | |-MemberExpr 0x563474576798 <col:51> 'const T *' lvalue ->ptr 0x56347454d238
| | | |   | | `-CXXThisExpr 0x563474576788 <col:51> 'prevector::const_iterator *' implicit this
| | | |   | `-DeclRefExpr 0x5634745767c8 <col:58> 'prevector::size_type':'Size' lvalue ParmVar 0x56347454f880 'n' 'prevector::size_type':'Size'
| | | |   `-ReturnStmt 0x563474576840 <col:61, col:69>
| | | |     `-UnaryOperator 0x563474576828 <col:68, col:69> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x563474576818 <col:69> 'prevector::const_iterator *' this
| | | |-CXXMethodDecl 0x563474551370 <line:119:9, col:81> col:24 operator- 'prevector::const_iterator (prevector::size_type)'
| | | | |-ParmVarDecl 0x5634745512e0 <col:34, col:44> col:44 referenced n 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474577e08 <col:47, col:81>
| | | |   `-ReturnStmt 0x563474577df8 <col:49, col:78>
| | | |     `-CXXUnresolvedConstructExpr 0x563474577dd0 <col:56, col:78> 'prevector::const_iterator' 'prevector::const_iterator'
| | | |       `-BinaryOperator 0x5634745768e0 <col:71, col:77> '<dependent type>' '-'
| | | |         |-MemberExpr 0x563474576890 <col:71> 'const T *' lvalue ->ptr 0x56347454d238
| | | |         | `-CXXThisExpr 0x563474576880 <col:71> 'prevector::const_iterator *' implicit this
| | | |         `-DeclRefExpr 0x5634745768c0 <col:77> 'prevector::size_type':'Size' lvalue ParmVar 0x5634745512e0 'n' 'prevector::size_type':'Size'
| | | |-CXXMethodDecl 0x5634745514b8 <line:120:9, col:75> col:25 operator-= 'prevector::const_iterator &(prevector::size_type)'
| | | | |-ParmVarDecl 0x563474551428 <col:36, col:46> col:46 referenced n 'prevector::size_type':'Size'
| | | | `-CompoundStmt 0x563474577ee8 <col:49, col:75>
| | | |   |-CompoundAssignOperator 0x563474577e80 <col:51, col:58> '<dependent type>' lvalue '-=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | | |   | |-MemberExpr 0x563474577e30 <col:51> 'const T *' lvalue ->ptr 0x56347454d238
| | | |   | | `-CXXThisExpr 0x563474577e20 <col:51> 'prevector::const_iterator *' implicit this
| | | |   | `-DeclRefExpr 0x563474577e60 <col:58> 'prevector::size_type':'Size' lvalue ParmVar 0x563474551428 'n' 'prevector::size_type':'Size'
| | | |   `-ReturnStmt 0x563474577ed8 <col:61, col:69>
| | | |     `-UnaryOperator 0x563474577ec0 <col:68, col:69> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x563474577eb0 <col:69> 'prevector::const_iterator *' this
| | | |-CXXMethodDecl 0x563474551638 <line:121:9, col:72> col:14 operator== 'bool (prevector::const_iterator) const'
| | | | |-ParmVarDecl 0x563474551570 <col:25, col:40> col:40 referenced x 'prevector::const_iterator'
| | | | `-CompoundStmt 0x563474577fe0 <col:49, col:72>
| | | |   `-ReturnStmt 0x563474577fd0 <col:51, col:67>
| | | |     `-BinaryOperator 0x563474577fb0 <col:58, col:67> '<dependent type>' '=='
| | | |       |-MemberExpr 0x563474577f18 <col:58> 'const T *const' lvalue ->ptr 0x56347454d238
| | | |       | `-CXXThisExpr 0x563474577f08 <col:58> 'const prevector::const_iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474577f68 <col:65, col:67> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x563474577f48 <col:65> 'prevector::const_iterator' lvalue ParmVar 0x563474551570 'x' 'prevector::const_iterator'
| | | |-CXXMethodDecl 0x563474551780 <line:122:9, col:72> col:14 operator!= 'bool (prevector::const_iterator) const'
| | | | |-ParmVarDecl 0x5634745516f0 <col:25, col:40> col:40 referenced x 'prevector::const_iterator'
| | | | `-CompoundStmt 0x5634745780d0 <col:49, col:72>
| | | |   `-ReturnStmt 0x5634745780c0 <col:51, col:67>
| | | |     `-BinaryOperator 0x5634745780a0 <col:58, col:67> '<dependent type>' '!='
| | | |       |-MemberExpr 0x563474578008 <col:58> 'const T *const' lvalue ->ptr 0x56347454d238
| | | |       | `-CXXThisExpr 0x563474577ff8 <col:58> 'const prevector::const_iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474578058 <col:65, col:67> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x563474578038 <col:65> 'prevector::const_iterator' lvalue ParmVar 0x5634745516f0 'x' 'prevector::const_iterator'
| | | |-CXXMethodDecl 0x5634745518c8 <line:123:9, col:72> col:14 operator>= 'bool (prevector::const_iterator) const'
| | | | |-ParmVarDecl 0x563474551838 <col:25, col:40> col:40 referenced x 'prevector::const_iterator'
| | | | `-CompoundStmt 0x5634745781c0 <col:49, col:72>
| | | |   `-ReturnStmt 0x5634745781b0 <col:51, col:67>
| | | |     `-BinaryOperator 0x563474578190 <col:58, col:67> '<dependent type>' '>='
| | | |       |-MemberExpr 0x5634745780f8 <col:58> 'const T *const' lvalue ->ptr 0x56347454d238
| | | |       | `-CXXThisExpr 0x5634745780e8 <col:58> 'const prevector::const_iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474578148 <col:65, col:67> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x563474578128 <col:65> 'prevector::const_iterator' lvalue ParmVar 0x563474551838 'x' 'prevector::const_iterator'
| | | |-CXXMethodDecl 0x563474551a10 <line:124:9, col:72> col:14 operator<= 'bool (prevector::const_iterator) const'
| | | | |-ParmVarDecl 0x563474551980 <col:25, col:40> col:40 referenced x 'prevector::const_iterator'
| | | | `-CompoundStmt 0x5634745782b0 <col:49, col:72>
| | | |   `-ReturnStmt 0x5634745782a0 <col:51, col:67>
| | | |     `-BinaryOperator 0x563474578280 <col:58, col:67> '<dependent type>' '<='
| | | |       |-MemberExpr 0x5634745781e8 <col:58> 'const T *const' lvalue ->ptr 0x56347454d238
| | | |       | `-CXXThisExpr 0x5634745781d8 <col:58> 'const prevector::const_iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474578238 <col:65, col:67> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x563474578218 <col:65> 'prevector::const_iterator' lvalue ParmVar 0x563474551980 'x' 'prevector::const_iterator'
| | | |-CXXMethodDecl 0x563474551b58 <line:125:9, col:70> col:14 operator> 'bool (prevector::const_iterator) const'
| | | | |-ParmVarDecl 0x563474551ac8 <col:24, col:39> col:39 referenced x 'prevector::const_iterator'
| | | | `-CompoundStmt 0x5634745783a0 <col:48, col:70>
| | | |   `-ReturnStmt 0x563474578390 <col:50, col:65>
| | | |     `-BinaryOperator 0x563474578370 <col:57, col:65> '<dependent type>' '>'
| | | |       |-MemberExpr 0x5634745782d8 <col:57> 'const T *const' lvalue ->ptr 0x56347454d238
| | | |       | `-CXXThisExpr 0x5634745782c8 <col:57> 'const prevector::const_iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474578328 <col:63, col:65> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x563474578308 <col:63> 'prevector::const_iterator' lvalue ParmVar 0x563474551ac8 'x' 'prevector::const_iterator'
| | | `-CXXMethodDecl 0x563474551ca0 <line:126:9, col:70> col:14 operator< 'bool (prevector::const_iterator) const'
| | |   |-ParmVarDecl 0x563474551c10 <col:24, col:39> col:39 referenced x 'prevector::const_iterator'
| | |   `-CompoundStmt 0x563474578490 <col:48, col:70>
| | |     `-ReturnStmt 0x563474578480 <col:50, col:65>
| | |       `-BinaryOperator 0x563474578460 <col:57, col:65> '<dependent type>' '<'
| | |         |-MemberExpr 0x5634745783c8 <col:57> 'const T *const' lvalue ->ptr 0x56347454d238
| | |         | `-CXXThisExpr 0x5634745783b8 <col:57> 'const prevector::const_iterator *' implicit this
| | |         `-CXXDependentScopeMemberExpr 0x563474578418 <col:63, col:65> '<dependent type>' lvalue .ptr
| | |           `-DeclRefExpr 0x5634745783f8 <col:63> 'prevector::const_iterator' lvalue ParmVar 0x563474551c10 'x' 'prevector::const_iterator'
| | |-CXXRecordDecl 0x563474551d60 <line:129:5, line:147:5> line:129:11 referenced class const_reverse_iterator definition
| | | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | | |-DefaultConstructor
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-MaxFieldAlignmentAttr 0x563474551e10 <<invalid sloc>> Implicit 8
| | | |-CXXRecordDecl 0x563474551eb8 <col:5, col:11> col:11 implicit referenced class const_reverse_iterator
| | | |-FieldDecl 0x563474551f58 <line:130:9, col:18> col:18 referenced ptr 'const T *'
| | | |-AccessSpecDecl 0x563474551fa8 <line:131:5, col:11> col:5 public
| | | |-TypedefDecl 0x563474551fe0 <line:132:9, col:22> col:22 difference_type 'Diff'
| | | | `-TemplateTypeParmType 0x563474542c00 'Diff' dependent depth 0 index 3
| | | |   `-TemplateTypeParm 0x563474542b88 'Diff'
| | | |-TypedefDecl 0x563474552048 <line:133:9, col:25> col:25 value_type 'const T'
| | | | `-QualType 0x563474542aa1 'const T' const
| | | |   `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |     `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x5634745520b0 <line:134:9, col:26> col:26 pointer 'const T *'
| | | | `-PointerType 0x56347454c760 'const T *' dependent
| | | |   `-QualType 0x563474542aa1 'const T' const
| | | |     `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |       `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x563474552118 <line:135:9, col:26> col:26 reference 'const T &'
| | | | `-LValueReferenceType 0x563474545a00 'const T &' dependent
| | | |   `-QualType 0x563474542aa1 'const T' const
| | | |     `-TemplateTypeParmType 0x563474542aa0 'T' dependent depth 0 index 1
| | | |       `-TemplateTypeParm 0x563474542a20 'T'
| | | |-TypedefDecl 0x563474552198 <line:136:9, col:49> col:49 invalid iterator_category 'int'
| | | | `-BuiltinType 0x5634744cb780 'int'
| | | |-CXXConstructorDecl 0x5634745536a0 <line:137:9, col:60> col:9 const_reverse_iterator 'void (const T *)'
| | | | |-ParmVarDecl 0x563474552200 <col:32, col:41> col:41 referenced ptr_ 'const T *'
| | | | |-CXXCtorInitializer Field 0x563474551f58 'ptr' 'const T *'
| | | | | `-ParenListExpr 0x5634745784c8 <col:52, col:57> 'NULL TYPE'
| | | | |   `-DeclRefExpr 0x5634745784a8 <col:53> 'const T *' lvalue ParmVar 0x563474552200 'ptr_' 'const T *'
| | | | `-CompoundStmt 0x563474578518 <col:59, col:60>
| | | |-CXXConstructorDecl 0x563474553828 <line:138:9, col:66> col:9 const_reverse_iterator 'void (prevector::reverse_iterator)'
| | | | |-ParmVarDecl 0x563474553760 <col:32, col:49> col:49 referenced x 'prevector::reverse_iterator'
| | | | |-CXXCtorInitializer Field 0x563474551f58 'ptr' 'const T *'
| | | | | `-ParenListExpr 0x563474578598 <col:57, col:63> 'NULL TYPE'
| | | | |   `-UnaryOperator 0x563474578580 <col:58, col:62> '<dependent type>' prefix '&' cannot overflow
| | | | |     `-ParenExpr 0x563474578560 <col:59, col:62> '<dependent type>'
| | | | |       `-UnaryOperator 0x563474578548 <col:60, col:61> '<dependent type>' prefix '*' cannot overflow
| | | | |         `-DeclRefExpr 0x563474578528 <col:61> 'prevector::reverse_iterator' lvalue ParmVar 0x563474553760 'x' 'prevector::reverse_iterator'
| | | | `-CompoundStmt 0x5634745785e8 <col:65, col:66>
| | | |-CXXMethodDecl 0x563474553928 <line:139:9, col:51> col:18 operator* 'const T &() const'
| | | | `-CompoundStmt 0x563474578660 <col:36, col:51>
| | | |   `-ReturnStmt 0x563474578650 <col:38, col:46>
| | | |     `-UnaryOperator 0x563474578638 <col:45, col:46> '<dependent type>' prefix '*' cannot overflow
| | | |       `-MemberExpr 0x563474578608 <col:46> 'const T *const' lvalue ->ptr 0x563474551f58
| | | |         `-CXXThisExpr 0x5634745785f8 <col:46> 'const prevector::const_reverse_iterator *' implicit this
| | | |-CXXMethodDecl 0x5634745539e8 <line:140:9, col:51> col:18 operator-> 'const T *() const'
| | | | `-CompoundStmt 0x5634745786c8 <col:37, col:51>
| | | |   `-ReturnStmt 0x5634745786b8 <col:39, col:46>
| | | |     `-MemberExpr 0x563474578688 <col:46> 'const T *const' lvalue ->ptr 0x563474551f58
| | | |       `-CXXThisExpr 0x563474578678 <col:46> 'const prevector::const_reverse_iterator *' implicit this
| | | |-CXXMethodDecl 0x563474553b08 <line:141:9, col:69> col:33 operator-- 'prevector::const_reverse_iterator &()'
| | | | `-CompoundStmt 0x563474578790 <col:46, col:69>
| | | |   |-UnaryOperator 0x563474578740 <col:48, col:51> '<dependent type>' postfix '++' cannot overflow
| | | |   | `-MemberExpr 0x5634745786f0 <col:48> 'const T *' lvalue ->ptr 0x563474551f58
| | | |   |   `-CXXThisExpr 0x5634745786e0 <col:48> 'prevector::const_reverse_iterator *' implicit this
| | | |   `-ReturnStmt 0x563474578780 <col:55, col:63>
| | | |     `-UnaryOperator 0x563474578768 <col:62, col:63> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x563474578758 <col:63> 'prevector::const_reverse_iterator *' this
| | | |-CXXMethodDecl 0x563474553bc8 <line:142:9, col:69> col:33 operator++ 'prevector::const_reverse_iterator &()'
| | | | `-CompoundStmt 0x563474578860 <col:46, col:69>
| | | |   |-UnaryOperator 0x563474578810 <col:48, col:51> '<dependent type>' postfix '--' cannot overflow
| | | |   | `-MemberExpr 0x5634745787c0 <col:48> 'const T *' lvalue ->ptr 0x563474551f58
| | | |   |   `-CXXThisExpr 0x5634745787b0 <col:48> 'prevector::const_reverse_iterator *' implicit this
| | | |   `-ReturnStmt 0x563474578850 <col:55, col:63>
| | | |     `-UnaryOperator 0x563474578838 <col:62, col:63> '<dependent type>' prefix '*' cannot overflow
| | | |       `-CXXThisExpr 0x563474578828 <col:63> 'prevector::const_reverse_iterator *' this
| | | |-CXXMethodDecl 0x563474553d48 <line:143:9, col:110> col:32 operator++ 'prevector::const_reverse_iterator (int)'
| | | | |-ParmVarDecl 0x563474553c80 <col:43> col:46 'int'
| | | | `-CompoundStmt 0x563474578a10 <col:48, col:110>
| | | |   |-DeclStmt 0x563474578960 <col:50, col:84>
| | | |   | `-VarDecl 0x563474578890 <col:50, col:83> col:73 referenced copy 'prevector::const_reverse_iterator' nrvo callinit
| | | |   |   `-ParenListExpr 0x563474578940 <col:77, col:83> 'NULL TYPE'
| | | |   |     `-UnaryOperator 0x563474578908 <col:78, col:79> '<dependent type>' prefix '*' cannot overflow
| | | |   |       `-CXXThisExpr 0x5634745788f8 <col:79> 'prevector::const_reverse_iterator *' this
| | | |   |-UnaryOperator 0x5634745789c0 <col:86, col:94> '<dependent type>' prefix '++' cannot overflow
| | | |   | `-ParenExpr 0x5634745789a0 <col:88, col:94> '<dependent type>'
| | | |   |   `-UnaryOperator 0x563474578988 <col:89, col:90> '<dependent type>' prefix '*' cannot overflow
| | | |   |     `-CXXThisExpr 0x563474578978 <col:90> 'prevector::const_reverse_iterator *' this
| | | |   `-ReturnStmt 0x5634745789f8 <col:97, col:104>
| | | |     `-DeclRefExpr 0x5634745789d8 <col:104> 'prevector::const_reverse_iterator' lvalue Var 0x563474578890 'copy' 'prevector::const_reverse_iterator'
| | | |-CXXMethodDecl 0x563474553e98 <line:144:9, col:110> col:32 operator-- 'prevector::const_reverse_iterator (int)'
| | | | |-ParmVarDecl 0x563474553e08 <col:43> col:46 'int'
| | | | `-CompoundStmt 0x563474578bc8 <col:48, col:110>
| | | |   |-DeclStmt 0x563474578b18 <col:50, col:84>
| | | |   | `-VarDecl 0x563474578a48 <col:50, col:83> col:73 referenced copy 'prevector::const_reverse_iterator' nrvo callinit
| | | |   |   `-ParenListExpr 0x563474578af8 <col:77, col:83> 'NULL TYPE'
| | | |   |     `-UnaryOperator 0x563474578ac0 <col:78, col:79> '<dependent type>' prefix '*' cannot overflow
| | | |   |       `-CXXThisExpr 0x563474578ab0 <col:79> 'prevector::const_reverse_iterator *' this
| | | |   |-UnaryOperator 0x563474578b78 <col:86, col:94> '<dependent type>' prefix '--' cannot overflow
| | | |   | `-ParenExpr 0x563474578b58 <col:88, col:94> '<dependent type>'
| | | |   |   `-UnaryOperator 0x563474578b40 <col:89, col:90> '<dependent type>' prefix '*' cannot overflow
| | | |   |     `-CXXThisExpr 0x563474578b30 <col:90> 'prevector::const_reverse_iterator *' this
| | | |   `-ReturnStmt 0x563474578bb0 <col:97, col:104>
| | | |     `-DeclRefExpr 0x563474578b90 <col:104> 'prevector::const_reverse_iterator' lvalue Var 0x563474578a48 'copy' 'prevector::const_reverse_iterator'
| | | |-CXXMethodDecl 0x563474554018 <line:145:9, col:80> col:14 operator== 'bool (prevector::const_reverse_iterator) const'
| | | | |-ParmVarDecl 0x563474553f50 <col:25, col:48> col:48 referenced x 'prevector::const_reverse_iterator'
| | | | `-CompoundStmt 0x563474578cc8 <col:57, col:80>
| | | |   `-ReturnStmt 0x563474578cb8 <col:59, col:75>
| | | |     `-BinaryOperator 0x563474578c98 <col:66, col:75> '<dependent type>' '=='
| | | |       |-MemberExpr 0x563474578c00 <col:66> 'const T *const' lvalue ->ptr 0x563474551f58
| | | |       | `-CXXThisExpr 0x563474578bf0 <col:66> 'const prevector::const_reverse_iterator *' implicit this
| | | |       `-CXXDependentScopeMemberExpr 0x563474578c50 <col:73, col:75> '<dependent type>' lvalue .ptr
| | | |         `-DeclRefExpr 0x563474578c30 <col:73> 'prevector::const_reverse_iterator' lvalue ParmVar 0x563474553f50 'x' 'prevector::const_reverse_iterator'
| | | `-CXXMethodDecl 0x563474554160 <line:146:9, col:80> col:14 operator!= 'bool (prevector::const_reverse_iterator) const'
| | |   |-ParmVarDecl 0x5634745540d0 <col:25, col:48> col:48 referenced x 'prevector::const_reverse_iterator'
| | |   `-CompoundStmt 0x563474578db8 <col:57, col:80>
| | |     `-ReturnStmt 0x563474578da8 <col:59, col:75>
| | |       `-BinaryOperator 0x563474578d88 <col:66, col:75> '<dependent type>' '!='
| | |         |-MemberExpr 0x563474578cf0 <col:66> 'const T *const' lvalue ->ptr 0x563474551f58
| | |         | `-CXXThisExpr 0x563474578ce0 <col:66> 'const prevector::const_reverse_iterator *' implicit this
| | |         `-CXXDependentScopeMemberExpr 0x563474578d40 <col:73, col:75> '<dependent type>' lvalue .ptr
| | |           `-DeclRefExpr 0x563474578d20 <col:73> 'prevector::const_reverse_iterator' lvalue ParmVar 0x5634745540d0 'x' 'prevector::const_reverse_iterator'
| | |-AccessSpecDecl 0x563474554220 <line:149:1, col:8> col:1 private
| | |-FieldDecl 0x563474554258 <line:150:5, col:23> col:15 referenced _size 'prevector::size_type':'Size'
| | | `-IntegerLiteral 0x56347456e430 <col:23> 'int' 0
| | |-CXXRecordDecl 0x5634745542a8 <line:151:5, line:157:5> line:151:11 union direct_or_indirect definition
| | | |-DefinitionData aggregate standard_layout trivially_copyable trivial has_variant_members
| | | | |-DefaultConstructor exists trivial needs_implicit
| | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | `-Destructor simple irrelevant trivial needs_implicit
| | | |-MaxFieldAlignmentAttr 0x563474554360 <<invalid sloc>> Implicit 8
| | | |-CXXRecordDecl 0x563474554408 <col:5, col:11> col:11 implicit union direct_or_indirect
| | | |-FieldDecl 0x563474554580 <line:152:9, col:34> col:14 direct 'char [sizeof(T) * N]'
| | | |-CXXRecordDecl 0x5634745545d0 <line:153:9, line:156:9> line:153:9 struct definition
| | | | |-DefinitionData aggregate standard_layout trivially_copyable trivial
| | | | | |-DefaultConstructor exists trivial needs_implicit
| | | | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveConstructor exists simple trivial needs_implicit
| | | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | | | |-MoveAssignment exists simple trivial needs_implicit
| | | | | `-Destructor simple irrelevant trivial needs_implicit
| | | | |-MaxFieldAlignmentAttr 0x563474554680 <<invalid sloc>> Implicit 8
| | | | |-FieldDecl 0x563474555b08 <line:154:13, col:23> col:23 capacity 'prevector::size_type':'Size'
| | | | `-FieldDecl 0x563474555b70 <line:155:13, col:19> col:19 indirect 'char *'
| | | |-FieldDecl 0x563474555c38 <line:153:9> col:9 implicit 'prevector::direct_or_indirect::(anonymous struct at bitcoin/src/prevector.h:153:9)'
| | | |-IndirectFieldDecl 0x563474555c98 <line:154:23> col:23 implicit capacity 'prevector::size_type':'Size'
| | | | |-Field 0x563474555c38 '' 'prevector::direct_or_indirect::(anonymous struct at bitcoin/src/prevector.h:153:9)'
| | | | `-Field 0x563474555b08 'capacity' 'prevector::size_type':'Size'
| | | `-IndirectFieldDecl 0x563474555cf0 <line:155:19> col:19 implicit indirect 'char *'
| | |   |-Field 0x563474555c38 '' 'prevector::direct_or_indirect::(anonymous struct at bitcoin/src/prevector.h:153:9)'
| | |   `-Field 0x563474555b70 'indirect' 'char *'
| | |-FieldDecl 0x563474555da8 <line:151:5, line:157:17> col:7 referenced _union 'union direct_or_indirect':'prevector::direct_or_indirect'
| | | `-InitListExpr 0x56347456e450 <col:16, col:17> 'void'
| | |-CXXMethodDecl 0x563474555f68 <line:159:5, col:92> col:8 direct_ptr 'T *(prevector::difference_type)'
| | | |-ParmVarDecl 0x563474555e40 <col:19, col:35> col:35 referenced pos 'prevector::difference_type':'Diff'
| | | `-CompoundStmt 0x56347457b5d8 <col:40, col:92>
| | |   `-ReturnStmt 0x56347457b5c8 <col:42, col:87>
| | |     `-BinaryOperator 0x56347457b5a8 <col:49, col:87> '<dependent type>' '+'
| | |       |-CXXReinterpretCastExpr 0x56347457b558 <col:49, col:83> 'T *' reinterpret_cast<T *> <Dependent>
| | |       | `-CXXDependentScopeMemberExpr 0x56347457b500 <col:70, col:77> '<dependent type>' lvalue .direct
| | |       |   `-MemberExpr 0x56347457b4d0 <col:70> 'union direct_or_indirect':'prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |       |     `-CXXThisExpr 0x56347457b4c0 <col:70> 'prevector<N, T, Size, Diff> *' implicit this
| | |       `-DeclRefExpr 0x56347457b588 <col:87> 'prevector::difference_type':'Diff' lvalue ParmVar 0x563474555e40 'pos' 'prevector::difference_type':'Diff'
| | |-CXXMethodDecl 0x563474556148 <line:160:5, col:110> col:14 direct_ptr 'const T *(prevector::difference_type) const'
| | | |-ParmVarDecl 0x563474556020 <col:25, col:41> col:41 referenced pos 'prevector::difference_type':'Diff'
| | | `-CompoundStmt 0x56347457b708 <col:52, col:110>
| | |   `-ReturnStmt 0x56347457b6f8 <col:54, col:105>
| | |     `-BinaryOperator 0x56347457b6d8 <col:61, col:105> '<dependent type>' '+'
| | |       |-CXXReinterpretCastExpr 0x56347457b688 <col:61, col:101> 'const T *' reinterpret_cast<const T *> <Dependent>
| | |       | `-CXXDependentScopeMemberExpr 0x56347457b630 <col:88, col:95> '<dependent type>' lvalue .direct
| | |       |   `-MemberExpr 0x56347457b600 <col:88> 'const union direct_or_indirect':'const prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |       |     `-CXXThisExpr 0x56347457b5f0 <col:88> 'const prevector<N, T, Size, Diff> *' implicit this
| | |       `-DeclRefExpr 0x56347457b6b8 <col:105> 'prevector::difference_type':'Diff' lvalue ParmVar 0x563474556020 'pos' 'prevector::difference_type':'Diff'
| | |-CXXMethodDecl 0x563474556290 <line:161:5, col:96> col:8 indirect_ptr 'T *(prevector::difference_type)'
| | | |-ParmVarDecl 0x563474556200 <col:21, col:37> col:37 referenced pos 'prevector::difference_type':'Diff'
| | | `-CompoundStmt 0x56347457b838 <col:42, col:96>
| | |   `-ReturnStmt 0x56347457b828 <col:44, col:91>
| | |     `-BinaryOperator 0x56347457b808 <col:51, col:91> '<dependent type>' '+'
| | |       |-CXXReinterpretCastExpr 0x56347457b7b8 <col:51, col:87> 'T *' reinterpret_cast<T *> <Dependent>
| | |       | `-CXXDependentScopeMemberExpr 0x56347457b760 <col:72, col:79> '<dependent type>' lvalue .indirect
| | |       |   `-MemberExpr 0x56347457b730 <col:72> 'union direct_or_indirect':'prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |       |     `-CXXThisExpr 0x56347457b720 <col:72> 'prevector<N, T, Size, Diff> *' implicit this
| | |       `-DeclRefExpr 0x56347457b7e8 <col:91> 'prevector::difference_type':'Diff' lvalue ParmVar 0x563474556200 'pos' 'prevector::difference_type':'Diff'
| | |-CXXMethodDecl 0x5634745563d8 <line:162:5, col:114> col:14 indirect_ptr 'const T *(prevector::difference_type) const'
| | | |-ParmVarDecl 0x563474556348 <col:27, col:43> col:43 referenced pos 'prevector::difference_type':'Diff'
| | | `-CompoundStmt 0x56347457b968 <col:54, col:114>
| | |   `-ReturnStmt 0x56347457b958 <col:56, col:109>
| | |     `-BinaryOperator 0x56347457b938 <col:63, col:109> '<dependent type>' '+'
| | |       |-CXXReinterpretCastExpr 0x56347457b8e8 <col:63, col:105> 'const T *' reinterpret_cast<const T *> <Dependent>
| | |       | `-CXXDependentScopeMemberExpr 0x56347457b890 <col:90, col:97> '<dependent type>' lvalue .indirect
| | |       |   `-MemberExpr 0x56347457b860 <col:90> 'const union direct_or_indirect':'const prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |       |     `-CXXThisExpr 0x56347457b850 <col:90> 'const prevector<N, T, Size, Diff> *' implicit this
| | |       `-DeclRefExpr 0x56347457b918 <col:109> 'prevector::difference_type':'Diff' lvalue ParmVar 0x563474556348 'pos' 'prevector::difference_type':'Diff'
| | |-CXXMethodDecl 0x5634745564c8 <line:163:5, col:49> col:10 referenced is_direct 'bool () const'
| | | `-CompoundStmt 0x56347457ba10 <col:28, col:49>
| | |   `-ReturnStmt 0x56347457ba00 <col:30, col:46>
| | |     `-BinaryOperator 0x56347457b9e0 <col:37, col:46> '<dependent type>' '<='
| | |       |-MemberExpr 0x56347457b990 <col:37> 'const prevector::size_type':'const Size' lvalue ->_size 0x563474554258
| | |       | `-CXXThisExpr 0x56347457b980 <col:37> 'const prevector<N, T, Size, Diff> *' implicit this
| | |       `-DeclRefExpr 0x56347457b9c0 <col:46> 'unsigned int' NonTypeTemplateParm 0x5634745429c0 'N' 'unsigned int'
| | |-CXXMethodDecl 0x563474556668 <line:165:5, line:194:5> line:165:10 referenced change_capacity 'void (prevector::size_type)'
| | | |-ParmVarDecl 0x563474556578 <col:26, col:36> col:36 referenced new_capacity 'prevector::size_type':'Size'
| | | `-CompoundStmt 0x56347457cf48 <col:50, line:194:5>
| | |   `-IfStmt 0x56347457cf20 <line:166:9, line:193:9> has_else
| | |     |-BinaryOperator 0x56347457ba68 <line:166:13, col:29> '<dependent type>' '<='
| | |     | |-DeclRefExpr 0x56347457ba28 <col:13> 'prevector::size_type':'Size' lvalue ParmVar 0x563474556578 'new_capacity' 'prevector::size_type':'Size'
| | |     | `-DeclRefExpr 0x56347457ba48 <col:29> 'unsigned int' NonTypeTemplateParm 0x5634745429c0 'N' 'unsigned int'
| | |     |-CompoundStmt 0x56347457c170 <col:32, line:175:9>
| | |     | `-IfStmt 0x56347457c158 <line:167:13, line:174:13>
| | |     |   |-UnaryOperator 0x56347457bae8 <line:167:17, col:28> '<dependent type>' prefix '!' cannot overflow
| | |     |   | `-CallExpr 0x56347457bac8 <col:18, col:28> '<dependent type>'
| | |     |   |   `-MemberExpr 0x56347457ba98 <col:18> '<bound member function type>' ->is_direct 0x5634745564c8
| | |     |   |     `-CXXThisExpr 0x56347457ba88 <col:18> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |   `-CompoundStmt 0x56347457c118 <col:31, line:174:13>
| | |     |     |-DeclStmt 0x56347457bc30 <line:168:17, col:46>
| | |     |     | `-VarDecl 0x56347457bb10 <col:17, col:45> col:20 referenced indirect 'T *' cinit
| | |     |     |   `-CallExpr 0x56347457bc08 <col:31, col:45> '<dependent type>'
| | |     |     |     |-UnresolvedMemberExpr 0x56347457bb88 <col:31> '<bound member function type>' lvalue
| | |     |     |     `-IntegerLiteral 0x56347457bbe8 <col:44> 'int' 0
| | |     |     |-DeclStmt 0x56347457bce0 <line:169:17, col:34>
| | |     |     | `-VarDecl 0x56347457bc58 <col:17, col:26> col:20 referenced src 'T *' cinit
| | |     |     |   `-DeclRefExpr 0x56347457bcc0 <col:26> 'T *' lvalue Var 0x56347457bb10 'indirect' 'T *'
| | |     |     |-DeclStmt 0x56347457be28 <line:170:17, col:39>
| | |     |     | `-VarDecl 0x56347457bd08 <col:17, col:38> col:20 referenced dst 'T *' cinit
| | |     |     |   `-CallExpr 0x56347457be00 <col:26, col:38> '<dependent type>'
| | |     |     |     |-UnresolvedMemberExpr 0x56347457bd80 <col:26> '<bound member function type>' lvalue
| | |     |     |     `-IntegerLiteral 0x56347457bde0 <col:37> 'int' 0
| | |     |     |-CallExpr 0x56347457bf70 <line:171:17, col:52> '<dependent type>'
| | |     |     | |-UnresolvedLookupExpr 0x56347457be40 <col:17> '<overloaded function type>' lvalue (ADL) = 'memcpy' empty
| | |     |     | |-DeclRefExpr 0x56347457be80 <col:24> 'T *' lvalue Var 0x56347457bd08 'dst' 'T *'
| | |     |     | |-DeclRefExpr 0x56347457bea0 <col:29> 'T *' lvalue Var 0x56347457bc58 'src' 'T *'
| | |     |     | `-BinaryOperator 0x56347457bf50 <col:34, col:51> '<dependent type>' '*'
| | |     |     |   |-CallExpr 0x56347457bf00 <col:34, col:39> '<dependent type>'
| | |     |     |   | `-MemberExpr 0x56347457bed0 <col:34> '<bound member function type>' ->size 0x5634745605b8
| | |     |     |   |   `-CXXThisExpr 0x56347457bec0 <col:34> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |     |   `-UnaryExprOrTypeTraitExpr 0x56347457bf30 <col:43, col:51> 'unsigned long' sizeof 'T'
| | |     |     |-CallExpr 0x56347457c008 <line:172:17, col:30> '<dependent type>'
| | |     |     | |-UnresolvedLookupExpr 0x56347457bfa8 <col:17> '<overloaded function type>' lvalue (ADL) = 'free' empty
| | |     |     | `-DeclRefExpr 0x56347457bfe8 <col:22> 'T *' lvalue Var 0x56347457bb10 'indirect' 'T *'
| | |     |     `-CompoundAssignOperator 0x56347457c0e8 <line:173:17, col:30> '<dependent type>' lvalue '-=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |     |       |-MemberExpr 0x56347457c040 <col:17> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |     |       | `-CXXThisExpr 0x56347457c030 <col:17> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |       `-BinaryOperator 0x56347457c0c8 <col:26, col:30> 'unsigned int' '+'
| | |     |         |-DeclRefExpr 0x56347457c070 <col:26> 'unsigned int' NonTypeTemplateParm 0x5634745429c0 'N' 'unsigned int'
| | |     |         `-ImplicitCastExpr 0x56347457c0b0 <col:30> 'unsigned int' <IntegralCast>
| | |     |           `-IntegerLiteral 0x56347457c090 <col:30> 'int' 1
| | |     `-CompoundStmt 0x56347457cf08 <line:175:16, line:193:9>
| | |       `-IfStmt 0x56347457cee0 <line:176:13, line:192:13> has_else
| | |         |-UnaryOperator 0x56347457c1e8 <line:176:17, col:28> '<dependent type>' prefix '!' cannot overflow
| | |         | `-CallExpr 0x56347457c1c8 <col:18, col:28> '<dependent type>'
| | |         |   `-MemberExpr 0x56347457c198 <col:18> '<bound member function type>' ->is_direct 0x5634745564c8
| | |         |     `-CXXThisExpr 0x56347457c188 <col:18> 'prevector<N, T, Size, Diff> *' implicit this
| | |         |-CompoundStmt 0x56347457c708 <col:31, line:183:13>
| | |         | |-CallExpr 0x56347457c438 <line:181:17, col:39> '<dependent type>'
| | |         | | |-UnresolvedLookupExpr 0x56347457c370 <col:17> '<overloaded function type>' lvalue (ADL) = 'assert' empty
| | |         | | `-CXXDependentScopeMemberExpr 0x56347457c3f0 <col:24, col:31> '<dependent type>' lvalue .indirect
| | |         | |   `-MemberExpr 0x56347457c3c0 <col:24> 'union direct_or_indirect':'prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |         | |     `-CXXThisExpr 0x56347457c3b0 <col:24> 'prevector<N, T, Size, Diff> *' implicit this
| | |         | `-BinaryOperator 0x56347457c6e8 <line:182:17, col:35> '<dependent type>' '='
| | |         |   |-CXXDependentScopeMemberExpr 0x56347457c680 <col:17, col:24> '<dependent type>' lvalue .capacity
| | |         |   | `-MemberExpr 0x56347457c470 <col:17> 'union direct_or_indirect':'prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |         |   |   `-CXXThisExpr 0x56347457c460 <col:17> 'prevector<N, T, Size, Diff> *' implicit this
| | |         |   `-DeclRefExpr 0x56347457c6c8 <col:35> 'prevector::size_type':'Size' lvalue ParmVar 0x563474556578 'new_capacity' 'prevector::size_type':'Size'
| | |         `-CompoundStmt 0x56347457ce98 <line:183:20, line:192:13>
| | |           |-DeclStmt 0x56347457c808 <line:184:17, col:100>
| | |           | `-VarDecl 0x56347457c740 <col:17, col:23> col:23 referenced new_indirect 'char *'
| | |           |-DeclStmt 0x56347457c9b0 <line:186:17, col:39>
| | |           | `-VarDecl 0x56347457c890 <col:17, col:38> col:20 referenced src 'T *' cinit
| | |           |   `-CallExpr 0x56347457c988 <col:26, col:38> '<dependent type>'
| | |           |     |-UnresolvedMemberExpr 0x56347457c908 <col:26> '<bound member function type>' lvalue
| | |           |     `-IntegerLiteral 0x56347457c968 <col:37> 'int' 0
| | |           |-DeclStmt 0x56347457caa0 <line:187:17, col:60>
| | |           | `-VarDecl 0x56347457c9d8 <col:17, col:59> col:20 referenced dst 'T *' cinit
| | |           |   `-CXXReinterpretCastExpr 0x56347457ca70 <col:26, col:59> 'T *' reinterpret_cast<T *> <Dependent>
| | |           |     `-DeclRefExpr 0x56347457ca40 <col:47> 'char *' lvalue Var 0x56347457c740 'new_indirect' 'char *'
| | |           |-CallExpr 0x56347457cbe8 <line:188:17, col:52> '<dependent type>'
| | |           | |-UnresolvedLookupExpr 0x56347457cab8 <col:17> '<overloaded function type>' lvalue (ADL) = 'memcpy' empty
| | |           | |-DeclRefExpr 0x56347457caf8 <col:24> 'T *' lvalue Var 0x56347457c9d8 'dst' 'T *'
| | |           | |-DeclRefExpr 0x56347457cb18 <col:29> 'T *' lvalue Var 0x56347457c890 'src' 'T *'
| | |           | `-BinaryOperator 0x56347457cbc8 <col:34, col:51> '<dependent type>' '*'
| | |           |   |-CallExpr 0x56347457cb78 <col:34, col:39> '<dependent type>'
| | |           |   | `-MemberExpr 0x56347457cb48 <col:34> '<bound member function type>' ->size 0x5634745605b8
| | |           |   |   `-CXXThisExpr 0x56347457cb38 <col:34> 'prevector<N, T, Size, Diff> *' implicit this
| | |           |   `-UnaryExprOrTypeTraitExpr 0x56347457cba8 <col:43, col:51> 'unsigned long' sizeof 'T'
| | |           |-BinaryOperator 0x56347457ccc8 <line:189:17, col:35> '<dependent type>' '='
| | |           | |-CXXDependentScopeMemberExpr 0x56347457cc60 <col:17, col:24> '<dependent type>' lvalue .indirect
| | |           | | `-MemberExpr 0x56347457cc30 <col:17> 'union direct_or_indirect':'prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |           | |   `-CXXThisExpr 0x56347457cc20 <col:17> 'prevector<N, T, Size, Diff> *' implicit this
| | |           | `-DeclRefExpr 0x56347457cca8 <col:35> 'char *' lvalue Var 0x56347457c740 'new_indirect' 'char *'
| | |           |-BinaryOperator 0x56347457cd90 <line:190:17, col:35> '<dependent type>' '='
| | |           | |-CXXDependentScopeMemberExpr 0x56347457cd28 <col:17, col:24> '<dependent type>' lvalue .capacity
| | |           | | `-MemberExpr 0x56347457ccf8 <col:17> 'union direct_or_indirect':'prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |           | |   `-CXXThisExpr 0x56347457cce8 <col:17> 'prevector<N, T, Size, Diff> *' implicit this
| | |           | `-DeclRefExpr 0x56347457cd70 <col:35> 'prevector::size_type':'Size' lvalue ParmVar 0x563474556578 'new_capacity' 'prevector::size_type':'Size'
| | |           `-CompoundAssignOperator 0x56347457ce68 <line:191:17, col:30> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |             |-MemberExpr 0x56347457cdc0 <col:17> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |             | `-CXXThisExpr 0x56347457cdb0 <col:17> 'prevector<N, T, Size, Diff> *' implicit this
| | |             `-BinaryOperator 0x56347457ce48 <col:26, col:30> 'unsigned int' '+'
| | |               |-DeclRefExpr 0x56347457cdf0 <col:26> 'unsigned int' NonTypeTemplateParm 0x5634745429c0 'N' 'unsigned int'
| | |               `-ImplicitCastExpr 0x56347457ce30 <col:30> 'unsigned int' <IntegralCast>
| | |                 `-IntegerLiteral 0x56347457ce10 <col:30> 'int' 1
| | |-CXXMethodDecl 0x5634745567b0 <line:196:5, col:98> col:8 item_ptr 'T *(prevector::difference_type)'
| | | |-ParmVarDecl 0x563474556720 <col:17, col:33> col:33 referenced pos 'prevector::difference_type':'Diff'
| | | `-CompoundStmt 0x56347457d170 <col:38, col:98>
| | |   `-ReturnStmt 0x56347457d160 <col:40, col:95>
| | |     `-ConditionalOperator 0x56347457d130 <col:47, col:95> '<dependent type>'
| | |       |-CallExpr 0x56347457cfa0 <col:47, col:57> '<dependent type>'
| | |       | `-MemberExpr 0x56347457cf70 <col:47> '<bound member function type>' ->is_direct 0x5634745564c8
| | |       |   `-CXXThisExpr 0x56347457cf60 <col:47> 'prevector<N, T, Size, Diff> *' implicit this
| | |       |-CallExpr 0x56347457d050 <col:61, col:75> '<dependent type>'
| | |       | |-UnresolvedMemberExpr 0x56347457cfd0 <col:61> '<bound member function type>' lvalue
| | |       | `-DeclRefExpr 0x56347457d030 <col:72> 'prevector::difference_type':'Diff' lvalue ParmVar 0x563474556720 'pos' 'prevector::difference_type':'Diff'
| | |       `-CallExpr 0x56347457d108 <col:79, col:95> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x56347457d088 <col:79> '<bound member function type>' lvalue
| | |         `-DeclRefExpr 0x56347457d0e8 <col:92> 'prevector::difference_type':'Diff' lvalue ParmVar 0x563474556720 'pos' 'prevector::difference_type':'Diff'
| | |-CXXMethodDecl 0x5634745568f8 <line:197:5, col:110> col:14 item_ptr 'const T *(prevector::difference_type) const'
| | | |-ParmVarDecl 0x563474556868 <col:23, col:39> col:39 referenced pos 'prevector::difference_type':'Diff'
| | | `-CompoundStmt 0x56347457d398 <col:50, col:110>
| | |   `-ReturnStmt 0x56347457d388 <col:52, col:107>
| | |     `-ConditionalOperator 0x56347457d358 <col:59, col:107> '<dependent type>'
| | |       |-CallExpr 0x56347457d1c8 <col:59, col:69> '<dependent type>'
| | |       | `-MemberExpr 0x56347457d198 <col:59> '<bound member function type>' ->is_direct 0x5634745564c8
| | |       |   `-CXXThisExpr 0x56347457d188 <col:59> 'const prevector<N, T, Size, Diff> *' implicit this
| | |       |-CallExpr 0x56347457d278 <col:73, col:87> '<dependent type>'
| | |       | |-UnresolvedMemberExpr 0x56347457d1f8 <col:73> '<bound member function type>' lvalue
| | |       | `-DeclRefExpr 0x56347457d258 <col:84> 'prevector::difference_type':'Diff' lvalue ParmVar 0x563474556868 'pos' 'prevector::difference_type':'Diff'
| | |       `-CallExpr 0x56347457d330 <col:91, col:107> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x56347457d2b0 <col:91> '<bound member function type>' lvalue
| | |         `-DeclRefExpr 0x56347457d310 <col:104> 'prevector::difference_type':'Diff' lvalue ParmVar 0x563474556868 'pos' 'prevector::difference_type':'Diff'
| | |-CXXMethodDecl 0x56347455a8e8 <line:199:5, line:201:5> line:199:10 invalid fill 'void (T *, int, const T &)'
| | | |-ParmVarDecl 0x5634745569b0 <col:15, col:18> col:18 referenced dst 'T *'
| | | |-ParmVarDecl 0x56347455a750 <col:23, col:33> col:33 invalid count 'int'
| | | |-ParmVarDecl 0x56347455a7c8 <col:40, col:59> col:49 referenced value 'const T &' cinit
| | | | `-CXXUnresolvedConstructExpr 0x56347456e408 <col:57, col:59> 'T' 'T' list
| | | |   `-InitListExpr 0x56347456e3c8 <col:58, col:59> 'void'
| | | `-CompoundStmt 0x56347457d3f0 <col:62, line:201:5>
| | |-FunctionTemplateDecl 0x56347455ad28 <line:203:5, line:210:5> line:204:10 fill
| | | |-TemplateTypeParmDecl 0x56347455a9a0 <line:203:14, col:23> col:23 referenced typename depth 1 index 0 InputIterator
| | | `-CXXMethodDecl 0x56347455ac88 <line:204:5, line:210:5> line:204:10 fill 'void (T *, InputIterator, InputIterator)'
| | |   |-ParmVarDecl 0x56347455aa70 <col:15, col:18> col:18 referenced dst 'T *'
| | |   |-ParmVarDecl 0x56347455aae8 <col:23, col:37> col:37 referenced first 'InputIterator'
| | |   |-ParmVarDecl 0x56347455ab60 <col:44, col:58> col:58 referenced last 'InputIterator'
| | |   `-CompoundStmt 0x56347457d628 <col:64, line:210:5>
| | |     `-WhileStmt 0x56347457d610 <line:205:9, line:209:9>
| | |       |-BinaryOperator 0x56347457d440 <line:205:16, col:25> '<dependent type>' '!='
| | |       | |-DeclRefExpr 0x56347457d400 <col:16> 'InputIterator' lvalue ParmVar 0x56347455aae8 'first' 'InputIterator'
| | |       | `-DeclRefExpr 0x56347457d420 <col:25> 'InputIterator' lvalue ParmVar 0x56347455ab60 'last' 'InputIterator'
| | |       `-CompoundStmt 0x56347457d5e8 <col:31, line:209:9>
| | |         |-CXXNewExpr 0x56347457d530 <line:206:13, col:50> 'T *'
| | |         | |-ParenListExpr 0x56347457d500 <col:43, col:50> 'NULL TYPE'
| | |         | | `-UnaryOperator 0x56347457d4e8 <col:44, col:45> '<dependent type>' prefix '*' cannot overflow
| | |         | |   `-DeclRefExpr 0x56347457d4c8 <col:45> 'InputIterator' lvalue ParmVar 0x56347455aae8 'first' 'InputIterator'
| | |         | `-CXXStaticCastExpr 0x56347457d498 <col:17, col:39> 'void *' static_cast<void *> <Dependent>
| | |         |   `-DeclRefExpr 0x56347457d460 <col:36> 'T *' lvalue ParmVar 0x56347455aa70 'dst' 'T *'
| | |         |-UnaryOperator 0x56347457d598 <line:207:13, col:15> '<dependent type>' prefix '++' cannot overflow
| | |         | `-DeclRefExpr 0x56347457d578 <col:15> 'T *' lvalue ParmVar 0x56347455aa70 'dst' 'T *'
| | |         `-UnaryOperator 0x56347457d5d0 <line:208:13, col:15> '<dependent type>' prefix '++' cannot overflow
| | |           `-DeclRefExpr 0x56347457d5b0 <col:15> 'InputIterator' lvalue ParmVar 0x56347455aae8 'first' 'InputIterator'
| | |-AccessSpecDecl 0x56347455ad98 <line:212:1, col:7> col:1 public
| | |-CXXMethodDecl 0x56347455af58 <line:213:5, line:220:5> line:213:10 assign 'void (prevector::size_type, const T &)'
| | | |-ParmVarDecl 0x56347455add0 <col:17, col:27> col:27 referenced n 'prevector::size_type':'Size'
| | | |-ParmVarDecl 0x56347455ae48 <col:30, col:39> col:39 referenced val 'const T &'
| | | `-CompoundStmt 0x56347457db18 <col:44, line:220:5>
| | |   |-CallExpr 0x56347457d7d0 <line:214:9, col:15> '<dependent type>'
| | |   | `-MemberExpr 0x56347457d650 <col:9> '<bound member function type>' ->clear 0x5634745640e8
| | |   |   `-CXXThisExpr 0x56347457d640 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |-IfStmt 0x56347457d8d8 <line:215:9, line:217:9>
| | |   | |-OpaqueValueExpr 0x56347457d8c0 <<invalid sloc>> 'bool'
| | |   | `-CompoundStmt 0x56347457d8a8 <line:215:29, line:217:9>
| | |   |   `-CallExpr 0x56347457d880 <line:216:13, col:30> '<dependent type>'
| | |   |     |-MemberExpr 0x56347457d830 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |   |     | `-CXXThisExpr 0x56347457d820 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-DeclRefExpr 0x56347457d860 <col:29> 'prevector::size_type':'Size' lvalue ParmVar 0x56347455add0 'n' 'prevector::size_type':'Size'
| | |   |-CompoundAssignOperator 0x56347457d950 <line:218:9, col:18> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |   | |-MemberExpr 0x56347457d900 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |   | | `-CXXThisExpr 0x56347457d8f0 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   | `-DeclRefExpr 0x56347457d930 <col:18> 'prevector::size_type':'Size' lvalue ParmVar 0x56347455add0 'n' 'prevector::size_type':'Size'
| | |   `-CallExpr 0x56347457dae0 <line:219:9, col:33> '<dependent type>'
| | |     |-UnresolvedMemberExpr 0x56347457d990 <col:9> '<bound member function type>' lvalue
| | |     |-CallExpr 0x56347457da78 <col:14, col:24> '<dependent type>'
| | |     | |-UnresolvedMemberExpr 0x56347457d9f8 <col:14> '<bound member function type>' lvalue
| | |     | `-IntegerLiteral 0x56347457da58 <col:23> 'int' 0
| | |     |-DeclRefExpr 0x56347457daa0 <col:27> 'prevector::size_type':'Size' lvalue ParmVar 0x56347455add0 'n' 'prevector::size_type':'Size'
| | |     `-DeclRefExpr 0x56347457dac0 <col:30> 'const T' lvalue ParmVar 0x56347455ae48 'val' 'const T &'
| | |-FunctionTemplateDecl 0x56347455b2c8 <line:222:5, line:231:5> line:223:10 assign
| | | |-TemplateTypeParmDecl 0x56347455b008 <line:222:14, col:23> col:23 referenced typename depth 1 index 0 InputIterator
| | | `-CXXMethodDecl 0x56347455b228 <line:223:5, line:231:5> line:223:10 assign 'void (InputIterator, InputIterator)'
| | |   |-ParmVarDecl 0x56347455b0a0 <col:17, col:31> col:31 referenced first 'InputIterator'
| | |   |-ParmVarDecl 0x56347455b118 <col:38, col:52> col:52 referenced last 'InputIterator'
| | |   `-CompoundStmt 0x56347457dfc0 <col:58, line:231:5>
| | |     |-DeclStmt 0x56347457dc20 <line:224:9, col:35>
| | |     | `-VarDecl 0x56347457db58 <col:9, col:30> col:19 referenced n 'prevector::size_type':'Size' cinit
| | |     |   `-BinaryOperator 0x56347457dc00 <col:23, col:30> '<dependent type>' '-'
| | |     |     |-DeclRefExpr 0x56347457dbc0 <col:23> 'InputIterator' lvalue ParmVar 0x56347455b118 'last' 'InputIterator'
| | |     |     `-DeclRefExpr 0x56347457dbe0 <col:30> 'InputIterator' lvalue ParmVar 0x56347455b0a0 'first' 'InputIterator'
| | |     |-CallExpr 0x56347457dc78 <line:225:9, col:15> '<dependent type>'
| | |     | `-MemberExpr 0x56347457dc48 <col:9> '<bound member function type>' ->clear 0x5634745640e8
| | |     |   `-CXXThisExpr 0x56347457dc38 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |-IfStmt 0x56347457dd80 <line:226:9, line:228:9>
| | |     | |-OpaqueValueExpr 0x56347457dd68 <<invalid sloc>> 'bool'
| | |     | `-CompoundStmt 0x56347457dd50 <line:226:29, line:228:9>
| | |     |   `-CallExpr 0x56347457dd28 <line:227:13, col:30> '<dependent type>'
| | |     |     |-MemberExpr 0x56347457dcd8 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |     |     | `-CXXThisExpr 0x56347457dcc8 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |     `-DeclRefExpr 0x56347457dd08 <col:29> 'prevector::size_type':'Size' lvalue Var 0x56347457db58 'n' 'prevector::size_type':'Size'
| | |     |-CompoundAssignOperator 0x56347457ddf8 <line:229:9, col:18> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |     | |-MemberExpr 0x56347457dda8 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |     | | `-CXXThisExpr 0x56347457dd98 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     | `-DeclRefExpr 0x56347457ddd8 <col:18> 'prevector::size_type':'Size' lvalue Var 0x56347457db58 'n' 'prevector::size_type':'Size'
| | |     `-CallExpr 0x56347457df88 <line:230:9, col:38> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0x56347457de38 <col:9> '<bound member function type>' lvalue
| | |       |-CallExpr 0x56347457df20 <col:14, col:24> '<dependent type>'
| | |       | |-UnresolvedMemberExpr 0x56347457dea0 <col:14> '<bound member function type>' lvalue
| | |       | `-IntegerLiteral 0x56347457df00 <col:23> 'int' 0
| | |       |-DeclRefExpr 0x56347457df48 <col:27> 'InputIterator' lvalue ParmVar 0x56347455b0a0 'first' 'InputIterator'
| | |       `-DeclRefExpr 0x56347457df68 <col:34> 'InputIterator' lvalue ParmVar 0x56347455b118 'last' 'InputIterator'
| | |-CXXConstructorDecl 0x56347455b368 <line:233:5, col:18> col:5 prevector<N, T, Size, Diff> 'void ()'
| | | `-CompoundStmt 0x56347457dff8 <col:17, col:18>
| | |-CXXConstructorDecl 0x56347455b4b0 <line:235:5, line:237:5> line:235:14 prevector<N, T, Size, Diff> 'void (prevector::size_type)'
| | | |-ParmVarDecl 0x56347455b420 <col:24, col:34> col:34 referenced n 'prevector::size_type':'Size'
| | | `-CompoundStmt 0x56347457e090 <col:37, line:237:5>
| | |   `-CallExpr 0x56347457e068 <line:236:9, col:17> '<dependent type>'
| | |     |-MemberExpr 0x56347457e018 <col:9> '<bound member function type>' ->resize 0x563474561210
| | |     | `-CXXThisExpr 0x56347457e008 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     `-DeclRefExpr 0x56347457e048 <col:16> 'prevector::size_type':'Size' lvalue ParmVar 0x56347455b420 'n' 'prevector::size_type':'Size'
| | |-CXXConstructorDecl 0x56347455b680 <line:239:5, line:243:5> line:239:14 prevector<N, T, Size, Diff> 'void (prevector::size_type, const T &)'
| | | |-ParmVarDecl 0x56347455b570 <col:24, col:34> col:34 referenced n 'prevector::size_type':'Size'
| | | |-ParmVarDecl 0x56347455b5e8 <col:37, col:46> col:46 referenced val 'const T &'
| | | `-CompoundStmt 0x56347457e358 <col:51, line:243:5>
| | |   |-CallExpr 0x56347457e108 <line:240:9, col:26> '<dependent type>'
| | |   | |-MemberExpr 0x56347457e0b8 <col:9> '<bound member function type>' ->change_capacity 0x563474556668
| | |   | | `-CXXThisExpr 0x56347457e0a8 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   | `-DeclRefExpr 0x56347457e0e8 <col:25> 'prevector::size_type':'Size' lvalue ParmVar 0x56347455b570 'n' 'prevector::size_type':'Size'
| | |   |-CompoundAssignOperator 0x56347457e190 <line:241:9, col:18> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |   | |-MemberExpr 0x56347457e140 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |   | | `-CXXThisExpr 0x56347457e130 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   | `-DeclRefExpr 0x56347457e170 <col:18> 'prevector::size_type':'Size' lvalue ParmVar 0x56347455b570 'n' 'prevector::size_type':'Size'
| | |   `-CallExpr 0x56347457e320 <line:242:9, col:33> '<dependent type>'
| | |     |-UnresolvedMemberExpr 0x56347457e1d0 <col:9> '<bound member function type>' lvalue
| | |     |-CallExpr 0x56347457e2b8 <col:14, col:24> '<dependent type>'
| | |     | |-UnresolvedMemberExpr 0x56347457e238 <col:14> '<bound member function type>' lvalue
| | |     | `-IntegerLiteral 0x56347457e298 <col:23> 'int' 0
| | |     |-DeclRefExpr 0x56347457e2e0 <col:27> 'prevector::size_type':'Size' lvalue ParmVar 0x56347455b570 'n' 'prevector::size_type':'Size'
| | |     `-DeclRefExpr 0x56347457e300 <col:30> 'const T' lvalue ParmVar 0x56347455b5e8 'val' 'const T &'
| | |-FunctionTemplateDecl 0x56347455d830 <line:245:5, line:251:5> line:246:5 prevector<N, T, Size, Diff>
| | | |-TemplateTypeParmDecl 0x56347455d5a0 <line:245:14, col:23> col:23 referenced typename depth 1 index 0 InputIterator
| | | `-CXXConstructorDecl 0x56347455d788 <line:246:5, line:251:5> line:246:5 prevector<N, T, Size, Diff> 'void (InputIterator, InputIterator)'
| | |   |-ParmVarDecl 0x56347455d640 <col:15, col:29> col:29 referenced first 'InputIterator'
| | |   |-ParmVarDecl 0x56347455d6b8 <col:36, col:50> col:50 referenced last 'InputIterator'
| | |   `-CompoundStmt 0x56347457e720 <col:56, line:251:5>
| | |     |-DeclStmt 0x56347457e458 <line:247:9, col:35>
| | |     | `-VarDecl 0x56347457e390 <col:9, col:30> col:19 referenced n 'prevector::size_type':'Size' cinit
| | |     |   `-BinaryOperator 0x56347457e438 <col:23, col:30> '<dependent type>' '-'
| | |     |     |-DeclRefExpr 0x56347457e3f8 <col:23> 'InputIterator' lvalue ParmVar 0x56347455d6b8 'last' 'InputIterator'
| | |     |     `-DeclRefExpr 0x56347457e418 <col:30> 'InputIterator' lvalue ParmVar 0x56347455d640 'first' 'InputIterator'
| | |     |-CallExpr 0x56347457e4d0 <line:248:9, col:26> '<dependent type>'
| | |     | |-MemberExpr 0x56347457e480 <col:9> '<bound member function type>' ->change_capacity 0x563474556668
| | |     | | `-CXXThisExpr 0x56347457e470 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     | `-DeclRefExpr 0x56347457e4b0 <col:25> 'prevector::size_type':'Size' lvalue Var 0x56347457e390 'n' 'prevector::size_type':'Size'
| | |     |-CompoundAssignOperator 0x56347457e558 <line:249:9, col:18> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |     | |-MemberExpr 0x56347457e508 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |     | | `-CXXThisExpr 0x56347457e4f8 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     | `-DeclRefExpr 0x56347457e538 <col:18> 'prevector::size_type':'Size' lvalue Var 0x56347457e390 'n' 'prevector::size_type':'Size'
| | |     `-CallExpr 0x56347457e6e8 <line:250:9, col:38> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0x56347457e598 <col:9> '<bound member function type>' lvalue
| | |       |-CallExpr 0x56347457e680 <col:14, col:24> '<dependent type>'
| | |       | |-UnresolvedMemberExpr 0x56347457e600 <col:14> '<bound member function type>' lvalue
| | |       | `-IntegerLiteral 0x56347457e660 <col:23> 'int' 0
| | |       |-DeclRefExpr 0x56347457e6a8 <col:27> 'InputIterator' lvalue ParmVar 0x56347455d640 'first' 'InputIterator'
| | |       `-DeclRefExpr 0x56347457e6c8 <col:34> 'InputIterator' lvalue ParmVar 0x56347455d6b8 'last' 'InputIterator'
| | |-CXXConstructorDecl 0x56347455dbb8 <line:253:5, line:258:5> line:253:5 prevector<N, T, Size, Diff> 'void (const prevector<N, T, Size, Diff> &)'
| | | |-ParmVarDecl 0x56347455dac8 <col:15, col:50> col:50 referenced other 'const prevector<N, T, Size, Diff> &'
| | | `-CompoundStmt 0x56347457ede0 <col:57, line:258:5>
| | |   |-DeclStmt 0x56347457ea48 <line:254:9, col:35>
| | |   | `-VarDecl 0x56347457e760 <col:9, col:34> col:19 referenced n 'prevector::size_type':'Size' cinit
| | |   |   `-CallExpr 0x56347457ea28 <col:23, col:34> '<dependent type>'
| | |   |     `-CXXDependentScopeMemberExpr 0x56347457e9e0 <col:23, col:29> '<dependent type>' lvalue .size
| | |   |       `-DeclRefExpr 0x56347457e9c0 <col:23> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347455dac8 'other' 'const prevector<N, T, Size, Diff> &'
| | |   |-CallExpr 0x56347457eac0 <line:255:9, col:26> '<dependent type>'
| | |   | |-MemberExpr 0x56347457ea70 <col:9> '<bound member function type>' ->change_capacity 0x563474556668
| | |   | | `-CXXThisExpr 0x56347457ea60 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   | `-DeclRefExpr 0x56347457eaa0 <col:25> 'prevector::size_type':'Size' lvalue Var 0x56347457e760 'n' 'prevector::size_type':'Size'
| | |   |-CompoundAssignOperator 0x56347457eb48 <line:256:9, col:18> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |   | |-MemberExpr 0x56347457eaf8 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |   | | `-CXXThisExpr 0x56347457eae8 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   | `-DeclRefExpr 0x56347457eb28 <col:18> 'prevector::size_type':'Size' lvalue Var 0x56347457e760 'n' 'prevector::size_type':'Size'
| | |   `-CallExpr 0x56347457eda8 <line:257:9, col:54> '<dependent type>'
| | |     |-UnresolvedMemberExpr 0x56347457eb88 <col:9> '<bound member function type>' lvalue
| | |     |-CallExpr 0x56347457ec70 <col:14, col:24> '<dependent type>'
| | |     | |-UnresolvedMemberExpr 0x56347457ebf0 <col:14> '<bound member function type>' lvalue
| | |     | `-IntegerLiteral 0x56347457ec50 <col:23> 'int' 0
| | |     |-CallExpr 0x56347457ed00 <col:27, col:39> '<dependent type>'
| | |     | `-CXXDependentScopeMemberExpr 0x56347457ecb8 <col:27, col:33> '<dependent type>' lvalue .begin
| | |     |   `-DeclRefExpr 0x56347457ec98 <col:27> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347455dac8 'other' 'const prevector<N, T, Size, Diff> &'
| | |     `-CallExpr 0x56347457ed88 <col:43, col:53> '<dependent type>'
| | |       `-CXXDependentScopeMemberExpr 0x56347457ed40 <col:43, col:49> '<dependent type>' lvalue .end
| | |         `-DeclRefExpr 0x56347457ed20 <col:43> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347455dac8 'other' 'const prevector<N, T, Size, Diff> &'
| | |-CXXConstructorDecl 0x56347455df88 <line:260:5, line:262:5> line:260:5 prevector<N, T, Size, Diff> 'void (prevector<N, T, Size, Diff> &&)'
| | | |-ParmVarDecl 0x56347455de98 <col:15, col:45> col:45 referenced other 'prevector<N, T, Size, Diff> &&'
| | | `-CompoundStmt 0x56347457ee98 <col:52, line:262:5>
| | |   `-CallExpr 0x56347457ee70 <line:261:9, col:19> '<dependent type>'
| | |     |-MemberExpr 0x56347457ee20 <col:9> '<bound member function type>' ->swap 0x5634745698e8
| | |     | `-CXXThisExpr 0x56347457ee10 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     `-DeclRefExpr 0x56347457ee50 <col:14> 'prevector<N, T, Size, Diff>':'prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347455de98 'other' 'prevector<N, T, Size, Diff> &&'
| | |-CXXMethodDecl 0x56347455e358 <line:264:5, line:270:5> line:264:16 operator= 'prevector<N, T, Size, Diff> &(const prevector<N, T, Size, Diff> &)'
| | | |-ParmVarDecl 0x56347455e238 <col:26, col:61> col:61 referenced other 'const prevector<N, T, Size, Diff> &'
| | | `-CompoundStmt 0x56347457f168 <col:68, line:270:5>
| | |   |-IfStmt 0x56347457ef68 <line:265:9, line:267:9>
| | |   | |-BinaryOperator 0x56347457eef8 <line:265:13, col:23> '<dependent type>' '=='
| | |   | | |-UnaryOperator 0x56347457eed0 <col:13, col:14> '<dependent type>' prefix '&' cannot overflow
| | |   | | | `-DeclRefExpr 0x56347457eeb0 <col:14> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347455e238 'other' 'const prevector<N, T, Size, Diff> &'
| | |   | | `-CXXThisExpr 0x56347457eee8 <col:23> 'prevector<N, T, Size, Diff> *' this
| | |   | `-CompoundStmt 0x56347457ef50 <col:29, line:267:9>
| | |   |   `-ReturnStmt 0x56347457ef40 <line:266:13, col:21>
| | |   |     `-UnaryOperator 0x56347457ef28 <col:20, col:21> '<dependent type>' prefix '*' cannot overflow
| | |   |       `-CXXThisExpr 0x56347457ef18 <col:21> 'prevector<N, T, Size, Diff> *' this
| | |   |-CallExpr 0x56347457f100 <line:268:9, col:42> '<dependent type>'
| | |   | |-UnresolvedMemberExpr 0x56347457ef90 <col:9> '<bound member function type>' lvalue
| | |   | |-CallExpr 0x56347457f058 <col:16, col:28> '<dependent type>'
| | |   | | `-CXXDependentScopeMemberExpr 0x56347457f010 <col:16, col:22> '<dependent type>' lvalue .begin
| | |   | |   `-DeclRefExpr 0x56347457eff0 <col:16> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347455e238 'other' 'const prevector<N, T, Size, Diff> &'
| | |   | `-CallExpr 0x56347457f0e0 <col:31, col:41> '<dependent type>'
| | |   |   `-CXXDependentScopeMemberExpr 0x56347457f098 <col:31, col:37> '<dependent type>' lvalue .end
| | |   |     `-DeclRefExpr 0x56347457f078 <col:31> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347455e238 'other' 'const prevector<N, T, Size, Diff> &'
| | |   `-ReturnStmt 0x56347457f158 <line:269:9, col:17>
| | |     `-UnaryOperator 0x56347457f140 <col:16, col:17> '<dependent type>' prefix '*' cannot overflow
| | |       `-CXXThisExpr 0x56347457f130 <col:17> 'prevector<N, T, Size, Diff> *' this
| | |-CXXMethodDecl 0x563474560498 <line:272:5, line:275:5> line:272:16 operator= 'prevector<N, T, Size, Diff> &(prevector<N, T, Size, Diff> &&)'
| | | |-ParmVarDecl 0x5634745603a0 <col:26, col:56> col:56 referenced other 'prevector<N, T, Size, Diff> &&'
| | | `-CompoundStmt 0x56347457f250 <col:63, line:275:5>
| | |   |-CallExpr 0x56347457f1f0 <line:273:9, col:19> '<dependent type>'
| | |   | |-MemberExpr 0x56347457f1a0 <col:9> '<bound member function type>' ->swap 0x5634745698e8
| | |   | | `-CXXThisExpr 0x56347457f190 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   | `-DeclRefExpr 0x56347457f1d0 <col:14> 'prevector<N, T, Size, Diff>':'prevector<N, T, Size, Diff>' lvalue ParmVar 0x5634745603a0 'other' 'prevector<N, T, Size, Diff> &&'
| | |   `-ReturnStmt 0x56347457f240 <line:274:9, col:17>
| | |     `-UnaryOperator 0x56347457f228 <col:16, col:17> '<dependent type>' prefix '*' cannot overflow
| | |       `-CXXThisExpr 0x56347457f218 <col:17> 'prevector<N, T, Size, Diff> *' this
| | |-CXXMethodDecl 0x5634745605b8 <line:277:5, line:279:5> line:277:15 referenced size 'prevector::size_type () const'
| | | `-CompoundStmt 0x56347457f410 <col:28, line:279:5>
| | |   `-ReturnStmt 0x56347457f400 <line:278:9, col:50>
| | |     `-ConditionalOperator 0x56347457f3d0 <col:16, col:50> '<dependent type>'
| | |       |-CallExpr 0x56347457f2b0 <col:16, col:26> '<dependent type>'
| | |       | `-MemberExpr 0x56347457f280 <col:16> '<bound member function type>' ->is_direct 0x5634745564c8
| | |       |   `-CXXThisExpr 0x56347457f270 <col:16> 'const prevector<N, T, Size, Diff> *' implicit this
| | |       |-MemberExpr 0x56347457f2e0 <col:30> 'const prevector::size_type':'const Size' lvalue ->_size 0x563474554258
| | |       | `-CXXThisExpr 0x56347457f2d0 <col:30> 'const prevector<N, T, Size, Diff> *' implicit this
| | |       `-BinaryOperator 0x56347457f3b0 <col:38, col:50> '<dependent type>' '-'
| | |         |-BinaryOperator 0x56347457f370 <col:38, col:46> '<dependent type>' '-'
| | |         | |-MemberExpr 0x56347457f320 <col:38> 'const prevector::size_type':'const Size' lvalue ->_size 0x563474554258
| | |         | | `-CXXThisExpr 0x56347457f310 <col:38> 'const prevector<N, T, Size, Diff> *' implicit this
| | |         | `-DeclRefExpr 0x56347457f350 <col:46> 'unsigned int' NonTypeTemplateParm 0x5634745429c0 'N' 'unsigned int'
| | |         `-IntegerLiteral 0x56347457f390 <col:50> 'int' 1
| | |-CXXMethodDecl 0x563474560678 <line:281:5, line:283:5> line:281:10 empty 'bool () const'
| | | `-CompoundStmt 0x56347457f4d8 <col:24, line:283:5>
| | |   `-ReturnStmt 0x56347457f4c8 <line:282:9, col:26>
| | |     `-BinaryOperator 0x56347457f4a8 <col:16, col:26> '<dependent type>' '=='
| | |       |-CallExpr 0x56347457f468 <col:16, col:21> '<dependent type>'
| | |       | `-MemberExpr 0x56347457f438 <col:16> '<bound member function type>' ->size 0x5634745605b8
| | |       |   `-CXXThisExpr 0x56347457f428 <col:16> 'const prevector<N, T, Size, Diff> *' implicit this
| | |       `-IntegerLiteral 0x56347457f488 <col:26> 'int' 0
| | |-CXXMethodDecl 0x563474560768 <line:285:5, col:54> col:14 begin 'prevector::iterator ()'
| | | `-CompoundStmt 0x56347457f5f0 <col:22, col:54>
| | |   `-ReturnStmt 0x56347457f5e0 <col:24, col:51>
| | |     `-CXXUnresolvedConstructExpr 0x56347457f5b8 <col:31, col:51> 'prevector::iterator' 'prevector::iterator'
| | |       `-CallExpr 0x56347457f590 <col:40, col:50> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x56347457f510 <col:40> '<bound member function type>' lvalue
| | |         `-IntegerLiteral 0x56347457f570 <col:49> 'int' 0
| | |-CXXMethodDecl 0x563474560858 <line:286:5, col:72> col:20 begin 'prevector::const_iterator () const'
| | | `-CompoundStmt 0x56347457f708 <col:34, col:72>
| | |   `-ReturnStmt 0x56347457f6f8 <col:36, col:69>
| | |     `-CXXUnresolvedConstructExpr 0x56347457f6d0 <col:43, col:69> 'prevector::const_iterator' 'prevector::const_iterator'
| | |       `-CallExpr 0x56347457f6a8 <col:58, col:68> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x56347457f628 <col:58> '<bound member function type>' lvalue
| | |         `-IntegerLiteral 0x56347457f688 <col:67> 'int' 0
| | |-CXXMethodDecl 0x563474560918 <line:287:5, col:57> col:14 end 'prevector::iterator ()'
| | | `-CompoundStmt 0x56347457f860 <col:20, col:57>
| | |   `-ReturnStmt 0x56347457f850 <col:22, col:54>
| | |     `-CXXUnresolvedConstructExpr 0x56347457f828 <col:29, col:54> 'prevector::iterator' 'prevector::iterator'
| | |       `-CallExpr 0x56347457f800 <col:38, col:53> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x56347457f740 <col:38> '<bound member function type>' lvalue
| | |         `-CallExpr 0x56347457f7e0 <col:47, col:52> '<dependent type>'
| | |           `-MemberExpr 0x56347457f7b0 <col:47> '<bound member function type>' ->size 0x5634745605b8
| | |             `-CXXThisExpr 0x56347457f7a0 <col:47> 'prevector<N, T, Size, Diff> *' implicit this
| | |-CXXMethodDecl 0x5634745609d8 <line:288:5, col:75> col:20 end 'prevector::const_iterator () const'
| | | `-CompoundStmt 0x56347457fdd0 <col:32, col:75>
| | |   `-ReturnStmt 0x56347457f9a8 <col:34, col:72>
| | |     `-CXXUnresolvedConstructExpr 0x56347457f980 <col:41, col:72> 'prevector::const_iterator' 'prevector::const_iterator'
| | |       `-CallExpr 0x56347457f958 <col:56, col:71> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x56347457f898 <col:56> '<bound member function type>' lvalue
| | |         `-CallExpr 0x56347457f938 <col:65, col:70> '<dependent type>'
| | |           `-MemberExpr 0x56347457f908 <col:65> '<bound member function type>' ->size 0x5634745605b8
| | |             `-CXXThisExpr 0x56347457f8f8 <col:65> 'const prevector<N, T, Size, Diff> *' implicit this
| | |-CXXMethodDecl 0x563474560ac8 <line:290:5, col:80> col:22 rbegin 'prevector::reverse_iterator ()'
| | | `-CompoundStmt 0x56347457ff68 <col:31, col:80>
| | |   `-ReturnStmt 0x56347457ff58 <col:33, col:77>
| | |     `-CXXUnresolvedConstructExpr 0x56347457ff30 <col:40, col:77> 'prevector::reverse_iterator' 'prevector::reverse_iterator'
| | |       `-CallExpr 0x56347457ff08 <col:57, col:76> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x56347457fe08 <col:57> '<bound member function type>' lvalue
| | |         `-BinaryOperator 0x56347457fee8 <col:66, col:75> '<dependent type>' '-'
| | |           |-CallExpr 0x56347457fea8 <col:66, col:71> '<dependent type>'
| | |           | `-MemberExpr 0x56347457fe78 <col:66> '<bound member function type>' ->size 0x5634745605b8
| | |           |   `-CXXThisExpr 0x56347457fe68 <col:66> 'prevector<N, T, Size, Diff> *' implicit this
| | |           `-IntegerLiteral 0x56347457fec8 <col:75> 'int' 1
| | |-CXXMethodDecl 0x563474560bb8 <line:291:5, col:98> col:28 rbegin 'prevector::const_reverse_iterator () const'
| | | `-CompoundStmt 0x563474580100 <col:43, col:98>
| | |   `-ReturnStmt 0x5634745800f0 <col:45, col:95>
| | |     `-CXXUnresolvedConstructExpr 0x5634745800c8 <col:52, col:95> 'prevector::const_reverse_iterator' 'prevector::const_reverse_iterator'
| | |       `-CallExpr 0x5634745800a0 <col:75, col:94> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x56347457ffa0 <col:75> '<bound member function type>' lvalue
| | |         `-BinaryOperator 0x563474580080 <col:84, col:93> '<dependent type>' '-'
| | |           |-CallExpr 0x563474580040 <col:84, col:89> '<dependent type>'
| | |           | `-MemberExpr 0x563474580010 <col:84> '<bound member function type>' ->size 0x5634745605b8
| | |           |   `-CXXThisExpr 0x563474580000 <col:84> 'const prevector<N, T, Size, Diff> *' implicit this
| | |           `-IntegerLiteral 0x563474580060 <col:93> 'int' 1
| | |-CXXMethodDecl 0x563474560c78 <line:292:5, col:70> col:22 rend 'prevector::reverse_iterator ()'
| | | `-CompoundStmt 0x563474580230 <col:29, col:70>
| | |   `-ReturnStmt 0x563474580220 <col:31, col:67>
| | |     `-CXXUnresolvedConstructExpr 0x5634745801f8 <col:38, col:67> 'prevector::reverse_iterator' 'prevector::reverse_iterator'
| | |       `-CallExpr 0x5634745801d0 <col:55, col:66> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x563474580138 <col:55> '<bound member function type>' lvalue
| | |         `-UnaryOperator 0x5634745801b8 <col:64, col:65> 'int' prefix '-'
| | |           `-IntegerLiteral 0x563474580198 <col:65> 'int' 1
| | |-CXXMethodDecl 0x563474560d38 <line:293:5, col:88> col:28 rend 'prevector::const_reverse_iterator () const'
| | | `-CompoundStmt 0x563474580360 <col:41, col:88>
| | |   `-ReturnStmt 0x563474580350 <col:43, col:85>
| | |     `-CXXUnresolvedConstructExpr 0x563474580328 <col:50, col:85> 'prevector::const_reverse_iterator' 'prevector::const_reverse_iterator'
| | |       `-CallExpr 0x563474580300 <col:73, col:84> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x563474580268 <col:73> '<bound member function type>' lvalue
| | |         `-UnaryOperator 0x5634745802e8 <col:82, col:83> 'int' prefix '-'
| | |           `-IntegerLiteral 0x5634745802c8 <col:83> 'int' 1
| | |-CXXMethodDecl 0x563474560e40 <line:295:5, line:301:5> line:295:12 invalid capacity 'int () const'
| | | `-CompoundStmt 0x563474580510 <col:29, line:301:5>
| | |   `-IfStmt 0x5634745804e8 <line:296:9, line:300:9> has_else
| | |     |-CallExpr 0x5634745803b8 <line:296:13, col:23> '<dependent type>'
| | |     | `-MemberExpr 0x563474580388 <col:13> '<bound member function type>' ->is_direct 0x5634745564c8
| | |     |   `-CXXThisExpr 0x563474580378 <col:13> 'const prevector<N, T, Size, Diff> *' implicit this
| | |     |-CompoundStmt 0x563474580420 <col:26, line:298:9>
| | |     | `-ReturnStmt 0x563474580410 <line:297:13, col:20>
| | |     |   `-ImplicitCastExpr 0x5634745803f8 <col:20> 'int' <IntegralCast>
| | |     |     `-DeclRefExpr 0x5634745803d8 <col:20> 'unsigned int' NonTypeTemplateParm 0x5634745429c0 'N' 'unsigned int'
| | |     `-CompoundStmt 0x5634745804d0 <line:298:16, line:300:9>
| | |       `-ReturnStmt 0x5634745804c0 <line:299:13, col:27>
| | |         `-CXXDependentScopeMemberExpr 0x563474580478 <col:20, col:27> '<dependent type>' lvalue .capacity
| | |           `-MemberExpr 0x563474580448 <col:20> 'const union direct_or_indirect':'const prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |             `-CXXThisExpr 0x563474580438 <col:20> 'const prevector<N, T, Size, Diff> *' implicit this
| | |-CXXMethodDecl 0x563474560f80 <line:303:5, line:305:5> line:303:8 operator[] 'T &(prevector::size_type)'
| | | |-ParmVarDecl 0x563474560ef0 <col:19, col:29> col:29 referenced pos 'prevector::size_type':'Size'
| | | `-CompoundStmt 0x563474580608 <col:34, line:305:5>
| | |   `-ReturnStmt 0x5634745805f8 <line:304:9, col:29>
| | |     `-UnaryOperator 0x5634745805e0 <col:16, col:29> '<dependent type>' prefix '*' cannot overflow
| | |       `-CallExpr 0x5634745805b8 <col:17, col:29> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x563474580538 <col:17> '<bound member function type>' lvalue
| | |         `-DeclRefExpr 0x563474580598 <col:26> 'prevector::size_type':'Size' lvalue ParmVar 0x563474560ef0 'pos' 'prevector::size_type':'Size'
| | |-CXXMethodDecl 0x5634745610c8 <line:307:5, line:309:5> line:307:14 operator[] 'const T &(prevector::size_type) const'
| | | |-ParmVarDecl 0x563474561038 <col:25, col:35> col:35 referenced pos 'prevector::size_type':'Size'
| | | `-CompoundStmt 0x563474580700 <col:46, line:309:5>
| | |   `-ReturnStmt 0x5634745806f0 <line:308:9, col:29>
| | |     `-UnaryOperator 0x5634745806d8 <col:16, col:29> '<dependent type>' prefix '*' cannot overflow
| | |       `-CallExpr 0x5634745806b0 <col:17, col:29> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x563474580630 <col:17> '<bound member function type>' lvalue
| | |         `-DeclRefExpr 0x563474580690 <col:26> 'prevector::size_type':'Size' lvalue ParmVar 0x563474561038 'pos' 'prevector::size_type':'Size'
| | |-CXXMethodDecl 0x563474561210 <line:311:5, line:326:5> line:311:10 referenced resize 'void (prevector::size_type)'
| | | |-ParmVarDecl 0x563474561180 <col:17, col:27> col:27 referenced new_size 'prevector::size_type':'Size'
| | | `-CompoundStmt 0x5634745813f8 <col:37, line:326:5>
| | |   |-DeclStmt 0x5634745807f0 <line:312:9, col:36>
| | |   | `-VarDecl 0x563474580728 <col:9, col:35> col:19 referenced cur_size 'prevector::size_type':'Size' cinit
| | |   |   `-CallExpr 0x5634745807d0 <col:30, col:35> '<dependent type>'
| | |   |     `-MemberExpr 0x5634745807a0 <col:30> '<bound member function type>' ->size 0x5634745605b8
| | |   |       `-CXXThisExpr 0x563474580790 <col:30> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |-IfStmt 0x563474580890 <line:313:9, line:315:9>
| | |   | |-BinaryOperator 0x563474580848 <line:313:13, col:25> '<dependent type>' '=='
| | |   | | |-DeclRefExpr 0x563474580808 <col:13> 'prevector::size_type':'Size' lvalue Var 0x563474580728 'cur_size' 'prevector::size_type':'Size'
| | |   | | `-DeclRefExpr 0x563474580828 <col:25> 'prevector::size_type':'Size' lvalue ParmVar 0x563474561180 'new_size' 'prevector::size_type':'Size'
| | |   | `-CompoundStmt 0x563474580878 <col:35, line:315:9>
| | |   |   `-ReturnStmt 0x563474580868 <line:314:13>
| | |   |-IfStmt 0x563474580b20 <line:316:9, line:319:9>
| | |   | |-BinaryOperator 0x5634745808e8 <line:316:13, col:24> '<dependent type>' '>'
| | |   | | |-DeclRefExpr 0x5634745808a8 <col:13> 'prevector::size_type':'Size' lvalue Var 0x563474580728 'cur_size' 'prevector::size_type':'Size'
| | |   | | `-DeclRefExpr 0x5634745808c8 <col:24> 'prevector::size_type':'Size' lvalue ParmVar 0x563474561180 'new_size' 'prevector::size_type':'Size'
| | |   | `-CompoundStmt 0x563474580b00 <col:34, line:319:9>
| | |   |   |-CallExpr 0x563474580ac0 <line:317:13, col:44> '<dependent type>'
| | |   |   | |-UnresolvedMemberExpr 0x563474580918 <col:13> '<bound member function type>' lvalue
| | |   |   | |-CallExpr 0x563474580a08 <col:19, col:36> '<dependent type>'
| | |   |   | | |-UnresolvedMemberExpr 0x563474580988 <col:19> '<bound member function type>' lvalue
| | |   |   | | `-DeclRefExpr 0x5634745809e8 <col:28> 'prevector::size_type':'Size' lvalue ParmVar 0x563474561180 'new_size' 'prevector::size_type':'Size'
| | |   |   | `-CallExpr 0x563474580aa0 <col:39, col:43> '<dependent type>'
| | |   |   |   `-UnresolvedMemberExpr 0x563474580a40 <col:39> '<bound member function type>' lvalue
| | |   |   `-ReturnStmt 0x563474580af0 <line:318:13>
| | |   |-IfStmt 0x563474580c20 <line:320:9, line:322:9>
| | |   | |-OpaqueValueExpr 0x563474580c08 <<invalid sloc>> 'bool'
| | |   | `-CompoundStmt 0x563474580bf0 <line:320:36, line:322:9>
| | |   |   `-CallExpr 0x563474580bc8 <line:321:13, col:37> '<dependent type>'
| | |   |     |-MemberExpr 0x563474580b78 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |   |     | `-CXXThisExpr 0x563474580b68 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-DeclRefExpr 0x563474580ba8 <col:29> 'prevector::size_type':'Size' lvalue ParmVar 0x563474561180 'new_size' 'prevector::size_type':'Size'
| | |   `-DeclStmt 0x563474580d28 <line:323:9, col:49>
| | |     `-VarDecl 0x563474580c60 <col:9, col:19> col:19 invalid increase 'int'
| | |-CXXMethodDecl 0x563474563f60 <line:328:5, line:332:5> line:328:10 reserve 'void (prevector::size_type)'
| | | |-ParmVarDecl 0x563474563ed0 <col:18, col:28> col:28 referenced new_capacity 'prevector::size_type':'Size'
| | | `-CompoundStmt 0x563474581530 <col:42, line:332:5>
| | |   `-IfStmt 0x563474581518 <line:329:9, line:331:9>
| | |     |-OpaqueValueExpr 0x563474581500 <<invalid sloc>> 'bool'
| | |     `-CompoundStmt 0x5634745814e8 <line:329:40, line:331:9>
| | |       `-CallExpr 0x5634745814c0 <line:330:13, col:41> '<dependent type>'
| | |         |-MemberExpr 0x563474581470 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |         | `-CXXThisExpr 0x563474581460 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |         `-DeclRefExpr 0x5634745814a0 <col:29> 'prevector::size_type':'Size' lvalue ParmVar 0x563474563ed0 'new_capacity' 'prevector::size_type':'Size'
| | |-CXXMethodDecl 0x563474564028 <line:334:5, line:336:5> line:334:10 shrink_to_fit 'void ()'
| | | `-CompoundStmt 0x563474581610 <col:26, line:336:5>
| | |   `-CallExpr 0x5634745815e8 <line:335:9, col:31> '<dependent type>'
| | |     |-MemberExpr 0x563474581558 <col:9> '<bound member function type>' ->change_capacity 0x563474556668
| | |     | `-CXXThisExpr 0x563474581548 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     `-CallExpr 0x5634745815c8 <col:25, col:30> '<dependent type>'
| | |       `-MemberExpr 0x563474581598 <col:25> '<bound member function type>' ->size 0x5634745605b8
| | |         `-CXXThisExpr 0x563474581588 <col:25> 'prevector<N, T, Size, Diff> *' implicit this
| | |-CXXMethodDecl 0x5634745640e8 <line:338:5, line:340:5> line:338:10 referenced clear 'void ()'
| | | `-CompoundStmt 0x5634745816b0 <col:18, line:340:5>
| | |   `-CallExpr 0x563474581688 <line:339:9, col:17> '<dependent type>'
| | |     |-MemberExpr 0x563474581638 <col:9> '<bound member function type>' ->resize 0x563474561210
| | |     | `-CXXThisExpr 0x563474581628 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     `-IntegerLiteral 0x563474581668 <col:16> 'int' 0
| | |-CXXMethodDecl 0x563474564328 <line:342:5, line:353:5> line:342:14 insert 'prevector::iterator (prevector::iterator, const T &)'
| | | |-ParmVarDecl 0x563474564198 <col:21, col:30> col:30 referenced pos 'prevector::iterator'
| | | |-ParmVarDecl 0x563474564210 <col:35, col:44> col:44 referenced value 'const T &'
| | | `-CompoundStmt 0x563474582028 <col:51, line:353:5>
| | |   |-DeclStmt 0x563474581810 <line:343:9, col:36>
| | |   | `-VarDecl 0x5634745816d8 <col:9, col:35> col:19 referenced p 'prevector::size_type':'Size' cinit
| | |   |   `-BinaryOperator 0x5634745817f0 <col:23, col:35> '<dependent type>' '-'
| | |   |     |-DeclRefExpr 0x563474581740 <col:23> 'prevector::iterator' lvalue ParmVar 0x563474564198 'pos' 'prevector::iterator'
| | |   |     `-CallExpr 0x5634745817d0 <col:29, col:35> '<dependent type>'
| | |   |       `-UnresolvedMemberExpr 0x563474581770 <col:29> '<bound member function type>' lvalue
| | |   |-DeclStmt 0x563474581940 <line:344:9, col:40>
| | |   | `-VarDecl 0x563474581838 <col:9, col:39> col:19 referenced new_size 'prevector::size_type':'Size' cinit
| | |   |   `-BinaryOperator 0x563474581920 <col:30, col:39> '<dependent type>' '+'
| | |   |     |-CallExpr 0x5634745818e0 <col:30, col:35> '<dependent type>'
| | |   |     | `-MemberExpr 0x5634745818b0 <col:30> '<bound member function type>' ->size 0x5634745605b8
| | |   |     |   `-CXXThisExpr 0x5634745818a0 <col:30> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-IntegerLiteral 0x563474581900 <col:39> 'int' 1
| | |   |-IfStmt 0x563474581ae0 <line:345:9, line:347:9>
| | |   | |-OpaqueValueExpr 0x563474581ac8 <<invalid sloc>> 'bool'
| | |   | `-CompoundStmt 0x563474581ab0 <line:345:36, line:347:9>
| | |   |   `-CallExpr 0x563474581a88 <line:346:13, col:55> '<dependent type>'
| | |   |     |-MemberExpr 0x563474581998 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |   |     | `-CXXThisExpr 0x563474581988 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-BinaryOperator 0x563474581a68 <col:29, col:54> '<dependent type>' '+'
| | |   |       |-DeclRefExpr 0x5634745819c8 <col:29> 'prevector::size_type':'Size' lvalue Var 0x563474581838 'new_size' 'prevector::size_type':'Size'
| | |   |       `-ParenExpr 0x563474581a48 <col:40, col:54> '<dependent type>'
| | |   |         `-BinaryOperator 0x563474581a28 <col:41, col:53> '<dependent type>' '>>'
| | |   |           |-DeclRefExpr 0x5634745819e8 <col:41> 'prevector::size_type':'Size' lvalue Var 0x563474581838 'new_size' 'prevector::size_type':'Size'
| | |   |           `-IntegerLiteral 0x563474581a08 <col:53> 'int' 1
| | |   |-DeclStmt 0x563474581c28 <line:348:9, col:29>
| | |   | `-VarDecl 0x563474581b08 <col:9, col:28> col:12 referenced ptr 'T *' cinit
| | |   |   `-CallExpr 0x563474581c00 <col:18, col:28> '<dependent type>'
| | |   |     |-UnresolvedMemberExpr 0x563474581b80 <col:18> '<bound member function type>' lvalue
| | |   |     `-DeclRefExpr 0x563474581be0 <col:27> 'prevector::size_type':'Size' lvalue Var 0x5634745816d8 'p' 'prevector::size_type':'Size'
| | |   |-CallExpr 0x563474581e10 <line:349:9, col:55> '<dependent type>'
| | |   | |-UnresolvedLookupExpr 0x563474581c40 <col:9> '<overloaded function type>' lvalue (ADL) = 'memmove' empty
| | |   | |-BinaryOperator 0x563474581cc0 <col:17, col:23> '<dependent type>' '+'
| | |   | | |-DeclRefExpr 0x563474581c80 <col:17> 'T *' lvalue Var 0x563474581b08 'ptr' 'T *'
| | |   | | `-IntegerLiteral 0x563474581ca0 <col:23> 'int' 1
| | |   | |-DeclRefExpr 0x563474581ce0 <col:26> 'T *' lvalue Var 0x563474581b08 'ptr' 'T *'
| | |   | `-BinaryOperator 0x563474581df0 <col:31, col:54> '<dependent type>' '*'
| | |   |   |-ParenExpr 0x563474581da0 <col:31, col:42> '<dependent type>'
| | |   |   | `-BinaryOperator 0x563474581d80 <col:32, col:41> '<dependent type>' '-'
| | |   |   |   |-CallExpr 0x563474581d40 <col:32, col:37> '<dependent type>'
| | |   |   |   | `-MemberExpr 0x563474581d10 <col:32> '<bound member function type>' ->size 0x5634745605b8
| | |   |   |   |   `-CXXThisExpr 0x563474581d00 <col:32> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |   |   `-DeclRefExpr 0x563474581d60 <col:41> 'prevector::size_type':'Size' lvalue Var 0x5634745816d8 'p' 'prevector::size_type':'Size'
| | |   |   `-UnaryExprOrTypeTraitExpr 0x563474581dd0 <col:46, col:54> 'unsigned long' sizeof 'T'
| | |   |-UnaryOperator 0x563474581ea8 <line:350:9, col:14> '<dependent type>' postfix '++' cannot overflow
| | |   | `-MemberExpr 0x563474581e58 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |   |   `-CXXThisExpr 0x563474581e48 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |-CXXNewExpr 0x563474581f78 <line:351:9, col:45> 'T *'
| | |   | |-ParenListExpr 0x563474581f48 <col:39, col:45> 'NULL TYPE'
| | |   | | `-DeclRefExpr 0x563474581f28 <col:40> 'const T' lvalue ParmVar 0x563474564210 'value' 'const T &'
| | |   | `-CXXStaticCastExpr 0x563474581ef8 <col:13, col:35> 'void *' static_cast<void *> <Dependent>
| | |   |   `-DeclRefExpr 0x563474581ec0 <col:32> 'T *' lvalue Var 0x563474581b08 'ptr' 'T *'
| | |   `-ReturnStmt 0x563474582018 <line:352:9, col:28>
| | |     `-CXXUnresolvedConstructExpr 0x563474581ff0 <col:16, col:28> 'prevector::iterator' 'prevector::iterator'
| | |       `-DeclRefExpr 0x563474581fd0 <col:25> 'T *' lvalue Var 0x563474581b08 'ptr' 'T *'
| | |-CXXMethodDecl 0x5634745645f8 <line:355:5, line:365:5> line:355:10 insert 'void (prevector::iterator, prevector::size_type, const T &)'
| | | |-ParmVarDecl 0x5634745643e8 <col:17, col:26> col:26 referenced pos 'prevector::iterator'
| | | |-ParmVarDecl 0x563474564460 <col:31, col:41> col:41 referenced count 'prevector::size_type':'Size'
| | | |-ParmVarDecl 0x5634745644d8 <col:48, col:57> col:57 referenced value 'const T &'
| | | `-CompoundStmt 0x563474582ca8 <col:64, line:365:5>
| | |   |-DeclStmt 0x5634745821c0 <line:356:9, col:36>
| | |   | `-VarDecl 0x563474582088 <col:9, col:35> col:19 referenced p 'prevector::size_type':'Size' cinit
| | |   |   `-BinaryOperator 0x5634745821a0 <col:23, col:35> '<dependent type>' '-'
| | |   |     |-DeclRefExpr 0x5634745820f0 <col:23> 'prevector::iterator' lvalue ParmVar 0x5634745643e8 'pos' 'prevector::iterator'
| | |   |     `-CallExpr 0x563474582180 <col:29, col:35> '<dependent type>'
| | |   |       `-UnresolvedMemberExpr 0x563474582120 <col:29> '<bound member function type>' lvalue
| | |   |-DeclStmt 0x5634745822f0 <line:357:9, col:44>
| | |   | `-VarDecl 0x5634745821e8 <col:9, col:39> col:19 referenced new_size 'prevector::size_type':'Size' cinit
| | |   |   `-BinaryOperator 0x5634745822d0 <col:30, col:39> '<dependent type>' '+'
| | |   |     |-CallExpr 0x563474582290 <col:30, col:35> '<dependent type>'
| | |   |     | `-MemberExpr 0x563474582260 <col:30> '<bound member function type>' ->size 0x5634745605b8
| | |   |     |   `-CXXThisExpr 0x563474582250 <col:30> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-DeclRefExpr 0x5634745822b0 <col:39> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564460 'count' 'prevector::size_type':'Size'
| | |   |-IfStmt 0x563474582718 <line:358:9, line:360:9>
| | |   | |-OpaqueValueExpr 0x563474582700 <<invalid sloc>> 'bool'
| | |   | `-CompoundStmt 0x5634745826e8 <line:358:36, line:360:9>
| | |   |   `-CallExpr 0x5634745826c0 <line:359:13, col:55> '<dependent type>'
| | |   |     |-MemberExpr 0x5634745825d0 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |   |     | `-CXXThisExpr 0x5634745825c0 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-BinaryOperator 0x5634745826a0 <col:29, col:54> '<dependent type>' '+'
| | |   |       |-DeclRefExpr 0x563474582600 <col:29> 'prevector::size_type':'Size' lvalue Var 0x5634745821e8 'new_size' 'prevector::size_type':'Size'
| | |   |       `-ParenExpr 0x563474582680 <col:40, col:54> '<dependent type>'
| | |   |         `-BinaryOperator 0x563474582660 <col:41, col:53> '<dependent type>' '>>'
| | |   |           |-DeclRefExpr 0x563474582620 <col:41> 'prevector::size_type':'Size' lvalue Var 0x5634745821e8 'new_size' 'prevector::size_type':'Size'
| | |   |           `-IntegerLiteral 0x563474582640 <col:53> 'int' 1
| | |   |-DeclStmt 0x563474582860 <line:361:9, col:29>
| | |   | `-VarDecl 0x563474582740 <col:9, col:28> col:12 referenced ptr 'T *' cinit
| | |   |   `-CallExpr 0x563474582838 <col:18, col:28> '<dependent type>'
| | |   |     |-UnresolvedMemberExpr 0x5634745827b8 <col:18> '<bound member function type>' lvalue
| | |   |     `-DeclRefExpr 0x563474582818 <col:27> 'prevector::size_type':'Size' lvalue Var 0x563474582088 'p' 'prevector::size_type':'Size'
| | |   |-CallExpr 0x563474582a48 <line:362:9, col:59> '<dependent type>'
| | |   | |-UnresolvedLookupExpr 0x563474582878 <col:9> '<overloaded function type>' lvalue (ADL) = 'memmove' empty
| | |   | |-BinaryOperator 0x5634745828f8 <col:17, col:23> '<dependent type>' '+'
| | |   | | |-DeclRefExpr 0x5634745828b8 <col:17> 'T *' lvalue Var 0x563474582740 'ptr' 'T *'
| | |   | | `-DeclRefExpr 0x5634745828d8 <col:23> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564460 'count' 'prevector::size_type':'Size'
| | |   | |-DeclRefExpr 0x563474582918 <col:30> 'T *' lvalue Var 0x563474582740 'ptr' 'T *'
| | |   | `-BinaryOperator 0x563474582a28 <col:35, col:58> '<dependent type>' '*'
| | |   |   |-ParenExpr 0x5634745829d8 <col:35, col:46> '<dependent type>'
| | |   |   | `-BinaryOperator 0x5634745829b8 <col:36, col:45> '<dependent type>' '-'
| | |   |   |   |-CallExpr 0x563474582978 <col:36, col:41> '<dependent type>'
| | |   |   |   | `-MemberExpr 0x563474582948 <col:36> '<bound member function type>' ->size 0x5634745605b8
| | |   |   |   |   `-CXXThisExpr 0x563474582938 <col:36> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |   |   `-DeclRefExpr 0x563474582998 <col:45> 'prevector::size_type':'Size' lvalue Var 0x563474582088 'p' 'prevector::size_type':'Size'
| | |   |   `-UnaryExprOrTypeTraitExpr 0x563474582a08 <col:50, col:58> 'unsigned long' sizeof 'T'
| | |   |-CompoundAssignOperator 0x563474582ae0 <line:363:9, col:18> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |   | |-MemberExpr 0x563474582a90 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |   | | `-CXXThisExpr 0x563474582a80 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |   | `-DeclRefExpr 0x563474582ac0 <col:18> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564460 'count' 'prevector::size_type':'Size'
| | |   `-CallExpr 0x563474582c70 <line:364:9, col:39> '<dependent type>'
| | |     |-UnresolvedMemberExpr 0x563474582b20 <col:9> '<bound member function type>' lvalue
| | |     |-CallExpr 0x563474582c08 <col:14, col:24> '<dependent type>'
| | |     | |-UnresolvedMemberExpr 0x563474582b88 <col:14> '<bound member function type>' lvalue
| | |     | `-DeclRefExpr 0x563474582be8 <col:23> 'prevector::size_type':'Size' lvalue Var 0x563474582088 'p' 'prevector::size_type':'Size'
| | |     |-DeclRefExpr 0x563474582c30 <col:27> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564460 'count' 'prevector::size_type':'Size'
| | |     `-DeclRefExpr 0x563474582c50 <col:34> 'const T' lvalue ParmVar 0x5634745644d8 'value' 'const T &'
| | |-FunctionTemplateDecl 0x563474564a08 <line:367:5, line:379:5> line:368:10 insert
| | | |-TemplateTypeParmDecl 0x5634745646b0 <line:367:14, col:23> col:23 referenced typename depth 1 index 0 InputIterator
| | | `-CXXMethodDecl 0x563474564968 <line:368:5, line:379:5> line:368:10 insert 'void (prevector::iterator, InputIterator, InputIterator)'
| | |   |-ParmVarDecl 0x563474564750 <col:17, col:26> col:26 referenced pos 'prevector::iterator'
| | |   |-ParmVarDecl 0x5634745647c8 <col:31, col:45> col:45 referenced first 'InputIterator'
| | |   |-ParmVarDecl 0x563474564840 <col:52, col:66> col:66 referenced last 'InputIterator'
| | |   `-CompoundStmt 0x563474583770 <col:72, line:379:5>
| | |     |-DeclStmt 0x563474582e38 <line:369:9, col:36>
| | |     | `-VarDecl 0x563474582d00 <col:9, col:35> col:19 referenced p 'prevector::size_type':'Size' cinit
| | |     |   `-BinaryOperator 0x563474582e18 <col:23, col:35> '<dependent type>' '-'
| | |     |     |-DeclRefExpr 0x563474582d68 <col:23> 'prevector::iterator' lvalue ParmVar 0x563474564750 'pos' 'prevector::iterator'
| | |     |     `-CallExpr 0x563474582df8 <col:29, col:35> '<dependent type>'
| | |     |       `-UnresolvedMemberExpr 0x563474582d98 <col:29> '<bound member function type>' lvalue
| | |     |-DeclStmt 0x563474582f28 <line:370:9, col:45>
| | |     | `-VarDecl 0x563474582e60 <col:9, col:40> col:25 referenced count 'prevector::difference_type':'Diff' cinit
| | |     |   `-BinaryOperator 0x563474582f08 <col:33, col:40> '<dependent type>' '-'
| | |     |     |-DeclRefExpr 0x563474582ec8 <col:33> 'InputIterator' lvalue ParmVar 0x563474564840 'last' 'InputIterator'
| | |     |     `-DeclRefExpr 0x563474582ee8 <col:40> 'InputIterator' lvalue ParmVar 0x5634745647c8 'first' 'InputIterator'
| | |     |-DeclStmt 0x563474583058 <line:371:9, col:44>
| | |     | `-VarDecl 0x563474582f50 <col:9, col:39> col:19 referenced new_size 'prevector::size_type':'Size' cinit
| | |     |   `-BinaryOperator 0x563474583038 <col:30, col:39> '<dependent type>' '+'
| | |     |     |-CallExpr 0x563474582ff8 <col:30, col:35> '<dependent type>'
| | |     |     | `-MemberExpr 0x563474582fc8 <col:30> '<bound member function type>' ->size 0x5634745605b8
| | |     |     |   `-CXXThisExpr 0x563474582fb8 <col:30> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |     `-DeclRefExpr 0x563474583018 <col:39> 'prevector::difference_type':'Diff' lvalue Var 0x563474582e60 'count' 'prevector::difference_type':'Diff'
| | |     |-IfStmt 0x5634745831f8 <line:372:9, line:374:9>
| | |     | |-OpaqueValueExpr 0x5634745831e0 <<invalid sloc>> 'bool'
| | |     | `-CompoundStmt 0x5634745831c8 <line:372:36, line:374:9>
| | |     |   `-CallExpr 0x5634745831a0 <line:373:13, col:55> '<dependent type>'
| | |     |     |-MemberExpr 0x5634745830b0 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |     |     | `-CXXThisExpr 0x5634745830a0 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |     `-BinaryOperator 0x563474583180 <col:29, col:54> '<dependent type>' '+'
| | |     |       |-DeclRefExpr 0x5634745830e0 <col:29> 'prevector::size_type':'Size' lvalue Var 0x563474582f50 'new_size' 'prevector::size_type':'Size'
| | |     |       `-ParenExpr 0x563474583160 <col:40, col:54> '<dependent type>'
| | |     |         `-BinaryOperator 0x563474583140 <col:41, col:53> '<dependent type>' '>>'
| | |     |           |-DeclRefExpr 0x563474583100 <col:41> 'prevector::size_type':'Size' lvalue Var 0x563474582f50 'new_size' 'prevector::size_type':'Size'
| | |     |           `-IntegerLiteral 0x563474583120 <col:53> 'int' 1
| | |     |-DeclStmt 0x563474583340 <line:375:9, col:29>
| | |     | `-VarDecl 0x563474583220 <col:9, col:28> col:12 referenced ptr 'T *' cinit
| | |     |   `-CallExpr 0x563474583318 <col:18, col:28> '<dependent type>'
| | |     |     |-UnresolvedMemberExpr 0x563474583298 <col:18> '<bound member function type>' lvalue
| | |     |     `-DeclRefExpr 0x5634745832f8 <col:27> 'prevector::size_type':'Size' lvalue Var 0x563474582d00 'p' 'prevector::size_type':'Size'
| | |     |-CallExpr 0x563474583528 <line:376:9, col:59> '<dependent type>'
| | |     | |-UnresolvedLookupExpr 0x563474583358 <col:9> '<overloaded function type>' lvalue (ADL) = 'memmove' empty
| | |     | |-BinaryOperator 0x5634745833d8 <col:17, col:23> '<dependent type>' '+'
| | |     | | |-DeclRefExpr 0x563474583398 <col:17> 'T *' lvalue Var 0x563474583220 'ptr' 'T *'
| | |     | | `-DeclRefExpr 0x5634745833b8 <col:23> 'prevector::difference_type':'Diff' lvalue Var 0x563474582e60 'count' 'prevector::difference_type':'Diff'
| | |     | |-DeclRefExpr 0x5634745833f8 <col:30> 'T *' lvalue Var 0x563474583220 'ptr' 'T *'
| | |     | `-BinaryOperator 0x563474583508 <col:35, col:58> '<dependent type>' '*'
| | |     |   |-ParenExpr 0x5634745834b8 <col:35, col:46> '<dependent type>'
| | |     |   | `-BinaryOperator 0x563474583498 <col:36, col:45> '<dependent type>' '-'
| | |     |   |   |-CallExpr 0x563474583458 <col:36, col:41> '<dependent type>'
| | |     |   |   | `-MemberExpr 0x563474583428 <col:36> '<bound member function type>' ->size 0x5634745605b8
| | |     |   |   |   `-CXXThisExpr 0x563474583418 <col:36> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |   |   `-DeclRefExpr 0x563474583478 <col:45> 'prevector::size_type':'Size' lvalue Var 0x563474582d00 'p' 'prevector::size_type':'Size'
| | |     |   `-UnaryExprOrTypeTraitExpr 0x5634745834e8 <col:50, col:58> 'unsigned long' sizeof 'T'
| | |     |-CompoundAssignOperator 0x563474583640 <line:377:9, col:18> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |     | |-MemberExpr 0x5634745835f0 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |     | | `-CXXThisExpr 0x563474583560 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |     | `-DeclRefExpr 0x563474583620 <col:18> 'prevector::difference_type':'Diff' lvalue Var 0x563474582e60 'count' 'prevector::difference_type':'Diff'
| | |     `-CallExpr 0x563474583738 <line:378:9, col:30> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0x563474583680 <col:9> '<bound member function type>' lvalue
| | |       |-DeclRefExpr 0x5634745836d8 <col:14> 'T *' lvalue Var 0x563474583220 'ptr' 'T *'
| | |       |-DeclRefExpr 0x5634745836f8 <col:19> 'InputIterator' lvalue ParmVar 0x5634745647c8 'first' 'InputIterator'
| | |       `-DeclRefExpr 0x563474583718 <col:26> 'InputIterator' lvalue ParmVar 0x563474564840 'last' 'InputIterator'
| | |-CXXMethodDecl 0x563474564b18 <line:381:5, line:394:5> line:381:17 resize_uninitialized 'void (prevector::size_type)' inline
| | | |-ParmVarDecl 0x563474564a88 <col:38, col:48> col:48 referenced new_size 'prevector::size_type':'Size'
| | | `-CompoundStmt 0x563474583de0 <col:58, line:394:5>
| | |   |-IfStmt 0x5634745839d8 <line:384:9, line:388:9>
| | |   | |-OpaqueValueExpr 0x5634745839c0 <<invalid sloc>> 'bool'
| | |   | `-CompoundStmt 0x563474583998 <line:384:36, line:388:9>
| | |   |   |-CallExpr 0x563474583850 <line:385:13, col:37> '<dependent type>'
| | |   |   | |-MemberExpr 0x563474583800 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |   |   | | `-CXXThisExpr 0x5634745837f0 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |   | `-DeclRefExpr 0x563474583830 <col:29> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564a88 'new_size' 'prevector::size_type':'Size'
| | |   |   |-CompoundAssignOperator 0x563474583958 <line:386:13, col:38> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |   |   | |-MemberExpr 0x563474583888 <col:13> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |   |   | | `-CXXThisExpr 0x563474583878 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |   | `-BinaryOperator 0x563474583938 <col:22, col:38> '<dependent type>' '-'
| | |   |   |   |-DeclRefExpr 0x5634745838b8 <col:22> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564a88 'new_size' 'prevector::size_type':'Size'
| | |   |   |   `-CallExpr 0x563474583918 <col:33, col:38> '<dependent type>'
| | |   |   |     `-MemberExpr 0x5634745838e8 <col:33> '<bound member function type>' ->size 0x5634745605b8
| | |   |   |       `-CXXThisExpr 0x5634745838d8 <col:33> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |   `-ReturnStmt 0x563474583988 <line:387:13>
| | |   `-IfStmt 0x563474583db8 <line:389:9, line:393:9> has_else
| | |     |-BinaryOperator 0x563474583a70 <line:389:13, col:29> '<dependent type>' '<'
| | |     | |-DeclRefExpr 0x5634745839f0 <col:13> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564a88 'new_size' 'prevector::size_type':'Size'
| | |     | `-CallExpr 0x563474583a50 <col:24, col:29> '<dependent type>'
| | |     |   `-MemberExpr 0x563474583a20 <col:24> '<bound member function type>' ->size 0x5634745605b8
| | |     |     `-CXXThisExpr 0x563474583a10 <col:24> 'prevector<N, T, Size, Diff> *' implicit this
| | |     |-CompoundStmt 0x563474583c78 <col:32, line:391:9>
| | |     | `-CallExpr 0x563474583c48 <line:390:13, col:44> '<dependent type>'
| | |     |   |-UnresolvedMemberExpr 0x563474583aa0 <col:13> '<bound member function type>' lvalue
| | |     |   |-CallExpr 0x563474583b90 <col:19, col:36> '<dependent type>'
| | |     |   | |-UnresolvedMemberExpr 0x563474583b10 <col:19> '<bound member function type>' lvalue
| | |     |   | `-DeclRefExpr 0x563474583b70 <col:28> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564a88 'new_size' 'prevector::size_type':'Size'
| | |     |   `-CallExpr 0x563474583c28 <col:39, col:43> '<dependent type>'
| | |     |     `-UnresolvedMemberExpr 0x563474583bc8 <col:39> '<bound member function type>' lvalue
| | |     `-CompoundStmt 0x563474583da0 <line:391:16, line:393:9>
| | |       `-CompoundAssignOperator 0x563474583d70 <line:392:13, col:38> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |         |-MemberExpr 0x563474583ca0 <col:13> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |         | `-CXXThisExpr 0x563474583c90 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |         `-BinaryOperator 0x563474583d50 <col:22, col:38> '<dependent type>' '-'
| | |           |-DeclRefExpr 0x563474583cd0 <col:22> 'prevector::size_type':'Size' lvalue ParmVar 0x563474564a88 'new_size' 'prevector::size_type':'Size'
| | |           `-CallExpr 0x563474583d30 <col:33, col:38> '<dependent type>'
| | |             `-MemberExpr 0x563474583d00 <col:33> '<bound member function type>' ->size 0x5634745605b8
| | |               `-CXXThisExpr 0x563474583cf0 <col:33> 'prevector<N, T, Size, Diff> *' implicit this
| | |-CXXMethodDecl 0x563474564c98 <line:396:5, line:398:5> line:396:14 erase 'prevector::iterator (prevector::iterator)'
| | | |-ParmVarDecl 0x563474564bd0 <col:20, col:29> col:29 referenced pos 'prevector::iterator'
| | | `-CompoundStmt 0x563474583f30 <col:34, line:398:5>
| | |   `-ReturnStmt 0x563474583f20 <line:397:9, col:34>
| | |     `-CallExpr 0x563474583ef0 <col:16, col:34> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0x563474583e10 <col:16> '<bound member function type>' lvalue
| | |       |-DeclRefExpr 0x563474583e70 <col:22> 'prevector::iterator' lvalue ParmVar 0x563474564bd0 'pos' 'prevector::iterator'
| | |       `-BinaryOperator 0x563474583ed0 <col:27, col:33> '<dependent type>' '+'
| | |         |-DeclRefExpr 0x563474583e90 <col:27> 'prevector::iterator' lvalue ParmVar 0x563474564bd0 'pos' 'prevector::iterator'
| | |         `-IntegerLiteral 0x563474583eb0 <col:33> 'int' 1
| | |-CXXMethodDecl 0x563474568fe0 <line:400:5, line:420:5> line:400:14 erase 'prevector::iterator (prevector::iterator, prevector::iterator)'
| | | |-ParmVarDecl 0x563474564d50 <col:20, col:29> col:29 referenced first 'prevector::iterator'
| | | |-ParmVarDecl 0x563474564dc8 <col:36, col:45> col:45 referenced last 'prevector::iterator'
| | | `-CompoundStmt 0x563474584930 <col:51, line:420:5>
| | |   |-DeclStmt 0x563474583fe0 <line:407:9, col:27>
| | |   | `-VarDecl 0x563474583f58 <col:9, col:22> col:18 referenced p 'prevector::iterator' cinit
| | |   |   `-DeclRefExpr 0x563474583fc0 <col:22> 'prevector::iterator' lvalue ParmVar 0x563474564d50 'first' 'prevector::iterator'
| | |   |-DeclStmt 0x563474584198 <line:408:9, col:38>
| | |   | `-VarDecl 0x563474584010 <col:9, col:37> col:15 referenced endp 'char *' cinit
| | |   |   `-CStyleCastExpr 0x563474584170 <col:22, col:37> 'char *' <Dependent>
| | |   |     `-UnaryOperator 0x563474584140 <col:29, col:37> '<dependent type>' prefix '&' cannot overflow
| | |   |       `-ParenExpr 0x563474584120 <col:30, col:37> '<dependent type>'
| | |   |         `-UnaryOperator 0x563474584108 <col:31, col:36> '<dependent type>' prefix '*' cannot overflow
| | |   |           `-CallExpr 0x5634745840e8 <col:32, col:36> '<dependent type>'
| | |   |             `-UnresolvedMemberExpr 0x563474584088 <col:32> '<bound member function type>' lvalue
| | |   |-IfStmt 0x563474584510 <line:409:9, line:417:9> has_else
| | |   | |-OpaqueValueExpr 0x5634745844f8 <<invalid sloc>> 'bool'
| | |   | |-CompoundStmt 0x5634745843f8 <line:409:56, line:415:9>
| | |   | | `-WhileStmt 0x5634745843e0 <line:410:13, line:414:13>
| | |   | |   |-BinaryOperator 0x563474584210 <line:410:20, col:25> '<dependent type>' '!='
| | |   | |   | |-DeclRefExpr 0x5634745841d0 <col:20> 'prevector::iterator' lvalue Var 0x563474583f58 'p' 'prevector::iterator'
| | |   | |   | `-DeclRefExpr 0x5634745841f0 <col:25> 'prevector::iterator' lvalue ParmVar 0x563474564dc8 'last' 'prevector::iterator'
| | |   | |   `-CompoundStmt 0x5634745843b8 <col:31, line:414:13>
| | |   | |     |-CallExpr 0x5634745842e8 <line:411:17, col:25> 'void'
| | |   | |     | `-CXXPseudoDestructorExpr 0x563474584298 <col:17, col:23> '<bound member function type>'
| | |   | |     |   `-ParenExpr 0x563474584268 <col:17, col:20> '<dependent type>'
| | |   | |     |     `-UnaryOperator 0x563474584250 <col:18, col:19> '<dependent type>' prefix '*' cannot overflow
| | |   | |     |       `-DeclRefExpr 0x563474584230 <col:19> 'prevector::iterator' lvalue Var 0x563474583f58 'p' 'prevector::iterator'
| | |   | |     |-UnaryOperator 0x563474584368 <line:412:17, col:22> '<dependent type>' postfix '--' cannot overflow
| | |   | |     | `-MemberExpr 0x563474584318 <col:17> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |   | |     |   `-CXXThisExpr 0x563474584308 <col:17> 'prevector<N, T, Size, Diff> *' implicit this
| | |   | |     `-UnaryOperator 0x5634745843a0 <line:413:17, col:19> '<dependent type>' prefix '++' cannot overflow
| | |   | |       `-DeclRefExpr 0x563474584380 <col:19> 'prevector::iterator' lvalue Var 0x563474583f58 'p' 'prevector::iterator'
| | |   | `-CompoundStmt 0x5634745844e0 <line:415:16, line:417:9>
| | |   |   `-CompoundAssignOperator 0x5634745844b0 <line:416:13, col:29> '<dependent type>' lvalue '-=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
| | |   |     |-MemberExpr 0x563474584420 <col:13> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |   |     | `-CXXThisExpr 0x563474584410 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-BinaryOperator 0x563474584490 <col:22, col:29> '<dependent type>' '-'
| | |   |       |-DeclRefExpr 0x563474584450 <col:22> 'prevector::iterator' lvalue ParmVar 0x563474564dc8 'last' 'prevector::iterator'
| | |   |       `-DeclRefExpr 0x563474584470 <col:29> 'prevector::iterator' lvalue Var 0x563474583f58 'p' 'prevector::iterator'
| | |   |-CallExpr 0x5634745848c8 <line:418:9, col:64> '<dependent type>'
| | |   | |-UnresolvedLookupExpr 0x563474584538 <col:9> '<overloaded function type>' lvalue (ADL) = 'memmove' empty
| | |   | |-UnaryOperator 0x5634745845d0 <col:17, col:25> '<dependent type>' prefix '&' cannot overflow
| | |   | | `-ParenExpr 0x5634745845b0 <col:18, col:25> '<dependent type>'
| | |   | |   `-UnaryOperator 0x563474584598 <col:19, col:20> '<dependent type>' prefix '*' cannot overflow
| | |   | |     `-DeclRefExpr 0x563474584578 <col:20> 'prevector::iterator' lvalue ParmVar 0x563474564d50 'first' 'prevector::iterator'
| | |   | |-UnaryOperator 0x563474584748 <col:28, col:35> '<dependent type>' prefix '&' cannot overflow
| | |   | | `-ParenExpr 0x563474584728 <col:29, col:35> '<dependent type>'
| | |   | |   `-UnaryOperator 0x563474584710 <col:30, col:31> '<dependent type>' prefix '*' cannot overflow
| | |   | |     `-DeclRefExpr 0x5634745846f0 <col:31> 'prevector::iterator' lvalue ParmVar 0x563474564dc8 'last' 'prevector::iterator'
| | |   | `-BinaryOperator 0x5634745848a8 <col:38, col:63> 'long' '-'
| | |   |   |-ImplicitCastExpr 0x563474584890 <col:38> 'char *' <LValueToRValue>
| | |   |   | `-DeclRefExpr 0x563474584760 <col:38> 'char *' lvalue Var 0x563474584010 'endp' 'char *'
| | |   |   `-ParenExpr 0x563474584870 <col:45, col:63> 'char *'
| | |   |     `-CStyleCastExpr 0x563474584848 <col:46, col:62> 'char *' <Dependent>
| | |   |       `-ParenExpr 0x563474584828 <col:53, col:62> '<dependent type>'
| | |   |         `-UnaryOperator 0x5634745847d8 <col:54, col:61> '<dependent type>' prefix '&' cannot overflow
| | |   |           `-ParenExpr 0x5634745847b8 <col:55, col:61> '<dependent type>'
| | |   |             `-UnaryOperator 0x5634745847a0 <col:56, col:57> '<dependent type>' prefix '*' cannot overflow
| | |   |               `-DeclRefExpr 0x563474584780 <col:57> 'prevector::iterator' lvalue ParmVar 0x563474564dc8 'last' 'prevector::iterator'
| | |   `-ReturnStmt 0x563474584920 <line:419:9, col:16>
| | |     `-DeclRefExpr 0x563474584900 <col:16> 'prevector::iterator' lvalue ParmVar 0x563474564d50 'first' 'prevector::iterator'
| | |-CXXMethodDecl 0x563474569198 <line:422:5, line:429:5> line:422:10 push_back 'void (const T &)'
| | | |-ParmVarDecl 0x5634745690a0 <col:20, col:29> col:29 referenced value 'const T &'
| | | `-CompoundStmt 0x563474584e40 <col:36, line:429:5>
| | |   |-DeclStmt 0x563474584a80 <line:423:9, col:40>
| | |   | `-VarDecl 0x563474584978 <col:9, col:39> col:19 referenced new_size 'prevector::size_type':'Size' cinit
| | |   |   `-BinaryOperator 0x563474584a60 <col:30, col:39> '<dependent type>' '+'
| | |   |     |-CallExpr 0x563474584a20 <col:30, col:35> '<dependent type>'
| | |   |     | `-MemberExpr 0x5634745849f0 <col:30> '<bound member function type>' ->size 0x5634745605b8
| | |   |     |   `-CXXThisExpr 0x5634745849e0 <col:30> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-IntegerLiteral 0x563474584a40 <col:39> 'int' 1
| | |   |-IfStmt 0x563474584c20 <line:424:9, line:426:9>
| | |   | |-OpaqueValueExpr 0x563474584c08 <<invalid sloc>> 'bool'
| | |   | `-CompoundStmt 0x563474584bf0 <line:424:36, line:426:9>
| | |   |   `-CallExpr 0x563474584bc8 <line:425:13, col:55> '<dependent type>'
| | |   |     |-MemberExpr 0x563474584ad8 <col:13> '<bound member function type>' ->change_capacity 0x563474556668
| | |   |     | `-CXXThisExpr 0x563474584ac8 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   |     `-BinaryOperator 0x563474584ba8 <col:29, col:54> '<dependent type>' '+'
| | |   |       |-DeclRefExpr 0x563474584b08 <col:29> 'prevector::size_type':'Size' lvalue Var 0x563474584978 'new_size' 'prevector::size_type':'Size'
| | |   |       `-ParenExpr 0x563474584b88 <col:40, col:54> '<dependent type>'
| | |   |         `-BinaryOperator 0x563474584b68 <col:41, col:53> '<dependent type>' '>>'
| | |   |           |-DeclRefExpr 0x563474584b28 <col:41> 'prevector::size_type':'Size' lvalue Var 0x563474584978 'new_size' 'prevector::size_type':'Size'
| | |   |           `-IntegerLiteral 0x563474584b48 <col:53> 'int' 1
| | |   |-CXXNewExpr 0x563474584d80 <line:427:9, col:38> 'T *'
| | |   | |-ParenListExpr 0x563474584d50 <col:32, col:38> 'NULL TYPE'
| | |   | | `-DeclRefExpr 0x563474584d30 <col:33> 'const T' lvalue ParmVar 0x5634745690a0 'value' 'const T &'
| | |   | `-CallExpr 0x563474584d08 <col:13, col:28> '<dependent type>'
| | |   |   |-UnresolvedMemberExpr 0x563474584c48 <col:13> '<bound member function type>' lvalue
| | |   |   `-CallExpr 0x563474584ce8 <col:22, col:27> '<dependent type>'
| | |   |     `-MemberExpr 0x563474584cb8 <col:22> '<bound member function type>' ->size 0x5634745605b8
| | |   |       `-CXXThisExpr 0x563474584ca8 <col:22> 'prevector<N, T, Size, Diff> *' implicit this
| | |   `-UnaryOperator 0x563474584e28 <line:428:9, col:14> '<dependent type>' postfix '++' cannot overflow
| | |     `-MemberExpr 0x563474584dd8 <col:9> 'prevector::size_type':'Size' lvalue ->_size 0x563474554258
| | |       `-CXXThisExpr 0x563474584dc8 <col:9> 'prevector<N, T, Size, Diff> *' implicit this
| | |-CXXMethodDecl 0x563474569260 <line:431:5, line:433:5> line:431:10 pop_back 'void ()'
| | | `-CompoundStmt 0x563474585070 <col:21, line:433:5>
| | |   `-CallExpr 0x563474585040 <line:432:9, col:31> '<dependent type>'
| | |     |-UnresolvedMemberExpr 0x563474584e80 <col:9> '<bound member function type>' lvalue
| | |     |-BinaryOperator 0x563474584f90 <col:15, col:23> '<dependent type>' '-'
| | |     | |-CallExpr 0x563474584f50 <col:15, col:19> '<dependent type>'
| | |     | | `-UnresolvedMemberExpr 0x563474584ef0 <col:15> '<bound member function type>' lvalue
| | |     | `-IntegerLiteral 0x563474584f70 <col:23> 'int' 1
| | |     `-CallExpr 0x563474585020 <col:26, col:30> '<dependent type>'
| | |       `-UnresolvedMemberExpr 0x563474584fc0 <col:26> '<bound member function type>' lvalue
| | |-CXXMethodDecl 0x563474569320 <line:435:5, line:437:5> line:435:8 front 'T &()'
| | | `-CompoundStmt 0x563474585168 <col:16, line:437:5>
| | |   `-ReturnStmt 0x563474585158 <line:436:9, col:27>
| | |     `-UnaryOperator 0x563474585140 <col:16, col:27> '<dependent type>' prefix '*' cannot overflow
| | |       `-CallExpr 0x563474585118 <col:17, col:27> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x563474585098 <col:17> '<bound member function type>' lvalue
| | |         `-IntegerLiteral 0x5634745850f8 <col:26> 'int' 0
| | |-CXXMethodDecl 0x5634745693e0 <line:439:5, line:441:5> line:439:14 front 'const T &() const'
| | | `-CompoundStmt 0x563474585260 <col:28, line:441:5>
| | |   `-ReturnStmt 0x563474585250 <line:440:9, col:27>
| | |     `-UnaryOperator 0x563474585238 <col:16, col:27> '<dependent type>' prefix '*' cannot overflow
| | |       `-CallExpr 0x563474585210 <col:17, col:27> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x563474585190 <col:17> '<bound member function type>' lvalue
| | |         `-IntegerLiteral 0x5634745851f0 <col:26> 'int' 0
| | |-CXXMethodDecl 0x5634745694a0 <line:443:5, line:445:5> line:443:8 back 'T &()'
| | | `-CompoundStmt 0x5634745853d8 <col:15, line:445:5>
| | |   `-ReturnStmt 0x5634745853c8 <line:444:9, col:36>
| | |     `-UnaryOperator 0x5634745853b0 <col:16, col:36> '<dependent type>' prefix '*' cannot overflow
| | |       `-CallExpr 0x563474585388 <col:17, col:36> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x563474585288 <col:17> '<bound member function type>' lvalue
| | |         `-BinaryOperator 0x563474585368 <col:26, col:35> '<dependent type>' '-'
| | |           |-CallExpr 0x563474585328 <col:26, col:31> '<dependent type>'
| | |           | `-MemberExpr 0x5634745852f8 <col:26> '<bound member function type>' ->size 0x5634745605b8
| | |           |   `-CXXThisExpr 0x5634745852e8 <col:26> 'prevector<N, T, Size, Diff> *' implicit this
| | |           `-IntegerLiteral 0x563474585348 <col:35> 'int' 1
| | |-CXXMethodDecl 0x563474569560 <line:447:5, line:449:5> line:447:14 back 'const T &() const'
| | | `-CompoundStmt 0x563474585550 <col:27, line:449:5>
| | |   `-ReturnStmt 0x563474585540 <line:448:9, col:36>
| | |     `-UnaryOperator 0x563474585528 <col:16, col:36> '<dependent type>' prefix '*' cannot overflow
| | |       `-CallExpr 0x563474585500 <col:17, col:36> '<dependent type>'
| | |         |-UnresolvedMemberExpr 0x563474585400 <col:17> '<bound member function type>' lvalue
| | |         `-BinaryOperator 0x5634745854e0 <col:26, col:35> '<dependent type>' '-'
| | |           |-CallExpr 0x5634745854a0 <col:26, col:31> '<dependent type>'
| | |           | `-MemberExpr 0x563474585470 <col:26> '<bound member function type>' ->size 0x5634745605b8
| | |           |   `-CXXThisExpr 0x563474585460 <col:26> 'const prevector<N, T, Size, Diff> *' implicit this
| | |           `-IntegerLiteral 0x5634745854c0 <col:35> 'int' 1
| | |-CXXMethodDecl 0x5634745698e8 <line:451:5, line:454:5> line:451:10 referenced swap 'void (prevector<N, T, Size, Diff> &)'
| | | |-ParmVarDecl 0x5634745697f8 <col:15, col:44> col:44 referenced other 'prevector<N, T, Size, Diff> &'
| | | `-CompoundStmt 0x5634745856b8 <col:51, line:454:5>
| | |-CXXDestructorDecl 0x5634745699d8 <line:456:5, line:464:5> line:456:5 ~prevector<N, T, Size, Diff> 'void ()'
| | | `-CompoundStmt 0x563474585ee0 <col:18, line:464:5>
| | |   |-IfStmt 0x563474585c70 <line:457:9, line:459:9>
| | |   | |-OpaqueValueExpr 0x563474585c58 <<invalid sloc>> 'bool'
| | |   | `-CompoundStmt 0x563474585c40 <line:457:56, line:459:9>
| | |   |   `-CallExpr 0x563474585c20 <line:458:13, col:19> '<dependent type>'
| | |   |     `-MemberExpr 0x563474585bf0 <col:13> '<bound member function type>' ->clear 0x5634745640e8
| | |   |       `-CXXThisExpr 0x563474585be0 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |   `-IfStmt 0x563474585ec8 <line:460:9, line:463:9>
| | |     |-UnaryOperator 0x563474585ce8 <line:460:13, col:24> '<dependent type>' prefix '!' cannot overflow
| | |     | `-CallExpr 0x563474585cc8 <col:14, col:24> '<dependent type>'
| | |     |   `-MemberExpr 0x563474585c98 <col:14> '<bound member function type>' ->is_direct 0x5634745564c8
| | |     |     `-CXXThisExpr 0x563474585c88 <col:14> 'prevector<N, T, Size, Diff> *' implicit this
| | |     `-CompoundStmt 0x563474585ea8 <col:27, line:463:9>
| | |       |-CallExpr 0x563474585dc8 <line:461:13, col:33> '<dependent type>'
| | |       | |-UnresolvedLookupExpr 0x563474585d00 <col:13> '<overloaded function type>' lvalue (ADL) = 'free' empty
| | |       | `-CXXDependentScopeMemberExpr 0x563474585d80 <col:18, col:25> '<dependent type>' lvalue .indirect
| | |       |   `-MemberExpr 0x563474585d50 <col:18> 'union direct_or_indirect':'prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |       |     `-CXXThisExpr 0x563474585d40 <col:18> 'prevector<N, T, Size, Diff> *' implicit this
| | |       `-BinaryOperator 0x563474585e88 <line:462:13, col:31> '<dependent type>' '='
| | |         |-CXXDependentScopeMemberExpr 0x563474585e30 <col:13, col:20> '<dependent type>' lvalue .indirect
| | |         | `-MemberExpr 0x563474585e00 <col:13> 'union direct_or_indirect':'prevector::direct_or_indirect' lvalue ->_union 0x563474555da8
| | |         |   `-CXXThisExpr 0x563474585df0 <col:13> 'prevector<N, T, Size, Diff> *' implicit this
| | |         `-CXXNullPtrLiteralExpr 0x563474585e78 <col:31> 'nullptr_t'
| | |-CXXMethodDecl 0x563474569d78 <line:466:5, line:481:5> line:466:10 operator== 'bool (const prevector<N, T, Size, Diff> &) const'
| | | |-ParmVarDecl 0x563474569c88 <col:21, col:56> col:56 referenced other 'const prevector<N, T, Size, Diff> &'
| | | `-CompoundStmt 0x563474586650 <col:69, line:481:5>
| | |   |-IfStmt 0x563474586040 <line:467:9, line:469:9>
| | |   | |-BinaryOperator 0x563474585fe8 <line:467:13, col:34> '<dependent type>' '!='
| | |   | | |-CallExpr 0x563474585f68 <col:13, col:24> '<dependent type>'
| | |   | | | `-CXXDependentScopeMemberExpr 0x563474585f20 <col:13, col:19> '<dependent type>' lvalue .size
| | |   | | |   `-DeclRefExpr 0x563474585f00 <col:13> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x563474569c88 'other' 'const prevector<N, T, Size, Diff> &'
| | |   | | `-CallExpr 0x563474585fc8 <col:29, col:34> '<dependent type>'
| | |   | |   `-MemberExpr 0x563474585f98 <col:29> '<bound member function type>' ->size 0x5634745605b8
| | |   | |     `-CXXThisExpr 0x563474585f88 <col:29> 'const prevector<N, T, Size, Diff> *' implicit this
| | |   | `-CompoundStmt 0x563474586028 <col:37, line:469:9>
| | |   |   `-ReturnStmt 0x563474586018 <line:468:13, col:20>
| | |   |     `-CXXBoolLiteralExpr 0x563474586008 <col:20> 'bool' false
| | |   |-DeclStmt 0x563474586160 <line:470:9, col:36>
| | |   | `-VarDecl 0x563474586068 <col:9, col:35> col:24 referenced b1 'prevector::const_iterator' cinit
| | |   |   `-CallExpr 0x563474586140 <col:29, col:35> '<dependent type>'
| | |   |     `-UnresolvedMemberExpr 0x5634745860e0 <col:29> '<bound member function type>' lvalue
| | |   |-DeclStmt 0x563474586278 <line:471:9, col:42>
| | |   | `-VarDecl 0x563474586188 <col:9, col:41> col:24 referenced b2 'prevector::const_iterator' cinit
| | |   |   `-CallExpr 0x563474586258 <col:29, col:41> '<dependent type>'
| | |   |     `-CXXDependentScopeMemberExpr 0x563474586210 <col:29, col:35> '<dependent type>' lvalue .begin
| | |   |       `-DeclRefExpr 0x5634745861f0 <col:29> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x563474569c88 'other' 'const prevector<N, T, Size, Diff> &'
| | |   |-DeclStmt 0x563474586398 <line:472:9, col:34>
| | |   | `-VarDecl 0x5634745862a0 <col:9, col:33> col:24 referenced e1 'prevector::const_iterator' cinit
| | |   |   `-CallExpr 0x563474586378 <col:29, col:33> '<dependent type>'
| | |   |     `-UnresolvedMemberExpr 0x563474586318 <col:29> '<bound member function type>' lvalue
| | |   |-WhileStmt 0x563474586618 <line:473:9, line:479:9>
| | |   | |-BinaryOperator 0x5634745863f0 <line:473:16, col:22> '<dependent type>' '!='
| | |   | | |-DeclRefExpr 0x5634745863b0 <col:16> 'prevector::const_iterator' lvalue Var 0x563474586068 'b1' 'prevector::const_iterator'
| | |   | | `-DeclRefExpr 0x5634745863d0 <col:22> 'prevector::const_iterator' lvalue Var 0x5634745862a0 'e1' 'prevector::const_iterator'
| | |   | `-CompoundStmt 0x5634745865f0 <col:26, line:479:9>
| | |   |   |-IfStmt 0x563474586568 <line:474:13, line:476:13>
| | |   |   | |-BinaryOperator 0x563474586510 <line:474:17, col:30> '<dependent type>' '!='
| | |   |   | | |-ParenExpr 0x563474586470 <col:17, col:21> '<dependent type>'
| | |   |   | | | `-UnaryOperator 0x563474586458 <col:18, col:19> '<dependent type>' prefix '*' cannot overflow
| | |   |   | | |   `-DeclRefExpr 0x563474586438 <col:19> 'prevector::const_iterator' lvalue Var 0x563474586068 'b1' 'prevector::const_iterator'
| | |   |   | | `-ParenExpr 0x5634745864f0 <col:26, col:30> '<dependent type>'
| | |   |   | |   `-UnaryOperator 0x5634745864d8 <col:27, col:28> '<dependent type>' prefix '*' cannot overflow
| | |   |   | |     `-DeclRefExpr 0x5634745864b8 <col:28> 'prevector::const_iterator' lvalue Var 0x563474586188 'b2' 'prevector::const_iterator'
| | |   |   | `-CompoundStmt 0x563474586550 <col:33, line:476:13>
| | |   |   |   `-ReturnStmt 0x563474586540 <line:475:17, col:24>
| | |   |   |     `-CXXBoolLiteralExpr 0x563474586530 <col:24> 'bool' false
| | |   |   |-UnaryOperator 0x5634745865a0 <line:477:13, col:15> '<dependent type>' prefix '++' cannot overflow
| | |   |   | `-DeclRefExpr 0x563474586580 <col:15> 'prevector::const_iterator' lvalue Var 0x563474586068 'b1' 'prevector::const_iterator'
| | |   |   `-UnaryOperator 0x5634745865d8 <line:478:13, col:15> '<dependent type>' prefix '++' cannot overflow
| | |   |     `-DeclRefExpr 0x5634745865b8 <col:15> 'prevector::const_iterator' lvalue Var 0x563474586188 'b2' 'prevector::const_iterator'
| | |   `-ReturnStmt 0x563474586640 <line:480:9, col:16>
| | |     `-CXXBoolLiteralExpr 0x563474586630 <col:16> 'bool' true
| | |-CXXMethodDecl 0x56347456dcf8 <line:483:5, line:485:5> line:483:10 operator!= 'bool (const prevector<N, T, Size, Diff> &) const'
| | | |-ParmVarDecl 0x56347456dc30 <col:21, col:56> col:56 referenced other 'const prevector<N, T, Size, Diff> &'
| | | `-CompoundStmt 0x563474586740 <col:69, line:485:5>
| | |   `-ReturnStmt 0x563474586730 <line:484:9, col:32>
| | |     `-UnaryOperator 0x563474586718 <col:16, col:32> '<dependent type>' prefix '!' cannot overflow
| | |       `-ParenExpr 0x5634745866f8 <col:17, col:32> '<dependent type>'
| | |         `-BinaryOperator 0x5634745866d8 <col:18, col:27> '<dependent type>' '=='
| | |           |-UnaryOperator 0x5634745866a0 <col:18, col:19> '<dependent type>' prefix '*' cannot overflow
| | |           | `-CXXThisExpr 0x563474586690 <col:19> 'const prevector<N, T, Size, Diff> *' this
| | |           `-DeclRefExpr 0x5634745866b8 <col:27> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347456dc30 'other' 'const prevector<N, T, Size, Diff> &'
| | |-CXXMethodDecl 0x56347456e058 <line:487:5, line:508:5> line:487:10 operator< 'bool (const prevector<N, T, Size, Diff> &) const'
| | | |-ParmVarDecl 0x56347456df98 <col:20, col:55> col:55 referenced other 'const prevector<N, T, Size, Diff> &'
| | | `-CompoundStmt 0x563474588158 <col:68, line:508:5>
| | |   |-IfStmt 0x563474586898 <line:488:9, line:490:9>
| | |   | |-BinaryOperator 0x563474586840 <line:488:13, col:33> '<dependent type>' '<'
| | |   | | |-CallExpr 0x563474586798 <col:13, col:18> '<dependent type>'
| | |   | | | `-MemberExpr 0x563474586768 <col:13> '<bound member function type>' ->size 0x5634745605b8
| | |   | | |   `-CXXThisExpr 0x563474586758 <col:13> 'const prevector<N, T, Size, Diff> *' implicit this
| | |   | | `-CallExpr 0x563474586820 <col:22, col:33> '<dependent type>'
| | |   | |   `-CXXDependentScopeMemberExpr 0x5634745867d8 <col:22, col:28> '<dependent type>' lvalue .size
| | |   | |     `-DeclRefExpr 0x5634745867b8 <col:22> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347456df98 'other' 'const prevector<N, T, Size, Diff> &'
| | |   | `-CompoundStmt 0x563474586880 <col:36, line:490:9>
| | |   |   `-ReturnStmt 0x563474586870 <line:489:13, col:20>
| | |   |     `-CXXBoolLiteralExpr 0x563474586860 <col:20> 'bool' true
| | |   |-IfStmt 0x5634745869f0 <line:491:9, line:493:9>
| | |   | |-BinaryOperator 0x563474586998 <line:491:13, col:33> '<dependent type>' '>'
| | |   | | |-CallExpr 0x5634745868f0 <col:13, col:18> '<dependent type>'
| | |   | | | `-MemberExpr 0x5634745868c0 <col:13> '<bound member function type>' ->size 0x5634745605b8
| | |   | | |   `-CXXThisExpr 0x5634745868b0 <col:13> 'const prevector<N, T, Size, Diff> *' implicit this
| | |   | | `-CallExpr 0x563474586978 <col:22, col:33> '<dependent type>'
| | |   | |   `-CXXDependentScopeMemberExpr 0x563474586930 <col:22, col:28> '<dependent type>' lvalue .size
| | |   | |     `-DeclRefExpr 0x563474586910 <col:22> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347456df98 'other' 'const prevector<N, T, Size, Diff> &'
| | |   | `-CompoundStmt 0x5634745869d8 <col:36, line:493:9>
| | |   |   `-ReturnStmt 0x5634745869c8 <line:492:13, col:20>
| | |   |     `-CXXBoolLiteralExpr 0x5634745869b8 <col:20> 'bool' false
| | |   |-DeclStmt 0x563474586b10 <line:494:9, col:36>
| | |   | `-VarDecl 0x563474586a18 <col:9, col:35> col:24 referenced b1 'prevector::const_iterator' cinit
| | |   |   `-CallExpr 0x563474586af0 <col:29, col:35> '<dependent type>'
| | |   |     `-UnresolvedMemberExpr 0x563474586a90 <col:29> '<bound member function type>' lvalue
| | |   |-DeclStmt 0x563474587ca8 <line:495:9, col:42>
| | |   | `-VarDecl 0x563474586b38 <col:9, col:41> col:24 referenced b2 'prevector::const_iterator' cinit
| | |   |   `-CallExpr 0x563474587c88 <col:29, col:41> '<dependent type>'
| | |   |     `-CXXDependentScopeMemberExpr 0x563474587c40 <col:29, col:35> '<dependent type>' lvalue .begin
| | |   |       `-DeclRefExpr 0x563474586ba0 <col:29> 'const prevector<N, T, Size, Diff>':'const prevector<N, T, Size, Diff>' lvalue ParmVar 0x56347456df98 'other' 'const prevector<N, T, Size, Diff> &'
| | |   |-DeclStmt 0x563474587dc8 <line:496:9, col:34>
| | |   | `-VarDecl 0x563474587cd0 <col:9, col:33> col:24 referenced e1 'prevector::const_iterator' cinit
| | |   |   `-CallExpr 0x563474587da8 <col:29, col:33> '<dependent type>'
| | |   |     `-UnresolvedMemberExpr 0x563474587d48 <col:29> '<bound member function type>' lvalue
| | |   |-WhileStmt 0x563474588120 <line:497:9, line:506:9>
| | |   | |-BinaryOperator 0x563474587e20 <line:497:16, col:22> '<dependent type>' '!='
| | |   | | |-DeclRefExpr 0x563474587de0 <col:16> 'prevector::const_iterator' lvalue Var 0x563474586a18 'b1' 'prevector::const_iterator'
| | |   | | `-DeclRefExpr 0x563474587e00 <col:22> 'prevector::const_iterator' lvalue Var 0x563474587cd0 'e1' 'prevector::const_iterator'
| | |   | `-CompoundStmt 0x5634745880f0 <col:26, line:506:9>
| | |   |   |-IfStmt 0x563474587f48 <line:498:13, line:500:13>
| | |   |   | |-BinaryOperator 0x563474587ef0 <line:498:17, col:29> '<dependent type>' '<'
| | |   |   | | |-ParenExpr 0x563474587e78 <col:17, col:21> '<dependent type>'
| | |   |   | | | `-UnaryOperator 0x563474587e60 <col:18, col:19> '<dependent type>' prefix '*' cannot overflow
| | |   |   | | |   `-DeclRefExpr 0x563474587e40 <col:19> 'prevector::const_iterator' lvalue Var 0x563474586a18 'b1' 'prevector::const_iterator'
| | |   |   | | `-ParenExpr 0x563474587ed0 <col:25, col:29> '<dependent type>'
| | |   |   | |   `-UnaryOperator 0x563474587eb8 <col:26, col:27> '<dependent type>' prefix '*' cannot overflow
| | |   |   | |     `-DeclRefExpr 0x563474587e98 <col:27> 'prevector::const_iterator' lvalue Var 0x563474586b38 'b2' 'prevector::const_iterator'
| | |   |   | `-CompoundStmt 0x563474587f30 <col:32, line:500:13>
| | |   |   |   `-ReturnStmt 0x563474587f20 <line:499:17, col:24>
| | |   |   |     `-CXXBoolLiteralExpr 0x563474587f10 <col:24> 'bool' true
| | |   |   |-IfStmt 0x563474588068 <line:501:13, line:503:13>
| | |   |   | |-BinaryOperator 0x563474588010 <line:501:17, col:29> '<dependent type>' '<'
| | |   |   | | |-ParenExpr 0x563474587f98 <col:17, col:21> '<dependent type>'
| | |   |   | | | `-UnaryOperator 0x563474587f80 <col:18, col:19> '<dependent type>' prefix '*' cannot overflow
| | |   |   | | |   `-DeclRefExpr 0x563474587f60 <col:19> 'prevector::const_iterator' lvalue Var 0x563474586b38 'b2' 'prevector::const_iterator'
| | |   |   | | `-ParenExpr 0x563474587ff0 <col:25, col:29> '<dependent type>'
| | |   |   | |   `-UnaryOperator 0x563474587fd8 <col:26, col:27> '<dependent type>' prefix '*' cannot overflow
| | |   |   | |     `-DeclRefExpr 0x563474587fb8 <col:27> 'prevector::const_iterator' lvalue Var 0x563474586a18 'b1' 'prevector::const_iterator'
| | |   |   | `-CompoundStmt 0x563474588050 <col:32, line:503:13>
| | |   |   |   `-ReturnStmt 0x563474588040 <line:502:17, col:24>
| | |   |   |     `-CXXBoolLiteralExpr 0x563474588030 <col:24> 'bool' false
| | |   |   |-UnaryOperator 0x5634745880a0 <line:504:13, col:15> '<dependent type>' prefix '++' cannot overflow
| | |   |   | `-DeclRefExpr 0x563474588080 <col:15> 'prevector::const_iterator' lvalue Var 0x563474586a18 'b1' 'prevector::const_iterator'
| | |   |   `-UnaryOperator 0x5634745880d8 <line:505:13, col:15> '<dependent type>' prefix '++' cannot overflow
| | |   |     `-DeclRefExpr 0x5634745880b8 <col:15> 'prevector::const_iterator' lvalue Var 0x563474586b38 'b2' 'prevector::const_iterator'
| | |   `-ReturnStmt 0x563474588148 <line:507:9, col:16>
| | |     `-CXXBoolLiteralExpr 0x563474588138 <col:16> 'bool' false
| | |-CXXMethodDecl 0x56347456e138 <line:510:5, line:516:5> line:510:12 invalid allocated_memory 'int () const'
| | | `-CompoundStmt 0x563474588338 <col:37, line:516:5>
| | |   `-IfStmt 0x563474588310 <line:511:9, line:515:9> has_else
| | |     |-CallExpr 0x5634745881e0 <line:511:13, col:23> '<dependent type>'
| | |     | `-MemberExpr 0x5634745881b0 <col:13> '<bound member function type>' ->is_direct 0x5634745564c8
| | |     |   `-CXXThisExpr 0x5634745881a0 <col:13> 'const prevector<N, T, Size, Diff> *' implicit this
| | |     |-CompoundStmt 0x563474588230 <col:26, line:513:9>
| | |     | `-ReturnStmt 0x563474588220 <line:512:13, col:20>
| | |     |   `-IntegerLiteral 0x563474588200 <col:20> 'int' 0
| | |     `-CompoundStmt 0x563474588300 <line:513:16, line:515:9>
| | |-CXXMethodDecl 0x56347456e228 <line:518:5, line:520:5> line:518:17 data 'prevector::value_type *()'
| | | `-CompoundStmt 0x563474588418 <col:24, line:520:5>
| | |   `-ReturnStmt 0x563474588408 <line:519:9, col:26>
| | |     `-CallExpr 0x5634745883e0 <col:16, col:26> '<dependent type>'
| | |       |-UnresolvedMemberExpr 0x563474588360 <col:16> '<bound member function type>' lvalue
| | |       `-IntegerLiteral 0x5634745883c0 <col:25> 'int' 0
| | `-CXXMethodDecl 0x56347456e318 <line:522:5, line:524:5> line:522:23 data 'const prevector::value_type *() const'
| |   `-CompoundStmt 0x5634745884f8 <col:36, line:524:5>
| |     `-ReturnStmt 0x5634745884e8 <line:523:9, col:26>
| |       `-CallExpr 0x5634745884c0 <col:16, col:26> '<dependent type>'
| |         |-UnresolvedMemberExpr 0x563474588440 <col:16> '<bound member function type>' lvalue
| |         `-IntegerLiteral 0x5634745884a0 <col:25> 'int' 0
| `-FullComment 0x563474738910 <line:19:4, line:35:42>
|   |-ParagraphComment 0x5634747386b0 <line:19:4, line:21:72>
|   | |-TextComment 0x5634747385e0 <line:19:4, col:52> Text=" Implements a drop-in replacement for std::vector"
|   | |-TextComment 0x563474738600 <col:53, col:54> Text="<T"
|   | |-TextComment 0x563474738620 <col:55, col:76> Text="> which stores up to N"
|   | |-TextComment 0x563474738640 <line:20:3, col:76> Text="  elements directly (without heap allocation). The types Size and Diff are"
|   | `-TextComment 0x563474738660 <line:21:3, col:72> Text="  used to store element counts, and can be any unsigned + signed type."
|   |-ParagraphComment 0x563474738860 <line:23:3, line:32:47>
|   | |-TextComment 0x5634747386d0 <line:23:3, col:29> Text="  Storage layout is either:"
|   | |-TextComment 0x5634747386f0 <line:24:3, col:24> Text="  - Direct allocation:"
|   | |-TextComment 0x563474738710 <line:25:3, col:65> Text="    - Size _size: the number of used elements (between 0 and N)"
|   | |-TextComment 0x563474738730 <line:26:3, col:53> Text="    - T direct[N]: an array of N elements of type T"
|   | |-TextComment 0x563474738750 <line:27:3, col:47> Text="      (only the first _size are initialized)."
|   | |-TextComment 0x563474738770 <line:28:3, col:26> Text="  - Indirect allocation:"
|   | |-TextComment 0x563474738790 <line:29:3, col:58> Text="    - Size _size: the number of used elements plus N + 1"
|   | |-TextComment 0x5634747387b0 <line:30:3, col:55> Text="    - Size capacity: the number of allocated elements"
|   | |-TextComment 0x5634747387d0 <line:31:3, col:73> Text="    - T* indirect: a pointer to an array of capacity elements of type T"
|   | `-TextComment 0x5634747387f0 <line:32:3, col:47> Text="      (only the first _size are initialized)."
|   `-ParagraphComment 0x5634747388d0 <line:34:3, line:35:42>
|     |-TextComment 0x563474738880 <line:34:3, col:80> Text="  The data type T must be movable by memmove/realloc(). Once we switch to C++,"
|     `-TextComment 0x5634747388a0 <line:35:3, col:42> Text="  move constructors can be used instead."
|-ClassTemplateDecl 0x563474588680 <bitcoin/src/span.h:16:1, line:44:1> line:17:7 Span
| |-TemplateTypeParmDecl 0x563474588538 <line:16:10, col:19> col:19 referenced typename depth 0 index 0 C
| |-CXXRecordDecl 0x5634745885f0 <line:17:1, line:44:1> line:17:7 invalid class Span definition
| | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial user_provided constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FullComment 0x563474738fd0 <line:12:4, line:14:47>
| | | |-ParagraphComment 0x563474738f50 <line:12:4, col:75>
| | | | `-TextComment 0x563474738f20 <col:4, col:75> Text=" A Span is an object that can refer to a contiguous sequence of objects."
| | | `-ParagraphComment 0x563474738fa0 <line:14:3, col:47>
| | |   `-TextComment 0x563474738f70 <col:3, col:47> Text=" It implements a subset of C++20's std::span."
| | |-CXXRecordDecl 0x5634745888d0 <line:17:1, col:7> col:7 implicit referenced class Span
| | |-FieldDecl 0x5634745889c8 <line:19:5, col:8> col:8 referenced m_data 'C *'
| | |-FieldDecl 0x563474588a40 <line:20:5, col:20> col:20 invalid m_size 'int'
| | |-AccessSpecDecl 0x563474588a90 <line:22:1, col:7> col:1 public
| | |-CXXConstructorDecl 0x563474588b50 <line:23:5, col:61> col:15 invalid constexpr Span<C> 'void () noexcept'
| | | |-CXXCtorInitializer Field 0x5634745889c8 'm_data' 'C *'
| | | | `-ParenListExpr 0x56347456a380 <col:39, col:47> 'NULL TYPE'
| | | |   `-CXXNullPtrLiteralExpr 0x56347456a370 <col:40> 'nullptr_t'
| | | `-CompoundStmt 0x56347456a410 <col:60, col:61>
| | |-CXXConstructorDecl 0x563474565090 <line:24:5, col:89> col:15 invalid constexpr Span<C> 'void (C *, int) noexcept'
| | | |-ParmVarDecl 0x563474564ee0 <col:20, col:23> col:23 referenced data 'C *'
| | | |-ParmVarDecl 0x563474564f70 <col:29, col:44> col:44 invalid size 'int'
| | | |-CXXCtorInitializer Field 0x5634745889c8 'm_data' 'C *'
| | | | `-ParenListExpr 0x56347456a440 <col:67, col:72> 'NULL TYPE'
| | | |   `-DeclRefExpr 0x56347456a420 <col:68> 'C *' lvalue ParmVar 0x563474564ee0 'data' 'C *'
| | | `-CompoundStmt 0x56347456a490 <col:88, col:89>
| | |-CXXConstructorDecl 0x5634745652f0 <line:25:5, col:82> col:15 invalid constexpr Span<C> 'void (C *, C *) noexcept'
| | | |-ParmVarDecl 0x563474565158 <col:20, col:23> col:23 referenced data 'C *'
| | | |-ParmVarDecl 0x5634745651d0 <col:29, col:32> col:32 referenced end 'C *'
| | | |-CXXCtorInitializer Field 0x5634745889c8 'm_data' 'C *'
| | | | `-ParenListExpr 0x56347456a4c0 <col:54, col:59> 'NULL TYPE'
| | | |   `-DeclRefExpr 0x56347456a4a0 <col:55> 'C *' lvalue ParmVar 0x563474565158 'data' 'C *'
| | | `-CompoundStmt 0x56347456a590 <col:81, col:82>
| | |-CXXMethodDecl 0x563474565460 <line:27:5, col:57> col:18 constexpr data 'C *() const noexcept'
| | | `-CompoundStmt 0x56347456a5f0 <col:40, col:57>
| | |   `-ReturnStmt 0x56347456a5e0 <col:42, col:49>
| | |     `-MemberExpr 0x56347456a5b0 <col:49> 'C *const' lvalue ->m_data 0x5634745889c8
| | |       `-CXXThisExpr 0x56347456a5a0 <col:49> 'const Span<C> *' implicit this
| | |-CXXMethodDecl 0x563474565528 <line:28:5, col:58> col:18 constexpr begin 'C *() const noexcept'
| | | `-CompoundStmt 0x56347456a658 <col:41, col:58>
| | |   `-ReturnStmt 0x56347456a648 <col:43, col:50>
| | |     `-MemberExpr 0x56347456a618 <col:50> 'C *const' lvalue ->m_data 0x5634745889c8
| | |       `-CXXThisExpr 0x56347456a608 <col:50> 'const Span<C> *' implicit this
| | |-CXXMethodDecl 0x5634745655f0 <line:29:5, col:65> col:18 constexpr end 'C *() const noexcept'
| | | `-CompoundStmt 0x56347456a6c0 <col:39, col:65>
| | |-CXXMethodDecl 0x5634745656f8 <line:30:5, col:69> col:30 invalid constexpr size 'int () const noexcept'
| | | `-CompoundStmt 0x56347456a6e0 <col:52, col:69>
| | |-CXXMethodDecl 0x563474565920 <line:31:5, col:86> col:18 invalid constexpr operator[] 'C &(int) const noexcept'
| | | |-ParmVarDecl 0x5634745657c0 <col:29, col:44> col:44 invalid pos 'int'
| | | `-CompoundStmt 0x56347456a730 <col:64, col:86>
| | |-CXXMethodDecl 0x563474565b90 <line:33:5, col:121> col:23 invalid constexpr subspan 'Span<C> (int) const noexcept'
| | | |-ParmVarDecl 0x563474565a78 <col:31, col:46> col:46 invalid offset 'int'
| | | `-CompoundStmt 0x56347456a840 <col:69, col:121>
| | |-CXXMethodDecl 0x56347456f780 <line:34:5, col:133> col:23 invalid constexpr subspan 'Span<C> (int, int) const noexcept'
| | | |-ParmVarDecl 0x563474565ce8 <col:31, col:46> col:46 invalid offset 'int'
| | | |-ParmVarDecl 0x563474565d78 <col:54, col:69> col:69 invalid count 'int'
| | | `-CompoundStmt 0x56347456a940 <col:91, col:133>
| | |-CXXMethodDecl 0x56347456f9c0 <line:35:5, col:99> col:23 invalid constexpr first 'Span<C> (int) const noexcept'
| | | |-ParmVarDecl 0x56347456f8d8 <col:29, col:44> col:44 invalid count 'int'
| | | `-CompoundStmt 0x56347456aa40 <col:66, col:99>
| | |-CXXMethodDecl 0x56347456fc00 <line:36:5, col:115> col:23 invalid constexpr last 'Span<C> (int) const noexcept'
| | | |-ParmVarDecl 0x56347456fb18 <col:28, col:43> col:43 invalid count 'int'
| | | `-CompoundStmt 0x56347456ab50 <col:65, col:115>
| | |-FriendDecl 0x56347456ff40 <line:38:5, col:153> col:27
| | | `-FunctionDecl 0x56347456fe80 parent 0x5634744cb688 <col:5, col:153> col:27 invalid constexpr operator== 'bool (const Span<C> &, const Span<C> &) noexcept'
| | |   |-ParmVarDecl 0x56347456fce8 <col:38, col:50> col:50 referenced a 'const Span<C> &'
| | |   |-ParmVarDecl 0x56347456fd60 <col:53, col:65> col:65 referenced b 'const Span<C> &'
| | |   `-CompoundStmt 0x56347456ae28 <col:77, col:153>
| | |-FriendDecl 0x563474570168 <line:39:5, col:97> col:27
| | | `-FunctionDecl 0x5634745700a8 parent 0x5634744cb688 <col:5, col:97> col:27 constexpr operator!= 'bool (const Span<C> &, const Span<C> &) noexcept'
| | |   |-ParmVarDecl 0x56347456ff90 <col:38, col:50> col:50 referenced a 'const Span<C> &'
| | |   |-ParmVarDecl 0x563474570008 <col:53, col:65> col:65 referenced b 'const Span<C> &'
| | |   `-CompoundStmt 0x56347456aee0 <col:77, col:97>
| | |     `-ReturnStmt 0x56347456aed0 <col:79, col:94>
| | |       `-UnaryOperator 0x56347456aeb8 <col:86, col:94> '<dependent type>' prefix '!' cannot overflow
| | |         `-ParenExpr 0x56347456ae98 <col:87, col:94> '<dependent type>'
| | |           `-BinaryOperator 0x56347456ae78 <col:88, col:93> '<dependent type>' '=='
| | |             |-DeclRefExpr 0x56347456ae38 <col:88> 'const Span<C>' lvalue ParmVar 0x56347456ff90 'a' 'const Span<C> &'
| | |             `-DeclRefExpr 0x56347456ae58 <col:93> 'const Span<C>' lvalue ParmVar 0x563474570008 'b' 'const Span<C> &'
| | |-FriendDecl 0x563474570390 <line:40:5, col:155> col:27
| | | `-FunctionDecl 0x5634745702d0 parent 0x5634744cb688 <col:5, col:155> col:27 invalid constexpr operator< 'bool (const Span<C> &, const Span<C> &) noexcept'
| | |   |-ParmVarDecl 0x5634745701b8 <col:37, col:49> col:49 referenced a 'const Span<C> &'
| | |   |-ParmVarDecl 0x563474570230 <col:52, col:64> col:64 referenced b 'const Span<C> &'
| | |   `-CompoundStmt 0x563474566430 <col:76, col:155>
| | |-FriendDecl 0x5634745705b8 <line:41:5, col:96> col:27
| | | `-FunctionDecl 0x5634745704f8 parent 0x5634744cb688 <col:5, col:96> col:27 constexpr operator<= 'bool (const Span<C> &, const Span<C> &) noexcept'
| | |   |-ParmVarDecl 0x5634745703e0 <col:38, col:50> col:50 referenced a 'const Span<C> &'
| | |   |-ParmVarDecl 0x563474570458 <col:53, col:65> col:65 referenced b 'const Span<C> &'
| | |   `-CompoundStmt 0x5634745664e8 <col:77, col:96>
| | |     `-ReturnStmt 0x5634745664d8 <col:79, col:93>
| | |       `-UnaryOperator 0x5634745664c0 <col:86, col:93> '<dependent type>' prefix '!' cannot overflow
| | |         `-ParenExpr 0x5634745664a0 <col:87, col:93> '<dependent type>'
| | |           `-BinaryOperator 0x563474566480 <col:88, col:92> '<dependent type>' '<'
| | |             |-DeclRefExpr 0x563474566440 <col:88> 'const Span<C>' lvalue ParmVar 0x563474570458 'b' 'const Span<C> &'
| | |             `-DeclRefExpr 0x563474566460 <col:92> 'const Span<C>' lvalue ParmVar 0x5634745703e0 'a' 'const Span<C> &'
| | |-FriendDecl 0x56347456a0f0 <line:42:5, col:94> col:27
| | | `-FunctionDecl 0x56347456a030 parent 0x5634744cb688 <col:5, col:94> col:27 constexpr operator> 'bool (const Span<C> &, const Span<C> &) noexcept'
| | |   |-ParmVarDecl 0x563474570608 <col:37, col:49> col:49 referenced a 'const Span<C> &'
| | |   |-ParmVarDecl 0x563474570680 <col:52, col:64> col:64 referenced b 'const Span<C> &'
| | |   `-CompoundStmt 0x563474566590 <col:76, col:94>
| | |     `-ReturnStmt 0x563474566580 <col:78, col:91>
| | |       `-ParenExpr 0x563474566560 <col:85, col:91> '<dependent type>'
| | |         `-BinaryOperator 0x563474566540 <col:86, col:90> '<dependent type>' '<'
| | |           |-DeclRefExpr 0x563474566500 <col:86> 'const Span<C>' lvalue ParmVar 0x563474570680 'b' 'const Span<C> &'
| | |           `-DeclRefExpr 0x563474566520 <col:90> 'const Span<C>' lvalue ParmVar 0x563474570608 'a' 'const Span<C> &'
| | `-FriendDecl 0x56347456a318 <line:43:5, col:96> col:27
| |   `-FunctionDecl 0x56347456a258 parent 0x5634744cb688 <col:5, col:96> col:27 constexpr operator>= 'bool (const Span<C> &, const Span<C> &) noexcept'
| |     |-ParmVarDecl 0x56347456a140 <col:38, col:50> col:50 referenced a 'const Span<C> &'
| |     |-ParmVarDecl 0x56347456a1b8 <col:53, col:65> col:65 referenced b 'const Span<C> &'
| |     `-CompoundStmt 0x563474566650 <col:77, col:96>
| |       `-ReturnStmt 0x563474566640 <col:79, col:93>
| |         `-UnaryOperator 0x563474566628 <col:86, col:93> '<dependent type>' prefix '!' cannot overflow
| |           `-ParenExpr 0x563474566608 <col:87, col:93> '<dependent type>'
| |             `-BinaryOperator 0x5634745665e8 <col:88, col:92> '<dependent type>' '<'
| |               |-DeclRefExpr 0x5634745665a8 <col:88> 'const Span<C>' lvalue ParmVar 0x56347456a140 'a' 'const Span<C> &'
| |               `-DeclRefExpr 0x5634745665c8 <col:92> 'const Span<C>' lvalue ParmVar 0x56347456a1b8 'b' 'const Span<C> &'
| |-ClassTemplateSpecializationDecl 0x5634745928c8 <line:16:1, line:44:1> line:17:7 class Span
| | `-TemplateArgument type 'const unsigned char'
| |-ClassTemplateSpecializationDecl 0x563474592f58 <line:16:1, line:44:1> line:17:7 class Span
| | `-TemplateArgument type 'unsigned char'
| `-FullComment 0x5634747390f0 <line:12:4, line:14:47>
|   |-ParagraphComment 0x563474739070 <line:12:4, col:75>
|   | `-TextComment 0x563474739040 <col:4, col:75> Text=" A Span is an object that can refer to a contiguous sequence of objects."
|   `-ParagraphComment 0x5634747390c0 <line:14:3, col:47>
|     `-TextComment 0x563474739090 <col:3, col:47> Text=" It implements a subset of C++20's std::span."
|-FunctionTemplateDecl 0x563474566b28 <line:54:1, line:55:63> col:19 MakeSpan
| |-TemplateTypeParmDecl 0x563474566698 <line:54:10, col:19> col:19 referenced typename depth 0 index 0 A
| |-NonTypeTemplateParmDecl 0x563474566720 <col:22, col:26> col:26 referenced 'int' depth 0 index 1 N
| |-FunctionDecl 0x563474566a88 <line:55:1, col:63> col:19 constexpr MakeSpan 'Span<A> (A (&)[N])'
| | |-ParmVarDecl 0x563474566978 <col:28, col:36> col:32 referenced a 'A (&)[N]'
| | |-CompoundStmt 0x563474566cc0 <col:39, col:63>
| | | `-ReturnStmt 0x563474566cb0 <col:41, col:60>
| | |   `-CXXUnresolvedConstructExpr 0x563474566c80 <col:48, col:60> 'Span<A>' 'Span<A>'
| | |     |-DeclRefExpr 0x563474566c40 <col:56> 'A [N]':'A [N]' lvalue ParmVar 0x563474566978 'a' 'A (&)[N]'
| | |     `-DeclRefExpr 0x563474566c60 <col:59> 'int' NonTypeTemplateParm 0x563474566720 'N' 'int'
| | `-FullComment 0x56347473b550 <line:46:4, line:52:81>
| |   |-ParagraphComment 0x56347473b420 <line:46:4, col:60>
| |   | `-TextComment 0x56347473b3f0 <col:4, col:60> Text=" Create a span to a container exposing data() and size()."
| |   |-ParagraphComment 0x56347473b4c0 <line:48:3, line:50:83>
| |   | |-TextComment 0x56347473b440 <line:48:3, col:80> Text=" This correctly deals with constness: the returned Span's element type will be"
| |   | |-TextComment 0x56347473b460 <line:49:3, col:81> Text=" whatever data() returns a pointer to. If either the passed container is const,"
| |   | `-TextComment 0x56347473b480 <line:50:3, col:83> Text=" or its element type is const, the resulting span will have a const element type."
| |   `-ParagraphComment 0x56347473b510 <line:52:3, col:81>
| |     `-TextComment 0x56347473b4e0 <col:3, col:81> Text=" std::span will have a constructor that implements this functionality directly."
| `-FullComment 0x56347473b380 <line:46:4, line:52:81>
|   |-ParagraphComment 0x563474739210 <line:46:4, col:60>
|   | `-TextComment 0x5634747391e0 <col:4, col:60> Text=" Create a span to a container exposing data() and size()."
|   |-ParagraphComment 0x5634747392b0 <line:48:3, line:50:83>
|   | |-TextComment 0x563474739230 <line:48:3, col:80> Text=" This correctly deals with constness: the returned Span's element type will be"
|   | |-TextComment 0x563474739250 <line:49:3, col:81> Text=" whatever data() returns a pointer to. If either the passed container is const,"
|   | `-TextComment 0x563474739270 <line:50:3, col:83> Text=" or its element type is const, the resulting span will have a const element type."
|   `-ParagraphComment 0x563474739300 <line:52:3, col:81>
|     `-TextComment 0x5634747392d0 <col:3, col:81> Text=" std::span will have a constructor that implements this functionality directly."
|-FunctionTemplateDecl 0x563474566f90 <line:57:1, line:58:210> col:88 invalid MakeSpan
| |-TemplateTypeParmDecl 0x563474566cd8 <line:57:10, col:19> col:19 referenced typename depth 0 index 0 V
| `-FunctionDecl 0x563474566ef0 <line:58:1, col:210> col:88 invalid constexpr MakeSpan 'int (V &)'
|   |-ParmVarDecl 0x563474566df8 <col:97, col:100> col:100 v 'V &'
|   `-CompoundStmt 0x563474567030 <col:103, col:210>
|-VarDecl 0x563474567058 <bitcoin/src/serialize.h:27:1, col:38> col:27 used MAX_SIZE 'const unsigned int' static cinit
| `-ImplicitCastExpr 0x5634745670e0 <col:38> 'const unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x5634745670c0 <col:38> 'int' 33554432
|-CXXRecordDecl 0x563474567178 <line:40:1, col:26> col:8 referenced struct deserialize_type definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347473b890 <line:30:3, line:38:35>
| | |-ParagraphComment 0x56347473b670 <line:30:3, col:58>
| | | `-TextComment 0x56347473b640 <col:3, col:58> Text=" Dummy data type to identify deserializing constructors."
| | |-ParagraphComment 0x56347473b6c0 <line:32:3, col:58>
| | | `-TextComment 0x56347473b690 <col:3, col:58> Text=" By convention, a constructor of a type T with signature"
| | |-ParagraphComment 0x56347473b7b0 <line:34:3, col:65>
| | | |-TextComment 0x56347473b6e0 <col:3, col:14> Text="   template "
| | | |-TextComment 0x56347473b700 <col:15, col:23> Text="<typename"
| | | |-TextComment 0x56347473b720 <col:24, col:61> Text=" Stream> T::T(deserialize_type, Stream"
| | | |-TextComment 0x56347473b740 <col:62> Text="&"
| | | `-TextComment 0x56347473b760 <col:63, col:65> Text=" s)"
| | `-ParagraphComment 0x56347473b850 <line:36:3, line:38:35>
| |   |-TextComment 0x56347473b7d0 <line:36:3, col:59> Text=" is a deserializing constructor, which builds the type by"
| |   |-TextComment 0x56347473b7f0 <line:37:3, col:60> Text=" deserializing it from s. If T contains const fields, this"
| |   `-TextComment 0x56347473b810 <line:38:3, col:35> Text=" is likely the only way to do so."
| `-CXXRecordDecl 0x563474567298 <line:40:1, col:8> col:8 implicit struct deserialize_type
|-VarDecl 0x563474559460 <line:41:1, col:41> col:28 referenced deserialize 'const deserialize_type' constexpr listinit
| `-InitListExpr 0x563474559508 <col:40, col:41> 'const deserialize_type'
|-FunctionTemplateDecl 0x563474559928 <line:47:1, line:51:1> line:48:11 REF
| |-TemplateTypeParmDecl 0x563474559678 <line:47:10, col:19> col:19 referenced typename depth 0 index 0 T
| |-FunctionDecl 0x563474559888 <line:48:1, line:51:1> line:48:11 REF 'T &(const T &)' inline
| | |-ParmVarDecl 0x563474559768 <col:15, col:24> col:24 referenced val 'const T &'
| | |-CompoundStmt 0x563474559a28 <line:49:1, line:51:1>
| | | `-ReturnStmt 0x5634745599e8 <line:50:5, col:30>
| | |   `-CXXConstCastExpr 0x5634745599b8 <col:12, col:30> 'T' lvalue const_cast<T &> <NoOp>
| | |     `-DeclRefExpr 0x563474559988 <col:27> 'const T' lvalue ParmVar 0x563474559768 'val' 'const T &'
| | `-FullComment 0x56347473baf0 <line:44:3, line:45:38>
| |   `-ParagraphComment 0x56347473bac0 <line:44:3, line:45:38>
| |     |-TextComment 0x56347473ba70 <line:44:3, col:67> Text=" Used to bypass the rule against non-const reference to temporary"
| |     `-TextComment 0x56347473ba90 <line:45:3, col:38> Text=" where it makes sense with wrappers."
| `-FullComment 0x56347473ba00 <line:44:3, line:45:38>
|   `-ParagraphComment 0x56347473b9d0 <line:44:3, line:45:38>
|     |-TextComment 0x56347473b980 <line:44:3, col:67> Text=" Used to bypass the rule against non-const reference to temporary"
|     `-TextComment 0x56347473b9a0 <line:45:3, col:38> Text=" where it makes sense with wrappers."
|-FunctionTemplateDecl 0x563474559cf8 <line:57:1, line:61:1> line:58:11 NCONST_PTR
| |-TemplateTypeParmDecl 0x563474559a40 <line:57:10, col:19> col:19 referenced typename depth 0 index 0 T
| |-FunctionDecl 0x563474559c58 <line:58:1, line:61:1> line:58:11 NCONST_PTR 'T *(const T *)' inline
| | |-ParmVarDecl 0x563474559b38 <col:22, col:31> col:31 referenced val 'const T *'
| | |-CompoundStmt 0x563474559df8 <line:59:1, line:61:1>
| | | `-ReturnStmt 0x563474559db8 <line:60:5, col:30>
| | |   `-CXXConstCastExpr 0x563474559d88 <col:12, col:30> 'T *' const_cast<T *> <NoOp>
| | |     `-DeclRefExpr 0x563474559d58 <col:27> 'const T *' lvalue ParmVar 0x563474559b38 'val' 'const T *'
| | `-FullComment 0x56347473bd50 <line:54:3, line:55:52>
| |   `-ParagraphComment 0x56347473bd20 <line:54:3, line:55:52>
| |     |-TextComment 0x56347473bcd0 <line:54:3, col:64> Text=" Used to acquire a non-const pointer "this" to generate bodies"
| |     `-TextComment 0x56347473bcf0 <line:55:3, col:52> Text=" of const serialization operations from a template"
| `-FullComment 0x56347473bc60 <line:54:3, line:55:52>
|   `-ParagraphComment 0x56347473bc30 <line:54:3, line:55:52>
|     |-TextComment 0x56347473bbe0 <line:54:3, col:64> Text=" Used to acquire a non-const pointer "this" to generate bodies"
|     `-TextComment 0x56347473bc00 <line:55:3, col:52> Text=" of const serialization operations from a template"
|-FunctionDecl 0x563474559ef0 <line:64:1, col:44> col:14 CharCast 'char *(char *)' inline
| |-ParmVarDecl 0x563474559e28 <col:23, col:29> col:29 used c 'char *'
| |-CompoundStmt 0x563474559fe0 <col:32, col:44>
| | `-ReturnStmt 0x563474559fd0 <col:34, col:41>
| |   `-ImplicitCastExpr 0x563474559fb8 <col:41> 'char *' <LValueToRValue>
| |     `-DeclRefExpr 0x563474559f98 <col:41> 'char *' lvalue ParmVar 0x563474559e28 'c' 'char *'
| `-FullComment 0x56347473be20 <line:63:4, col:59>
|   `-ParagraphComment 0x56347473bdf0 <col:4, col:59>
|     `-TextComment 0x56347473bdc0 <col:4, col:59> Text=" Safely convert odd char pointer types to standard ones."
|-FunctionDecl 0x56347455a110 <line:65:1, col:60> col:14 CharCast 'char *(unsigned char *)' inline
| |-ParmVarDecl 0x56347455a040 <col:23, col:38> col:38 used c 'unsigned char *'
| `-CompoundStmt 0x56347455a240 <col:41, col:60>
|   `-ReturnStmt 0x56347455a230 <col:43, col:57>
|     `-CStyleCastExpr 0x56347455a208 <col:50, col:57> 'char *' <BitCast>
|       `-ImplicitCastExpr 0x56347455a1f0 <col:57> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56347455a1b8 <col:57> 'unsigned char *' lvalue ParmVar 0x56347455a040 'c' 'unsigned char *'
|-FunctionDecl 0x56347455a340 <line:66:1, col:56> col:20 CharCast 'const char *(const char *)' inline
| |-ParmVarDecl 0x56347455a270 <col:29, col:41> col:41 used c 'const char *'
| `-CompoundStmt 0x56347455a430 <col:44, col:56>
|   `-ReturnStmt 0x56347455a420 <col:46, col:53>
|     `-ImplicitCastExpr 0x56347455a408 <col:53> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56347455a3e8 <col:53> 'const char *' lvalue ParmVar 0x56347455a270 'c' 'const char *'
|-FunctionDecl 0x563474588d60 <line:67:1, col:78> col:20 CharCast 'const char *(const unsigned char *)' inline
| |-ParmVarDecl 0x563474588c90 <col:29, col:50> col:50 used c 'const unsigned char *'
| `-CompoundStmt 0x563474588e90 <col:53, col:78>
|   `-ReturnStmt 0x563474588e80 <col:55, col:75>
|     `-CStyleCastExpr 0x563474588e58 <col:62, col:75> 'const char *' <BitCast>
|       `-ImplicitCastExpr 0x563474588e40 <col:75> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x563474588e08 <col:75> 'const unsigned char *' lvalue ParmVar 0x563474588c90 'c' 'const unsigned char *'
|-FunctionTemplateDecl 0x5634745891a8 <line:73:1, line:76:1> line:73:39 invalid ser_writedata8
| |-TemplateTypeParmDecl 0x563474588ea8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474589108 <col:27, line:76:1> line:73:39 invalid ser_writedata8 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474588f68 <col:54, col:62> col:62 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474588ff8 <col:65, col:73> col:73 invalid obj 'int'
|   `-CompoundStmt 0x563474589298 <line:74:1, line:76:1>
|-FunctionTemplateDecl 0x563474589568 <line:77:1, line:81:1> line:77:39 invalid ser_writedata16
| |-TemplateTypeParmDecl 0x5634745892a8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x5634745894c8 <col:27, line:81:1> line:77:39 invalid ser_writedata16 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474589368 <col:55, col:63> col:63 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745893f8 <col:66, col:75> col:75 invalid obj 'int'
|   `-CompoundStmt 0x563474589658 <line:78:1, line:81:1>
|-FunctionTemplateDecl 0x563474589928 <line:82:1, line:86:1> line:82:39 invalid ser_writedata16be
| |-TemplateTypeParmDecl 0x563474589668 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474589888 <col:27, line:86:1> line:82:39 invalid ser_writedata16be 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474589728 <col:57, col:65> col:65 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745897b8 <col:68, col:77> col:77 invalid obj 'int'
|   `-CompoundStmt 0x563474589a18 <line:83:1, line:86:1>
|-FunctionTemplateDecl 0x563474589d00 <line:87:1, line:91:1> line:87:39 invalid ser_writedata32
| |-TemplateTypeParmDecl 0x563474589a28 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474589c60 <col:27, line:91:1> line:87:39 invalid ser_writedata32 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474589ae8 <col:55, col:63> col:63 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474589b78 <col:66, col:75> col:75 invalid obj 'int'
|   `-CompoundStmt 0x563474589df0 <line:88:1, line:91:1>
|-FunctionTemplateDecl 0x56347458a0c8 <line:92:1, line:96:1> line:92:39 invalid ser_writedata32be
| |-TemplateTypeParmDecl 0x563474589e00 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458a028 <col:27, line:96:1> line:92:39 invalid ser_writedata32be 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474589ec8 <col:57, col:65> col:65 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474589f58 <col:68, col:77> col:77 invalid obj 'int'
|   `-CompoundStmt 0x56347458a1b8 <line:93:1, line:96:1>
|-FunctionTemplateDecl 0x56347458a488 <line:97:1, line:101:1> line:97:39 invalid ser_writedata64
| |-TemplateTypeParmDecl 0x56347458a1c8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458a3e8 <col:27, line:101:1> line:97:39 invalid ser_writedata64 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x56347458a288 <col:55, col:63> col:63 referenced s 'Stream &'
|   |-ParmVarDecl 0x56347458a318 <col:66, col:75> col:75 invalid obj 'int'
|   `-CompoundStmt 0x56347458a578 <line:98:1, line:101:1>
|-FunctionTemplateDecl 0x56347458a7c0 <line:102:1, line:107:1> line:102:42 invalid ser_readdata8
| |-TemplateTypeParmDecl 0x56347458a588 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458a720 <col:27, line:107:1> line:102:42 invalid ser_readdata8 'int (Stream &)' inline
|   |-ParmVarDecl 0x56347458a658 <col:56, col:64> col:64 referenced s 'Stream &'
|   `-CompoundStmt 0x56347458a950 <line:103:1, line:107:1>
|     `-DeclStmt 0x56347458a8b0 <line:104:5, col:16>
|       `-VarDecl 0x56347458a848 <col:5, col:13> col:13 invalid obj 'int'
|-FunctionTemplateDecl 0x56347458aba0 <line:108:1, line:113:1> line:108:43 invalid ser_readdata16
| |-TemplateTypeParmDecl 0x56347458a968 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458ab00 <col:27, line:113:1> line:108:43 invalid ser_readdata16 'int (Stream &)' inline
|   |-ParmVarDecl 0x56347458aa38 <col:58, col:66> col:66 referenced s 'Stream &'
|   `-CompoundStmt 0x56347458ad78 <line:109:1, line:113:1>
|     `-DeclStmt 0x56347458acd8 <line:110:5, col:17>
|       `-VarDecl 0x56347458ac70 <col:5, col:14> col:14 invalid obj 'int'
|-FunctionTemplateDecl 0x56347458afd0 <line:114:1, line:119:1> line:114:43 invalid ser_readdata16be
| |-TemplateTypeParmDecl 0x56347458ad90 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458af30 <col:27, line:119:1> line:114:43 invalid ser_readdata16be 'int (Stream &)' inline
|   |-ParmVarDecl 0x56347458ae68 <col:60, col:68> col:68 referenced s 'Stream &'
|   `-CompoundStmt 0x56347458b160 <line:115:1, line:119:1>
|     `-DeclStmt 0x56347458b0c0 <line:116:5, col:17>
|       `-VarDecl 0x56347458b058 <col:5, col:14> col:14 invalid obj 'int'
|-FunctionTemplateDecl 0x56347458b3b0 <line:120:1, line:125:1> line:120:43 invalid ser_readdata32
| |-TemplateTypeParmDecl 0x56347458b178 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458b310 <col:27, line:125:1> line:120:43 invalid ser_readdata32 'int (Stream &)' inline
|   |-ParmVarDecl 0x56347458b248 <col:58, col:66> col:66 referenced s 'Stream &'
|   `-CompoundStmt 0x56347458b540 <line:121:1, line:125:1>
|     `-DeclStmt 0x56347458b4a0 <line:122:5, col:17>
|       `-VarDecl 0x56347458b438 <col:5, col:14> col:14 invalid obj 'int'
|-FunctionTemplateDecl 0x56347458b790 <line:126:1, line:131:1> line:126:43 invalid ser_readdata32be
| |-TemplateTypeParmDecl 0x56347458b558 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458b6f0 <col:27, line:131:1> line:126:43 invalid ser_readdata32be 'int (Stream &)' inline
|   |-ParmVarDecl 0x56347458b628 <col:60, col:68> col:68 referenced s 'Stream &'
|   `-CompoundStmt 0x56347458b920 <line:127:1, line:131:1>
|     `-DeclStmt 0x56347458b880 <line:128:5, col:17>
|       `-VarDecl 0x56347458b818 <col:5, col:14> col:14 invalid obj 'int'
|-FunctionTemplateDecl 0x56347458bb70 <line:132:1, line:137:1> line:132:43 invalid ser_readdata64
| |-TemplateTypeParmDecl 0x56347458b938 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458bad0 <col:27, line:137:1> line:132:43 invalid ser_readdata64 'int (Stream &)' inline
|   |-ParmVarDecl 0x56347458ba08 <col:58, col:66> col:66 referenced s 'Stream &'
|   `-CompoundStmt 0x56347458bd20 <line:133:1, line:137:1>
|     `-DeclStmt 0x56347458bc80 <line:134:5, col:17>
|       `-VarDecl 0x56347458bbf8 <col:5, col:14> col:14 invalid obj 'int'
|-FunctionDecl 0x56347458be30 <line:138:1, line:143:1> line:138:17 invalid ser_double_to_uint64 'int (double)' inline
| |-ParmVarDecl 0x56347458bd60 <col:38, col:45> col:45 used x 'double'
| `-CompoundStmt 0x56347458c728 <line:139:1, line:143:1>
|   |-DeclStmt 0x56347458c648 <line:140:5, col:40>
|   | |-CXXRecordDecl 0x56347458bed8 <col:5, col:35> col:5 invalid union definition
|   | | |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
|   | | | |-DefaultConstructor exists trivial
|   | | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-FieldDecl 0x56347458c010 <col:13, col:20> col:20 referenced x 'double'
|   | | |-FieldDecl 0x56347458c088 <col:23, col:32> col:32 invalid y 'int'
|   | | |-CXXConstructorDecl 0x56347458c1c8 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   | | | `-CompoundStmt 0x56347458c5f8 <col:5>
|   | | |-CXXConstructorDecl 0x56347458c2c8 <col:5> col:5 implicit constexpr  'void (const (anonymous union at bitcoin/src/serialize.h:140:5) &)' inline default trivial noexcept-unevaluated 0x56347458c2c8
|   | | | `-ParmVarDecl 0x56347458c3d8 <col:5> col:5 'const (anonymous union at bitcoin/src/serialize.h:140:5) &'
|   | | `-CXXConstructorDecl 0x56347458c478 <col:5> col:5 implicit constexpr  'void ((anonymous union at bitcoin/src/serialize.h:140:5) &&)' inline default trivial noexcept-unevaluated 0x56347458c478
|   | |   `-ParmVarDecl 0x56347458c588 <col:5> col:5 '(anonymous union at bitcoin/src/serialize.h:140:5) &&'
|   | `-VarDecl 0x56347458c148 <col:5, col:37> col:37 used tmp 'union (anonymous union at bitcoin/src/serialize.h:140:5)':'(anonymous union at bitcoin/src/serialize.h:140:5)' callinit
|   |   `-CXXConstructExpr 0x56347458c608 <col:37> 'union (anonymous union at bitcoin/src/serialize.h:140:5)':'(anonymous union at bitcoin/src/serialize.h:140:5)' 'void () noexcept'
|   `-BinaryOperator 0x56347458c6e8 <line:141:5, col:13> 'double' lvalue '='
|     |-MemberExpr 0x56347458c680 <col:5, col:9> 'double' lvalue .x 0x56347458c010
|     | `-DeclRefExpr 0x56347458c660 <col:5> 'union (anonymous union at bitcoin/src/serialize.h:140:5)':'(anonymous union at bitcoin/src/serialize.h:140:5)' lvalue Var 0x56347458c148 'tmp' 'union (anonymous union at bitcoin/src/serialize.h:140:5)':'(anonymous union at bitcoin/src/serialize.h:140:5)'
|     `-ImplicitCastExpr 0x56347458c6d0 <col:13> 'double' <LValueToRValue>
|       `-DeclRefExpr 0x56347458c6b0 <col:13> 'double' lvalue ParmVar 0x56347458bd60 'x' 'double'
|-FunctionDecl 0x56347458c840 <line:144:1, line:149:1> line:144:17 invalid ser_float_to_uint32 'int (float)' inline
| |-ParmVarDecl 0x56347458c770 <col:37, col:43> col:43 used x 'float'
| `-CompoundStmt 0x56347458d148 <line:145:1, line:149:1>
|   |-DeclStmt 0x56347458d068 <line:146:5, col:39>
|   | |-CXXRecordDecl 0x56347458c8e8 <col:5, col:34> col:5 invalid union definition
|   | | |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
|   | | | |-DefaultConstructor exists trivial
|   | | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-FieldDecl 0x56347458ca20 <col:13, col:19> col:19 referenced x 'float'
|   | | |-FieldDecl 0x56347458ca98 <col:22, col:31> col:31 invalid y 'int'
|   | | |-CXXConstructorDecl 0x56347458cbd8 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   | | | `-CompoundStmt 0x56347458d018 <col:5>
|   | | |-CXXConstructorDecl 0x56347458cce8 <col:5> col:5 implicit constexpr  'void (const (anonymous union at bitcoin/src/serialize.h:146:5) &)' inline default trivial noexcept-unevaluated 0x56347458cce8
|   | | | `-ParmVarDecl 0x56347458cdf8 <col:5> col:5 'const (anonymous union at bitcoin/src/serialize.h:146:5) &'
|   | | `-CXXConstructorDecl 0x56347458ce98 <col:5> col:5 implicit constexpr  'void ((anonymous union at bitcoin/src/serialize.h:146:5) &&)' inline default trivial noexcept-unevaluated 0x56347458ce98
|   | |   `-ParmVarDecl 0x56347458cfa8 <col:5> col:5 '(anonymous union at bitcoin/src/serialize.h:146:5) &&'
|   | `-VarDecl 0x56347458cb58 <col:5, col:36> col:36 used tmp 'union (anonymous union at bitcoin/src/serialize.h:146:5)':'(anonymous union at bitcoin/src/serialize.h:146:5)' callinit
|   |   `-CXXConstructExpr 0x56347458d028 <col:36> 'union (anonymous union at bitcoin/src/serialize.h:146:5)':'(anonymous union at bitcoin/src/serialize.h:146:5)' 'void () noexcept'
|   `-BinaryOperator 0x56347458d108 <line:147:5, col:13> 'float' lvalue '='
|     |-MemberExpr 0x56347458d0a0 <col:5, col:9> 'float' lvalue .x 0x56347458ca20
|     | `-DeclRefExpr 0x56347458d080 <col:5> 'union (anonymous union at bitcoin/src/serialize.h:146:5)':'(anonymous union at bitcoin/src/serialize.h:146:5)' lvalue Var 0x56347458cb58 'tmp' 'union (anonymous union at bitcoin/src/serialize.h:146:5)':'(anonymous union at bitcoin/src/serialize.h:146:5)'
|     `-ImplicitCastExpr 0x56347458d0f0 <col:13> 'float' <LValueToRValue>
|       `-DeclRefExpr 0x56347458d0d0 <col:13> 'float' lvalue ParmVar 0x56347458c770 'x' 'float'
|-FunctionDecl 0x56347458d260 <line:150:1, line:155:1> line:150:15 invalid ser_uint64_to_double 'double (int)' inline
| |-ParmVarDecl 0x56347458d190 <col:36, col:45> col:45 invalid y 'int'
| `-CompoundStmt 0x56347458db28 <line:151:1, line:155:1>
|   |-DeclStmt 0x56347458da78 <line:152:5, col:40>
|   | |-CXXRecordDecl 0x56347458d308 <col:5, col:35> col:5 invalid union definition
|   | | |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
|   | | | |-DefaultConstructor exists trivial
|   | | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-FieldDecl 0x56347458d440 <col:13, col:20> col:20 referenced x 'double'
|   | | |-FieldDecl 0x56347458d4b8 <col:23, col:32> col:32 invalid y 'int'
|   | | |-CXXConstructorDecl 0x56347458d5f8 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   | | | `-CompoundStmt 0x56347458da28 <col:5>
|   | | |-CXXConstructorDecl 0x56347458d6f8 <col:5> col:5 implicit constexpr  'void (const (anonymous union at bitcoin/src/serialize.h:152:5) &)' inline default trivial noexcept-unevaluated 0x56347458d6f8
|   | | | `-ParmVarDecl 0x56347458d808 <col:5> col:5 'const (anonymous union at bitcoin/src/serialize.h:152:5) &'
|   | | `-CXXConstructorDecl 0x56347458d8a8 <col:5> col:5 implicit constexpr  'void ((anonymous union at bitcoin/src/serialize.h:152:5) &&)' inline default trivial noexcept-unevaluated 0x56347458d8a8
|   | |   `-ParmVarDecl 0x56347458d9b8 <col:5> col:5 '(anonymous union at bitcoin/src/serialize.h:152:5) &&'
|   | `-VarDecl 0x56347458d578 <col:5, col:37> col:37 used tmp 'union (anonymous union at bitcoin/src/serialize.h:152:5)':'(anonymous union at bitcoin/src/serialize.h:152:5)' callinit
|   |   `-CXXConstructExpr 0x56347458da38 <col:37> 'union (anonymous union at bitcoin/src/serialize.h:152:5)':'(anonymous union at bitcoin/src/serialize.h:152:5)' 'void () noexcept'
|   `-ReturnStmt 0x56347458db18 <line:154:5, col:16>
|     `-ImplicitCastExpr 0x56347458db00 <col:12, col:16> 'double' <LValueToRValue>
|       `-MemberExpr 0x56347458dad0 <col:12, col:16> 'double' lvalue .x 0x56347458d440
|         `-DeclRefExpr 0x56347458dab0 <col:12> 'union (anonymous union at bitcoin/src/serialize.h:152:5)':'(anonymous union at bitcoin/src/serialize.h:152:5)' lvalue Var 0x56347458d578 'tmp' 'union (anonymous union at bitcoin/src/serialize.h:152:5)':'(anonymous union at bitcoin/src/serialize.h:152:5)'
|-FunctionDecl 0x56347458dca0 <line:156:1, line:161:1> line:156:14 invalid ser_uint32_to_float 'float (int)' inline
| |-ParmVarDecl 0x56347458db70 <col:34, col:43> col:43 invalid y 'int'
| `-CompoundStmt 0x56347458e598 <line:157:1, line:161:1>
|   |-DeclStmt 0x56347458e4b8 <line:158:5, col:39>
|   | |-CXXRecordDecl 0x56347458dd48 <col:5, col:34> col:5 invalid union definition
|   | | |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
|   | | | |-DefaultConstructor exists trivial
|   | | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   | | | |-MoveConstructor exists simple trivial
|   | | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | | | |-MoveAssignment exists simple trivial needs_implicit
|   | | | `-Destructor simple irrelevant trivial needs_implicit
|   | | |-FieldDecl 0x56347458de80 <col:13, col:19> col:19 referenced x 'float'
|   | | |-FieldDecl 0x56347458def8 <col:22, col:31> col:31 invalid y 'int'
|   | | |-CXXConstructorDecl 0x56347458e038 <col:5> col:5 implicit used  'void () noexcept' inline default trivial
|   | | | `-CompoundStmt 0x56347458e468 <col:5>
|   | | |-CXXConstructorDecl 0x56347458e138 <col:5> col:5 implicit constexpr  'void (const (anonymous union at bitcoin/src/serialize.h:158:5) &)' inline default trivial noexcept-unevaluated 0x56347458e138
|   | | | `-ParmVarDecl 0x56347458e248 <col:5> col:5 'const (anonymous union at bitcoin/src/serialize.h:158:5) &'
|   | | `-CXXConstructorDecl 0x56347458e2e8 <col:5> col:5 implicit constexpr  'void ((anonymous union at bitcoin/src/serialize.h:158:5) &&)' inline default trivial noexcept-unevaluated 0x56347458e2e8
|   | |   `-ParmVarDecl 0x56347458e3f8 <col:5> col:5 '(anonymous union at bitcoin/src/serialize.h:158:5) &&'
|   | `-VarDecl 0x56347458dfb8 <col:5, col:36> col:36 used tmp 'union (anonymous union at bitcoin/src/serialize.h:158:5)':'(anonymous union at bitcoin/src/serialize.h:158:5)' callinit
|   |   `-CXXConstructExpr 0x56347458e478 <col:36> 'union (anonymous union at bitcoin/src/serialize.h:158:5)':'(anonymous union at bitcoin/src/serialize.h:158:5)' 'void () noexcept'
|   `-ReturnStmt 0x56347458e558 <line:160:5, col:16>
|     `-ImplicitCastExpr 0x56347458e540 <col:12, col:16> 'float' <LValueToRValue>
|       `-MemberExpr 0x56347458e510 <col:12, col:16> 'float' lvalue .x 0x56347458de80
|         `-DeclRefExpr 0x56347458e4f0 <col:12> 'union (anonymous union at bitcoin/src/serialize.h:158:5)':'(anonymous union at bitcoin/src/serialize.h:158:5)' lvalue Var 0x56347458dfb8 'tmp' 'union (anonymous union at bitcoin/src/serialize.h:158:5)':'(anonymous union at bitcoin/src/serialize.h:158:5)'
|-CXXRecordDecl 0x56347458e5b8 <line:170:1, col:7> col:7 referenced class CSizeComputer
| `-FullComment 0x56347473c4f0 <line:164:4, col:65>
|   `-ParagraphComment 0x56347473c4c0 <col:4, col:65>
|     `-TextComment 0x56347473c490 <col:4, col:65> Text="//////////////////////////////////////////////////////////////"
|-EnumDecl 0x56347458e670 <line:172:1, line:178:1> line:172:1
| |-EnumConstantDecl 0x56347458e7d0 <line:175:5, col:34> col:5 referenced SER_NETWORK '(anonymous enum at bitcoin/src/serialize.h:172:1)'
| | `-ImplicitCastExpr 0x56347458ea00 <col:27, col:34> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56347458e7b0 <col:27, col:34> 'int' 1
| |     `-ParenExpr 0x56347458e790 <col:27, col:34> 'int'
| |       `-BinaryOperator 0x56347458e770 <col:28, col:33> 'int' '<<'
| |         |-IntegerLiteral 0x56347458e730 <col:28> 'int' 1
| |         `-IntegerLiteral 0x56347458e750 <col:33> 'int' 0
| |-EnumConstantDecl 0x56347458e8c0 <line:176:5, col:34> col:5 referenced SER_DISK '(anonymous enum at bitcoin/src/serialize.h:172:1)'
| | `-ImplicitCastExpr 0x56347458ea18 <col:27, col:34> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56347458e8a0 <col:27, col:34> 'int' 2
| |     `-ParenExpr 0x56347458e880 <col:27, col:34> 'int'
| |       `-BinaryOperator 0x56347458e860 <col:28, col:33> 'int' '<<'
| |         |-IntegerLiteral 0x56347458e820 <col:28> 'int' 1
| |         `-IntegerLiteral 0x56347458e840 <col:33> 'int' 1
| `-EnumConstantDecl 0x56347458e9b0 <line:177:5, col:34> col:5 referenced SER_GETHASH '(anonymous enum at bitcoin/src/serialize.h:172:1)'
|   `-ImplicitCastExpr 0x56347458ea30 <col:27, col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56347458e990 <col:27, col:34> 'int' 4
|       `-ParenExpr 0x56347458e970 <col:27, col:34> 'int'
|         `-BinaryOperator 0x56347458e950 <col:28, col:33> 'int' '<<'
|           |-IntegerLiteral 0x56347458e910 <col:28> 'int' 1
|           `-IntegerLiteral 0x56347458e930 <col:33> 'int' 2
|-FunctionTemplateDecl 0x56347458ed50 <line:181:1, col:61> col:25 ReadWriteAsHelper
| |-TemplateTypeParmDecl 0x56347458ea78 <col:10, col:19> col:19 referenced typename depth 0 index 0 X
| |-FunctionDecl 0x56347458ecb0 <col:22, col:61> col:25 ReadWriteAsHelper 'X &(X &)'
| | |-ParmVarDecl 0x56347458eb38 <col:43, col:46> col:46 referenced x 'X &'
| | |-CompoundStmt 0x56347458ede0 <col:49, col:61>
| | | `-ReturnStmt 0x56347458edd0 <col:51, col:58>
| | |   `-DeclRefExpr 0x56347458edb0 <col:58> 'X' lvalue ParmVar 0x56347458eb38 'x' 'X &'
| | `-FullComment 0x56347473c710 <line:180:4, col:87>
| |   `-ParagraphComment 0x56347473c6e0 <col:4, col:87>
| |     `-TextComment 0x56347473c6b0 <col:4, col:87> Text=" Convert the reference base type to X, without changing constness or reference type."
| `-FullComment 0x56347473c640 <col:4, col:87>
|   `-ParagraphComment 0x56347473c610 <col:4, col:87>
|     `-TextComment 0x56347473c5e0 <col:4, col:87> Text=" Convert the reference base type to X, without changing constness or reference type."
|-FunctionTemplateDecl 0x56347458f048 <line:182:1, col:73> col:31 ReadWriteAsHelper
| |-TemplateTypeParmDecl 0x56347458edf8 <col:10, col:19> col:19 referenced typename depth 0 index 0 X
| `-FunctionDecl 0x56347458efa8 <col:22, col:73> col:31 ReadWriteAsHelper 'const X &(const X &)'
|   |-ParmVarDecl 0x56347458eeb8 <col:49, col:58> col:58 referenced x 'const X &'
|   `-CompoundStmt 0x56347458f108 <col:61, col:73>
|     `-ReturnStmt 0x56347458f0c8 <col:63, col:70>
|       `-DeclRefExpr 0x56347458f0a8 <col:70> 'const X' lvalue ParmVar 0x56347458eeb8 'x' 'const X &'
|-FunctionTemplateDecl 0x56347458f418 <line:204:1, col:96> col:39 Serialize
| |-TemplateTypeParmDecl 0x56347458f120 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458f378 <col:27, col:96> col:39 Serialize 'void (Stream &, char)' inline
|   |-ParmVarDecl 0x56347458f1e8 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x56347458f260 <col:60, col:65> col:65 referenced a 'char'
|   `-CompoundStmt 0x56347458f538 <col:72, col:96>
|     `-CallExpr 0x56347458f508 <col:74, col:93> '<dependent type>'
|       |-UnresolvedLookupExpr 0x56347458f480 <col:74> '<overloaded function type>' lvalue (ADL) = 'ser_writedata8' 0x5634745891a8
|       |-DeclRefExpr 0x56347458f4c8 <col:89> 'Stream' lvalue ParmVar 0x56347458f1e8 's' 'Stream &'
|       `-DeclRefExpr 0x56347458f4e8 <col:92> 'char' lvalue ParmVar 0x56347458f260 'a' 'char'
|-FunctionTemplateDecl 0x56347458f818 <line:206:1, col:96> col:39 invalid Serialize
| |-TemplateTypeParmDecl 0x56347458f550 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458f778 <col:27, col:96> col:39 invalid Serialize 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x56347458f618 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x56347458f6a8 <col:60, col:67> col:67 invalid a 'int'
|   `-CompoundStmt 0x56347458f8e8 <col:72, col:96>
|-FunctionTemplateDecl 0x56347458fbb8 <line:207:1, col:96> col:39 invalid Serialize
| |-TemplateTypeParmDecl 0x56347458f8f8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458fb18 <col:27, col:96> col:39 invalid Serialize 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x56347458f9b8 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x56347458fa48 <col:60, col:68> col:68 invalid a 'int'
|   `-CompoundStmt 0x56347458fc88 <col:72, col:96>
|-FunctionTemplateDecl 0x56347458ff88 <line:208:1, col:97> col:39 invalid Serialize
| |-TemplateTypeParmDecl 0x56347458fcc0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347458fee8 <col:27, col:97> col:39 invalid Serialize 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x56347458fd88 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x56347458fe18 <col:60, col:68> col:68 invalid a 'int'
|   `-CompoundStmt 0x563474590058 <col:72, col:97>
|-FunctionTemplateDecl 0x563474590328 <line:209:1, col:97> col:39 invalid Serialize
| |-TemplateTypeParmDecl 0x563474590068 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474590288 <col:27, col:97> col:39 invalid Serialize 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474590128 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745901b8 <col:60, col:69> col:69 invalid a 'int'
|   `-CompoundStmt 0x5634745903f8 <col:72, col:97>
|-FunctionTemplateDecl 0x5634745906c8 <line:210:1, col:97> col:39 invalid Serialize
| |-TemplateTypeParmDecl 0x563474590408 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474590628 <col:27, col:97> col:39 invalid Serialize 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x5634745904c8 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474590558 <col:60, col:68> col:68 invalid a 'int'
|   `-CompoundStmt 0x563474590798 <col:72, col:97>
|-FunctionTemplateDecl 0x563474590a68 <line:211:1, col:97> col:39 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745907a8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x5634745909c8 <col:27, col:97> col:39 invalid Serialize 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474590868 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745908f8 <col:60, col:69> col:69 invalid a 'int'
|   `-CompoundStmt 0x563474590b38 <col:72, col:97>
|-FunctionTemplateDecl 0x563474590e48 <line:212:1, col:97> col:39 invalid Serialize
| |-TemplateTypeParmDecl 0x563474590b48 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474590da8 <col:27, col:97> col:39 invalid Serialize 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474590c08 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474590cd0 <col:60, col:68> col:68 invalid a 'int'
|   `-CompoundStmt 0x563474590f18 <col:72, col:97>
|-FunctionTemplateDecl 0x5634745911e8 <line:213:1, col:97> col:39 invalid Serialize
| |-TemplateTypeParmDecl 0x563474590f28 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474591148 <col:27, col:97> col:39 invalid Serialize 'void (Stream &, int)' inline
|   |-ParmVarDecl 0x563474590fe8 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474591078 <col:60, col:69> col:69 invalid a 'int'
|   `-CompoundStmt 0x5634745912b8 <col:72, col:97>
|-FunctionTemplateDecl 0x5634745915b8 <line:214:1, col:118> col:39 Serialize
| |-TemplateTypeParmDecl 0x5634745912c8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474591518 <col:27, col:118> col:39 Serialize 'void (Stream &, float)' inline
|   |-ParmVarDecl 0x563474591388 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474591408 <col:60, col:66> col:66 referenced a 'float'
|   `-CompoundStmt 0x5634745916a8 <col:72, col:118>
|-FunctionTemplateDecl 0x5634745919a8 <line:215:1, col:119> col:39 Serialize
| |-TemplateTypeParmDecl 0x5634745916b8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474591908 <col:27, col:119> col:39 Serialize 'void (Stream &, double)' inline
|   |-ParmVarDecl 0x563474591778 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745917f8 <col:60, col:67> col:67 referenced a 'double'
|   `-CompoundStmt 0x563474591a98 <col:72, col:119>
|-FunctionTemplateDecl 0x563474591f88 <line:216:1, col:104> col:46 Serialize
| |-TemplateTypeParmDecl 0x563474591aa8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x563474591b30 <col:27, col:31> col:31 referenced 'int' depth 0 index 1 N
| `-FunctionDecl 0x563474591ee8 <col:34, col:104> col:46 Serialize 'void (Stream &, const char (&)[N])' inline
|   |-ParmVarDecl 0x563474591be8 <col:56, col:64> col:64 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474591dd8 <col:67, col:84> col:80 referenced a 'const char (&)[N]'
|   `-CompoundStmt 0x5634745920c8 <col:87, col:104>
|     `-CallExpr 0x563474592098 <col:89, col:101> '<dependent type>'
|       |-CXXDependentScopeMemberExpr 0x563474592010 <col:89, col:91> '<dependent type>' lvalue .write
|       | `-DeclRefExpr 0x563474591ff0 <col:89> 'Stream' lvalue ParmVar 0x563474591be8 's' 'Stream &'
|       |-DeclRefExpr 0x563474592058 <col:97> 'const char [N]':'const char [N]' lvalue ParmVar 0x563474591dd8 'a' 'const char (&)[N]'
|       `-DeclRefExpr 0x563474592078 <col:100> 'int' NonTypeTemplateParm 0x563474591b30 'N' 'int'
|-FunctionTemplateDecl 0x5634745925a8 <line:217:1, col:123> col:46 Serialize
| |-TemplateTypeParmDecl 0x5634745920e0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x563474592170 <col:27, col:31> col:31 referenced 'int' depth 0 index 1 N
| `-FunctionDecl 0x563474592508 <col:34, col:123> col:46 Serialize 'void (Stream &, const unsigned char (&)[N])' inline
|   |-ParmVarDecl 0x563474592228 <col:56, col:64> col:64 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745923f0 <col:67, col:93> col:89 referenced a 'const unsigned char (&)[N]'
|   `-CompoundStmt 0x563474592770 <col:96, col:123>
|     `-CallExpr 0x563474592740 <col:98, col:120> '<dependent type>'
|       |-CXXDependentScopeMemberExpr 0x563474592630 <col:98, col:100> '<dependent type>' lvalue .write
|       | `-DeclRefExpr 0x563474592610 <col:98> 'Stream' lvalue ParmVar 0x563474592228 's' 'Stream &'
|       |-CallExpr 0x5634745926f8 <col:106, col:116> '<dependent type>'
|       | |-UnresolvedLookupExpr 0x563474592678 <col:106> '<overloaded function type>' lvalue (ADL) = 'CharCast' 0x563474588d60 0x56347455a340 0x56347455a110 0x563474559ef0
|       | `-DeclRefExpr 0x5634745926d8 <col:115> 'const unsigned char [N]':'const unsigned char [N]' lvalue ParmVar 0x5634745923f0 'a' 'const unsigned char (&)[N]'
|       `-DeclRefExpr 0x563474592720 <col:119> 'int' NonTypeTemplateParm 0x563474592170 'N' 'int'
|-FunctionTemplateDecl 0x563474592c88 <line:218:1, col:146> col:39 Serialize
| |-TemplateTypeParmDecl 0x563474592788 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474592be8 <col:27, col:146> col:39 Serialize 'void (Stream &, const Span<const unsigned char> &)' inline
|   |-ParmVarDecl 0x563474592848 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474592ad0 <col:60, col:93> col:93 referenced span 'const Span<const unsigned char> &'
|   `-CompoundStmt 0x563474592e08 <col:99, col:146>
|-FunctionTemplateDecl 0x563474593318 <line:219:1, col:140> col:39 Serialize
| |-TemplateTypeParmDecl 0x563474592e18 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474593278 <col:27, col:140> col:39 Serialize 'void (Stream &, const Span<unsigned char> &)' inline
|   |-ParmVarDecl 0x563474592ed8 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474593160 <col:60, col:87> col:87 referenced span 'const Span<unsigned char> &'
|   `-CompoundStmt 0x563474593488 <col:93, col:140>
|-FunctionTemplateDecl 0x5634745937b8 <line:222:1, col:99> col:39 Unserialize
| |-TemplateTypeParmDecl 0x563474593498 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474593718 <col:27, col:99> col:39 Unserialize 'void (Stream &, char &)' inline
|   |-ParmVarDecl 0x563474593558 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474593600 <col:62, col:68> col:68 referenced a 'char &'
|   `-CompoundStmt 0x5634745938f0 <col:75, col:99>
|     `-BinaryOperator 0x5634745938d0 <col:77, col:96> '<dependent type>' '='
|       |-DeclRefExpr 0x563474593820 <col:77> 'char' lvalue ParmVar 0x563474593600 'a' 'char &'
|       `-CallExpr 0x5634745938a8 <col:81, col:96> '<dependent type>'
|         |-UnresolvedLookupExpr 0x563474593840 <col:81> '<overloaded function type>' lvalue (ADL) = 'ser_readdata8' 0x56347458a7c0
|         `-DeclRefExpr 0x563474593888 <col:95> 'Stream' lvalue ParmVar 0x563474593558 's' 'Stream &'
|-FunctionTemplateDecl 0x563474593c38 <line:224:1, col:99> col:39 invalid Unserialize
| |-TemplateTypeParmDecl 0x563474593908 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474593b98 <col:27, col:99> col:39 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x5634745939c8 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474593a80 <col:62, col:70> col:70 invalid a 'int &'
|   `-CompoundStmt 0x563474593d48 <col:75, col:99>
|-FunctionTemplateDecl 0x563474594018 <line:225:1, col:99> col:39 invalid Unserialize
| |-TemplateTypeParmDecl 0x563474593d58 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474593f78 <col:27, col:99> col:39 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x563474593e18 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474593ea8 <col:62, col:71> col:71 invalid a 'int &'
|   `-CompoundStmt 0x563474594110 <col:75, col:99>
|-FunctionTemplateDecl 0x5634745943e8 <line:226:1, col:100> col:39 invalid Unserialize
| |-TemplateTypeParmDecl 0x563474594120 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474594348 <col:27, col:100> col:39 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x5634745941e8 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474594278 <col:62, col:71> col:71 invalid a 'int &'
|   `-CompoundStmt 0x5634745944e0 <col:75, col:100>
|-FunctionTemplateDecl 0x5634745947b8 <line:227:1, col:100> col:39 invalid Unserialize
| |-TemplateTypeParmDecl 0x5634745944f0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474594718 <col:27, col:100> col:39 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x5634745945b8 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474594648 <col:62, col:72> col:72 invalid a 'int &'
|   `-CompoundStmt 0x5634745948b0 <col:75, col:100>
|-FunctionTemplateDecl 0x563474594b88 <line:228:1, col:100> col:39 invalid Unserialize
| |-TemplateTypeParmDecl 0x5634745948c0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474594ae8 <col:27, col:100> col:39 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x563474594988 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474594a18 <col:62, col:71> col:71 invalid a 'int &'
|   `-CompoundStmt 0x563474594c80 <col:75, col:100>
|-FunctionTemplateDecl 0x563474594f88 <line:229:1, col:100> col:39 invalid Unserialize
| |-TemplateTypeParmDecl 0x563474594c90 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474594ee8 <col:27, col:100> col:39 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x563474594d88 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474594e18 <col:62, col:72> col:72 invalid a 'int &'
|   `-CompoundStmt 0x563474595080 <col:75, col:100>
|-FunctionTemplateDecl 0x563474595358 <line:230:1, col:100> col:39 invalid Unserialize
| |-TemplateTypeParmDecl 0x563474595090 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x5634745952b8 <col:27, col:100> col:39 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x563474595158 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745951e8 <col:62, col:71> col:71 invalid a 'int &'
|   `-CompoundStmt 0x563474595450 <col:75, col:100>
|-FunctionTemplateDecl 0x563474595728 <line:231:1, col:100> col:39 invalid Unserialize
| |-TemplateTypeParmDecl 0x563474595460 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474595688 <col:27, col:100> col:39 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x563474595528 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745955b8 <col:62, col:72> col:72 invalid a 'int &'
|   `-CompoundStmt 0x563474595820 <col:75, col:100>
|-FunctionTemplateDecl 0x563474595b58 <line:232:1, col:121> col:39 Unserialize
| |-TemplateTypeParmDecl 0x563474595830 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474595ab8 <col:27, col:121> col:39 Unserialize 'void (Stream &, float &)' inline
|   |-ParmVarDecl 0x5634745958f8 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745959a0 <col:62, col:69> col:69 referenced a 'float &'
|   `-CompoundStmt 0x563474595c70 <col:75, col:121>
|-FunctionTemplateDecl 0x563474597fb8 <line:233:1, col:122> col:39 Unserialize
| |-TemplateTypeParmDecl 0x563474595c80 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474597f18 <col:27, col:122> col:39 Unserialize 'void (Stream &, double &)' inline
|   |-ParmVarDecl 0x563474597d58 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474597e00 <col:62, col:70> col:70 referenced a 'double &'
|   `-CompoundStmt 0x5634745980d0 <col:75, col:122>
|-FunctionTemplateDecl 0x563474598558 <line:234:1, col:99> col:46 Unserialize
| |-TemplateTypeParmDecl 0x5634745980e0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x563474598170 <col:27, col:31> col:31 referenced 'int' depth 0 index 1 N
| `-FunctionDecl 0x5634745984b8 <col:34, col:99> col:46 Unserialize 'void (Stream &, char (&)[N])' inline
|   |-ParmVarDecl 0x563474598228 <col:58, col:66> col:66 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745983a8 <col:69, col:80> col:76 referenced a 'char (&)[N]'
|   `-CompoundStmt 0x563474598698 <col:83, col:99>
|     `-CallExpr 0x563474598668 <col:85, col:96> '<dependent type>'
|       |-CXXDependentScopeMemberExpr 0x5634745985e0 <col:85, col:87> '<dependent type>' lvalue .read
|       | `-DeclRefExpr 0x5634745985c0 <col:85> 'Stream' lvalue ParmVar 0x563474598228 's' 'Stream &'
|       |-DeclRefExpr 0x563474598628 <col:92> 'char [N]':'char [N]' lvalue ParmVar 0x5634745983a8 'a' 'char (&)[N]'
|       `-DeclRefExpr 0x563474598648 <col:95> 'int' NonTypeTemplateParm 0x563474598170 'N' 'int'
|-FunctionTemplateDecl 0x563474598b38 <line:235:1, col:118> col:46 Unserialize
| |-TemplateTypeParmDecl 0x5634745986b0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x563474598740 <col:27, col:31> col:31 referenced 'int' depth 0 index 1 N
| `-FunctionDecl 0x563474598a98 <col:34, col:118> col:46 Unserialize 'void (Stream &, unsigned char (&)[N])' inline
|   |-ParmVarDecl 0x5634745987f8 <col:58, col:66> col:66 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474598980 <col:69, col:89> col:85 referenced a 'unsigned char (&)[N]'
|   `-CompoundStmt 0x563474598d00 <col:92, col:118>
|     `-CallExpr 0x563474598cd0 <col:94, col:115> '<dependent type>'
|       |-CXXDependentScopeMemberExpr 0x563474598bc0 <col:94, col:96> '<dependent type>' lvalue .read
|       | `-DeclRefExpr 0x563474598ba0 <col:94> 'Stream' lvalue ParmVar 0x5634745987f8 's' 'Stream &'
|       |-CallExpr 0x563474598c88 <col:101, col:111> '<dependent type>'
|       | |-UnresolvedLookupExpr 0x563474598c08 <col:101> '<overloaded function type>' lvalue (ADL) = 'CharCast' 0x563474588d60 0x56347455a340 0x56347455a110 0x563474559ef0
|       | `-DeclRefExpr 0x563474598c68 <col:110> 'unsigned char [N]':'unsigned char [N]' lvalue ParmVar 0x563474598980 'a' 'unsigned char (&)[N]'
|       `-DeclRefExpr 0x563474598cb0 <col:114> 'int' NonTypeTemplateParm 0x563474598740 'N' 'int'
|-FunctionTemplateDecl 0x563474599138 <line:236:1, col:135> col:39 Unserialize
| |-TemplateTypeParmDecl 0x563474598d30 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474599098 <col:27, col:135> col:39 Unserialize 'void (Stream &, Span<unsigned char> &)' inline
|   |-ParmVarDecl 0x563474598df8 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474598f80 <col:62, col:83> col:83 referenced span 'Span<unsigned char> &'
|   `-CompoundStmt 0x5634745992a8 <col:89, col:135>
|-FunctionTemplateDecl 0x5634745995a8 <line:238:1, col:105> col:39 Serialize
| |-TemplateTypeParmDecl 0x5634745992b8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474599508 <col:27, col:105> col:39 Serialize 'void (Stream &, bool)' inline
|   |-ParmVarDecl 0x563474599378 <col:49, col:57> col:57 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745993f0 <col:60, col:65> col:65 referenced a 'bool'
|   `-CompoundStmt 0x5634745997a8 <col:71, col:105>
|     |-DeclStmt 0x5634745996d8 <col:73, col:81>
|     | `-VarDecl 0x563474599620 <col:73, col:80> col:78 referenced f 'char' cinit
|     |   `-ImplicitCastExpr 0x5634745996c0 <col:80> 'char' <IntegralCast>
|     |     `-ImplicitCastExpr 0x5634745996a8 <col:80> 'bool' <LValueToRValue>
|     |       `-DeclRefExpr 0x563474599688 <col:80> 'bool' lvalue ParmVar 0x5634745993f0 'a' 'bool'
|     `-CallExpr 0x563474599778 <col:83, col:102> '<dependent type>'
|       |-UnresolvedLookupExpr 0x5634745996f0 <col:83> '<overloaded function type>' lvalue (ADL) = 'ser_writedata8' 0x5634745891a8
|       |-DeclRefExpr 0x563474599738 <col:98> 'Stream' lvalue ParmVar 0x563474599378 's' 'Stream &'
|       `-DeclRefExpr 0x563474599758 <col:101> 'char' lvalue Var 0x563474599620 'f' 'char'
|-FunctionTemplateDecl 0x563474599ae8 <line:239:1, col:103> col:39 Unserialize
| |-TemplateTypeParmDecl 0x5634745997c8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x563474599a48 <col:27, col:103> col:39 Unserialize 'void (Stream &, bool &)' inline
|   |-ParmVarDecl 0x563474599888 <col:51, col:59> col:59 referenced s 'Stream &'
|   |-ParmVarDecl 0x563474599930 <col:62, col:68> col:68 referenced a 'bool &'
|   `-CompoundStmt 0x563474599d40 <col:71, col:103>
|     |-DeclStmt 0x563474599c58 <col:73, col:96>
|     | `-VarDecl 0x563474599b60 <col:73, col:95> col:78 referenced f 'char' cinit
|     |   `-CallExpr 0x563474599c30 <col:80, col:95> '<dependent type>'
|     |     |-UnresolvedLookupExpr 0x563474599bc8 <col:80> '<overloaded function type>' lvalue (ADL) = 'ser_readdata8' 0x56347458a7c0
|     |     `-DeclRefExpr 0x563474599c10 <col:94> 'Stream' lvalue ParmVar 0x563474599888 's' 'Stream &'
|     `-BinaryOperator 0x563474599ce0 <col:98, col:100> 'bool' lvalue '='
|       |-DeclRefExpr 0x563474599c70 <col:98> 'bool' lvalue ParmVar 0x563474599930 'a' 'bool &'
|       `-ImplicitCastExpr 0x563474599cc8 <col:100> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x563474599cb0 <col:100> 'char' <LValueToRValue>
|           `-DeclRefExpr 0x563474599c90 <col:100> 'char' lvalue Var 0x563474599b60 'f' 'char'
|-FunctionDecl 0x563474599e50 <line:253:1, line:259:1> line:253:21 invalid GetSizeOfCompactSize 'unsigned int (int)' inline
| |-ParmVarDecl 0x563474599d88 <col:42, col:51> col:51 invalid nSize 'int'
| |-CompoundStmt 0x56347459a238 <line:254:1, line:259:1>
| | `-IfStmt 0x56347459a210 <line:255:5, line:258:34> has_else
| |   |-OpaqueValueExpr 0x56347459a1f8 <<invalid sloc>> 'bool'
| |   |-ReturnStmt 0x563474599f68 <line:255:34, col:61>
| |   | `-ImplicitCastExpr 0x563474599f50 <col:41, col:61> 'unsigned int' <IntegralCast>
| |   |   `-UnaryExprOrTypeTraitExpr 0x563474599f30 <col:41, col:61> 'unsigned long' sizeof 'unsigned char'
| |   `-IfStmt 0x56347459a1d0 <line:256:10, line:258:34> has_else
| |     |-OpaqueValueExpr 0x56347459a1b8 <<invalid sloc>> 'bool'
| |     |-ReturnStmt 0x56347459a048 <line:256:67, col:119>
| |     | `-ImplicitCastExpr 0x56347459a030 <col:74, col:119> 'unsigned int' <IntegralCast>
| |     |   `-BinaryOperator 0x56347459a010 <col:74, col:119> 'unsigned long' '+'
| |     |     |-UnaryExprOrTypeTraitExpr 0x563474599fb8 <col:74, col:94> 'unsigned long' sizeof 'unsigned char'
| |     |     `-UnaryExprOrTypeTraitExpr 0x563474599ff0 <col:98, col:119> 'unsigned long' sizeof 'unsigned short'
| |     `-IfStmt 0x56347459a190 <line:257:10, line:258:34> has_else
| |       |-OpaqueValueExpr 0x56347459a178 <<invalid sloc>> 'bool'
| |       |-ReturnStmt 0x56347459a128 <line:257:66, col:116>
| |       | `-ImplicitCastExpr 0x56347459a110 <col:73, col:116> 'unsigned int' <IntegralCast>
| |       |   `-BinaryOperator 0x56347459a0f0 <col:73, col:116> 'unsigned long' '+'
| |       |     |-UnaryExprOrTypeTraitExpr 0x56347459a098 <col:73, col:93> 'unsigned long' sizeof 'unsigned char'
| |       |     `-UnaryExprOrTypeTraitExpr 0x56347459a0d0 <col:97, col:116> 'unsigned long' sizeof 'unsigned int'
| |       `-NullStmt 0x56347459a170 <line:258:34>
| `-FullComment 0x5634747439e0 <line:247:3, line:251:49>
|   `-ParagraphComment 0x5634747439b0 <line:247:3, line:251:49>
|     |-TextComment 0x5634747437f0 <line:247:3, col:15> Text=" Compact Size"
|     |-TextComment 0x563474743810 <line:248:3, col:8> Text=" size "
|     |-TextComment 0x563474743830 <col:9> Text="<"
|     |-TextComment 0x563474743850 <col:10, col:31> Text="  253        -- 1 byte"
|     |-TextComment 0x563474743870 <line:249:3, col:8> Text=" size "
|     |-TextComment 0x563474743890 <col:9> Text="<"
|     |-TextComment 0x5634747438b0 <col:10, col:49> Text="= USHRT_MAX  -- 3 bytes  (253 + 2 bytes)"
|     |-TextComment 0x5634747438d0 <line:250:3, col:8> Text=" size "
|     |-TextComment 0x5634747438f0 <col:9> Text="<"
|     |-TextComment 0x563474743910 <col:10, col:49> Text="= UINT_MAX   -- 5 bytes  (254 + 4 bytes)"
|     `-TextComment 0x563474743930 <line:251:3, col:49> Text=" size >  UINT_MAX   -- 9 bytes  (255 + 8 bytes)"
|-FunctionDecl 0x56347459a3e8 <line:261:1, col:63> col:13 invalid WriteCompactSize 'void (CSizeComputer &, int)' inline
| |-ParmVarDecl 0x56347459a288 <col:30, col:45> col:45 os 'CSizeComputer &'
| `-ParmVarDecl 0x56347459a318 <col:49, col:58> col:58 invalid nSize 'int'
|-FunctionTemplateDecl 0x56347459a758 <line:263:1, line:286:1> line:264:6 invalid WriteCompactSize
| |-TemplateTypeParmDecl 0x56347459a498 <line:263:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347459a6b8 <line:264:1, line:286:1> line:264:6 invalid WriteCompactSize 'void (Stream &, int)'
|   |-ParmVarDecl 0x56347459a558 <col:23, col:31> col:31 referenced os 'Stream &'
|   |-ParmVarDecl 0x56347459a5e8 <col:35, col:44> col:44 invalid nSize 'int'
|   `-CompoundStmt 0x56347459ad20 <line:265:1, line:286:1>
|     |-IfStmt 0x56347459ace8 <line:266:5, line:284:5> has_else
|     | |-OpaqueValueExpr 0x56347459acd0 <<invalid sloc>> 'bool'
|     | |-CompoundStmt 0x56347459a848 <line:267:5, line:269:5>
|     | `-IfStmt 0x56347459aca8 <line:270:10, line:284:5> has_else
|     |   |-OpaqueValueExpr 0x56347459ac90 <<invalid sloc>> 'bool'
|     |   |-CompoundStmt 0x56347459a9a0 <line:271:5, line:274:5>
|     |   | `-CallExpr 0x56347459a908 <line:272:9, col:31> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56347459a880 <col:9> '<overloaded function type>' lvalue (ADL) = 'ser_writedata8' 0x5634745891a8
|     |   |   |-DeclRefExpr 0x56347459a8c8 <col:24> 'Stream' lvalue ParmVar 0x56347459a558 'os' 'Stream &'
|     |   |   `-IntegerLiteral 0x56347459a8e8 <col:28> 'int' 253
|     |   `-IfStmt 0x56347459ac68 <line:275:10, line:284:5> has_else
|     |     |-OpaqueValueExpr 0x56347459ac50 <<invalid sloc>> 'bool'
|     |     |-CompoundStmt 0x56347459ab00 <line:276:5, line:279:5>
|     |     | `-CallExpr 0x56347459aa68 <line:277:9, col:31> '<dependent type>'
|     |     |   |-UnresolvedLookupExpr 0x56347459a9e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'ser_writedata8' 0x5634745891a8
|     |     |   |-DeclRefExpr 0x56347459aa28 <col:24> 'Stream' lvalue ParmVar 0x56347459a558 'os' 'Stream &'
|     |     |   `-IntegerLiteral 0x56347459aa48 <col:28> 'int' 254
|     |     `-CompoundStmt 0x56347459ac38 <line:281:5, line:284:5>
|     |       `-CallExpr 0x56347459aba0 <line:282:9, col:31> '<dependent type>'
|     |         |-UnresolvedLookupExpr 0x56347459ab18 <col:9> '<overloaded function type>' lvalue (ADL) = 'ser_writedata8' 0x5634745891a8
|     |         |-DeclRefExpr 0x56347459ab60 <col:24> 'Stream' lvalue ParmVar 0x56347459a558 'os' 'Stream &'
|     |         `-IntegerLiteral 0x56347459ab80 <col:28> 'int' 255
|     `-ReturnStmt 0x56347459ad10 <line:285:5>
|-FunctionTemplateDecl 0x56347459af90 <line:288:1, line:318:1> line:289:10 invalid ReadCompactSize
| |-TemplateTypeParmDecl 0x56347459ad50 <line:288:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x56347459aef0 <line:289:1, line:318:1> line:289:10 invalid ReadCompactSize 'int (Stream &)'
|   |-ParmVarDecl 0x56347459ae28 <col:26, col:34> col:34 referenced is 'Stream &'
|   `-CompoundStmt 0x56347459b798 <line:290:1, line:318:1>
|     |-DeclStmt 0x56347459b110 <line:291:5, col:39>
|     | `-VarDecl 0x56347459b018 <col:5, col:13> col:13 invalid chSize 'int'
|     |-DeclStmt 0x56347459b1d8 <line:292:5, col:26>
|     | `-VarDecl 0x56347459b150 <col:5, col:14> col:14 invalid nSizeRet 'int'
|     `-IfStmt 0x56347459b658 <line:293:5, line:314:5> has_else
|       |-OpaqueValueExpr 0x56347459b640 <<invalid sloc>> 'bool'
|       |-CompoundStmt 0x56347459b210 <line:294:5, line:296:5>
|       `-IfStmt 0x56347459b618 <line:297:10, line:314:5> has_else
|         |-OpaqueValueExpr 0x56347459b600 <<invalid sloc>> 'bool'
|         |-CompoundStmt 0x56347459b3a0 <line:298:5, line:302:5>
|         `-IfStmt 0x56347459b5d8 <line:303:10, line:314:5> has_else
|           |-OpaqueValueExpr 0x56347459b5c0 <<invalid sloc>> 'bool'
|           |-CompoundStmt 0x56347459b4b8 <line:304:5, line:308:5>
|           `-CompoundStmt 0x56347459b5b0 <line:310:5, line:314:5>
|-EnumDecl 0x56347459b7c0 <line:354:1, col:53> col:12 referenced class VarIntMode 'int'
| |-FullComment 0x563474743cc0 <line:345:3, line:352:68>
| | |-ParagraphComment 0x563474743b80 <line:345:3, col:29>
| | | `-TextComment 0x563474743b50 <col:3, col:29> Text=" Mode for encoding VarInts."
| | `-ParagraphComment 0x563474743c90 <line:347:3, line:352:68>
| |   |-TextComment 0x563474743ba0 <line:347:3, col:80> Text=" Currently there is no support for signed encodings. The default mode will not"
| |   |-TextComment 0x563474743bc0 <line:348:3, col:76> Text=" compile with signed values, and the legacy "nonnegative signed" mode will"
| |   |-TextComment 0x563474743be0 <line:349:3, col:74> Text=" accept signed values, but improperly encode and decode them if they are"
| |   |-TextComment 0x563474743c00 <line:350:3, col:73> Text=" negative. In the future, the DEFAULT mode could be extended to support"
| |   |-TextComment 0x563474743c20 <line:351:3, col:80> Text=" negative numbers in a backwards compatible way, and additional modes could be"
| |   `-TextComment 0x563474743c40 <line:352:3, col:68> Text=" added to support different varint formats (e.g. zigzag encoding)."
| |-EnumConstantDecl 0x56347459b880 <line:354:25> col:25 referenced DEFAULT 'VarIntMode'
| `-EnumConstantDecl 0x56347459b8d0 <col:34> col:34 referenced NONNEGATIVE_SIGNED 'VarIntMode'
|-ClassTemplateDecl 0x56347459bab8 <line:356:1, line:363:1> line:357:8 CheckVarIntMode
| |-NonTypeTemplateParmDecl 0x56347459b930 <line:356:11, col:22> col:22 referenced 'VarIntMode' depth 0 index 0 Mode
| |-TemplateTypeParmDecl 0x56347459b990 <col:28, col:37> col:37 referenced typename depth 0 index 1 I
| `-CXXRecordDecl 0x56347459ba28 <line:357:1, line:363:1> line:357:8 struct CheckVarIntMode definition
|   |-DefinitionData empty standard_layout trivially_copyable literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists non_trivial user_provided constexpr defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-CXXRecordDecl 0x56347459bdc8 <col:1, col:8> col:8 implicit referenced struct CheckVarIntMode
|   `-CXXConstructorDecl 0x56347459bec0 <line:358:5, line:362:5> line:358:15 constexpr CheckVarIntMode<Mode, I> 'void ()'
|     `-CompoundStmt 0x56347459c128 <line:359:5, line:362:5>
|-FunctionTemplateDecl 0x56347459c3e0 <line:365:1, line:377:1> line:366:21 GetSizeOfVarInt
| |-NonTypeTemplateParmDecl 0x56347459c148 <line:365:10, col:21> col:21 referenced 'VarIntMode' depth 0 index 0 Mode
| |-TemplateTypeParmDecl 0x56347459c1a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 I
| `-FunctionDecl 0x56347459c340 <line:366:1, line:377:1> line:366:21 GetSizeOfVarInt 'unsigned int (I)' inline
|   |-ParmVarDecl 0x56347459c248 <col:37, col:39> col:39 referenced n 'I'
|   `-CompoundStmt 0x56347459c898 <line:367:1, line:377:1>
|     |-CXXUnresolvedConstructExpr 0x56347459c558 <line:368:5, col:30> 'CheckVarIntMode<Mode, I>' 'CheckVarIntMode<Mode, I>'
|     |-DeclStmt 0x56347459c618 <line:369:5, col:17>
|     | `-VarDecl 0x56347459c590 <col:5, col:16> col:9 referenced nRet 'int' cinit
|     |   `-IntegerLiteral 0x56347459c5f8 <col:16> 'int' 0
|     |-WhileStmt 0x56347459c820 <line:370:5, line:375:5>
|     | |-CXXBoolLiteralExpr 0x56347459c630 <line:370:11> 'bool' true
|     | `-CompoundStmt 0x56347459c7f8 <col:17, line:375:5>
|     |   |-UnaryOperator 0x56347459c660 <line:371:9, col:13> 'int' postfix '++'
|     |   | `-DeclRefExpr 0x56347459c640 <col:9> 'int' lvalue Var 0x56347459c590 'nRet' 'int'
|     |   |-IfStmt 0x56347459c6e0 <line:372:9, line:373:13>
|     |   | |-BinaryOperator 0x56347459c6b8 <line:372:13, col:18> '<dependent type>' '<='
|     |   | | |-DeclRefExpr 0x56347459c678 <col:13> 'I' lvalue ParmVar 0x56347459c248 'n' 'I'
|     |   | | `-IntegerLiteral 0x56347459c698 <col:18> 'int' 127
|     |   | `-BreakStmt 0x56347459c6d8 <line:373:13>
|     |   `-BinaryOperator 0x56347459c7d8 <line:374:9, col:24> '<dependent type>' '='
|     |     |-DeclRefExpr 0x56347459c6f8 <col:9> 'I' lvalue ParmVar 0x56347459c248 'n' 'I'
|     |     `-BinaryOperator 0x56347459c7b8 <col:13, col:24> '<dependent type>' '-'
|     |       |-ParenExpr 0x56347459c778 <col:13, col:20> '<dependent type>'
|     |       | `-BinaryOperator 0x56347459c758 <col:14, col:19> '<dependent type>' '>>'
|     |       |   |-DeclRefExpr 0x56347459c718 <col:14> 'I' lvalue ParmVar 0x56347459c248 'n' 'I'
|     |       |   `-IntegerLiteral 0x56347459c738 <col:19> 'int' 7
|     |       `-IntegerLiteral 0x56347459c798 <col:24> 'int' 1
|     `-ReturnStmt 0x56347459c888 <line:376:5, col:12>
|       `-ImplicitCastExpr 0x56347459c870 <col:12> 'unsigned int' <IntegralCast>
|         `-ImplicitCastExpr 0x56347459c858 <col:12> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56347459c838 <col:12> 'int' lvalue Var 0x56347459c590 'nRet' 'int'
|-FunctionTemplateDecl 0x56347459cb88 <line:379:1, line:380:47> col:13 WriteVarInt
| |-TemplateTypeParmDecl 0x56347459c8c8 <line:379:10, col:19> col:19 referenced typename depth 0 index 0 I
| `-FunctionDecl 0x56347459cae8 <line:380:1, col:47> col:13 WriteVarInt 'void (CSizeComputer &, I)' inline
|   |-ParmVarDecl 0x56347459c960 <col:25, col:40> col:40 os 'CSizeComputer &'
|   `-ParmVarDecl 0x56347459c9d8 <col:44, col:46> col:46 n 'I'
|-FunctionTemplateDecl 0x56347459e018 <line:382:1, line:398:1> line:383:6 WriteVarInt
| |-TemplateTypeParmDecl 0x56347459cbf0 <line:382:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x56347459cc78 <col:27, col:38> col:38 referenced 'VarIntMode' depth 0 index 1 Mode
| |-TemplateTypeParmDecl 0x56347459ccd8 <col:44, col:53> col:53 referenced typename depth 0 index 2 I
| `-FunctionDecl 0x56347459df78 <line:383:1, line:398:1> line:383:6 WriteVarInt 'void (Stream &, I)'
|   |-ParmVarDecl 0x56347459dde8 <col:18, col:26> col:26 referenced os 'Stream &'
|   |-ParmVarDecl 0x56347459de60 <col:30, col:32> col:32 referenced n 'I'
|   `-CompoundStmt 0x56347459ead0 <line:384:1, line:398:1>
|     |-CXXUnresolvedConstructExpr 0x56347459e1f8 <line:385:5, col:30> 'CheckVarIntMode<Mode, I>' 'CheckVarIntMode<Mode, I>'
|     |-DeclStmt 0x56347459e470 <line:386:5, col:41>
|     | `-VarDecl 0x56347459e408 <col:5, col:40> col:19 referenced tmp 'unsigned char [(sizeof (n) * 8 + 6) / 7]'
|     |-DeclStmt 0x56347459e528 <line:387:5, col:14>
|     | `-VarDecl 0x56347459e4a0 <col:5, col:13> col:9 referenced len 'int' cinit
|     |   `-IntegerLiteral 0x56347459e508 <col:13> 'int' 0
|     |-WhileStmt 0x56347459e938 <line:388:5, line:394:5>
|     | |-CXXBoolLiteralExpr 0x56347459e540 <line:388:11> 'bool' true
|     | `-CompoundStmt 0x56347459e908 <col:17, line:394:5>
|     |   |-BinaryOperator 0x56347459e730 <line:389:9, col:51> '<dependent type>' '='
|     |   | |-ArraySubscriptExpr 0x56347459e590 <col:9, col:16> '<dependent type>' lvalue
|     |   | | |-DeclRefExpr 0x56347459e550 <col:9> 'unsigned char [(sizeof (n) * 8 + 6) / 7]' lvalue Var 0x56347459e408 'tmp' 'unsigned char [(sizeof (n) * 8 + 6) / 7]'
|     |   | | `-DeclRefExpr 0x56347459e570 <col:13> 'int' lvalue Var 0x56347459e4a0 'len' 'int'
|     |   | `-BinaryOperator 0x56347459e710 <col:20, col:51> '<dependent type>' '|'
|     |   |   |-ParenExpr 0x56347459e610 <col:20, col:29> '<dependent type>'
|     |   |   | `-BinaryOperator 0x56347459e5f0 <col:21, col:25> '<dependent type>' '&'
|     |   |   |   |-DeclRefExpr 0x56347459e5b0 <col:21> 'I' lvalue ParmVar 0x56347459de60 'n' 'I'
|     |   |   |   `-IntegerLiteral 0x56347459e5d0 <col:25> 'int' 127
|     |   |   `-ParenExpr 0x56347459e6f0 <col:33, col:51> 'int'
|     |   |     `-ConditionalOperator 0x56347459e6c0 <col:34, col:47> 'int'
|     |   |       |-ImplicitCastExpr 0x56347459e6a8 <col:34> 'bool' <IntegralToBoolean>
|     |   |       | `-ImplicitCastExpr 0x56347459e690 <col:34> 'int' <LValueToRValue>
|     |   |       |   `-DeclRefExpr 0x56347459e630 <col:34> 'int' lvalue Var 0x56347459e4a0 'len' 'int'
|     |   |       |-IntegerLiteral 0x56347459e650 <col:40> 'int' 128
|     |   |       `-IntegerLiteral 0x56347459e670 <col:47> 'int' 0
|     |   |-IfStmt 0x56347459e7b8 <line:390:9, line:391:13>
|     |   | |-BinaryOperator 0x56347459e790 <line:390:13, col:18> '<dependent type>' '<='
|     |   | | |-DeclRefExpr 0x56347459e750 <col:13> 'I' lvalue ParmVar 0x56347459de60 'n' 'I'
|     |   | | `-IntegerLiteral 0x56347459e770 <col:18> 'int' 127
|     |   | `-BreakStmt 0x56347459e7b0 <line:391:13>
|     |   |-BinaryOperator 0x56347459e8b0 <line:392:9, col:24> '<dependent type>' '='
|     |   | |-DeclRefExpr 0x56347459e7d0 <col:9> 'I' lvalue ParmVar 0x56347459de60 'n' 'I'
|     |   | `-BinaryOperator 0x56347459e890 <col:13, col:24> '<dependent type>' '-'
|     |   |   |-ParenExpr 0x56347459e850 <col:13, col:20> '<dependent type>'
|     |   |   | `-BinaryOperator 0x56347459e830 <col:14, col:19> '<dependent type>' '>>'
|     |   |   |   |-DeclRefExpr 0x56347459e7f0 <col:14> 'I' lvalue ParmVar 0x56347459de60 'n' 'I'
|     |   |   |   `-IntegerLiteral 0x56347459e810 <col:19> 'int' 7
|     |   |   `-IntegerLiteral 0x56347459e870 <col:24> 'int' 1
|     |   `-UnaryOperator 0x56347459e8f0 <line:393:9, col:12> 'int' postfix '++'
|     |     `-DeclRefExpr 0x56347459e8d0 <col:9> 'int' lvalue Var 0x56347459e4a0 'len' 'int'
|     `-DoStmt 0x56347459eab0 <line:395:5, line:397:18>
|       |-CompoundStmt 0x56347459ea48 <line:395:8, line:397:5>
|       | `-CallExpr 0x56347459ea18 <line:396:9, col:36> '<dependent type>'
|       |   |-UnresolvedLookupExpr 0x56347459e950 <col:9> '<overloaded function type>' lvalue (ADL) = 'ser_writedata8' 0x5634745891a8
|       |   |-DeclRefExpr 0x56347459e998 <col:24> 'Stream' lvalue ParmVar 0x56347459dde8 'os' 'Stream &'
|       |   `-ArraySubscriptExpr 0x56347459e9f8 <col:28, col:35> '<dependent type>' lvalue
|       |     |-DeclRefExpr 0x56347459e9b8 <col:28> 'unsigned char [(sizeof (n) * 8 + 6) / 7]' lvalue Var 0x56347459e408 'tmp' 'unsigned char [(sizeof (n) * 8 + 6) / 7]'
|       |     `-DeclRefExpr 0x56347459e9d8 <col:32> 'int' lvalue Var 0x56347459e4a0 'len' 'int'
|       `-ImplicitCastExpr 0x56347459ea98 <line:397:13, col:16> 'bool' <IntegralToBoolean>
|         `-UnaryOperator 0x56347459ea80 <col:13, col:16> 'int' postfix '--'
|           `-DeclRefExpr 0x56347459ea60 <col:13> 'int' lvalue Var 0x56347459e4a0 'len' 'int'
|-FunctionTemplateDecl 0x56347459ee58 <line:400:1, line:420:1> line:401:3 ReadVarInt
| |-TemplateTypeParmDecl 0x56347459eb08 <line:400:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x56347459eb88 <col:27, col:38> col:38 referenced 'VarIntMode' depth 0 index 1 Mode
| |-TemplateTypeParmDecl 0x56347459ebe8 <col:44, col:53> col:53 referenced typename depth 0 index 2 I
| `-FunctionDecl 0x56347459edb8 <line:401:1, line:420:1> line:401:3 ReadVarInt 'I (Stream &)'
|   |-ParmVarDecl 0x56347459ecb8 <col:14, col:22> col:22 referenced is 'Stream &'
|   `-CompoundStmt 0x56347459f758 <line:402:1, line:420:1>
|     |-CXXUnresolvedConstructExpr 0x56347459efd8 <line:403:5, col:30> 'CheckVarIntMode<Mode, I>' 'CheckVarIntMode<Mode, I>'
|     |-DeclStmt 0x56347459f090 <line:404:5, col:12>
|     | `-VarDecl 0x56347459f008 <col:5, col:11> col:7 referenced n 'I' nrvo cinit
|     |   `-IntegerLiteral 0x56347459f070 <col:11> 'int' 0
|     `-WhileStmt 0x56347459f740 <line:405:5, line:419:5>
|       |-CXXBoolLiteralExpr 0x56347459f0a8 <line:405:11> 'bool' true
|       `-CompoundStmt 0x56347459f710 <col:17, line:419:5>
|         |-DeclStmt 0x56347459f1c8 <line:406:9, col:49>
|         | `-VarDecl 0x56347459f0d0 <col:9, col:48> col:23 referenced chData 'unsigned char' cinit
|         |   `-CallExpr 0x56347459f1a0 <col:32, col:48> '<dependent type>'
|         |     |-UnresolvedLookupExpr 0x56347459f138 <col:32> '<overloaded function type>' lvalue (ADL) = 'ser_readdata8' 0x56347458a7c0
|         |     `-DeclRefExpr 0x56347459f180 <col:46> 'Stream' lvalue ParmVar 0x56347459ecb8 'is' 'Stream &'
|         |-IfStmt 0x56347459f318 <line:407:9, line:409:9>
|         | |-OpaqueValueExpr 0x56347459f300 <<invalid sloc>> 'bool'
|         | `-CompoundStmt 0x56347459f2f0 <line:407:55, line:409:9>
|         |-BinaryOperator 0x56347459f4a0 <line:410:9, col:38> '<dependent type>' '='
|         | |-DeclRefExpr 0x56347459f330 <col:9> 'I' lvalue Var 0x56347459f008 'n' 'I'
|         | `-BinaryOperator 0x56347459f480 <col:13, col:38> '<dependent type>' '|'
|         |   |-ParenExpr 0x56347459f3b0 <col:13, col:20> '<dependent type>'
|         |   | `-BinaryOperator 0x56347459f390 <col:14, col:19> '<dependent type>' '<<'
|         |   |   |-DeclRefExpr 0x56347459f350 <col:14> 'I' lvalue Var 0x56347459f008 'n' 'I'
|         |   |   `-IntegerLiteral 0x56347459f370 <col:19> 'int' 7
|         |   `-ParenExpr 0x56347459f460 <col:24, col:38> 'int'
|         |     `-BinaryOperator 0x56347459f440 <col:25, col:34> 'int' '&'
|         |       |-ImplicitCastExpr 0x56347459f428 <col:25> 'int' <IntegralCast>
|         |       | `-ImplicitCastExpr 0x56347459f410 <col:25> 'unsigned char' <LValueToRValue>
|         |       |   `-DeclRefExpr 0x56347459f3d0 <col:25> 'unsigned char' lvalue Var 0x56347459f0d0 'chData' 'unsigned char'
|         |       `-IntegerLiteral 0x56347459f3f0 <col:34> 'int' 127
|         `-IfStmt 0x56347459f6e8 <line:411:9, line:418:9> has_else
|           |-ImplicitCastExpr 0x56347459f550 <line:411:13, col:22> 'bool' <IntegralToBoolean>
|           | `-BinaryOperator 0x56347459f530 <col:13, col:22> 'int' '&'
|           |   |-ImplicitCastExpr 0x56347459f518 <col:13> 'int' <IntegralCast>
|           |   | `-ImplicitCastExpr 0x56347459f500 <col:13> 'unsigned char' <LValueToRValue>
|           |   |   `-DeclRefExpr 0x56347459f4c0 <col:13> 'unsigned char' lvalue Var 0x56347459f0d0 'chData' 'unsigned char'
|           |   `-IntegerLiteral 0x56347459f4e0 <col:22> 'int' 128
|           |-CompoundStmt 0x56347459f678 <col:28, line:416:9>
|           | |-IfStmt 0x56347459f608 <line:412:13, line:414:13>
|           | | |-OpaqueValueExpr 0x56347459f5f0 <<invalid sloc>> 'bool'
|           | | `-CompoundStmt 0x56347459f5e0 <line:412:53, line:414:13>
|           | `-UnaryOperator 0x56347459f660 <line:415:13, col:14> '<dependent type>' postfix '++' cannot overflow
|           |   `-DeclRefExpr 0x56347459f620 <col:13> 'I' lvalue Var 0x56347459f008 'n' 'I'
|           `-CompoundStmt 0x56347459f6d0 <line:416:16, line:418:9>
|             `-ReturnStmt 0x56347459f6b8 <line:417:13, col:20>
|               `-DeclRefExpr 0x56347459f698 <col:20> 'I' lvalue Var 0x56347459f008 'n' 'I'
|-ClassTemplateDecl 0x56347459f918 <line:426:1, line:443:1> line:427:7 CVarInt
| |-NonTypeTemplateParmDecl 0x56347459f790 <line:426:10, col:21> col:21 referenced 'VarIntMode' depth 0 index 0 Mode
| |-TemplateTypeParmDecl 0x56347459f7f0 <col:27, col:36> col:36 referenced typename depth 0 index 1 I
| `-CXXRecordDecl 0x56347459f888 <line:427:1, line:443:1> line:427:7 class CVarInt definition
|   |-DefinitionData trivially_copyable has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-CXXRecordDecl 0x56347459fbd0 <col:1, col:7> col:7 implicit referenced class CVarInt
|   |-AccessSpecDecl 0x56347459fc60 <line:429:1, col:10> col:1 protected
|   |-FieldDecl 0x56347459fcc8 <line:430:5, col:8> col:8 referenced n 'I &'
|   |-AccessSpecDecl 0x56347459fd18 <line:431:1, col:7> col:1 public
|   |-CXXConstructorDecl 0x56347459fed8 <line:432:5, col:41> col:14 CVarInt<Mode, I> 'void (I &)'
|   | |-ParmVarDecl 0x56347459fda0 <col:22, col:25> col:25 referenced nIn 'I &'
|   | |-CXXCtorInitializer Field 0x56347459fcc8 'n' 'I &'
|   | | `-ParenListExpr 0x5634745a0580 <col:33, col:37> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5634745a0560 <col:34> 'I' lvalue ParmVar 0x56347459fda0 'nIn' 'I &'
|   | `-CompoundStmt 0x5634745a05d0 <col:39, col:41>
|   |-FunctionTemplateDecl 0x5634745a0238 <line:434:5, line:437:5> line:435:10 Serialize
|   | |-TemplateTypeParmDecl 0x56347459ff88 <line:434:14, col:23> col:23 referenced typename depth 1 index 0 Stream
|   | `-CXXMethodDecl 0x5634745a0198 <line:435:5, line:437:5> line:435:10 Serialize 'void (Stream &) const'
|   |   |-ParmVarDecl 0x5634745a0078 <col:20, col:28> col:28 referenced s 'Stream &'
|   |   `-CompoundStmt 0x5634745a07b8 <col:37, line:437:5>
|   |     `-CallExpr 0x5634745a0788 <line:436:9, col:40> '<dependent type>'
|   |       |-UnresolvedLookupExpr 0x5634745a0638 <col:9, col:34> '<dependent type>' lvalue (ADL) = 'WriteVarInt' 0x56347459e018 0x56347459cb88
|   |       |-DeclRefExpr 0x5634745a0728 <col:36> 'Stream' lvalue ParmVar 0x5634745a0078 's' 'Stream &'
|   |       `-MemberExpr 0x5634745a0758 <col:39> 'I' lvalue ->n 0x56347459fcc8
|   |         `-CXXThisExpr 0x5634745a0748 <col:39> 'const CVarInt<Mode, I> *' implicit this
|   `-FunctionTemplateDecl 0x5634745a04e8 <line:439:5, line:442:5> line:440:10 Unserialize
|     |-TemplateTypeParmDecl 0x5634745a0298 <line:439:14, col:23> col:23 referenced typename depth 1 index 0 Stream
|     `-CXXMethodDecl 0x5634745a0448 <line:440:5, line:442:5> line:440:10 Unserialize 'void (Stream &)'
|       |-ParmVarDecl 0x5634745a0358 <col:22, col:30> col:30 referenced s 'Stream &'
|       `-CompoundStmt 0x5634745a09a0 <col:33, line:442:5>
|         `-BinaryOperator 0x5634745a0980 <line:441:9, col:40> '<dependent type>' '='
|           |-MemberExpr 0x5634745a07e0 <col:9> 'I' lvalue ->n 0x56347459fcc8
|           | `-CXXThisExpr 0x5634745a07d0 <col:9> 'CVarInt<Mode, I> *' implicit this
|           `-CallExpr 0x5634745a0958 <col:13, col:40> '<dependent type>'
|             |-UnresolvedLookupExpr 0x5634745a0850 <col:13, col:37> '<dependent type>' lvalue (ADL) = 'ReadVarInt' 0x56347459ee58
|             `-DeclRefExpr 0x5634745a0938 <col:39> 'Stream' lvalue ParmVar 0x5634745a0358 's' 'Stream &'
|-ClassTemplateDecl 0x5634745a0b00 <line:454:1, line:477:1> line:455:7 BigEndian
| |-TemplateTypeParmDecl 0x5634745a09e8 <line:454:10, col:19> col:19 referenced typename depth 0 index 0 I
| |-CXXRecordDecl 0x5634745a0a70 <line:455:1, line:477:1> line:455:7 class BigEndian definition
| | |-DefinitionData trivially_copyable has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FullComment 0x5634747443a0 <line:445:4, line:452:43>
| | | |-ParagraphComment 0x563474744250 <line:445:4, col:56>
| | | | `-TextComment 0x563474744220 <col:4, col:56> Text=" Serialization wrapper class for big-endian integers."
| | | |-ParagraphComment 0x563474744310 <line:447:3, line:450:54>
| | | | |-TextComment 0x563474744270 <line:447:3, col:76> Text=" Use this wrapper around integer types that are stored in memory in native"
| | | | |-TextComment 0x563474744290 <line:448:3, col:75> Text=" byte order, but serialized in big endian notation. This is only intended"
| | | | |-TextComment 0x5634747442b0 <line:449:3, col:74> Text=" to implement serializers that are compatible with existing formats, and"
| | | | `-TextComment 0x5634747442d0 <line:450:3, col:54> Text=" its use is not recommended for new data structures."
| | | `-ParagraphComment 0x563474744360 <line:452:3, col:43>
| | |   `-TextComment 0x563474744330 <col:3, col:43> Text=" Only 16-bit types are supported for now."
| | |-CXXRecordDecl 0x5634745a0db0 <line:455:1, col:7> col:7 implicit referenced class BigEndian
| | |-AccessSpecDecl 0x5634745a0e40 <line:457:1, col:10> col:1 protected
| | |-FieldDecl 0x5634745a0ea8 <line:458:5, col:8> col:8 referenced m_val 'I &'
| | |-AccessSpecDecl 0x5634745a0ef8 <line:459:1, col:7> col:1 public
| | |-CXXConstructorDecl 0x5634745a1068 <line:460:5, line:464:5> line:460:14 BigEndian<I> 'void (I &)'
| | | |-ParmVarDecl 0x5634745a0f30 <col:24, col:27> col:27 referenced val 'I &'
| | | |-CXXCtorInitializer Field 0x5634745a0ea8 'm_val' 'I &'
| | | | `-ParenListExpr 0x5634745a1680 <col:39, col:43> 'NULL TYPE'
| | | |   `-DeclRefExpr 0x5634745a1660 <col:40> 'I' lvalue ParmVar 0x5634745a0f30 'val' 'I &'
| | | `-CompoundStmt 0x5634745a17f8 <line:461:5, line:464:5>
| | |-FunctionTemplateDecl 0x5634745a1368 <line:466:5, line:470:5> line:467:10 Serialize
| | | |-TemplateTypeParmDecl 0x5634745a1118 <line:466:14, col:23> col:23 referenced typename depth 1 index 0 Stream
| | | `-CXXMethodDecl 0x5634745a12c8 <line:467:5, line:470:5> line:467:10 Serialize 'void (Stream &) const'
| | |   |-ParmVarDecl 0x5634745a11d8 <col:20, col:28> col:28 referenced s 'Stream &'
| | |   `-CompoundStmt 0x5634745a18e0 <line:468:5, line:470:5>
| | |     `-CallExpr 0x5634745a18b0 <line:469:9, col:35> '<dependent type>'
| | |       |-UnresolvedLookupExpr 0x5634745a1808 <col:9> '<overloaded function type>' lvalue (ADL) = 'ser_writedata16be' 0x563474589928
| | |       |-DeclRefExpr 0x5634745a1850 <col:27> 'Stream' lvalue ParmVar 0x5634745a11d8 's' 'Stream &'
| | |       `-MemberExpr 0x5634745a1880 <col:30> 'I' lvalue ->m_val 0x5634745a0ea8
| | |         `-CXXThisExpr 0x5634745a1870 <col:30> 'const BigEndian<I> *' implicit this
| | `-FunctionTemplateDecl 0x5634745a15e8 <line:472:5, line:476:5> line:473:10 Unserialize
| |   |-TemplateTypeParmDecl 0x5634745a13c8 <line:472:14, col:23> col:23 referenced typename depth 1 index 0 Stream
| |   `-CXXMethodDecl 0x5634745a1548 <line:473:5, line:476:5> line:473:10 Unserialize 'void (Stream &)'
| |     |-ParmVarDecl 0x5634745a1488 <col:22, col:30> col:30 referenced s 'Stream &'
| |     `-CompoundStmt 0x5634745a19e8 <line:474:5, line:476:5>
| |       `-BinaryOperator 0x5634745a19c8 <line:475:9, col:35> '<dependent type>' '='
| |         |-MemberExpr 0x5634745a1908 <col:9> 'I' lvalue ->m_val 0x5634745a0ea8
| |         | `-CXXThisExpr 0x5634745a18f8 <col:9> 'BigEndian<I> *' implicit this
| |         `-CallExpr 0x5634745a19a0 <col:17, col:35> '<dependent type>'
| |           |-UnresolvedLookupExpr 0x5634745a1938 <col:17> '<overloaded function type>' lvalue (ADL) = 'ser_readdata16be' 0x56347458afd0
| |           `-DeclRefExpr 0x5634745a1980 <col:34> 'Stream' lvalue ParmVar 0x5634745a1488 's' 'Stream &'
| `-FullComment 0x5634747441b0 <line:445:4, line:452:43>
|   |-ParagraphComment 0x563474744060 <line:445:4, col:56>
|   | `-TextComment 0x563474744030 <col:4, col:56> Text=" Serialization wrapper class for big-endian integers."
|   |-ParagraphComment 0x563474744120 <line:447:3, line:450:54>
|   | |-TextComment 0x563474744080 <line:447:3, col:76> Text=" Use this wrapper around integer types that are stored in memory in native"
|   | |-TextComment 0x5634747440a0 <line:448:3, col:75> Text=" byte order, but serialized in big endian notation. This is only intended"
|   | |-TextComment 0x5634747440c0 <line:449:3, col:74> Text=" to implement serializers that are compatible with existing formats, and"
|   | `-TextComment 0x5634747440e0 <line:450:3, col:54> Text=" its use is not recommended for new data structures."
|   `-ParagraphComment 0x563474744170 <line:452:3, col:43>
|     `-TextComment 0x563474744140 <col:3, col:43> Text=" Only 16-bit types are supported for now."
|-CXXRecordDecl 0x5634745a1a00 <line:479:1, line:495:1> line:479:7 invalid class CCompactSize definition
| |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634745a1b18 <col:1, col:7> col:7 implicit referenced class CCompactSize
| |-AccessSpecDecl 0x5634745a1ba8 <line:481:1, col:10> col:1 protected
| |-FieldDecl 0x5634745a1bf8 <line:482:5, col:15> col:15 invalid n 'int &'
| |-AccessSpecDecl 0x5634745a1c48 <line:483:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745a1dc0 <line:484:5, col:53> col:14 invalid CCompactSize 'void (int &)'
| | |-ParmVarDecl 0x5634745a1c98 <col:27, col:37> col:37 invalid nIn 'int &'
| | `-CompoundStmt 0x5634745a23f0 <col:51, col:53>
| |-FunctionTemplateDecl 0x5634745a20f8 <line:486:5, line:489:5> line:487:10 Serialize
| | |-TemplateTypeParmDecl 0x5634745a1e70 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745a2058 <line:487:5, line:489:5> line:487:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634745a1f38 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745a2430 <col:37, line:489:5>
| `-FunctionTemplateDecl 0x5634745a2378 <line:491:5, line:494:5> line:492:10 Unserialize
|   |-TemplateTypeParmDecl 0x5634745a2158 <line:491:14, col:23> col:23 referenced typename depth 0 index 0 Stream
|   `-CXXMethodDecl 0x5634745a22d8 <line:492:5, line:494:5> line:492:10 Unserialize 'void (Stream &)'
|     |-ParmVarDecl 0x5634745a2218 <col:22, col:30> col:30 referenced s 'Stream &'
|     `-CompoundStmt 0x5634745a2530 <col:33, line:494:5>
|-ClassTemplateDecl 0x5634745a2670 <line:497:1, line:524:1> line:498:7 LimitedString
| |-NonTypeTemplateParmDecl 0x5634745a2568 <line:497:10, col:17> col:17 referenced 'int' depth 0 index 0 Limit
| `-CXXRecordDecl 0x5634745a25e0 <line:498:1, line:524:1> line:498:7 invalid class LimitedString definition
|   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-CXXRecordDecl 0x5634745a28e0 <col:1, col:7> col:7 implicit referenced class LimitedString
|   |-AccessSpecDecl 0x5634745a2970 <line:500:1, col:10> col:1 protected
|   |-FieldDecl 0x5634745a29c0 <line:501:5, col:18> col:18 invalid string 'int &'
|   |-AccessSpecDecl 0x5634745a2a10 <line:502:1, col:7> col:1 public
|   |-CXXConstructorDecl 0x5634745a2b28 <line:503:5, col:69> col:14 invalid LimitedString<Limit> 'void (int &)'
|   | |-ParmVarDecl 0x5634745a2a50 <col:28, col:41> col:41 invalid _string 'int &'
|   | `-CompoundStmt 0x5634745a31a0 <col:68, col:69>
|   |-FunctionTemplateDecl 0x5634745a2e70 <line:505:5, line:515:5> line:506:10 Unserialize
|   | |-TemplateTypeParmDecl 0x5634745a2bd8 <line:505:14, col:23> col:23 referenced typename depth 1 index 0 Stream
|   | `-CXXMethodDecl 0x5634745a2dd0 <line:506:5, line:515:5> line:506:10 Unserialize 'void (Stream &)'
|   |   |-ParmVarDecl 0x5634745a2c98 <col:22, col:30> col:30 referenced s 'Stream &'
|   |   `-CompoundStmt 0x5634745a3428 <line:507:5, line:515:5>
|   |     |-DeclStmt 0x5634745a32d0 <line:508:9, col:41>
|   |     | `-VarDecl 0x5634745a31d8 <col:9, col:16> col:16 invalid size 'int'
|   |     `-IfStmt 0x5634745a3368 <line:509:9, line:511:9>
|   |       |-OpaqueValueExpr 0x5634745a3350 <<invalid sloc>> 'bool'
|   |       `-CompoundStmt 0x5634745a3340 <line:509:27, line:511:9>
|   `-FunctionTemplateDecl 0x5634745a3128 <line:517:5, line:523:5> line:518:10 Serialize
|     |-TemplateTypeParmDecl 0x5634745a2ed0 <line:517:14, col:23> col:23 referenced typename depth 1 index 0 Stream
|     `-CXXMethodDecl 0x5634745a3088 <line:518:5, line:523:5> line:518:10 Serialize 'void (Stream &) const'
|       |-ParmVarDecl 0x5634745a2f98 <col:20, col:28> col:28 referenced s 'Stream &'
|       `-CompoundStmt 0x5634745a3510 <line:519:5, line:523:5>
|-FunctionTemplateDecl 0x5634745a3980 <line:526:1, line:527:65> col:18 WrapVarInt
| |-NonTypeTemplateParmDecl 0x5634745a3598 <line:526:10, col:38> col:21 referenced 'VarIntMode' depth 0 index 0 Mode
| | `-TemplateArgument expr
| |   `-ConstantExpr 0x5634745a35f8 <col:26, col:38> 'VarIntMode' 0
| |     `-DeclRefExpr 0x5634745a3558 <col:26, col:38> 'VarIntMode' EnumConstant 0x56347459b880 'DEFAULT' 'VarIntMode'
| |-TemplateTypeParmDecl 0x5634745a3618 <col:47, col:56> col:56 referenced typename depth 0 index 1 I
| `-FunctionDecl 0x5634745a38e0 <line:527:1, col:65> col:18 WrapVarInt 'CVarInt<Mode, I> (I &)'
|   |-ParmVarDecl 0x5634745a37b8 <col:29, col:32> col:32 referenced n 'I &'
|   `-CompoundStmt 0x5634745a3b98 <col:35, col:65>
|     `-ReturnStmt 0x5634745a3b88 <col:37, col:62>
|       `-CXXUnresolvedConstructExpr 0x5634745a3b60 <col:44, col:62> 'CVarInt<Mode, I>' 'CVarInt<Mode, I>' list
|         `-InitListExpr 0x5634745a3b18 <col:60, col:62> 'void'
|           `-DeclRefExpr 0x5634745a3af8 <col:61> 'I' lvalue ParmVar 0x5634745a37b8 'n' 'I &'
|-FunctionTemplateDecl 0x5634745a4ed8 <line:529:1, line:530:60> col:14 WrapBigEndian
| |-TemplateTypeParmDecl 0x5634745a3bb0 <line:529:10, col:19> col:19 referenced typename depth 0 index 0 I
| `-FunctionDecl 0x5634745a4e38 <line:530:1, col:60> col:14 WrapBigEndian 'BigEndian<I> (I &)'
|   |-ParmVarDecl 0x5634745a3cf8 <col:28, col:31> col:31 referenced n 'I &'
|   `-CompoundStmt 0x5634745a50a8 <col:34, col:60>
|     `-ReturnStmt 0x5634745a5038 <col:36, col:57>
|       `-CXXUnresolvedConstructExpr 0x5634745a5010 <col:43, col:57> 'BigEndian<I>' 'BigEndian<I>'
|         `-DeclRefExpr 0x5634745a4ff0 <col:56> 'I' lvalue ParmVar 0x5634745a3cf8 'n' 'I &'
|-FunctionTemplateDecl 0x5634745a5418 <line:539:1, col:97> col:44 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745a50c0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a5138 <col:27, col:36> col:36 referenced typename depth 0 index 1 C
| |-FunctionDecl 0x5634745a5378 <col:39, col:97> col:44 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745a5208 <col:54, col:62> col:62 os 'Stream &'
| | |-ParmVarDecl 0x5634745a52a8 <col:66, <invalid sloc>> col:92 invalid 'const int'
| | `-FullComment 0x5634747449c0 <line:537:3, col:10>
| |   `-ParagraphComment 0x563474744990 <col:3, col:10>
| |     `-TextComment 0x563474744960 <col:3, col:10> Text="  string"
| `-FullComment 0x5634747448f0 <col:3, col:10>
|   `-ParagraphComment 0x5634747448c0 <col:3, col:10>
|     `-TextComment 0x563474744890 <col:3, col:10> Text="  string"
|-FunctionTemplateDecl 0x5634745a5748 <line:540:1, col:93> col:44 Unserialize
| |-TemplateTypeParmDecl 0x5634745a5480 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a54f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 C
| `-FunctionDecl 0x5634745a56a8 <col:39, col:93> col:44 Unserialize 'void (Stream &)'
|   `-ParmVarDecl 0x5634745a55c8 <col:56, col:64> col:64 is 'Stream &'
|-FunctionTemplateDecl 0x5634745a5cb8 <line:546:1, col:133> col:60 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745a57d8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745a5860 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745a58c0 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| |-FunctionDecl 0x5634745a5c18 <col:55, col:133> col:60 invalid Serialize_impl 'void (Stream &, const int &, const unsigned char &)'
| | |-ParmVarDecl 0x5634745a5998 <col:75, col:83> col:83 os 'Stream &'
| | |-ParmVarDecl 0x5634745a5a48 <col:87, col:110> col:110 invalid v 'const int &'
| | |-ParmVarDecl 0x5634745a5af0 <col:113, col:132> col:133 'const unsigned char &'
| | `-FullComment 0x563474744ca0 <line:543:3, line:544:108>
| |   `-ParagraphComment 0x563474744c70 <line:543:3, line:544:108>
| |     |-TextComment 0x563474744c20 <line:543:3, col:12> Text=" prevector"
| |     `-TextComment 0x563474744c40 <line:544:3, col:108> Text=" prevectors of unsigned char are a special case and are intended to be serialized as a single opaque blob."
| `-FullComment 0x563474744bb0 <line:543:3, line:544:108>
|   `-ParagraphComment 0x563474744b80 <line:543:3, line:544:108>
|     |-TextComment 0x563474744b30 <line:543:3, col:12> Text=" prevector"
|     `-TextComment 0x563474744b50 <line:544:3, col:108> Text=" prevectors of unsigned char are a special case and are intended to be serialized as a single opaque blob."
|-FunctionTemplateDecl 0x5634745a62f8 <line:547:1, col:133> col:72 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745a5d28 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745a5e00 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745a5e60 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| |-TemplateTypeParmDecl 0x5634745a5ed8 <col:55, col:64> col:64 referenced typename depth 0 index 3 V
| `-FunctionDecl 0x5634745a6258 <col:67, col:133> col:72 invalid Serialize_impl 'void (Stream &, const int &, const V &)'
|   |-ParmVarDecl 0x5634745a5fb8 <col:87, col:95> col:95 os 'Stream &'
|   |-ParmVarDecl 0x5634745a6068 <col:99, col:122> col:122 invalid v 'const int &'
|   `-ParmVarDecl 0x5634745a6138 <col:125, col:132> col:133 'const V &'
|-FunctionTemplateDecl 0x5634745a6788 <line:548:1, col:113> col:67 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745a6368 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745a63f0 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745a6450 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| `-FunctionDecl 0x5634745a66e8 <col:55, col:113> col:67 invalid Serialize 'void (Stream &, const int &)' inline
|   |-ParmVarDecl 0x5634745a6528 <col:77, col:85> col:85 os 'Stream &'
|   `-ParmVarDecl 0x5634745a65d8 <col:89, col:112> col:112 invalid v 'const int &'
|-FunctionTemplateDecl 0x5634745a6ca8 <line:549:1, col:129> col:60 invalid Unserialize_impl
| |-TemplateTypeParmDecl 0x5634745a67f0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745a6880 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745a68e0 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| `-FunctionDecl 0x5634745a6c08 <col:55, col:129> col:60 invalid Unserialize_impl 'void (Stream &, int &, const unsigned char &)'
|   |-ParmVarDecl 0x5634745a69b8 <col:77, col:85> col:85 is 'Stream &'
|   |-ParmVarDecl 0x5634745a6a68 <col:89, col:106> col:106 invalid v 'int &'
|   `-ParmVarDecl 0x5634745a6ae8 <col:109, col:128> col:129 'const unsigned char &'
|-FunctionTemplateDecl 0x5634745a7278 <line:550:1, col:129> col:72 invalid Unserialize_impl
| |-TemplateTypeParmDecl 0x5634745a6d18 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745a6da0 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745a6e10 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| |-TemplateTypeParmDecl 0x5634745a6e88 <col:55, col:64> col:64 referenced typename depth 0 index 3 V
| `-FunctionDecl 0x5634745a71d8 <col:67, col:129> col:72 invalid Unserialize_impl 'void (Stream &, int &, const V &)'
|   |-ParmVarDecl 0x5634745a6f68 <col:89, col:97> col:97 is 'Stream &'
|   |-ParmVarDecl 0x5634745a7018 <col:101, col:118> col:118 invalid v 'int &'
|   `-ParmVarDecl 0x5634745a70b8 <col:121, col:128> col:129 'const V &'
|-FunctionTemplateDecl 0x5634745a76c8 <line:551:1, col:109> col:67 invalid Unserialize
| |-TemplateTypeParmDecl 0x5634745a72e8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745a7370 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745a73d0 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| `-FunctionDecl 0x5634745a7628 <col:55, col:109> col:67 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x5634745a74a8 <col:79, col:87> col:87 is 'Stream &'
|   `-ParmVarDecl 0x5634745a7558 <col:91, col:108> col:108 invalid v 'int &'
|-FunctionTemplateDecl 0x5634745a7b28 <line:557:1, col:131> col:56 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745a7758 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a77c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745a7838 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| |-FunctionDecl 0x5634745a7a88 <col:51, col:131> col:56 invalid Serialize_impl 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745a7908 <col:71, col:79> col:79 os 'Stream &'
| | |-ParmVarDecl 0x5634745a79b8 <col:83, <invalid sloc>> col:106 invalid 'const int'
| | `-FullComment 0x563474745180 <line:554:3, line:555:105>
| |   `-ParagraphComment 0x563474745150 <line:554:3, line:555:105>
| |     |-TextComment 0x563474745100 <line:554:3, col:9> Text=" vector"
| |     `-TextComment 0x563474745120 <line:555:3, col:105> Text=" vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob."
| `-FullComment 0x563474745090 <line:554:3, line:555:105>
|   `-ParagraphComment 0x563474745060 <line:554:3, line:555:105>
|     |-TextComment 0x563474745010 <line:554:3, col:9> Text=" vector"
|     `-TextComment 0x563474745030 <line:555:3, col:105> Text=" vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob."
|-FunctionTemplateDecl 0x5634745a7f98 <line:558:1, col:122> col:56 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745a7b90 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a7c08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745a7c78 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| `-FunctionDecl 0x5634745a7ef8 <col:51, col:122> col:56 invalid Serialize_impl 'void (Stream &, const int)'
|   |-ParmVarDecl 0x5634745a7d48 <col:71, col:79> col:79 os 'Stream &'
|   `-ParmVarDecl 0x5634745a7e20 <col:83, <invalid sloc>> col:106 invalid 'const int'
|-FunctionTemplateDecl 0x5634745a8458 <line:559:1, col:131> col:68 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745a8000 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a8078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745a80e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| |-TemplateTypeParmDecl 0x5634745a8158 <col:51, col:60> col:60 typename depth 0 index 3 V
| `-FunctionDecl 0x5634745a83b8 <col:63, col:131> col:68 invalid Serialize_impl 'void (Stream &, const int)'
|   |-ParmVarDecl 0x5634745a8238 <col:83, col:91> col:91 os 'Stream &'
|   `-ParmVarDecl 0x5634745a82e8 <col:95, <invalid sloc>> col:118 invalid 'const int'
|-FunctionTemplateDecl 0x5634745a8898 <line:560:1, col:111> col:63 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745a84c0 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a8538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745a85a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| `-FunctionDecl 0x5634745a87f8 <col:51, col:111> col:63 invalid Serialize 'void (Stream &, const int)' inline
|   |-ParmVarDecl 0x5634745a8678 <col:73, col:81> col:81 os 'Stream &'
|   `-ParmVarDecl 0x5634745a8728 <col:85, <invalid sloc>> col:108 invalid 'const int'
|-FunctionTemplateDecl 0x5634745a8c48 <line:561:1, col:127> col:56 Unserialize_impl
| |-TemplateTypeParmDecl 0x5634745a8900 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a8978 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745a89e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| `-FunctionDecl 0x5634745a8ba8 <col:51, col:127> col:56 Unserialize_impl 'void (Stream &)'
|   `-ParmVarDecl 0x5634745a8ab8 <col:73, col:81> col:81 is 'Stream &'
|-FunctionTemplateDecl 0x5634745a90a8 <line:562:1, col:127> col:68 Unserialize_impl
| |-TemplateTypeParmDecl 0x5634745a8ca8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a8d18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745a8d88 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| |-TemplateTypeParmDecl 0x5634745a8e30 <col:51, col:60> col:60 typename depth 0 index 3 V
| `-FunctionDecl 0x5634745a9008 <col:63, col:127> col:68 Unserialize_impl 'void (Stream &)'
|   `-ParmVarDecl 0x5634745a8f18 <col:85, col:93> col:93 is 'Stream &'
|-FunctionTemplateDecl 0x5634745a9448 <line:563:1, col:107> col:63 Unserialize
| |-TemplateTypeParmDecl 0x5634745a9108 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a9178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745a91e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| `-FunctionDecl 0x5634745a93a8 <col:51, col:107> col:63 Unserialize 'void (Stream &)' inline
|   `-ParmVarDecl 0x5634745a92b8 <col:75, col:83> col:83 is 'Stream &'
|-FunctionTemplateDecl 0x5634745a98a8 <line:568:1, col:105> col:56 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745a94d8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a9548 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745a95b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T
| |-FunctionDecl 0x5634745a9808 <col:51, col:105> col:56 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745a9688 <col:66, col:74> col:74 os 'Stream &'
| | |-ParmVarDecl 0x5634745a9738 <col:78, <invalid sloc>> col:99 invalid 'const int'
| | `-FullComment 0x56347474ab10 <line:566:3, col:7>
| |   `-ParagraphComment 0x56347474aae0 <col:3, col:7>
| |     `-TextComment 0x56347474aab0 <col:3, col:7> Text=" pair"
| `-FullComment 0x56347474aa40 <col:3, col:7>
|   `-ParagraphComment 0x56347474aa10 <col:3, col:7>
|     `-TextComment 0x56347474a9e0 <col:3, col:7> Text=" pair"
|-FunctionTemplateDecl 0x5634745a9c58 prev 0x5634745a9448 <line:569:1, col:101> col:56 Unserialize
| |-TemplateTypeParmDecl 0x5634745a9910 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a9988 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745a99f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T
| `-FunctionDecl 0x5634745a9bb8 prev 0x5634745a93a8 <col:51, col:101> col:56 Unserialize 'void (Stream &)'
|   `-ParmVarDecl 0x5634745a9ac8 <col:68, col:76> col:76 is 'Stream &'
|-FunctionTemplateDecl 0x5634745aa228 <line:574:1, col:137> col:83 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745a9ce8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745a9d58 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745a9dc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T
| |-TemplateTypeParmDecl 0x5634745a9e68 <col:51, col:60> col:60 referenced typename depth 0 index 3 Pred
| |-TemplateTypeParmDecl 0x5634745a9ed8 <col:66, col:75> col:75 referenced typename depth 0 index 4 A
| |-FunctionDecl 0x5634745aa188 <col:78, col:137> col:83 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745a9fe8 <col:93, col:101> col:101 os 'Stream &'
| | |-ParmVarDecl 0x5634745aa0b8 <col:105, <invalid sloc>> col:134 invalid 'const int'
| | `-FullComment 0x56347474ad30 <line:572:3, col:6>
| |   `-ParagraphComment 0x56347474ad00 <col:3, col:6>
| |     `-TextComment 0x56347474acd0 <col:3, col:6> Text=" map"
| `-FullComment 0x56347474ac60 <col:3, col:6>
|   `-ParagraphComment 0x56347474ac30 <col:3, col:6>
|     `-TextComment 0x56347474ac00 <col:3, col:6> Text=" map"
|-FunctionTemplateDecl 0x5634745aa6e8 <line:575:1, col:133> col:83 Unserialize
| |-TemplateTypeParmDecl 0x5634745aa290 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745aa308 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745aa378 <col:39, col:48> col:48 referenced typename depth 0 index 2 T
| |-TemplateTypeParmDecl 0x5634745aa3e8 <col:51, col:60> col:60 referenced typename depth 0 index 3 Pred
| |-TemplateTypeParmDecl 0x5634745aa458 <col:66, col:75> col:75 referenced typename depth 0 index 4 A
| `-FunctionDecl 0x5634745aa648 <col:78, col:133> col:83 Unserialize 'void (Stream &)'
|   `-ParmVarDecl 0x5634745aa538 <col:95, col:103> col:103 is 'Stream &'
|-FunctionTemplateDecl 0x5634745aabd8 <line:580:1, col:122> col:71 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745aa778 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745aa7e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745aa858 <col:39, col:48> col:48 referenced typename depth 0 index 2 Pred
| |-TemplateTypeParmDecl 0x5634745aa8c8 <col:54, col:63> col:63 referenced typename depth 0 index 3 A
| |-FunctionDecl 0x5634745aab38 <col:66, col:122> col:71 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745aa9a8 <col:81, col:89> col:89 os 'Stream &'
| | |-ParmVarDecl 0x5634745aaa68 <col:93, <invalid sloc>> col:119 invalid 'const int'
| | `-FullComment 0x56347474afd0 <line:578:3, col:6>
| |   `-ParagraphComment 0x56347474afa0 <col:3, col:6>
| |     `-TextComment 0x56347474af70 <col:3, col:6> Text=" set"
| `-FullComment 0x56347474af00 <col:3, col:6>
|   `-ParagraphComment 0x56347474aed0 <col:3, col:6>
|     `-TextComment 0x56347474aea0 <col:3, col:6> Text=" set"
|-FunctionTemplateDecl 0x5634745ab028 <line:581:1, col:118> col:71 Unserialize
| |-TemplateTypeParmDecl 0x5634745aac40 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745aacb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745aad28 <col:39, col:48> col:48 referenced typename depth 0 index 2 Pred
| |-TemplateTypeParmDecl 0x5634745aad98 <col:54, col:63> col:63 referenced typename depth 0 index 3 A
| `-FunctionDecl 0x5634745aaf88 <col:66, col:118> col:71 Unserialize 'void (Stream &)'
|   `-ParmVarDecl 0x5634745aae88 <col:83, col:91> col:91 is 'Stream &'
|-FunctionTemplateDecl 0x5634745ab408 <line:586:1, col:99> col:44 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745ab0b8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745ab128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-FunctionDecl 0x5634745ab368 <col:39, col:99> col:44 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745ab1f8 <col:54, col:62> col:62 os 'Stream &'
| | |-ParmVarDecl 0x5634745ab298 <col:66, <invalid sloc>> col:96 invalid 'const int'
| | `-FullComment 0x56347474b270 <line:584:3, col:13>
| |   `-ParagraphComment 0x56347474b240 <col:3, col:13>
| |     `-TextComment 0x56347474b210 <col:3, col:13> Text=" shared_ptr"
| `-FullComment 0x56347474b1a0 <col:3, col:13>
|   `-ParagraphComment 0x56347474b170 <col:3, col:13>
|     `-TextComment 0x56347474b140 <col:3, col:13> Text=" shared_ptr"
|-FunctionTemplateDecl 0x5634745ab738 prev 0x5634745a5748 <line:587:1, col:95> col:44 Unserialize
| |-TemplateTypeParmDecl 0x5634745ab470 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745ab4e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-FunctionDecl 0x5634745ab698 prev 0x5634745a56a8 <col:39, col:95> col:44 Unserialize 'void (Stream &)'
|   `-ParmVarDecl 0x5634745ab5b8 <col:56, col:64> col:64 os 'Stream &'
|-FunctionTemplateDecl 0x5634745abb18 <line:592:1, col:99> col:44 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745ab7c8 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745ab838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-FunctionDecl 0x5634745aba78 <col:39, col:99> col:44 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745ab908 <col:54, col:62> col:62 os 'Stream &'
| | |-ParmVarDecl 0x5634745ab9a8 <col:66, <invalid sloc>> col:96 invalid 'const int'
| | `-FullComment 0x56347474b490 <line:590:3, col:13>
| |   `-ParagraphComment 0x56347474b460 <col:3, col:13>
| |     `-TextComment 0x56347474b430 <col:3, col:13> Text=" unique_ptr"
| `-FullComment 0x56347474b3c0 <col:3, col:13>
|   `-ParagraphComment 0x56347474b390 <col:3, col:13>
|     `-TextComment 0x56347474b360 <col:3, col:13> Text=" unique_ptr"
|-FunctionTemplateDecl 0x5634745abe60 prev 0x5634745ab738 <line:593:1, col:95> col:44 Unserialize
| |-TemplateTypeParmDecl 0x5634745abb80 <col:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745abbf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-FunctionDecl 0x5634745abda8 prev 0x5634745ab698 <col:39, col:95> col:44 Unserialize 'void (Stream &)'
|   `-ParmVarDecl 0x5634745abcc8 <col:56, col:64> col:64 os 'Stream &'
|-FunctionTemplateDecl 0x5634745ac278 <line:600:1, line:604:1> line:601:13 Serialize
| |-TemplateTypeParmDecl 0x5634745abee8 <line:600:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745abf58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-FunctionDecl 0x5634745ac1d8 <line:601:1, line:604:1> line:601:13 Serialize 'void (Stream &, const T &)' inline
| | |-ParmVarDecl 0x5634745ac028 <col:23, col:31> col:31 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745ac0c8 <col:35, col:44> col:44 referenced a 'const T &'
| | |-CompoundStmt 0x5634745ac390 <line:602:1, line:604:1>
| | | `-CallExpr 0x5634745ac368 <line:603:5, col:19> '<dependent type>'
| | |   |-CXXDependentScopeMemberExpr 0x5634745ac300 <col:5, col:7> '<dependent type>' lvalue .Serialize
| | |   | `-DeclRefExpr 0x5634745ac2e0 <col:5> 'const T' lvalue ParmVar 0x5634745ac0c8 'a' 'const T &'
| | |   `-DeclRefExpr 0x5634745ac348 <col:17> 'Stream' lvalue ParmVar 0x5634745ac028 'os' 'Stream &'
| | `-FullComment 0x56347474b6b0 <line:598:3, col:89>
| |   `-ParagraphComment 0x56347474b680 <col:3, col:89>
| |     `-TextComment 0x56347474b650 <col:3, col:89> Text=" If none of the specialized versions above matched, default to calling member function."
| `-FullComment 0x56347474b5e0 <col:3, col:89>
|   `-ParagraphComment 0x56347474b5b0 <col:3, col:89>
|     `-TextComment 0x56347474b580 <col:3, col:89> Text=" If none of the specialized versions above matched, default to calling member function."
|-FunctionTemplateDecl 0x5634745ac768 <line:606:1, line:610:1> line:607:13 Unserialize
| |-TemplateTypeParmDecl 0x5634745ac3a8 <line:606:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745ac418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-FunctionDecl 0x5634745ac6c8 <line:607:1, line:610:1> line:607:13 Unserialize 'void (Stream &, T &&)' inline
|   |-ParmVarDecl 0x5634745ac4e8 <col:25, col:33> col:33 referenced is 'Stream &'
|   |-ParmVarDecl 0x5634745ac5b8 <col:37, col:41> col:41 referenced a 'T &&'
|   `-CompoundStmt 0x5634745ac8a8 <line:608:1, line:610:1>
|     `-CallExpr 0x5634745ac858 <line:609:5, col:21> '<dependent type>'
|       |-CXXDependentScopeMemberExpr 0x5634745ac7f0 <col:5, col:7> '<dependent type>' lvalue .Unserialize
|       | `-DeclRefExpr 0x5634745ac7d0 <col:5> 'T' lvalue ParmVar 0x5634745ac5b8 'a' 'T &&'
|       `-DeclRefExpr 0x5634745ac838 <col:19> 'Stream' lvalue ParmVar 0x5634745ac4e8 'is' 'Stream &'
|-FunctionTemplateDecl 0x5634745acc18 <line:619:1, line:625:1> line:620:6 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745ac8c0 <line:619:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745ac938 <col:27, col:36> col:36 referenced typename depth 0 index 1 C
| |-FunctionDecl 0x5634745acb78 <line:620:1, line:625:1> line:620:6 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745aca08 <col:16, col:24> col:24 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745acaa8 <col:28, <invalid sloc>> col:54 invalid 'const int'
| | |-CompoundStmt 0x5634745acd38 <line:621:1, line:625:1>
| | `-FullComment 0x56347474b950 <line:617:3, col:9>
| |   `-ParagraphComment 0x56347474b920 <col:3, col:9>
| |     `-TextComment 0x56347474b8f0 <col:3, col:9> Text=" string"
| `-FullComment 0x56347474b880 <col:3, col:9>
|   `-ParagraphComment 0x56347474b850 <col:3, col:9>
|     `-TextComment 0x56347474b820 <col:3, col:9> Text=" string"
|-FunctionTemplateDecl 0x5634745ad028 prev 0x5634745abe60 <line:627:1, line:634:1> line:628:6 Unserialize
| |-TemplateTypeParmDecl 0x5634745acd48 <line:627:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745acdb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 C
| `-FunctionDecl 0x5634745acf88 prev 0x5634745abda8 <line:628:1, line:634:1> line:628:6 Unserialize 'void (Stream &)'
|   |-ParmVarDecl 0x5634745acea8 <col:18, col:26> col:26 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745ad398 <line:629:1, line:634:1>
|     `-DeclStmt 0x5634745ad198 <line:630:5, col:45>
|       `-VarDecl 0x5634745ad0a0 <col:5, col:44> col:18 referenced nSize 'unsigned int' cinit
|         `-CallExpr 0x5634745ad170 <col:26, col:44> '<dependent type>'
|           |-UnresolvedLookupExpr 0x5634745ad108 <col:26> '<overloaded function type>' lvalue (ADL) = 'ReadCompactSize' 0x56347459af90
|           `-DeclRefExpr 0x5634745ad150 <col:42> 'Stream' lvalue ParmVar 0x5634745acea8 'is' 'Stream &'
|-FunctionTemplateDecl 0x5634745ad828 <line:641:1, line:647:1> line:642:6 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745ad3b0 <line:641:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745ad440 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745ad4a0 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| |-FunctionDecl 0x5634745ad788 <line:642:1, line:647:1> line:642:6 invalid Serialize_impl 'void (Stream &, const int &, const unsigned char &)'
| | |-ParmVarDecl 0x5634745ad578 <col:21, col:29> col:29 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745ad628 <col:33, col:56> col:56 invalid v 'const int &'
| | |-ParmVarDecl 0x5634745ad6a8 <col:59, col:78> col:79 'const unsigned char &'
| | |-CompoundStmt 0x5634745ad950 <line:643:1, line:647:1>
| | `-FullComment 0x56347474bb70 <line:639:3, col:12>
| |   `-ParagraphComment 0x56347474bb40 <col:3, col:12>
| |     `-TextComment 0x56347474bb10 <col:3, col:12> Text=" prevector"
| `-FullComment 0x56347474baa0 <col:3, col:12>
|   `-ParagraphComment 0x56347474ba70 <col:3, col:12>
|     `-TextComment 0x56347474ba40 <col:3, col:12> Text=" prevector"
|-FunctionTemplateDecl 0x5634745adf20 <line:649:1, line:655:1> line:650:6 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745ad960 <line:649:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745ad9f0 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745ada50 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| |-TemplateTypeParmDecl 0x5634745adac8 <col:55, col:64> col:64 referenced typename depth 0 index 3 V
| `-FunctionDecl 0x5634745ade80 <line:650:1, line:655:1> line:650:6 invalid Serialize_impl 'void (Stream &, const int &, const V &)'
|   |-ParmVarDecl 0x5634745adba8 <col:21, col:29> col:29 referenced os 'Stream &'
|   |-ParmVarDecl 0x5634745adc58 <col:33, col:56> col:56 invalid v 'const int &'
|   |-ParmVarDecl 0x5634745adcf8 <col:59, col:66> col:67 'const V &'
|   `-CompoundStmt 0x5634745ae150 <line:651:1, line:655:1>
|-FunctionTemplateDecl 0x5634745ae548 <line:657:1, line:661:1> line:658:13 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745ae160 <line:657:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745ae1f0 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745ae250 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| `-FunctionDecl 0x5634745ae4a8 <line:658:1, line:661:1> line:658:13 invalid Serialize 'void (Stream &, const int &)' inline
|   |-ParmVarDecl 0x5634745ae328 <col:23, col:31> col:31 referenced os 'Stream &'
|   |-ParmVarDecl 0x5634745ae3d8 <col:35, col:58> col:58 invalid v 'const int &'
|   `-CompoundStmt 0x5634745ae648 <line:659:1, line:661:1>
|-FunctionTemplateDecl 0x5634745aeac8 <line:664:1, line:678:1> line:665:6 invalid Unserialize_impl
| |-TemplateTypeParmDecl 0x5634745ae658 <line:664:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745ae6e0 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745ae740 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| `-FunctionDecl 0x5634745aea28 <line:665:1, line:678:1> line:665:6 invalid Unserialize_impl 'void (Stream &, int &, const unsigned char &)'
|   |-ParmVarDecl 0x5634745ae818 <col:23, col:31> col:31 referenced is 'Stream &'
|   |-ParmVarDecl 0x5634745ae8c8 <col:35, col:52> col:52 invalid v 'int &'
|   |-ParmVarDecl 0x5634745ae948 <col:55, col:74> col:75 'const unsigned char &'
|   `-CompoundStmt 0x5634745af2d0 <line:666:1, line:678:1>
|     |-DeclStmt 0x5634745aec48 <line:669:5, col:45>
|     | `-VarDecl 0x5634745aeb50 <col:5, col:44> col:18 referenced nSize 'unsigned int' cinit
|     |   `-CallExpr 0x5634745aec20 <col:26, col:44> '<dependent type>'
|     |     |-UnresolvedLookupExpr 0x5634745aebb8 <col:26> '<overloaded function type>' lvalue (ADL) = 'ReadCompactSize' 0x56347459af90
|     |     `-DeclRefExpr 0x5634745aec00 <col:42> 'Stream' lvalue ParmVar 0x5634745ae818 'is' 'Stream &'
|     |-DeclStmt 0x5634745aed18 <line:670:5, col:23>
|     | `-VarDecl 0x5634745aec78 <col:5, col:22> col:18 referenced i 'unsigned int' cinit
|     |   `-ImplicitCastExpr 0x5634745aed00 <col:22> 'unsigned int' <IntegralCast>
|     |     `-IntegerLiteral 0x5634745aece0 <col:22> 'int' 0
|     `-WhileStmt 0x5634745af2b8 <line:671:5, line:677:5>
|       |-BinaryOperator 0x5634745aeda0 <line:671:12, col:16> 'bool' '<'
|       | |-ImplicitCastExpr 0x5634745aed70 <col:12> 'unsigned int' <LValueToRValue>
|       | | `-DeclRefExpr 0x5634745aed30 <col:12> 'unsigned int' lvalue Var 0x5634745aec78 'i' 'unsigned int'
|       | `-ImplicitCastExpr 0x5634745aed88 <col:16> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x5634745aed50 <col:16> 'unsigned int' lvalue Var 0x5634745aeb50 'nSize' 'unsigned int'
|       `-CompoundStmt 0x5634745af298 <line:672:5, line:677:5>
|         |-DeclStmt 0x5634745af040 <line:673:9, col:88>
|         | `-VarDecl 0x5634745aedd8 <col:9, col:22> col:22 referenced blk 'unsigned int'
|         `-CompoundAssignOperator 0x5634745af268 <line:676:9, col:14> 'unsigned int' lvalue '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|           |-DeclRefExpr 0x5634745af210 <col:9> 'unsigned int' lvalue Var 0x5634745aec78 'i' 'unsigned int'
|           `-ImplicitCastExpr 0x5634745af250 <col:14> 'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x5634745af230 <col:14> 'unsigned int' lvalue Var 0x5634745aedd8 'blk' 'unsigned int'
|-FunctionTemplateDecl 0x5634745af808 <line:680:1, line:696:1> line:681:6 invalid Unserialize_impl
| |-TemplateTypeParmDecl 0x5634745af2f8 <line:680:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745af380 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745af3e0 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| |-TemplateTypeParmDecl 0x5634745af458 <col:55, col:64> col:64 referenced typename depth 0 index 3 V
| `-FunctionDecl 0x5634745af768 <line:681:1, line:696:1> line:681:6 invalid Unserialize_impl 'void (Stream &, int &, const V &)'
|   |-ParmVarDecl 0x5634745af538 <col:23, col:31> col:31 referenced is 'Stream &'
|   |-ParmVarDecl 0x5634745af5e8 <col:35, col:52> col:52 invalid v 'int &'
|   |-ParmVarDecl 0x5634745af688 <col:55, col:62> col:63 'const V &'
|   `-CompoundStmt 0x5634745afff0 <line:682:1, line:696:1>
|     |-DeclStmt 0x5634745af988 <line:684:5, col:45>
|     | `-VarDecl 0x5634745af890 <col:5, col:44> col:18 referenced nSize 'unsigned int' cinit
|     |   `-CallExpr 0x5634745af960 <col:26, col:44> '<dependent type>'
|     |     |-UnresolvedLookupExpr 0x5634745af8f8 <col:26> '<overloaded function type>' lvalue (ADL) = 'ReadCompactSize' 0x56347459af90
|     |     `-DeclRefExpr 0x5634745af940 <col:42> 'Stream' lvalue ParmVar 0x5634745af538 'is' 'Stream &'
|     |-DeclStmt 0x5634745afa58 <line:685:5, col:23>
|     | `-VarDecl 0x5634745af9b8 <col:5, col:22> col:18 referenced i 'unsigned int' cinit
|     |   `-ImplicitCastExpr 0x5634745afa40 <col:22> 'unsigned int' <IntegralCast>
|     |     `-IntegerLiteral 0x5634745afa20 <col:22> 'int' 0
|     |-DeclStmt 0x5634745afb28 <line:686:5, col:26>
|     | `-VarDecl 0x5634745afa88 <col:5, col:25> col:18 referenced nMid 'unsigned int' cinit
|     |   `-ImplicitCastExpr 0x5634745afb10 <col:25> 'unsigned int' <IntegralCast>
|     |     `-IntegerLiteral 0x5634745afaf0 <col:25> 'int' 0
|     `-WhileStmt 0x5634745affd8 <line:687:5, line:695:5>
|       |-BinaryOperator 0x5634745afbb0 <line:687:12, col:19> 'bool' '<'
|       | |-ImplicitCastExpr 0x5634745afb80 <col:12> 'unsigned int' <LValueToRValue>
|       | | `-DeclRefExpr 0x5634745afb40 <col:12> 'unsigned int' lvalue Var 0x5634745afa88 'nMid' 'unsigned int'
|       | `-ImplicitCastExpr 0x5634745afb98 <col:19> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x5634745afb60 <col:19> 'unsigned int' lvalue Var 0x5634745af890 'nSize' 'unsigned int'
|       `-CompoundStmt 0x5634745affb8 <line:688:5, line:695:5>
|         |-CompoundAssignOperator 0x5634745afc78 <line:689:9, col:35> 'unsigned int' lvalue '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|         | |-DeclRefExpr 0x5634745afbd0 <col:9> 'unsigned int' lvalue Var 0x5634745afa88 'nMid' 'unsigned int'
|         | `-BinaryOperator 0x5634745afc58 <col:17, col:35> 'unsigned long' '/'
|         |   |-ImplicitCastExpr 0x5634745afc40 <col:17> 'unsigned long' <IntegralCast>
|         |   | `-IntegerLiteral 0x5634745afbf0 <col:17> 'int' 5000000
|         |   `-UnaryExprOrTypeTraitExpr 0x5634745afc20 <col:27, col:35> 'unsigned long' sizeof 'T'
|         `-IfStmt 0x5634745afdb0 <line:690:9, line:691:20>
|           |-BinaryOperator 0x5634745afd18 <line:690:13, col:20> 'bool' '>'
|           | |-ImplicitCastExpr 0x5634745afce8 <col:13> 'unsigned int' <LValueToRValue>
|           | | `-DeclRefExpr 0x5634745afca8 <col:13> 'unsigned int' lvalue Var 0x5634745afa88 'nMid' 'unsigned int'
|           | `-ImplicitCastExpr 0x5634745afd00 <col:20> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5634745afcc8 <col:20> 'unsigned int' lvalue Var 0x5634745af890 'nSize' 'unsigned int'
|           `-BinaryOperator 0x5634745afd90 <line:691:13, col:20> 'unsigned int' lvalue '='
|             |-DeclRefExpr 0x5634745afd38 <col:13> 'unsigned int' lvalue Var 0x5634745afa88 'nMid' 'unsigned int'
|             `-ImplicitCastExpr 0x5634745afd78 <col:20> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x5634745afd58 <col:20> 'unsigned int' lvalue Var 0x5634745af890 'nSize' 'unsigned int'
|-FunctionTemplateDecl 0x5634745b0408 <line:698:1, line:702:1> line:699:13 invalid Unserialize
| |-TemplateTypeParmDecl 0x5634745b0020 <line:698:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-NonTypeTemplateParmDecl 0x5634745b00b0 <col:27, col:40> col:40 referenced 'unsigned int' depth 0 index 1 N
| |-TemplateTypeParmDecl 0x5634745b0110 <col:43, col:52> col:52 referenced typename depth 0 index 2 T
| `-FunctionDecl 0x5634745b0368 <line:699:1, line:702:1> line:699:13 invalid Unserialize 'void (Stream &, int &)' inline
|   |-ParmVarDecl 0x5634745b01e8 <col:25, col:33> col:33 referenced is 'Stream &'
|   |-ParmVarDecl 0x5634745b0298 <col:37, col:54> col:54 invalid v 'int &'
|   `-CompoundStmt 0x5634745b0538 <line:700:1, line:702:1>
|-FunctionTemplateDecl 0x5634745b0918 <line:709:1, line:715:1> line:710:6 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745b0548 <line:709:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b05b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745b0628 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| |-FunctionDecl 0x5634745b0878 <line:710:1, line:715:1> line:710:6 invalid Serialize_impl 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745b06f8 <col:21, col:29> col:29 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745b07a8 <col:33, <invalid sloc>> col:56 invalid 'const int'
| | |-CompoundStmt 0x5634745b0a38 <line:711:1, line:715:1>
| | `-FullComment 0x56347474c010 <line:707:3, col:9>
| |   `-ParagraphComment 0x56347474bfe0 <col:3, col:9>
| |     `-TextComment 0x56347474bfb0 <col:3, col:9> Text=" vector"
| `-FullComment 0x56347474bf40 <col:3, col:9>
|   `-ParagraphComment 0x56347474bf10 <col:3, col:9>
|     `-TextComment 0x56347474bee0 <col:3, col:9> Text=" vector"
|-FunctionTemplateDecl 0x5634745b0e18 <line:717:1, line:727:1> line:718:6 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745b0a48 <line:717:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b0ab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745b0b28 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| `-FunctionDecl 0x5634745b0d78 <line:718:1, line:727:1> line:718:6 invalid Serialize_impl 'void (Stream &, const int)'
|   |-ParmVarDecl 0x5634745b0bf8 <col:21, col:29> col:29 referenced os 'Stream &'
|   |-ParmVarDecl 0x5634745b0ca8 <col:33, <invalid sloc>> col:56 invalid 'const int'
|   `-CompoundStmt 0x5634745b1018 <line:719:1, line:727:1>
|-FunctionTemplateDecl 0x5634745b1478 <line:729:1, line:735:1> line:730:6 invalid Serialize_impl
| |-TemplateTypeParmDecl 0x5634745b1028 <line:729:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b1098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745b1108 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| |-TemplateTypeParmDecl 0x5634745b1178 <col:51, col:60> col:60 typename depth 0 index 3 V
| `-FunctionDecl 0x5634745b13d8 <line:730:1, line:735:1> line:730:6 invalid Serialize_impl 'void (Stream &, const int)'
|   |-ParmVarDecl 0x5634745b1258 <col:21, col:29> col:29 referenced os 'Stream &'
|   |-ParmVarDecl 0x5634745b1308 <col:33, <invalid sloc>> col:56 invalid 'const int'
|   `-CompoundStmt 0x5634745b16a0 <line:731:1, line:735:1>
|-FunctionTemplateDecl 0x5634745b1a88 <line:737:1, line:741:1> line:738:13 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745b16b0 <line:737:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b1728 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745b1798 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| `-FunctionDecl 0x5634745b19e8 <line:738:1, line:741:1> line:738:13 invalid Serialize 'void (Stream &, const int)' inline
|   |-ParmVarDecl 0x5634745b1868 <col:23, col:31> col:31 referenced os 'Stream &'
|   |-ParmVarDecl 0x5634745b1918 <col:35, <invalid sloc>> col:58 invalid 'const int'
|   `-CompoundStmt 0x5634745b1b88 <line:739:1, line:741:1>
|-FunctionTemplateDecl 0x5634745b1f60 prev 0x5634745a8c48 <line:744:1, line:758:1> line:745:6 Unserialize_impl
| |-TemplateTypeParmDecl 0x5634745b1b98 <line:744:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b1c08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745b1c78 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| `-FunctionDecl 0x5634745b1ec0 prev 0x5634745a8ba8 <line:745:1, line:758:1> line:745:6 Unserialize_impl 'void (Stream &)'
|   |-ParmVarDecl 0x5634745b1d48 <col:23, col:31> col:31 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745b2748 <line:746:1, line:758:1>
|     |-DeclStmt 0x5634745b20d0 <line:749:5, col:45>
|     | `-VarDecl 0x5634745b1fd8 <col:5, col:44> col:18 referenced nSize 'unsigned int' cinit
|     |   `-CallExpr 0x5634745b20a8 <col:26, col:44> '<dependent type>'
|     |     |-UnresolvedLookupExpr 0x5634745b2040 <col:26> '<overloaded function type>' lvalue (ADL) = 'ReadCompactSize' 0x56347459af90
|     |     `-DeclRefExpr 0x5634745b2088 <col:42> 'Stream' lvalue ParmVar 0x5634745b1d48 'is' 'Stream &'
|     |-DeclStmt 0x5634745b21a0 <line:750:5, col:23>
|     | `-VarDecl 0x5634745b2100 <col:5, col:22> col:18 referenced i 'unsigned int' cinit
|     |   `-ImplicitCastExpr 0x5634745b2188 <col:22> 'unsigned int' <IntegralCast>
|     |     `-IntegerLiteral 0x5634745b2168 <col:22> 'int' 0
|     `-WhileStmt 0x5634745b2730 <line:751:5, line:757:5>
|       |-BinaryOperator 0x5634745b2228 <line:751:12, col:16> 'bool' '<'
|       | |-ImplicitCastExpr 0x5634745b21f8 <col:12> 'unsigned int' <LValueToRValue>
|       | | `-DeclRefExpr 0x5634745b21b8 <col:12> 'unsigned int' lvalue Var 0x5634745b2100 'i' 'unsigned int'
|       | `-ImplicitCastExpr 0x5634745b2210 <col:16> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x5634745b21d8 <col:16> 'unsigned int' lvalue Var 0x5634745b1fd8 'nSize' 'unsigned int'
|       `-CompoundStmt 0x5634745b2710 <line:752:5, line:757:5>
|         |-DeclStmt 0x5634745b24b8 <line:753:9, col:88>
|         | `-VarDecl 0x5634745b2260 <col:9, col:22> col:22 referenced blk 'unsigned int'
|         `-CompoundAssignOperator 0x5634745b26e0 <line:756:9, col:14> 'unsigned int' lvalue '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|           |-DeclRefExpr 0x5634745b2688 <col:9> 'unsigned int' lvalue Var 0x5634745b2100 'i' 'unsigned int'
|           `-ImplicitCastExpr 0x5634745b26c8 <col:14> 'unsigned int' <LValueToRValue>
|             `-DeclRefExpr 0x5634745b26a8 <col:14> 'unsigned int' lvalue Var 0x5634745b2260 'blk' 'unsigned int'
|-FunctionTemplateDecl 0x5634745b2b38 prev 0x5634745a90a8 <line:760:1, line:776:1> line:761:6 Unserialize_impl
| |-TemplateTypeParmDecl 0x5634745b2770 <line:760:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b27e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745b2858 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| |-TemplateTypeParmDecl 0x5634745b28c8 <col:51, col:60> col:60 typename depth 0 index 3 V
| `-FunctionDecl 0x5634745b2a98 prev 0x5634745a9008 <line:761:1, line:776:1> line:761:6 Unserialize_impl 'void (Stream &)'
|   |-ParmVarDecl 0x5634745b29a8 <col:23, col:31> col:31 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745b3300 <line:762:1, line:776:1>
|     |-DeclStmt 0x5634745b2ca8 <line:764:5, col:45>
|     | `-VarDecl 0x5634745b2bb0 <col:5, col:44> col:18 referenced nSize 'unsigned int' cinit
|     |   `-CallExpr 0x5634745b2c80 <col:26, col:44> '<dependent type>'
|     |     |-UnresolvedLookupExpr 0x5634745b2c18 <col:26> '<overloaded function type>' lvalue (ADL) = 'ReadCompactSize' 0x56347459af90
|     |     `-DeclRefExpr 0x5634745b2c60 <col:42> 'Stream' lvalue ParmVar 0x5634745b29a8 'is' 'Stream &'
|     |-DeclStmt 0x5634745b2d78 <line:765:5, col:23>
|     | `-VarDecl 0x5634745b2cd8 <col:5, col:22> col:18 referenced i 'unsigned int' cinit
|     |   `-ImplicitCastExpr 0x5634745b2d60 <col:22> 'unsigned int' <IntegralCast>
|     |     `-IntegerLiteral 0x5634745b2d40 <col:22> 'int' 0
|     |-DeclStmt 0x5634745b2e48 <line:766:5, col:26>
|     | `-VarDecl 0x5634745b2da8 <col:5, col:25> col:18 referenced nMid 'unsigned int' cinit
|     |   `-ImplicitCastExpr 0x5634745b2e30 <col:25> 'unsigned int' <IntegralCast>
|     |     `-IntegerLiteral 0x5634745b2e10 <col:25> 'int' 0
|     `-WhileStmt 0x5634745b32e8 <line:767:5, line:775:5>
|       |-BinaryOperator 0x5634745b2ee8 <line:767:12, col:19> 'bool' '<'
|       | |-ImplicitCastExpr 0x5634745b2ea0 <col:12> 'unsigned int' <LValueToRValue>
|       | | `-DeclRefExpr 0x5634745b2e60 <col:12> 'unsigned int' lvalue Var 0x5634745b2da8 'nMid' 'unsigned int'
|       | `-ImplicitCastExpr 0x5634745b2ed0 <col:19> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x5634745b2e80 <col:19> 'unsigned int' lvalue Var 0x5634745b2bb0 'nSize' 'unsigned int'
|       `-CompoundStmt 0x5634745b32c8 <line:768:5, line:775:5>
|         |-CompoundAssignOperator 0x5634745b2fb0 <line:769:9, col:35> 'unsigned int' lvalue '+=' ComputeLHSTy='unsigned long' ComputeResultTy='unsigned long'
|         | |-DeclRefExpr 0x5634745b2f08 <col:9> 'unsigned int' lvalue Var 0x5634745b2da8 'nMid' 'unsigned int'
|         | `-BinaryOperator 0x5634745b2f90 <col:17, col:35> 'unsigned long' '/'
|         |   |-ImplicitCastExpr 0x5634745b2f78 <col:17> 'unsigned long' <IntegralCast>
|         |   | `-IntegerLiteral 0x5634745b2f28 <col:17> 'int' 5000000
|         |   `-UnaryExprOrTypeTraitExpr 0x5634745b2f58 <col:27, col:35> 'unsigned long' sizeof 'T'
|         `-IfStmt 0x5634745b30e8 <line:770:9, line:771:20>
|           |-BinaryOperator 0x5634745b3050 <line:770:13, col:20> 'bool' '>'
|           | |-ImplicitCastExpr 0x5634745b3020 <col:13> 'unsigned int' <LValueToRValue>
|           | | `-DeclRefExpr 0x5634745b2fe0 <col:13> 'unsigned int' lvalue Var 0x5634745b2da8 'nMid' 'unsigned int'
|           | `-ImplicitCastExpr 0x5634745b3038 <col:20> 'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5634745b3000 <col:20> 'unsigned int' lvalue Var 0x5634745b2bb0 'nSize' 'unsigned int'
|           `-BinaryOperator 0x5634745b30c8 <line:771:13, col:20> 'unsigned int' lvalue '='
|             |-DeclRefExpr 0x5634745b3070 <col:13> 'unsigned int' lvalue Var 0x5634745b2da8 'nMid' 'unsigned int'
|             `-ImplicitCastExpr 0x5634745b30b0 <col:20> 'unsigned int' <LValueToRValue>
|               `-DeclRefExpr 0x5634745b3090 <col:20> 'unsigned int' lvalue Var 0x5634745b2bb0 'nSize' 'unsigned int'
|-FunctionTemplateDecl 0x5634745b3678 prev 0x5634745a9c58 <line:778:1, line:782:1> line:779:13 Unserialize
| |-TemplateTypeParmDecl 0x5634745b3330 <line:778:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b33a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5634745b3418 <col:39, col:48> col:48 referenced typename depth 0 index 2 A
| `-FunctionDecl 0x5634745b35d8 prev 0x5634745a9bb8 <line:779:1, line:782:1> line:779:13 Unserialize 'void (Stream &)' inline
|   |-ParmVarDecl 0x5634745b34e8 <col:25, col:33> col:33 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745b37a8 <line:780:1, line:782:1>
|-FunctionTemplateDecl 0x5634745b3b88 <line:789:1, line:794:1> line:790:6 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745b37b8 <line:789:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b3828 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745b3898 <col:39, col:48> col:48 referenced typename depth 0 index 2 T
| |-FunctionDecl 0x5634745b3ae8 <line:790:1, line:794:1> line:790:6 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745b3968 <col:16, col:24> col:24 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745b3a18 <col:28, <invalid sloc>> col:49 invalid 'const int'
| | |-CompoundStmt 0x5634745b3d40 <line:791:1, line:794:1>
| | `-FullComment 0x56347474c3b0 <line:787:3, col:7>
| |   `-ParagraphComment 0x56347474c380 <col:3, col:7>
| |     `-TextComment 0x56347474c350 <col:3, col:7> Text=" pair"
| `-FullComment 0x56347474c2e0 <col:3, col:7>
|   `-ParagraphComment 0x56347474c2b0 <col:3, col:7>
|     `-TextComment 0x56347474c280 <col:3, col:7> Text=" pair"
|-FunctionTemplateDecl 0x5634745b40a8 prev 0x5634745b3678 <line:796:1, line:801:1> line:797:6 Unserialize
| |-TemplateTypeParmDecl 0x5634745b3d50 <line:796:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b3dc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745b3e38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T
| `-FunctionDecl 0x5634745b4008 prev 0x5634745b35d8 <line:797:1, line:801:1> line:797:6 invalid Unserialize 'void (Stream &)'
|   |-ParmVarDecl 0x5634745b3f18 <col:18, col:26> col:26 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745b42b8 <line:798:1, line:801:1>
|-FunctionTemplateDecl 0x5634745b47a8 <line:808:1, line:814:1> line:809:6 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745b42c8 <line:808:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b4338 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745b43a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T
| |-TemplateTypeParmDecl 0x5634745b4418 <col:51, col:60> col:60 referenced typename depth 0 index 3 Pred
| |-TemplateTypeParmDecl 0x5634745b4488 <col:66, col:75> col:75 referenced typename depth 0 index 4 A
| |-FunctionDecl 0x5634745b4708 <line:809:1, line:814:1> line:809:6 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745b4568 <col:16, col:24> col:24 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745b4638 <col:28, <invalid sloc>> col:57 invalid 'const int'
| | |-CompoundStmt 0x5634745b49b0 <line:810:1, line:814:1>
| | `-FullComment 0x56347474c5d0 <line:806:3, col:6>
| |   `-ParagraphComment 0x56347474c5a0 <col:3, col:6>
| |     `-TextComment 0x56347474c570 <col:3, col:6> Text=" map"
| `-FullComment 0x56347474c500 <col:3, col:6>
|   `-ParagraphComment 0x56347474c4d0 <col:3, col:6>
|     `-TextComment 0x56347474c4a0 <col:3, col:6> Text=" map"
|-FunctionTemplateDecl 0x5634745b4e18 prev 0x5634745aa6e8 <line:816:1, line:828:1> line:817:6 Unserialize
| |-TemplateTypeParmDecl 0x5634745b49c0 <line:816:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b4a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745b4aa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T
| |-TemplateTypeParmDecl 0x5634745b4b18 <col:51, col:60> col:60 referenced typename depth 0 index 3 Pred
| |-TemplateTypeParmDecl 0x5634745b4b88 <col:66, col:75> col:75 referenced typename depth 0 index 4 A
| `-FunctionDecl 0x5634745b4d78 prev 0x5634745aa648 <line:817:1, line:828:1> line:817:6 Unserialize 'void (Stream &)'
|   |-ParmVarDecl 0x5634745b4c68 <col:18, col:26> col:26 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745b53f8 <line:818:1, line:828:1>
|     |-DeclStmt 0x5634745b4fe8 <line:820:5, col:45>
|     | `-VarDecl 0x5634745b4ef0 <col:5, col:44> col:18 referenced nSize 'unsigned int' cinit
|     |   `-CallExpr 0x5634745b4fc0 <col:26, col:44> '<dependent type>'
|     |     |-UnresolvedLookupExpr 0x5634745b4f58 <col:26> '<overloaded function type>' lvalue (ADL) = 'ReadCompactSize' 0x56347459af90
|     |     `-DeclRefExpr 0x5634745b4fa0 <col:42> 'Stream' lvalue ParmVar 0x5634745b4c68 'is' 'Stream &'
|     |-DeclStmt 0x5634745b50e0 <line:821:39, col:62>
|     | `-VarDecl 0x5634745b5078 <col:39, col:48> col:48 invalid mi 'int'
|     `-ForStmt 0x5634745b5390 <line:822:5, line:827:5>
|       |-DeclStmt 0x5634745b51b0 <line:822:10, col:28>
|       | `-VarDecl 0x5634745b5110 <col:10, col:27> col:23 referenced i 'unsigned int' cinit
|       |   `-ImplicitCastExpr 0x5634745b5198 <col:27> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5634745b5178 <col:27> 'int' 0
|       |-<<<NULL>>>
|       |-BinaryOperator 0x5634745b5238 <col:30, col:34> 'bool' '<'
|       | |-ImplicitCastExpr 0x5634745b5208 <col:30> 'unsigned int' <LValueToRValue>
|       | | `-DeclRefExpr 0x5634745b51c8 <col:30> 'unsigned int' lvalue Var 0x5634745b5110 'i' 'unsigned int'
|       | `-ImplicitCastExpr 0x5634745b5220 <col:34> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x5634745b51e8 <col:34> 'unsigned int' lvalue Var 0x5634745b4ef0 'nSize' 'unsigned int'
|       |-UnaryOperator 0x5634745b5278 <col:41, col:42> 'unsigned int' postfix '++'
|       | `-DeclRefExpr 0x5634745b5258 <col:41> 'unsigned int' lvalue Var 0x5634745b5110 'i' 'unsigned int'
|       `-CompoundStmt 0x5634745b5380 <line:823:5, line:827:5>
|-FunctionTemplateDecl 0x5634745b5888 <line:835:1, line:841:1> line:836:6 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745b5420 <line:835:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b5498 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745b5508 <col:39, col:48> col:48 referenced typename depth 0 index 2 Pred
| |-TemplateTypeParmDecl 0x5634745b5578 <col:54, col:63> col:63 referenced typename depth 0 index 3 A
| |-FunctionDecl 0x5634745b57e8 <line:836:1, line:841:1> line:836:6 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745b5658 <col:16, col:24> col:24 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745b5718 <col:28, <invalid sloc>> col:54 invalid 'const int'
| | |-CompoundStmt 0x5634745b5aa0 <line:837:1, line:841:1>
| | `-FullComment 0x56347474c7f0 <line:833:3, col:6>
| |   `-ParagraphComment 0x56347474c7c0 <col:3, col:6>
| |     `-TextComment 0x56347474c790 <col:3, col:6> Text=" set"
| `-FullComment 0x56347474c720 <col:3, col:6>
|   `-ParagraphComment 0x56347474c6f0 <col:3, col:6>
|     `-TextComment 0x56347474c6c0 <col:3, col:6> Text=" set"
|-FunctionTemplateDecl 0x5634745b5e88 prev 0x5634745ab028 <line:843:1, line:855:1> line:844:6 Unserialize
| |-TemplateTypeParmDecl 0x5634745b5ab0 <line:843:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b5b28 <col:27, col:36> col:36 referenced typename depth 0 index 1 K
| |-TemplateTypeParmDecl 0x5634745b5b98 <col:39, col:48> col:48 referenced typename depth 0 index 2 Pred
| |-TemplateTypeParmDecl 0x5634745b5c08 <col:54, col:63> col:63 referenced typename depth 0 index 3 A
| `-FunctionDecl 0x5634745b5de8 prev 0x5634745aaf88 <line:844:1, line:855:1> line:844:6 Unserialize 'void (Stream &)'
|   |-ParmVarDecl 0x5634745b5ce8 <col:18, col:26> col:26 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745b64e8 <line:845:1, line:855:1>
|     |-DeclStmt 0x5634745b6010 <line:847:5, col:45>
|     | `-VarDecl 0x5634745b5f18 <col:5, col:44> col:18 referenced nSize 'unsigned int' cinit
|     |   `-CallExpr 0x5634745b5fe8 <col:26, col:44> '<dependent type>'
|     |     |-UnresolvedLookupExpr 0x5634745b5f80 <col:26> '<overloaded function type>' lvalue (ADL) = 'ReadCompactSize' 0x56347459af90
|     |     `-DeclRefExpr 0x5634745b5fc8 <col:42> 'Stream' lvalue ParmVar 0x5634745b5ce8 'is' 'Stream &'
|     |-DeclStmt 0x5634745b60f8 <line:848:36, col:59>
|     | `-VarDecl 0x5634745b6090 <col:36, col:45> col:45 invalid it 'int'
|     `-ForStmt 0x5634745b6488 <line:849:5, line:854:5>
|       |-DeclStmt 0x5634745b61c8 <line:849:10, col:28>
|       | `-VarDecl 0x5634745b6128 <col:10, col:27> col:23 referenced i 'unsigned int' cinit
|       |   `-ImplicitCastExpr 0x5634745b61b0 <col:27> 'unsigned int' <IntegralCast>
|       |     `-IntegerLiteral 0x5634745b6190 <col:27> 'int' 0
|       |-<<<NULL>>>
|       |-BinaryOperator 0x5634745b6250 <col:30, col:34> 'bool' '<'
|       | |-ImplicitCastExpr 0x5634745b6220 <col:30> 'unsigned int' <LValueToRValue>
|       | | `-DeclRefExpr 0x5634745b61e0 <col:30> 'unsigned int' lvalue Var 0x5634745b6128 'i' 'unsigned int'
|       | `-ImplicitCastExpr 0x5634745b6238 <col:34> 'unsigned int' <LValueToRValue>
|       |   `-DeclRefExpr 0x5634745b6200 <col:34> 'unsigned int' lvalue Var 0x5634745b5f18 'nSize' 'unsigned int'
|       |-UnaryOperator 0x5634745b6290 <col:41, col:42> 'unsigned int' postfix '++'
|       | `-DeclRefExpr 0x5634745b6270 <col:41> 'unsigned int' lvalue Var 0x5634745b6128 'i' 'unsigned int'
|       `-CompoundStmt 0x5634745b6468 <line:850:5, line:854:5>
|         |-DeclStmt 0x5634745b6320 <line:851:9, col:14>
|         | `-VarDecl 0x5634745b62b8 <col:9, col:11> col:11 referenced key 'K'
|         `-CallExpr 0x5634745b6418 <line:852:9, col:28> '<dependent type>'
|           |-UnresolvedLookupExpr 0x5634745b6338 <col:9> '<overloaded function type>' lvalue (ADL) = 'Unserialize' 0x5634745b5e88 0x5634745b4e18 0x5634745b40a8 0x5634745ac768 0x5634745ad028 0x563474599ae8 0x563474599138 0x563474598b38 0x563474598558 0x563474597fb8 0x563474595b58 0x5634745937b8
|           |-DeclRefExpr 0x5634745b63d8 <col:21> 'Stream' lvalue ParmVar 0x5634745b5ce8 'is' 'Stream &'
|           `-DeclRefExpr 0x5634745b63f8 <col:25> 'K' lvalue Var 0x5634745b62b8 'key' 'K'
|-FunctionTemplateDecl 0x5634745b6868 <line:862:1, line:866:1> line:863:1 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745b6510 <line:862:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b6588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-FunctionDecl 0x5634745b67c8 <col:39, line:866:1> line:863:1 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745b6658 <col:11, col:19> col:19 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745b66f8 <col:23, <invalid sloc>> col:53 invalid 'const int'
| | |-CompoundStmt 0x5634745b6978 <line:864:1, line:866:1>
| | `-FullComment 0x56347474fdb0 <line:860:3, col:13>
| |   `-ParagraphComment 0x56347474fd80 <col:3, col:13>
| |     `-TextComment 0x56347474fd50 <col:3, col:13> Text=" unique_ptr"
| `-FullComment 0x56347474fce0 <col:3, col:13>
|   `-ParagraphComment 0x56347474fcb0 <col:3, col:13>
|     `-TextComment 0x56347474fc80 <col:3, col:13> Text=" unique_ptr"
|-FunctionTemplateDecl 0x5634745b6c48 prev 0x5634745ad028 <line:868:1, line:872:1> line:869:6 Unserialize
| |-TemplateTypeParmDecl 0x5634745b6988 <line:868:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b69f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-FunctionDecl 0x5634745b6ba8 prev 0x5634745acf88 <line:869:1, line:872:1> line:869:6 invalid Unserialize 'void (Stream &)'
|   |-ParmVarDecl 0x5634745b6ac8 <col:18, col:26> col:26 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745b6db8 <line:870:1, line:872:1>
|-FunctionTemplateDecl 0x5634745b7138 <line:879:1, line:883:1> line:880:1 invalid Serialize
| |-TemplateTypeParmDecl 0x5634745b6dc8 <line:879:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b6e38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-FunctionDecl 0x5634745b7098 <col:39, line:883:1> line:880:1 invalid Serialize 'void (Stream &, const int)'
| | |-ParmVarDecl 0x5634745b6f20 <col:11, col:19> col:19 referenced os 'Stream &'
| | |-ParmVarDecl 0x5634745b6fc0 <col:23, <invalid sloc>> col:53 invalid 'const int'
| | |-CompoundStmt 0x5634745b7248 <line:881:1, line:883:1>
| | `-FullComment 0x56347474ffd0 <line:877:3, col:13>
| |   `-ParagraphComment 0x56347474ffa0 <col:3, col:13>
| |     `-TextComment 0x56347474ff70 <col:3, col:13> Text=" shared_ptr"
| `-FullComment 0x56347474ff00 <col:3, col:13>
|   `-ParagraphComment 0x56347474fed0 <col:3, col:13>
|     `-TextComment 0x56347474fea0 <col:3, col:13> Text=" shared_ptr"
|-FunctionTemplateDecl 0x5634745b7518 <line:885:1, line:889:1> line:886:6 invalid Unserialize
| |-TemplateTypeParmDecl 0x5634745b7258 <line:885:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b72c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-FunctionDecl 0x5634745b7478 <line:886:1, line:889:1> line:886:6 invalid Unserialize 'void (Stream &)'
|   |-ParmVarDecl 0x5634745b7398 <col:18, col:26> col:26 referenced is 'Stream &'
|   `-CompoundStmt 0x5634745b7608 <line:887:1, line:889:1>
|-CXXRecordDecl 0x5634745b7618 <line:896:1, line:899:1> line:896:8 referenced struct CSerActionSerialize definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FullComment 0x563474750120 <line:894:3, col:56>
| | `-ParagraphComment 0x5634747500f0 <col:3, col:56>
| |   `-TextComment 0x5634747500c0 <col:3, col:56> Text=" Support for ADD_SERIALIZE_METHODS and READWRITE macro"
| |-CXXRecordDecl 0x5634745b7738 <line:896:1, col:8> col:8 implicit struct CSerActionSerialize
| |-CXXMethodDecl 0x5634745b7818 <line:898:5, col:52> col:20 constexpr ForRead 'bool () const'
| | `-CompoundStmt 0x5634745b7918 <col:36, col:52>
| |   `-ReturnStmt 0x5634745b7908 <col:38, col:45>
| |     `-CXXBoolLiteralExpr 0x5634745b78f8 <col:45> 'bool' false
| |-CXXConstructorDecl 0x5634745c3130 <line:896:8> col:8 implicit referenced constexpr CSerActionSerialize 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5634745c3238 <col:8> col:8 implicit constexpr CSerActionSerialize 'void (const CSerActionSerialize &)' inline default trivial noexcept-unevaluated 0x5634745c3238
| | `-ParmVarDecl 0x5634745c3348 <col:8> col:8 'const CSerActionSerialize &'
| |-CXXConstructorDecl 0x5634745c33e8 <col:8> col:8 implicit constexpr CSerActionSerialize 'void (CSerActionSerialize &&)' inline default trivial noexcept-unevaluated 0x5634745c33e8
| | `-ParmVarDecl 0x5634745c34f8 <col:8> col:8 'CSerActionSerialize &&'
| `-CXXDestructorDecl 0x5634745c3598 <col:8> col:8 implicit referenced ~CSerActionSerialize 'void () noexcept' inline default trivial
|-CXXRecordDecl 0x5634745b7930 <line:900:1, line:903:1> line:900:8 referenced struct CSerActionUnserialize definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5634745b7a48 <col:1, col:8> col:8 implicit struct CSerActionUnserialize
| |-CXXMethodDecl 0x5634745b7b28 <line:902:5, col:51> col:20 constexpr ForRead 'bool () const'
| | `-CompoundStmt 0x5634745b7c28 <col:36, col:51>
| |   `-ReturnStmt 0x5634745b7c18 <col:38, col:45>
| |     `-CXXBoolLiteralExpr 0x5634745b7c08 <col:45> 'bool' true
| |-CXXConstructorDecl 0x5634745c3740 <line:900:8> col:8 implicit referenced constexpr CSerActionUnserialize 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5634745c3848 <col:8> col:8 implicit constexpr CSerActionUnserialize 'void (const CSerActionUnserialize &)' inline default trivial noexcept-unevaluated 0x5634745c3848
| | `-ParmVarDecl 0x5634745c3958 <col:8> col:8 'const CSerActionUnserialize &'
| |-CXXConstructorDecl 0x5634745c39f8 <col:8> col:8 implicit constexpr CSerActionUnserialize 'void (CSerActionUnserialize &&)' inline default trivial noexcept-unevaluated 0x5634745c39f8
| | `-ParmVarDecl 0x5634745c3b08 <col:8> col:8 'CSerActionUnserialize &&'
| `-CXXDestructorDecl 0x5634745c3ba8 <col:8> col:8 implicit referenced ~CSerActionUnserialize 'void () noexcept' inline default trivial
|-CXXRecordDecl 0x5634745b7c40 prev 0x56347458e5b8 <line:923:1, line:955:1> line:923:7 referenced invalid class CSizeComputer definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634745b7d38 <col:1, col:7> col:7 implicit referenced class CSizeComputer
| |-AccessSpecDecl 0x5634745b7dc8 <line:925:1, col:10> col:1 protected
| |-FieldDecl 0x5634745b7e18 <line:926:5, col:12> col:12 invalid nSize 'int'
| |-FieldDecl 0x5634745b7e80 <line:928:5, col:15> col:15 referenced nVersion 'const int'
| |-AccessSpecDecl 0x5634745b7ed0 <line:929:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745b8028 <line:930:5, col:78> col:14 referenced CSizeComputer 'void (int)'
| | |-ParmVarDecl 0x5634745b7f20 <col:28, col:32> col:32 used nVersionIn 'int'
| | |-CXXCtorInitializer Field 0x5634745b7e80 'nVersion' 'const int'
| | | `-ImplicitCastExpr 0x5634745b89b0 <col:65> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5634745b8970 <col:65> 'int' lvalue ParmVar 0x5634745b7f20 'nVersionIn' 'int'
| | `-CompoundStmt 0x5634745b89f8 <col:77, col:78>
| |-CXXMethodDecl 0x5634745b8258 <line:932:5, line:935:5> line:932:10 invalid write 'void (const char *, int)'
| | |-ParmVarDecl 0x5634745b80f0 <col:16, col:28> col:28 psz 'const char *'
| | |-ParmVarDecl 0x5634745b8180 <col:33, col:40> col:40 invalid _nSize 'int'
| | `-CompoundStmt 0x5634745b8a18 <line:933:5, line:935:5>
| |-CXXMethodDecl 0x5634745b83f0 <line:938:5, line:941:5> line:938:10 invalid seek 'void (int)'
| | |-ParmVarDecl 0x5634745b8360 <col:15, col:22> col:22 invalid _nSize 'int'
| | |-CompoundStmt 0x5634745b8a38 <line:939:5, line:941:5>
| | `-FullComment 0x5634747501f0 <line:937:8, col:67>
| |   `-ParagraphComment 0x5634747501c0 <col:8, col:67>
| |     `-TextComment 0x563474750190 <col:8, col:67> Text=" Pretend _nSize bytes are written, without specifying them. "
| |-FunctionTemplateDecl 0x5634745b86e8 <line:943:5, line:948:5> line:944:20 operator<<
| | |-TemplateTypeParmDecl 0x5634745b8498 <line:943:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x5634745b8648 <line:944:5, line:948:5> line:944:20 operator<< 'CSizeComputer &(const T &)'
| |   |-ParmVarDecl 0x5634745b8558 <col:31, col:40> col:40 referenced obj 'const T &'
| |   `-CompoundStmt 0x5634745b8bc0 <line:945:5, line:948:5>
| |     |-CallExpr 0x5634745b8b38 <line:946:9, col:31> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x5634745b8a68 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Serialize' 0x56347458f418 0x5634745ac278 0x5634745995a8 0x563474593318 0x563474592c88 0x5634745925a8 0x563474591f88 0x5634745919a8 0x5634745915b8
| |     | |-UnaryOperator 0x5634745b8b00 <col:21, col:22> 'CSizeComputer' lvalue prefix '*' cannot overflow
| |     | | `-CXXThisExpr 0x5634745b8af0 <col:22> 'CSizeComputer *' this
| |     | `-DeclRefExpr 0x5634745b8b18 <col:28> 'const T' lvalue ParmVar 0x5634745b8558 'obj' 'const T &'
| |     `-ReturnStmt 0x5634745b8bb0 <line:947:9, col:22>
| |       `-ParenExpr 0x5634745b8b90 <col:16, col:22> 'CSizeComputer' lvalue
| |         `-UnaryOperator 0x5634745b8b78 <col:17, col:18> 'CSizeComputer' lvalue prefix '*' cannot overflow
| |           `-CXXThisExpr 0x5634745b8b68 <col:18> 'CSizeComputer *' this
| |-CXXMethodDecl 0x5634745b87b0 <line:950:5, line:952:5> line:950:12 invalid size 'int () const'
| | `-CompoundStmt 0x5634745b8bf0 <col:25, line:952:5>
| |-CXXMethodDecl 0x5634745b8878 <line:954:5, col:47> col:9 GetVersion 'int () const'
| | `-CompoundStmt 0x5634745b8c68 <col:28, col:47>
| |   `-ReturnStmt 0x5634745b8c58 <col:30, col:37>
| |     `-ImplicitCastExpr 0x5634745b8c40 <col:37> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5634745b8c10 <col:37> 'const int' lvalue ->nVersion 0x5634745b7e80
| |         `-CXXThisExpr 0x5634745b8c00 <col:37> 'const CSizeComputer *' implicit this
| |-CXXConstructorDecl 0x5634745bb998 <line:923:7> col:7 implicit constexpr CSizeComputer 'void (const CSizeComputer &)' inline default trivial noexcept-unevaluated 0x5634745bb998
| | `-ParmVarDecl 0x5634745bbaa8 <col:7> col:7 'const CSizeComputer &'
| `-CXXConstructorDecl 0x5634745bbb48 <col:7> col:7 implicit constexpr CSizeComputer 'void (CSizeComputer &&)' inline default trivial noexcept-unevaluated 0x5634745bbb48
|   `-ParmVarDecl 0x5634745bbc58 <col:7> col:7 'CSizeComputer &&'
|-FunctionTemplateDecl 0x5634745b8ea8 <line:957:1, line:960:1> line:958:6 SerializeMany
| |-TemplateTypeParmDecl 0x5634745b8c80 <line:957:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x5634745b8e08 <line:958:1, line:960:1> line:958:6 SerializeMany 'void (Stream &)'
|   |-ParmVarDecl 0x5634745b8d48 <col:20, col:28> col:28 s 'Stream &'
|   `-CompoundStmt 0x5634745b8f08 <line:959:1, line:960:1>
|-FunctionTemplateDecl 0x5634745b94b8 <line:962:1, line:967:1> line:963:6 SerializeMany
| |-TemplateTypeParmDecl 0x5634745b8f30 <line:962:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b8fa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 Arg
| |-TemplateTypeParmDecl 0x5634745b9018 <col:41, col:53> col:53 referenced typename depth 0 index 2 ... Args
| `-FunctionDecl 0x5634745b9418 <line:963:1, line:967:1> line:963:6 SerializeMany 'void (Stream &, const Arg &, const Args &...)'
|   |-ParmVarDecl 0x5634745b9118 <col:20, col:28> col:28 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745b91b8 <col:31, col:42> col:42 referenced arg 'const Arg &'
|   |-ParmVarDecl 0x5634745b92f0 <col:47, col:62> col:62 referenced args 'const Args &...' pack
|   `-CompoundStmt 0x5634745b9740 <line:964:1, line:967:1>
|     |-CallExpr 0x5634745b9610 <line:965:5, col:23> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5634745b9548 <col:5, col:7> '<overloaded function type>' lvalue (no ADL) = 'Serialize' 0x56347458f418 0x5634745ac278 0x5634745995a8 0x563474593318 0x563474592c88 0x5634745925a8 0x563474591f88 0x5634745919a8 0x5634745915b8
|     | |-DeclRefExpr 0x5634745b95d0 <col:17> 'Stream' lvalue ParmVar 0x5634745b9118 's' 'Stream &'
|     | `-DeclRefExpr 0x5634745b95f0 <col:20> 'const Arg' lvalue ParmVar 0x5634745b91b8 'arg' 'const Arg &'
|     `-CallExpr 0x5634745b9710 <line:966:5, col:31> '<dependent type>'
|       |-UnresolvedLookupExpr 0x5634745b9660 <col:5, col:7> '<overloaded function type>' lvalue (no ADL) = 'SerializeMany' 0x5634745b8ea8 0x5634745b94b8
|       |-DeclRefExpr 0x5634745b96b0 <col:21> 'Stream' lvalue ParmVar 0x5634745b9118 's' 'Stream &'
|       `-PackExpansionExpr 0x5634745b96f0 <col:24, col:28> '<dependent type>' lvalue
|         `-DeclRefExpr 0x5634745b96d0 <col:24> 'const Args &...' lvalue ParmVar 0x5634745b92f0 'args' 'const Args &...'
|-FunctionTemplateDecl 0x5634745b9988 <line:969:1, line:972:1> line:970:13 UnserializeMany
| |-TemplateTypeParmDecl 0x5634745b9760 <line:969:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-FunctionDecl 0x5634745b98e8 <line:970:1, line:972:1> line:970:13 UnserializeMany 'void (Stream &)' inline
|   |-ParmVarDecl 0x5634745b9828 <col:29, col:37> col:37 s 'Stream &'
|   `-CompoundStmt 0x5634745b99e8 <line:971:1, line:972:1>
|-FunctionTemplateDecl 0x5634745b9fe0 <line:974:1, line:979:1> line:975:13 UnserializeMany
| |-TemplateTypeParmDecl 0x5634745b99f8 <line:974:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745b9a68 <col:27, col:36> col:36 referenced typename depth 0 index 1 Arg
| |-TemplateTypeParmDecl 0x5634745b9ad8 <col:41, col:53> col:53 referenced typename depth 0 index 2 ... Args
| `-FunctionDecl 0x5634745b9f40 <line:975:1, line:979:1> line:975:13 UnserializeMany 'void (Stream &, Arg &&, Args &&...)' inline
|   |-ParmVarDecl 0x5634745b9ba8 <col:29, col:37> col:37 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745b9c48 <col:40, col:46> col:46 referenced arg 'Arg &&'
|   |-ParmVarDecl 0x5634745b9d80 <col:51, col:61> col:61 referenced args 'Args &&...' pack
|   `-CompoundStmt 0x5634745ba280 <line:976:1, line:979:1>
|     |-CallExpr 0x5634745ba150 <line:977:5, col:25> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5634745ba070 <col:5, col:7> '<overloaded function type>' lvalue (no ADL) = 'Unserialize' 0x5634745937b8 0x5634745ac768 0x5634745b5e88 0x5634745b4e18 0x5634745b40a8 0x5634745b6c48 0x563474599ae8 0x563474599138 0x563474598b38 0x563474595b58 0x563474597fb8 0x563474598558
|     | |-DeclRefExpr 0x5634745ba110 <col:19> 'Stream' lvalue ParmVar 0x5634745b9ba8 's' 'Stream &'
|     | `-DeclRefExpr 0x5634745ba130 <col:22> 'Arg' lvalue ParmVar 0x5634745b9c48 'arg' 'Arg &&'
|     `-CallExpr 0x5634745ba250 <line:978:5, col:33> '<dependent type>'
|       |-UnresolvedLookupExpr 0x5634745ba1a0 <col:5, col:7> '<overloaded function type>' lvalue (no ADL) = 'UnserializeMany' 0x5634745b9988 0x5634745b9fe0
|       |-DeclRefExpr 0x5634745ba1f0 <col:23> 'Stream' lvalue ParmVar 0x5634745b9ba8 's' 'Stream &'
|       `-PackExpansionExpr 0x5634745ba230 <col:26, col:30> '<dependent type>' lvalue
|         `-DeclRefExpr 0x5634745ba210 <col:26> 'Args &&...' lvalue ParmVar 0x5634745b9d80 'args' 'Args &&...'
|-FunctionTemplateDecl 0x5634745ba798 <line:981:1, line:985:1> line:982:13 SerReadWriteMany
| |-TemplateTypeParmDecl 0x5634745ba2a0 <line:981:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745ba318 <col:27, col:39> col:39 referenced typename depth 0 index 1 ... Args
| `-FunctionDecl 0x5634745ba6f8 <line:982:1, line:985:1> line:982:13 SerReadWriteMany 'void (Stream &, CSerActionSerialize, const Args &...)' inline
|   |-ParmVarDecl 0x5634745ba418 <col:30, col:38> col:38 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745ba490 <col:41, col:61> col:61 ser_action 'CSerActionSerialize'
|   |-ParmVarDecl 0x5634745ba5d0 <col:73, col:88> col:88 referenced args 'const Args &...' pack
|   `-CompoundStmt 0x5634745ba908 <line:983:1, line:985:1>
|     `-CallExpr 0x5634745ba8d8 <line:984:5, col:31> '<dependent type>'
|       |-UnresolvedLookupExpr 0x5634745ba828 <col:5, col:7> '<overloaded function type>' lvalue (no ADL) = 'SerializeMany' 0x5634745b8ea8 0x5634745b94b8
|       |-DeclRefExpr 0x5634745ba878 <col:21> 'Stream' lvalue ParmVar 0x5634745ba418 's' 'Stream &'
|       `-PackExpansionExpr 0x5634745ba8b8 <col:24, col:28> '<dependent type>' lvalue
|         `-DeclRefExpr 0x5634745ba898 <col:24> 'const Args &...' lvalue ParmVar 0x5634745ba5d0 'args' 'const Args &...'
|-FunctionTemplateDecl 0x5634745bade8 <line:987:1, line:991:1> line:988:13 SerReadWriteMany
| |-TemplateTypeParmDecl 0x5634745ba920 <line:987:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634745ba998 <col:27, col:39> col:39 referenced typename depth 0 index 1 ... Args
| `-FunctionDecl 0x5634745bad48 <line:988:1, line:991:1> line:988:13 SerReadWriteMany 'void (Stream &, CSerActionUnserialize, Args &&...)' inline
|   |-ParmVarDecl 0x5634745baa68 <col:30, col:38> col:38 referenced s 'Stream &'
|   |-ParmVarDecl 0x5634745baae0 <col:41, col:63> col:63 ser_action 'CSerActionUnserialize'
|   |-ParmVarDecl 0x5634745bac20 <col:75, col:85> col:85 referenced args 'Args &&...' pack
|   `-CompoundStmt 0x5634745baf80 <line:989:1, line:991:1>
|     `-CallExpr 0x5634745baf50 <line:990:5, col:33> '<dependent type>'
|       |-UnresolvedLookupExpr 0x5634745bae78 <col:5, col:7> '<overloaded function type>' lvalue (no ADL) = 'UnserializeMany' 0x5634745b9988 0x5634745b9fe0
|       |-DeclRefExpr 0x5634745baec8 <col:23> 'Stream' lvalue ParmVar 0x5634745baa68 's' 'Stream &'
|       `-PackExpansionExpr 0x5634745baf08 <col:26, col:30> '<dependent type>' lvalue
|         `-DeclRefExpr 0x5634745baee8 <col:26> 'Args &&...' lvalue ParmVar 0x5634745bac20 'args' 'Args &&...'
|-FunctionTemplateDecl 0x5634745bb218 prev 0x56347459cb88 <line:993:1, line:997:1> line:994:13 WriteVarInt
| |-TemplateTypeParmDecl 0x5634745baf98 <line:993:10, col:19> col:19 referenced typename depth 0 index 0 I
| `-FunctionDecl 0x5634745bb178 prev 0x56347459cae8 <line:994:1, line:997:1> line:994:13 WriteVarInt 'void (CSizeComputer &, I)' inline
|   |-ParmVarDecl 0x5634745bb030 <col:25, col:40> col:40 referenced s 'CSizeComputer &'
|   |-ParmVarDecl 0x5634745bb0a8 <col:43, col:45> col:45 referenced n 'I'
|   `-CompoundStmt 0x5634745bb380 <line:995:1, line:997:1>
|-FunctionDecl 0x5634745bb4c8 <line:999:1, line:1002:1> line:999:13 invalid WriteCompactSize 'void (CSizeComputer &, int)' inline
| |-ParmVarDecl 0x5634745bb3a0 <col:30, col:45> col:45 used s 'CSizeComputer &'
| |-ParmVarDecl 0x5634745bb430 <col:48, col:57> col:57 invalid nSize 'int'
| `-CompoundStmt 0x5634745bb598 <line:1000:1, line:1002:1>
|-FunctionTemplateDecl 0x5634745bb8d0 <line:1004:1, line:1008:1> line:1005:8 invalid GetSerializeSize
| |-TemplateTypeParmDecl 0x5634745bb5a8 <line:1004:11, col:20> col:20 referenced typename depth 0 index 0 T
| `-FunctionDecl 0x5634745bb830 <line:1005:1, line:1008:1> line:1005:8 invalid GetSerializeSize 'int (const T &, int)'
|   |-ParmVarDecl 0x5634745bb678 <col:25, col:34> col:34 referenced t 'const T &'
|   |-ParmVarDecl 0x5634745bb6f8 <col:37, col:52> col:41 referenced nVersion 'int' cinit
|   | `-IntegerLiteral 0x5634745bb760 <col:52> 'int' 0
|   `-CompoundStmt 0x5634745bbe10 <line:1006:1, line:1008:1>
|     `-ReturnStmt 0x5634745bbe00 <line:1007:5, col:48>
|       `-CallExpr 0x5634745bbde0 <col:12, col:48> '<dependent type>'
|         `-CXXDependentScopeMemberExpr 0x5634745bbd98 <col:12, col:43> '<dependent type>' lvalue .size
|           `-ParenExpr 0x5634745bbd78 <col:12, col:41> '<dependent type>'
|             `-BinaryOperator 0x5634745bbd58 <col:13, col:40> '<dependent type>' '<<'
|               |-CXXFunctionalCastExpr 0x5634745bbd10 <col:13, col:35> 'CSizeComputer' functional cast to class CSizeComputer <ConstructorConversion>
|               | `-CXXConstructExpr 0x5634745bbce0 <col:13, col:35> 'CSizeComputer' 'void (int)'
|               |   `-ImplicitCastExpr 0x5634745bbcc8 <col:27> 'int' <LValueToRValue>
|               |     `-DeclRefExpr 0x5634745bb948 <col:27> 'int' lvalue ParmVar 0x5634745bb6f8 'nVersion' 'int'
|               `-DeclRefExpr 0x5634745bbd38 <col:40> 'const T' lvalue ParmVar 0x5634745bb678 't' 'const T &'
|-FunctionTemplateDecl 0x5634745bd270 <line:1010:1, line:1016:1> line:1011:8 invalid GetSerializeSizeMany
| |-TemplateTypeParmDecl 0x5634745bbe28 <line:1010:11, col:23> col:23 referenced typename depth 0 index 0 ... T
| `-FunctionDecl 0x5634745bd1d0 <line:1011:1, line:1016:1> line:1011:8 invalid GetSerializeSizeMany 'int (int, const T &...)'
|   |-ParmVarDecl 0x5634745bcf70 <col:29, col:33> col:33 referenced nVersion 'int'
|   |-ParmVarDecl 0x5634745bd0b0 <col:43, col:55> col:55 referenced t 'const T &...' pack
|   `-CompoundStmt 0x5634745bd4f0 <line:1012:1, line:1016:1>
|     |-DeclStmt 0x5634745bd3d8 <line:1013:5, col:31>
|     | `-VarDecl 0x5634745bd308 <col:5, col:30> col:19 referenced sc 'CSizeComputer' callinit
|     |   `-CXXConstructExpr 0x5634745bd3a8 <col:19, col:30> 'CSizeComputer' 'void (int)'
|     |     `-ImplicitCastExpr 0x5634745bd390 <col:22> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5634745bd2d8 <col:22> 'int' lvalue ParmVar 0x5634745bcf70 'nVersion' 'int'
|     `-CallExpr 0x5634745bd4a0 <line:1014:5, col:27> '<dependent type>'
|       |-UnresolvedLookupExpr 0x5634745bd3f0 <col:5> '<overloaded function type>' lvalue (ADL) = 'SerializeMany' 0x5634745b94b8 0x5634745b8ea8
|       |-DeclRefExpr 0x5634745bd440 <col:19> 'CSizeComputer' lvalue Var 0x5634745bd308 'sc' 'CSizeComputer'
|       `-PackExpansionExpr 0x5634745bd480 <col:23, col:24> '<dependent type>' lvalue
|         `-DeclRefExpr 0x5634745bd460 <col:23> 'const T &...' lvalue ParmVar 0x5634745bd0b0 't' 'const T &...'
|-CXXRecordDecl 0x5634745bd510 <bitcoin/src/addrdb.h:15:1, col:7> col:7 referenced class CSubNet
|-CXXRecordDecl 0x5634745bd5c0 <line:16:1, col:7> col:7 referenced class CAddrMan
|-CXXRecordDecl 0x5634745bd670 <line:17:1, col:7> col:7 referenced class CDataStream
|-EnumDecl 0x5634745bd720 <line:19:9, line:24:1> line:19:14 BanReason
| |-EnumConstantDecl 0x5634745bd820 <line:21:5, col:33> col:5 referenced BanReasonUnknown 'BanReason'
| | `-ImplicitCastExpr 0x5634745bd990 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634745bd800 <col:33> 'int' 0
| |     `-IntegerLiteral 0x5634745bd7e0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5634745bd8b0 <line:22:5, col:33> col:5 referenced BanReasonNodeMisbehaving 'BanReason'
| | `-ImplicitCastExpr 0x5634745bd9a8 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634745bd890 <col:33> 'int' 1
| |     `-IntegerLiteral 0x5634745bd870 <col:33> 'int' 1
| `-EnumConstantDecl 0x5634745bd940 <line:23:5, col:33> col:5 referenced BanReasonManuallyAdded 'BanReason'
|   `-ImplicitCastExpr 0x5634745bd9c0 <col:33> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5634745bd920 <col:33> 'int' 2
|       `-IntegerLiteral 0x5634745bd900 <col:33> 'int' 2
|-TypedefDecl 0x5634745bda38 <line:19:1, line:24:3> col:3 referenced BanReason 'enum BanReason':'BanReason'
| `-ElaboratedType 0x5634745bd9e0 'enum BanReason' sugar
|   `-EnumType 0x5634745bd7c0 'BanReason'
|     `-Enum 0x5634745bd720 'BanReason'
|-CXXRecordDecl 0x5634745bdaa8 <line:26:1, line:80:1> line:26:7 referenced invalid class CBanEntry definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634745bdbc8 <col:1, col:7> col:7 implicit referenced class CBanEntry
| |-AccessSpecDecl 0x5634745bdc58 <line:28:1, col:7> col:1 public
| |-VarDecl 0x5634745bdc98 <line:29:5, col:38> col:22 referenced CURRENT_VERSION 'const int' static cinit
| | `-IntegerLiteral 0x5634745bdd00 <col:38> 'int' 1
| |-FieldDecl 0x5634745bdd90 <line:30:5, col:9> col:9 referenced nVersion 'int'
| |-FieldDecl 0x5634745bde08 <line:31:5, col:13> col:13 invalid nCreateTime 'int'
| |-FieldDecl 0x5634745bde80 <line:32:5, col:13> col:13 invalid nBanUntil 'int'
| |-FieldDecl 0x5634745bdef8 <line:33:5, col:13> col:13 invalid banReason 'int'
| |-CXXConstructorDecl 0x563474595d80 <line:35:5, line:38:5> line:35:5 CBanEntry 'void ()'
| | `-CompoundStmt 0x5634745c2fb0 <line:36:5, line:38:5>
| |   `-CXXMemberCallExpr 0x5634745c2f90 <line:37:9, col:17> 'void'
| |     `-MemberExpr 0x563474596cf0 <col:9> '<bound member function type>' ->SetNull 0x563474596b50
| |       `-CXXThisExpr 0x563474596ce0 <col:9> 'CBanEntry *' implicit this
| |-CXXConstructorDecl 0x563474595ee0 <line:40:5, line:44:5> line:40:14 invalid CBanEntry 'void (int)'
| | |-ParmVarDecl 0x563474595e50 <col:24, col:32> col:32 invalid nCreateTimeIn 'int'
| | `-CompoundStmt 0x5634745c3038 <line:41:5, line:44:5>
| |   `-CXXMemberCallExpr 0x5634745c3008 <line:42:9, col:17> 'void'
| |     `-MemberExpr 0x5634745c2fd8 <col:9> '<bound member function type>' ->SetNull 0x563474596b50
| |       `-CXXThisExpr 0x5634745c2fc8 <col:9> 'CBanEntry *' implicit this
| |-CXXConstructorDecl 0x563474596168 <line:46:5, line:49:5> line:46:14 invalid CBanEntry 'void (int, BanReason)'
| | |-ParmVarDecl 0x563474595fb8 <col:24, col:32> col:32 invalid n_create_time_in 'int'
| | |-ParmVarDecl 0x563474596050 <col:50, col:60> col:60 used ban_reason_in 'BanReason':'BanReason'
| | `-CompoundStmt 0x5634745c3080 <line:47:5, line:49:5>
| |-FunctionTemplateDecl 0x563474596478 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x563474596220 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745963d8 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634745962e8 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745c3680 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634745966f8 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634745964d8 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x563474596658 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x563474596598 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745c3cc0 <col:33, line:201:5>
| |     `-CallExpr 0x5634745c3c90 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634745c36a0 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634745c36f8 <col:25> 'Stream' lvalue ParmVar 0x563474596598 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634745c3b78 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x563474596ac8 <bitcoin/src/addrdb.h:53:5, line:59:5> line:54:17 SerializationOp
| | |-TemplateTypeParmDecl 0x563474596758 <line:53:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634745967c8 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x563474596a28 <line:54:5, line:59:5> line:54:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x563474596898 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x563474596910 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634745c4070 <col:66, line:59:5>
| |     `-ParenExpr 0x5634745c3e00 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |       `-CallExpr 0x5634745c3dc8 <col:25, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x5634745c3cf8 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |         |-DeclRefExpr 0x5634745c3d48 <col:44> 'Stream' lvalue ParmVar 0x563474596898 's' 'Stream &'
| |         |-DeclRefExpr 0x5634745c3d68 <col:47> 'Operation' lvalue ParmVar 0x563474596910 'ser_action' 'Operation'
| |         `-MemberExpr 0x5634745c3d98 <bitcoin/src/addrdb.h:55:19, col:25> 'int' lvalue ->nVersion 0x5634745bdd90
| |           `-CXXThisExpr 0x5634745c3d88 <col:19> 'CBanEntry *' this
| |-CXXMethodDecl 0x563474596b50 <line:61:5, line:67:5> line:61:10 used SetNull 'void ()'
| | `-CompoundStmt 0x5634745c4240 <line:62:5, line:67:5>
| |   `-BinaryOperator 0x5634745c4190 <line:63:9, col:31> 'int' lvalue '='
| |     |-MemberExpr 0x5634745c4098 <col:9> 'int' lvalue ->nVersion 0x5634745bdd90
| |     | `-CXXThisExpr 0x5634745c4088 <col:9> 'CBanEntry *' implicit this
| |     `-ImplicitCastExpr 0x5634745c4178 <col:20, col:31> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5634745c4148 <col:20, col:31> 'const int' lvalue Var 0x5634745bdc98 'CURRENT_VERSION' 'const int' non_odr_use_constant
| `-CXXMethodDecl 0x563474596c28 <line:69:5, line:79:5> line:69:17 invalid banReasonToString 'int () const'
|   `-CompoundStmt 0x5634745c44e8 <line:70:5, line:79:5>
|-CXXRecordDecl 0x5634745c4558 <line:85:1, line:94:1> line:85:7 invalid class CAddrDB definition
| |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x5634747508c0 <line:84:4, col:52>
| | `-ParagraphComment 0x563474750890 <col:4, col:52>
| |   `-TextComment 0x563474750860 <col:4, col:52> Text=" Access to the (IP) address database (peers.dat) "
| |-CXXRecordDecl 0x5634745c4678 <line:85:1, col:7> col:7 implicit referenced class CAddrDB
| |-AccessSpecDecl 0x5634745c4708 <line:87:1, col:8> col:1 private
| |-FieldDecl 0x5634745c4758 <line:88:5, col:14> col:14 invalid pathAddr 'int'
| |-AccessSpecDecl 0x5634745c47a8 <line:89:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745c4830 <line:90:5, col:13> col:5 CAddrDB 'void ()'
| |-CXXMethodDecl 0x5634745c49d8 <line:91:5, col:36> col:10 Write 'bool (const CAddrMan &)'
| | `-ParmVarDecl 0x5634745c4918 <col:16, col:32> col:32 addr 'const CAddrMan &'
| |-CXXMethodDecl 0x5634745c4b78 <line:92:5, col:29> col:10 Read 'bool (CAddrMan &)'
| | `-ParmVarDecl 0x5634745c4ab8 <col:15, col:25> col:25 addr 'CAddrMan &'
| `-CXXMethodDecl 0x5634745c4da8 <line:93:5, col:58> col:17 Read 'bool (CAddrMan &, CDataStream &)' static
|   |-ParmVarDecl 0x5634745c4c30 <col:22, col:32> col:32 addr 'CAddrMan &'
|   `-ParmVarDecl 0x5634745c4cd8 <col:38, col:51> col:51 ssPeers 'CDataStream &'
|-CXXRecordDecl 0x5634745c4e98 <line:97:1, line:105:1> line:97:7 referenced invalid class CBanDB definition
| |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474750990 <line:96:4, col:49>
| | `-ParagraphComment 0x563474750960 <col:4, col:49>
| |   `-TextComment 0x563474750930 <col:4, col:49> Text=" Access to the banlist database (banlist.dat) "
| |-CXXRecordDecl 0x5634745c5018 <line:97:1, col:7> col:7 implicit referenced class CBanDB
| |-AccessSpecDecl 0x5634745c50a8 <line:99:1, col:8> col:1 private
| |-FieldDecl 0x5634745c50f8 <line:100:5, col:20> col:20 invalid m_ban_list_path 'const int'
| |-AccessSpecDecl 0x5634745c5148 <line:101:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745c5268 <line:102:5, col:43> col:14 invalid CBanDB 'void (int)'
| | `-ParmVarDecl 0x5634745c5198 <col:21, col:30> col:30 invalid ban_list_path 'int'
| |-CXXMethodDecl 0x5634745c5408 <line:103:5, col:38> col:10 invalid Write 'bool (const int &)'
| | `-ParmVarDecl 0x5634745c5340 <col:16, col:32> col:32 invalid banSet 'const int &'
| `-CXXMethodDecl 0x5634745c5598 <line:104:5, col:31> col:10 invalid Read 'bool (int &)'
|   `-ParmVarDecl 0x5634745c54d8 <col:15, col:25> col:25 invalid banSet 'int &'
|-TypedefDecl 0x5634745c5670 <bitcoin/src/compat.h:48:1, col:22> col:22 referenced SOCKET 'unsigned int'
| `-BuiltinType 0x5634744cb820 'unsigned int'
|-FunctionDecl 0x5634745c5860 <line:82:1, col:50> col:8 invalid strnlen 'int (const char *, int)'
| |-ParmVarDecl 0x5634745c56f0 <col:17, col:29> col:29 start 'const char *'
| `-ParmVarDecl 0x5634745c5780 <col:36, col:43> col:43 invalid max_len 'int'
|-TypedefDecl 0x5634745c5928 <line:86:1, col:15> col:15 sockopt_arg_type 'void *'
| `-PointerType 0x5634744cbee0 'void *'
|   `-BuiltinType 0x5634744cb6e0 'void'
|-FunctionDecl 0x5634745c5af8 <line:98:1, line:104:1> line:98:20 used IsSelectableSocket 'bool (const SOCKET &)' static inline
| |-ParmVarDecl 0x5634745c5a08 <col:39, col:53> col:53 s 'const SOCKET &'
| `-CompoundStmt 0x5634745c5bc0 <col:56, line:104:1>
|   `-ReturnStmt 0x5634745c5bb0 <line:100:5, col:12>
|     `-CXXBoolLiteralExpr 0x5634745c5ba0 <col:12> 'bool' true
|-EnumDecl 0x5634745c5bd8 <bitcoin/src/netaddress.h:20:1, line:29:1> line:20:6 referenced Network
| |-EnumConstantDecl 0x5634745c5ce0 <line:22:5, col:22> col:5 referenced NET_UNROUTABLE 'Network'
| | `-ImplicitCastExpr 0x5634745c5ec0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634745c5cc0 <col:22> 'int' 0
| |     `-IntegerLiteral 0x5634745c5ca0 <col:22> 'int' 0
| |-EnumConstantDecl 0x5634745c5d30 <line:23:5> col:5 NET_IPV4 'Network'
| |-EnumConstantDecl 0x5634745c5d80 <line:24:5> col:5 NET_IPV6 'Network'
| |-EnumConstantDecl 0x5634745c5dd0 <line:25:5> col:5 NET_ONION 'Network'
| |-EnumConstantDecl 0x5634745c5e20 <line:26:5> col:5 referenced NET_INTERNAL 'Network'
| `-EnumConstantDecl 0x5634745c5e70 <line:28:5> col:5 referenced NET_MAX 'Network'
|-CXXRecordDecl 0x5634745c5f08 <line:32:1, line:100:1> line:32:7 referenced invalid class CNetAddr definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474750a60 <line:31:4, col:71>
| | `-ParagraphComment 0x563474750a30 <col:4, col:71>
| |   `-TextComment 0x563474750a00 <col:4, col:71> Text=" IP address (IPv6, or IPv4 using mapped IPv6 range (::FFFF:0:0/96)) "
| |-CXXRecordDecl 0x5634745c8928 <line:32:1, col:7> col:7 implicit referenced class CNetAddr
| |-AccessSpecDecl 0x5634745c89b8 <line:34:5, col:14> col:5 protected
| |-FieldDecl 0x5634745c8a80 <line:35:9, col:28> col:23 referenced ip 'unsigned char [16]'
| |-FieldDecl 0x5634745c8af8 <line:36:9, col:18> col:18 invalid scopeId 'int'
| |-AccessSpecDecl 0x5634745c8b48 <line:38:5, col:11> col:5 public
| |-CXXConstructorDecl 0x5634745c8bd0 <line:39:9, col:18> col:9 used CNetAddr 'void ()'
| |-CXXRecordDecl 0x5634745c8c78 parent 0x5634744cb688 <line:40:33, col:40> col:40 struct in_addr
| |-CXXConstructorDecl 0x5634745c8ef8 <col:9, col:57> col:18 CNetAddr 'void (const struct in_addr &)'
| | `-ParmVarDecl 0x5634745c8e00 <col:27, col:49> col:49 ipv4Addr 'const struct in_addr &'
| |-CXXMethodDecl 0x5634745c90a8 <line:41:9, col:38> col:14 used SetIP 'void (const CNetAddr &)'
| | `-ParmVarDecl 0x5634745c8fe8 <col:20, col:36> col:36 ip 'const CNetAddr &'
| |-AccessSpecDecl 0x5634745c9178 <line:43:5, col:12> col:5 private
| |-CXXMethodDecl 0x5634745c9318 <line:48:9, col:57> col:14 invalid SetRaw 'void (Network, const int *)'
| | |-ParmVarDecl 0x5634745c91b0 <col:21, col:29> col:29 network 'Network'
| | |-ParmVarDecl 0x5634745c9240 <col:38, col:53> col:53 invalid data 'const int *'
| | `-FullComment 0x563474750bd0 <line:45:11, line:46:68>
| |   |-ParagraphComment 0x563474750b20 <line:45:11, line:46:11>
| |   | |-TextComment 0x563474750ad0 <line:45:11, col:63> Text=" Set raw IPv4 or IPv6 address (in network byte order)"
| |   | `-TextComment 0x563474750af0 <line:46:11> Text=" "
| |   `-BlockCommandComment 0x563474750b40 <col:12, col:68> Name="note"
| |     `-ParagraphComment 0x563474750ba0 <col:17, col:68>
| |       `-TextComment 0x563474750b70 <col:17, col:68> Text=" Only NET_IPV4 and NET_IPV6 are allowed for network."
| |-AccessSpecDecl 0x5634745c93c8 <line:50:5, col:11> col:5 public
| |-CXXMethodDecl 0x5634745c94a8 <line:51:9, col:49> col:14 invalid SetInternal 'bool (const int &)'
| | `-ParmVarDecl 0x5634745c9418 <col:26, col:45> col:45 invalid name 'const int &'
| |-CXXMethodDecl 0x5634745c9608 <line:53:9, col:51> col:14 invalid SetSpecial 'bool (const int &)'
| | `-ParmVarDecl 0x5634745c9578 <col:25, col:44> col:44 invalid strName 'const int &'
| |-CXXMethodDecl 0x5634745c96f8 <line:54:9, col:26> col:14 IsBindAny 'bool () const'
| |-CXXMethodDecl 0x5634745c97b8 <line:55:9, col:23> col:14 IsIPv4 'bool () const'
| |-CXXMethodDecl 0x5634745ca8c0 <line:56:9, col:23> col:14 IsIPv6 'bool () const'
| |-CXXMethodDecl 0x5634745ca980 <line:57:9, col:26> col:14 IsRFC1918 'bool () const'
| |-CXXMethodDecl 0x5634745caa40 <line:58:9, col:26> col:14 IsRFC2544 'bool () const'
| |-CXXMethodDecl 0x5634745cab00 <line:59:9, col:26> col:14 IsRFC6598 'bool () const'
| |-CXXMethodDecl 0x5634745cabc0 <line:60:9, col:26> col:14 IsRFC5737 'bool () const'
| |-CXXMethodDecl 0x5634745cac80 <line:61:9, col:26> col:14 IsRFC3849 'bool () const'
| |-CXXMethodDecl 0x5634745cad40 <line:62:9, col:26> col:14 IsRFC3927 'bool () const'
| |-CXXMethodDecl 0x5634745cae00 <line:63:9, col:26> col:14 IsRFC3964 'bool () const'
| |-CXXMethodDecl 0x5634745caec0 <line:64:9, col:26> col:14 IsRFC4193 'bool () const'
| |-CXXMethodDecl 0x5634745caf80 <line:65:9, col:26> col:14 IsRFC4380 'bool () const'
| |-CXXMethodDecl 0x5634745cb040 <line:66:9, col:26> col:14 IsRFC4843 'bool () const'
| |-CXXMethodDecl 0x5634745cb100 <line:67:9, col:26> col:14 IsRFC7343 'bool () const'
| |-CXXMethodDecl 0x5634745cb1c0 <line:68:9, col:26> col:14 IsRFC4862 'bool () const'
| |-CXXMethodDecl 0x5634745cb280 <line:69:9, col:26> col:14 IsRFC6052 'bool () const'
| |-CXXMethodDecl 0x5634745cb340 <line:70:9, col:26> col:14 IsRFC6145 'bool () const'
| |-CXXMethodDecl 0x5634745cb400 <line:71:9, col:22> col:14 IsTor 'bool () const'
| |-CXXMethodDecl 0x5634745cb4c0 <line:72:9, col:24> col:14 IsLocal 'bool () const'
| |-CXXMethodDecl 0x5634745cb580 <line:73:9, col:27> col:14 used IsRoutable 'bool () const'
| |-CXXMethodDecl 0x5634745cb640 <line:74:9, col:27> col:14 IsInternal 'bool () const'
| |-CXXMethodDecl 0x5634745cb700 <line:75:9, col:24> col:14 used IsValid 'bool () const'
| |-CXXMethodDecl 0x5634745cc8e0 <line:76:9, col:35> col:22 used GetNetwork 'enum Network () const'
| |-CXXMethodDecl 0x5634745cc9b8 <line:77:9, col:32> col:21 invalid ToString 'int () const'
| |-CXXMethodDecl 0x5634745cca90 <line:78:9, col:34> col:21 invalid ToStringIP 'int () const'
| |-CXXMethodDecl 0x5634745ccc10 <line:79:9, col:37> col:22 GetByte 'unsigned int (int) const'
| | `-ParmVarDecl 0x5634745ccb48 <col:30, col:34> col:34 n 'int'
| |-CXXMethodDecl 0x5634745cccf0 <line:80:9, col:28> col:18 invalid GetHash 'int () const'
| |-CXXMethodDecl 0x5634745ccf38 <line:81:9, col:51> col:14 GetInAddr 'bool (struct in_addr *) const'
| | `-ParmVarDecl 0x5634745cce40 <col:24, col:40> col:40 pipv4Addr 'struct in_addr *'
| |-CXXMethodDecl 0x5634745cd0e0 <line:83:9, col:73> col:13 GetReachabilityFrom 'int (const CNetAddr *) const'
| | `-ParmVarDecl 0x5634745cd018 <col:33, col:64> col:49 paddrPartner 'const CNetAddr *' cinit
| |   `-ImplicitCastExpr 0x5634745ce7e8 <col:64> 'const CNetAddr *' <NullToPointer>
| |     `-CXXNullPtrLiteralExpr 0x5634745ce7d8 <col:64> 'nullptr_t'
| |-CXXRecordDecl 0x5634745cd188 parent 0x5634744cb688 <line:85:33, col:40> col:40 struct in6_addr
| |-CXXConstructorDecl 0x5634745cd4b8 <col:9, col:85> col:18 invalid CNetAddr 'void (const struct in6_addr &, const int)'
| | |-ParmVarDecl 0x5634745cd310 <col:27, col:50> col:50 pipv6Addr 'const struct in6_addr &'
| | `-ParmVarDecl 0x5634745cd3a0 <col:61, col:84> col:76 invalid scope 'const int' cinit
| |   `-IntegerLiteral 0x5634745ce800 <col:84> 'int' 0
| |-CXXMethodDecl 0x5634745cd718 <line:86:9, col:53> col:14 GetIn6Addr 'bool (struct in6_addr *) const'
| | `-ParmVarDecl 0x5634745cd620 <col:25, col:42> col:42 pipv6Addr 'struct in6_addr *'
| |-FriendDecl 0x5634745cda18 <line:88:9, col:68> col:21
| | `-FunctionDecl 0x5634745cd958 parent 0x5634744cb688 <col:9, col:68> col:21 used operator== 'bool (const CNetAddr &, const CNetAddr &)'
| |   |-ParmVarDecl 0x5634745cd7d0 <col:32, col:48> col:48 a 'const CNetAddr &'
| |   `-ParmVarDecl 0x5634745cd848 <col:51, col:67> col:67 b 'const CNetAddr &'
| |-FriendDecl 0x5634745cdc38 <line:89:9, col:90> col:21
| | `-FunctionDecl 0x5634745cdb78 parent 0x5634744cb688 <col:9, col:90> col:21 operator!= 'bool (const CNetAddr &, const CNetAddr &)'
| |   |-ParmVarDecl 0x5634745cda68 <col:32, col:48> col:48 used a 'const CNetAddr &'
| |   |-ParmVarDecl 0x5634745cdae0 <col:51, col:67> col:67 used b 'const CNetAddr &'
| |   `-CompoundStmt 0x5634745ce980 <col:70, col:90>
| |     `-ReturnStmt 0x5634745ce970 <col:72, col:87>
| |       `-UnaryOperator 0x5634745ce958 <col:79, col:87> 'bool' prefix '!' cannot overflow
| |         `-ParenExpr 0x5634745ce938 <col:80, col:87> 'bool'
| |           `-CXXOperatorCallExpr 0x5634745ce900 <col:81, col:86> 'bool' adl
| |             |-ImplicitCastExpr 0x5634745ce8a8 <col:83> 'bool (*)(const CNetAddr &, const CNetAddr &)' <FunctionToPointerDecay>
| |             | `-DeclRefExpr 0x5634745ce860 <col:83> 'bool (const CNetAddr &, const CNetAddr &)' lvalue Function 0x5634745cd958 'operator==' 'bool (const CNetAddr &, const CNetAddr &)'
| |             |-DeclRefExpr 0x5634745ce820 <col:81> 'const CNetAddr' lvalue ParmVar 0x5634745cda68 'a' 'const CNetAddr &'
| |             `-DeclRefExpr 0x5634745ce840 <col:86> 'const CNetAddr' lvalue ParmVar 0x5634745cdae0 'b' 'const CNetAddr &'
| |-FriendDecl 0x5634745cde58 <line:90:9, col:67> col:21
| | `-FunctionDecl 0x5634745cdd98 parent 0x5634744cb688 <col:9, col:67> col:21 operator< 'bool (const CNetAddr &, const CNetAddr &)'
| |   |-ParmVarDecl 0x5634745cdc88 <col:31, col:47> col:47 a 'const CNetAddr &'
| |   `-ParmVarDecl 0x5634745cdd00 <col:50, col:66> col:66 b 'const CNetAddr &'
| |-FunctionTemplateDecl 0x5634745ce0b8 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634745cde98 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745ce018 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634745cdf58 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745cea50 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634745ce338 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634745ce118 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745ce298 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634745ce1d8 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745ceb58 <col:33, line:201:5>
| |     `-CallExpr 0x5634745ceb28 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634745cea70 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634745ceac8 <col:25> 'Stream' lvalue ParmVar 0x5634745ce1d8 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634745ceaf8 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634745ce6c8 <bitcoin/src/netaddress.h:94:9, line:97:9> line:95:21 SerializationOp
| | |-TemplateTypeParmDecl 0x5634745ce398 <line:94:19, col:28> col:28 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634745ce408 <col:36, col:45> col:45 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634745ce628 <line:95:9, line:97:9> line:95:21 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634745ce4d8 <col:37, col:45> col:45 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634745ce550 <col:48, col:58> col:58 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634745cecb8 <col:70, line:97:9>
| |     `-ParenExpr 0x5634745cec98 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |       `-CallExpr 0x5634745cec60 <col:25, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x5634745ceb90 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |         |-DeclRefExpr 0x5634745cebe0 <col:44> 'Stream' lvalue ParmVar 0x5634745ce4d8 's' 'Stream &'
| |         |-DeclRefExpr 0x5634745cec00 <col:47> 'Operation' lvalue ParmVar 0x5634745ce550 'ser_action' 'Operation'
| |         `-MemberExpr 0x5634745cec30 <bitcoin/src/netaddress.h:96:23> 'unsigned char [16]' lvalue ->ip 0x5634745c8a80
| |           `-CXXThisExpr 0x5634745cec20 <col:23> 'CNetAddr *' implicit this
| |-FriendDecl 0x5634745ce780 <line:99:9, col:22> col:16 'class CSubNet':'CSubNet'
| |-CXXConstructorDecl 0x5634745d3cd8 <line:32:7> col:7 implicit used constexpr CNetAddr 'void (const CNetAddr &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5634745d3db8 <col:7> col:7 used 'const CNetAddr &'
| | |-CXXCtorInitializer Field 0x5634745c8a80 'ip' 'unsigned char [16]'
| | | `-ArrayInitLoopExpr 0x563474622b80 <col:7> 'unsigned char [16]'
| | |   |-OpaqueValueExpr 0x563474622b08 <col:7> 'unsigned char const[16]' lvalue
| | |   | `-MemberExpr 0x563474622a80 <col:7> 'unsigned char const[16]' lvalue .ip 0x5634745c8a80
| | |   |   `-DeclRefExpr 0x563474622a60 <col:7> 'const CNetAddr' lvalue ParmVar 0x5634745d3db8 '' 'const CNetAddr &'
| | |   `-ImplicitCastExpr 0x563474622b68 <col:7> 'unsigned char' <LValueToRValue>
| | |     `-ArraySubscriptExpr 0x563474622b48 <col:7> 'const unsigned char' lvalue
| | |       |-ImplicitCastExpr 0x563474622b30 <col:7> 'const unsigned char *' <ArrayToPointerDecay>
| | |       | `-OpaqueValueExpr 0x563474622b08 <col:7> 'unsigned char const[16]' lvalue
| | |       |   `-MemberExpr 0x563474622a80 <col:7> 'unsigned char const[16]' lvalue .ip 0x5634745c8a80
| | |       |     `-DeclRefExpr 0x563474622a60 <col:7> 'const CNetAddr' lvalue ParmVar 0x5634745d3db8 '' 'const CNetAddr &'
| | |       `-ArrayInitIndexExpr 0x563474622b20 <<invalid sloc>> 'unsigned long'
| | `-CompoundStmt 0x563474622bd0 <col:7>
| `-CXXConstructorDecl 0x5634745d3e58 <col:7> col:7 implicit used constexpr CNetAddr 'void (CNetAddr &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5634745d3f68 <col:7> col:7 used 'CNetAddr &&'
|   |-CXXCtorInitializer Field 0x5634745c8a80 'ip' 'unsigned char [16]'
|   | `-ArrayInitLoopExpr 0x563474649d70 <col:7> 'unsigned char [16]'
|   |   |-OpaqueValueExpr 0x563474649cf8 <col:7> 'unsigned char [16]' xvalue
|   |   | `-MemberExpr 0x563474649cb0 <col:7> 'unsigned char [16]' xvalue .ip 0x5634745c8a80
|   |   |   `-CXXStaticCastExpr 0x563474649c80 <col:7> 'CNetAddr' xvalue static_cast<class CNetAddr &&> <NoOp>
|   |   |     `-DeclRefExpr 0x563474649c50 <col:7> 'CNetAddr' lvalue ParmVar 0x5634745d3f68 '' 'CNetAddr &&'
|   |   `-ImplicitCastExpr 0x563474649d58 <col:7> 'unsigned char' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x563474649d38 <col:7> 'unsigned char' xvalue
|   |       |-ImplicitCastExpr 0x563474649d20 <col:7> 'unsigned char *' <ArrayToPointerDecay>
|   |       | `-OpaqueValueExpr 0x563474649cf8 <col:7> 'unsigned char [16]' xvalue
|   |       |   `-MemberExpr 0x563474649cb0 <col:7> 'unsigned char [16]' xvalue .ip 0x5634745c8a80
|   |       |     `-CXXStaticCastExpr 0x563474649c80 <col:7> 'CNetAddr' xvalue static_cast<class CNetAddr &&> <NoOp>
|   |       |       `-DeclRefExpr 0x563474649c50 <col:7> 'CNetAddr' lvalue ParmVar 0x5634745d3f68 '' 'CNetAddr &&'
|   |       `-ArrayInitIndexExpr 0x563474649d10 <<invalid sloc>> 'unsigned long'
|   `-CompoundStmt 0x563474649dc0 <col:7>
|-CXXRecordDecl 0x5634745cecd0 prev 0x5634745bd510 <line:102:1, line:137:1> line:102:7 referenced invalid class CSubNet definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634745cedc8 <col:1, col:7> col:7 implicit referenced class CSubNet
| |-AccessSpecDecl 0x5634745cee88 <line:104:5, col:14> col:5 protected
| |-FieldDecl 0x5634745ceec0 <line:106:9, col:18> col:18 invalid network 'CNetAddr'
| | `-FullComment 0x563474750e20 <line:105:12, col:34>
| |   `-ParagraphComment 0x563474750df0 <col:12, col:34>
| |     `-TextComment 0x563474750dc0 <col:12, col:34> Text=" Network (base) address"
| |-FieldDecl 0x5634745ceff0 <line:108:9, <invalid sloc>> col:17 invalid netmask 'int [16]'
| | `-FullComment 0x563474750ef0 <line:107:12, col:42>
| |   `-ParagraphComment 0x563474750ec0 <col:12, col:42>
| |     `-TextComment 0x563474750e90 <col:12, col:42> Text=" Netmask, in network byte order"
| |-FieldDecl 0x5634745cf078 <line:110:9, col:14> col:14 referenced valid 'bool'
| | `-FullComment 0x563474750fc0 <line:109:12, col:67>
| |   `-ParagraphComment 0x563474750f90 <col:12, col:67>
| |     `-TextComment 0x563474750f60 <col:12, col:67> Text=" Is this value valid? (only used to signal parse errors)"
| |-AccessSpecDecl 0x5634745cf0c8 <line:112:5, col:11> col:5 public
| |-CXXConstructorDecl 0x5634745cf150 <line:113:9, col:17> col:9 CSubNet 'void ()'
| |-CXXConstructorDecl 0x5634745cf368 <line:114:9, col:51> col:9 invalid CSubNet 'void (const CNetAddr &, int)'
| | |-ParmVarDecl 0x5634745cf208 <col:17, col:33> col:33 addr 'const CNetAddr &'
| | `-ParmVarDecl 0x5634745cf298 <col:39, col:47> col:47 invalid mask 'int'
| |-CXXConstructorDecl 0x5634745cf578 <line:115:9, col:59> col:9 CSubNet 'void (const CNetAddr &, const CNetAddr &)'
| | |-ParmVarDecl 0x5634745cf430 <col:17, col:33> col:33 addr 'const CNetAddr &'
| | `-ParmVarDecl 0x5634745cf4a8 <col:39, col:55> col:55 mask 'const CNetAddr &'
| |-CXXConstructorDecl 0x5634745cf6d0 <line:118:9, col:46> col:18 CSubNet 'void (const CNetAddr &)'
| | `-ParmVarDecl 0x5634745cf640 <col:26, col:42> col:42 addr 'const CNetAddr &'
| |-CXXMethodDecl 0x5634745cf910 <line:120:9, col:42> col:14 used Match 'bool (const CNetAddr &) const'
| | `-ParmVarDecl 0x5634745cf790 <col:20, col:36> col:36 addr 'const CNetAddr &'
| |-CXXMethodDecl 0x5634745cf9f0 <line:122:9, col:32> col:21 invalid ToString 'int () const'
| |-CXXMethodDecl 0x5634745cfab0 <line:123:9, col:24> col:14 IsValid 'bool () const'
| |-FriendDecl 0x5634745cfd98 <line:125:9, col:66> col:21
| | `-FunctionDecl 0x5634745cfcd8 parent 0x5634744cb688 <col:9, col:66> col:21 used operator== 'bool (const CSubNet &, const CSubNet &)'
| |   |-ParmVarDecl 0x5634745cfb88 <col:32, col:47> col:47 a 'const CSubNet &'
| |   `-ParmVarDecl 0x5634745cfc00 <col:50, col:65> col:65 b 'const CSubNet &'
| |-FriendDecl 0x5634745cffb8 <line:126:9, col:88> col:21
| | `-FunctionDecl 0x5634745cfef8 parent 0x5634744cb688 <col:9, col:88> col:21 operator!= 'bool (const CSubNet &, const CSubNet &)'
| |   |-ParmVarDecl 0x5634745cfde8 <col:32, col:47> col:47 used a 'const CSubNet &'
| |   |-ParmVarDecl 0x5634745cfe60 <col:50, col:65> col:65 used b 'const CSubNet &'
| |   `-CompoundStmt 0x5634745d0c40 <col:68, col:88>
| |     `-ReturnStmt 0x5634745d0c30 <col:70, col:85>
| |       `-UnaryOperator 0x5634745d0c18 <col:77, col:85> 'bool' prefix '!' cannot overflow
| |         `-ParenExpr 0x5634745d0bf8 <col:78, col:85> 'bool'
| |           `-CXXOperatorCallExpr 0x5634745d0bc0 <col:79, col:84> 'bool' adl
| |             |-ImplicitCastExpr 0x5634745d0ba8 <col:81> 'bool (*)(const CSubNet &, const CSubNet &)' <FunctionToPointerDecay>
| |             | `-DeclRefExpr 0x5634745d0b58 <col:81> 'bool (const CSubNet &, const CSubNet &)' lvalue Function 0x5634745cfcd8 'operator==' 'bool (const CSubNet &, const CSubNet &)'
| |             |-DeclRefExpr 0x5634745d0b18 <col:79> 'const CSubNet' lvalue ParmVar 0x5634745cfde8 'a' 'const CSubNet &'
| |             `-DeclRefExpr 0x5634745d0b38 <col:84> 'const CSubNet' lvalue ParmVar 0x5634745cfe60 'b' 'const CSubNet &'
| |-FriendDecl 0x5634745d01d8 <line:127:9, col:65> col:21
| | `-FunctionDecl 0x5634745d0118 parent 0x5634744cb688 <col:9, col:65> col:21 operator< 'bool (const CSubNet &, const CSubNet &)'
| |   |-ParmVarDecl 0x5634745d0008 <col:31, col:46> col:46 a 'const CSubNet &'
| |   `-ParmVarDecl 0x5634745d0080 <col:49, col:64> col:64 b 'const CSubNet &'
| |-FunctionTemplateDecl 0x5634745d0438 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634745d0218 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745d0398 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634745d02d8 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745d0d10 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634745d06b8 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634745d0498 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745d0618 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634745d0558 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745d0e18 <col:33, line:201:5>
| |     `-CallExpr 0x5634745d0de8 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634745d0d30 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634745d0d88 <col:25> 'Stream' lvalue ParmVar 0x5634745d0558 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634745d0db8 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| `-FunctionTemplateDecl 0x5634745d0a98 <bitcoin/src/netaddress.h:131:9, line:136:9> line:132:21 SerializationOp
|   |-TemplateTypeParmDecl 0x5634745d0718 <line:131:19, col:28> col:28 referenced typename depth 0 index 0 Stream
|   |-TemplateTypeParmDecl 0x5634745d0788 <col:36, col:45> col:45 referenced typename depth 0 index 1 Operation
|   `-CXXMethodDecl 0x5634745d09f8 <line:132:9, line:136:9> line:132:21 SerializationOp 'void (Stream &, Operation)' inline
|     |-ParmVarDecl 0x5634745d0858 <col:37, col:45> col:45 referenced s 'Stream &'
|     |-ParmVarDecl 0x5634745d0920 <col:48, col:58> col:58 referenced ser_action 'Operation'
|     `-CompoundStmt 0x5634745d10f8 <col:70, line:136:9>
|       `-ParenExpr 0x5634745d10d8 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
|         `-CallExpr 0x5634745d10a0 <col:25, col:70> '<dependent type>'
|           |-UnresolvedLookupExpr 0x5634745d0fd0 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
|           |-DeclRefExpr 0x5634745d1020 <col:44> 'Stream' lvalue ParmVar 0x5634745d0858 's' 'Stream &'
|           |-DeclRefExpr 0x5634745d1040 <col:47> 'Operation' lvalue ParmVar 0x5634745d0920 'ser_action' 'Operation'
|           `-MemberExpr 0x5634745d1070 <bitcoin/src/netaddress.h:135:23> 'bool' lvalue ->valid 0x5634745cf078
|             `-CXXThisExpr 0x5634745d1060 <col:23> 'CSubNet *' implicit this
|-CXXRecordDecl 0x5634745d1138 <line:140:1, line:171:1> line:140:7 referenced invalid class CService definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'CNetAddr'
| |-FullComment 0x563474751210 <line:139:4, col:67>
| | `-ParagraphComment 0x5634747511e0 <col:4, col:67>
| |   `-TextComment 0x5634747511b0 <col:4, col:67> Text=" A combination of a network address (CNetAddr) and a (TCP) port "
| |-CXXRecordDecl 0x5634745d1298 <line:140:1, col:7> col:7 implicit referenced class CService
| |-AccessSpecDecl 0x5634745d1328 <line:142:5, col:14> col:5 protected
| |-FieldDecl 0x5634745d1378 <line:143:9, col:18> col:18 invalid port 'int'
| |-AccessSpecDecl 0x5634745d13c8 <line:145:5, col:11> col:5 public
| |-CXXConstructorDecl 0x5634745d1450 <line:146:9, col:18> col:9 used CService 'void ()'
| |-CXXConstructorDecl 0x5634745d1658 <line:147:9, col:57> col:9 used CService 'void (const CNetAddr &, unsigned short)'
| | |-ParmVarDecl 0x5634745d1508 <col:18, col:34> col:34 ip 'const CNetAddr &'
| | `-ParmVarDecl 0x5634745d1588 <col:38, col:53> col:53 port 'unsigned short'
| |-CXXConstructorDecl 0x5634745d1930 <line:148:9, col:69> col:9 CService 'void (const struct in_addr &, unsigned short)'
| | |-ParmVarDecl 0x5634745d1760 <col:18, col:40> col:40 ipv4Addr 'const struct in_addr &'
| | `-ParmVarDecl 0x5634745d17e0 <col:50, col:65> col:65 port 'unsigned short'
| |-CXXRecordDecl 0x5634745d19e8 parent 0x5634744cb688 <line:149:33, col:40> col:40 struct sockaddr_in
| |-CXXConstructorDecl 0x5634745d1c68 <col:9, col:57> col:18 CService 'void (const struct sockaddr_in &)'
| | `-ParmVarDecl 0x5634745d1b70 <col:27, col:53> col:53 addr 'const struct sockaddr_in &'
| |-CXXMethodDecl 0x5634745d1da0 <line:150:9, col:34> col:24 used GetPort 'unsigned short () const'
| |-CXXRecordDecl 0x5634745d1e40 parent 0x5634744cb688 <line:151:26, col:33> col:33 struct sockaddr
| |-CXXMethodDecl 0x5634745d2168 <col:9, col:70> col:14 invalid GetSockAddr 'bool (struct sockaddr *, int *) const'
| | |-ParmVarDecl 0x5634745d1fc0 <col:26, col:43> col:43 paddr 'struct sockaddr *'
| | `-ParmVarDecl 0x5634745d2050 <col:50, col:61> col:61 invalid addrlen 'int *'
| |-CXXMethodDecl 0x5634745d23c8 <line:152:9, col:54> col:14 used SetSockAddr 'bool (const struct sockaddr *)'
| | `-ParmVarDecl 0x5634745d22d0 <col:26, col:49> col:49 paddr 'const struct sockaddr *'
| |-FriendDecl 0x5634745d26b8 <line:153:9, col:68> col:21
| | `-FunctionDecl 0x5634745d25f8 parent 0x5634744cb688 <col:9, col:68> col:21 used operator== 'bool (const CService &, const CService &)'
| |   |-ParmVarDecl 0x5634745d24a8 <col:32, col:48> col:48 a 'const CService &'
| |   `-ParmVarDecl 0x5634745d2520 <col:51, col:67> col:67 b 'const CService &'
| |-FriendDecl 0x5634745d28d8 <line:154:9, col:90> col:21
| | `-FunctionDecl 0x5634745d2818 parent 0x5634744cb688 <col:9, col:90> col:21 operator!= 'bool (const CService &, const CService &)'
| |   |-ParmVarDecl 0x5634745d2708 <col:32, col:48> col:48 used a 'const CService &'
| |   |-ParmVarDecl 0x5634745d2780 <col:51, col:67> col:67 used b 'const CService &'
| |   `-CompoundStmt 0x5634745d40c0 <col:70, col:90>
| |     `-ReturnStmt 0x5634745d40b0 <col:72, col:87>
| |       `-UnaryOperator 0x5634745d4098 <col:79, col:87> 'bool' prefix '!' cannot overflow
| |         `-ParenExpr 0x5634745d4078 <col:80, col:87> 'bool'
| |           `-CXXOperatorCallExpr 0x5634745d4040 <col:81, col:86> 'bool' adl
| |             |-ImplicitCastExpr 0x5634745d4028 <col:83> 'bool (*)(const CService &, const CService &)' <FunctionToPointerDecay>
| |             | `-DeclRefExpr 0x5634745d3fd8 <col:83> 'bool (const CService &, const CService &)' lvalue Function 0x5634745d25f8 'operator==' 'bool (const CService &, const CService &)'
| |             |-DeclRefExpr 0x5634745d3c98 <col:81> 'const CService' lvalue ParmVar 0x5634745d2708 'a' 'const CService &'
| |             `-DeclRefExpr 0x5634745d3cb8 <col:86> 'const CService' lvalue ParmVar 0x5634745d2780 'b' 'const CService &'
| |-FriendDecl 0x5634745d2b10 <line:155:9, col:67> col:21
| | `-FunctionDecl 0x5634745d2a50 parent 0x5634744cb688 <col:9, col:67> col:21 operator< 'bool (const CService &, const CService &)'
| |   |-ParmVarDecl 0x5634745d2940 <col:31, col:47> col:47 a 'const CService &'
| |   `-ParmVarDecl 0x5634745d29b8 <col:50, col:66> col:66 b 'const CService &'
| |-CXXMethodDecl 0x5634745d2bb0 <line:157:9, col:32> col:21 invalid ToString 'int () const'
| |-CXXMethodDecl 0x5634745d2c88 <line:158:9, col:36> col:21 invalid ToStringPort 'int () const'
| |-CXXMethodDecl 0x5634745d2d60 <line:159:9, col:38> col:21 invalid ToStringIPPort 'int () const'
| |-CXXConstructorDecl 0x5634745d2fe8 <line:161:9, col:70> col:9 CService 'void (const struct in6_addr &, unsigned short)'
| | |-ParmVarDecl 0x5634745d2e50 <col:18, col:41> col:41 ipv6Addr 'const struct in6_addr &'
| | `-ParmVarDecl 0x5634745d2ed0 <col:51, col:66> col:66 port 'unsigned short'
| |-CXXRecordDecl 0x5634745d30a0 parent 0x5634744cb688 <line:162:33, col:40> col:40 struct sockaddr_in6
| |-CXXConstructorDecl 0x5634745d3318 <col:9, col:58> col:18 CService 'void (const struct sockaddr_in6 &)'
| | `-ParmVarDecl 0x5634745d3220 <col:27, col:54> col:54 addr 'const struct sockaddr_in6 &'
| |-FunctionTemplateDecl 0x5634745d35e8 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634745d33c8 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745d3548 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634745d3488 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745d4190 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634745d3868 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634745d3648 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745d37c8 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634745d3708 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745d4298 <col:33, line:201:5>
| |     `-CallExpr 0x5634745d4268 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634745d41b0 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634745d4208 <col:25> 'Stream' lvalue ParmVar 0x5634745d3708 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634745d4238 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634745d3c18 <bitcoin/src/netaddress.h:166:9, line:170:9> line:167:21 SerializationOp
| | |-TemplateTypeParmDecl 0x5634745d38c8 <line:166:19, col:28> col:28 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634745d3950 <col:36, col:45> col:45 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634745d3b78 <line:167:9, line:170:9> line:167:21 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634745d3a28 <col:37, col:45> col:45 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634745d3aa0 <col:48, col:58> col:58 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634745d4520 <col:70, line:170:9>
| |     `-ParenExpr 0x5634745d43f8 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |       `-CallExpr 0x5634745d43c0 <col:25, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x5634745d42d0 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |         |-DeclRefExpr 0x5634745d4320 <col:44> 'Stream' lvalue ParmVar 0x5634745d3a28 's' 'Stream &'
| |         |-DeclRefExpr 0x5634745d4340 <col:47> 'Operation' lvalue ParmVar 0x5634745d3aa0 'ser_action' 'Operation'
| |         `-MemberExpr 0x5634745d4390 <bitcoin/src/netaddress.h:168:23> 'unsigned char [16]' lvalue ->ip 0x5634745c8a80
| |           `-ImplicitCastExpr 0x5634745d4370 <col:23> 'CNetAddr *' <UncheckedDerivedToBase (CNetAddr)>
| |             `-CXXThisExpr 0x5634745d4360 <col:23> 'CService *' implicit this
| |-CXXConstructorDecl 0x5634746222e0 <line:140:7> col:7 implicit used constexpr CService 'void (const CService &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5634746223f8 <col:7> col:7 used 'const CService &'
| | |-CXXCtorInitializer 'CNetAddr'
| | | `-CXXConstructExpr 0x563474622be0 <col:7> 'CNetAddr' 'void (const CNetAddr &) noexcept'
| | |   `-ImplicitCastExpr 0x563474622a10 <col:7> 'const CNetAddr' lvalue <UncheckedDerivedToBase (CNetAddr)>
| | |     `-DeclRefExpr 0x5634746229f0 <col:7> 'const CService' lvalue ParmVar 0x5634746223f8 '' 'const CService &'
| | `-CompoundStmt 0x563474622c50 <col:7>
| `-CXXConstructorDecl 0x563474622498 <col:7> col:7 implicit used constexpr CService 'void (CService &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5634746225a8 <col:7> col:7 used 'CService &&'
|   |-CXXCtorInitializer 'CNetAddr'
|   | `-CXXConstructExpr 0x563474649dd0 <col:7> 'CNetAddr' 'void (CNetAddr &&) noexcept'
|   |   `-ImplicitCastExpr 0x563474649c00 <col:7> 'CNetAddr' xvalue <UncheckedDerivedToBase (CNetAddr)>
|   |     `-CXXStaticCastExpr 0x563474649bd0 <col:7> 'CService' xvalue static_cast<class CService &&> <NoOp>
|   |       `-DeclRefExpr 0x563474649ba0 <col:7> 'CService' lvalue ParmVar 0x5634746225a8 '' 'CService &&'
|   `-CompoundStmt 0x563474649e40 <col:7>
|-ClassTemplateDecl 0x5634745d4688 <bitcoin/src/uint256.h:17:1, line:104:1> line:18:7 base_blob
| |-NonTypeTemplateParmDecl 0x5634745d4580 <line:17:10, col:23> col:23 referenced 'unsigned int' depth 0 index 0 BITS
| |-CXXRecordDecl 0x5634745d45f8 <line:18:1, line:104:1> line:18:7 invalid class base_blob definition
| | |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FullComment 0x563474751460 <line:16:4, col:54>
| | | `-ParagraphComment 0x563474751430 <col:4, col:54>
| | |   `-TextComment 0x563474751400 <col:4, col:54> Text=" Template base class for fixed-sized opaque blobs. "
| | |-CXXRecordDecl 0x5634745d81f0 <line:18:1, col:7> col:7 implicit referenced class base_blob
| | |-AccessSpecDecl 0x5634745d8280 <line:20:1, col:10> col:1 protected
| | |-VarDecl 0x5634745d82c0 <line:21:5, col:41> col:26 referenced WIDTH 'const int' static constexpr cinit
| | | `-ImplicitCastExpr 0x5634745d83a0 <col:34, col:41> 'const int' <IntegralCast>
| | |   `-BinaryOperator 0x5634745d8380 <col:34, col:41> 'unsigned int' '/'
| | |     |-DeclRefExpr 0x5634745d8328 <col:34> 'unsigned int' NonTypeTemplateParm 0x5634745d4580 'BITS' 'unsigned int'
| | |     `-ImplicitCastExpr 0x5634745d8368 <col:41> 'unsigned int' <IntegralCast>
| | |       `-IntegerLiteral 0x5634745d8348 <col:41> 'int' 8
| | |-FieldDecl 0x5634745d8468 <line:22:5, <invalid sloc>> col:13 invalid data 'int [WIDTH]'
| | |-AccessSpecDecl 0x5634745d84b8 <line:23:1, col:7> col:1 public
| | |-CXXConstructorDecl 0x5634745d8540 <line:24:5, line:27:5> line:24:5 base_blob<BITS> 'void ()'
| | | `-CompoundStmt 0x5634745da210 <line:25:5, line:27:5>
| | |-CXXConstructorDecl 0x5634745d86e8 <line:29:5, col:61> col:14 invalid base_blob<BITS> 'void (const int)'
| | | `-ParmVarDecl 0x5634745d8628 <col:24, <invalid sloc>> col:56 invalid 'const int'
| | |-CXXMethodDecl 0x5634745d87e8 <line:31:5, line:37:5> line:31:10 IsNull 'bool () const'
| | | `-CompoundStmt 0x5634745da498 <line:32:5, line:37:5>
| | |   |-ForStmt 0x5634745da440 <line:33:9, line:35:24>
| | |   | |-DeclStmt 0x5634745da2c0 <line:33:14, col:23>
| | |   | | `-VarDecl 0x5634745da238 <col:14, col:22> col:18 referenced i 'int' cinit
| | |   | |   `-IntegerLiteral 0x5634745da2a0 <col:22> 'int' 0
| | |   | |-<<<NULL>>>
| | |   | |-BinaryOperator 0x5634745da348 <col:25, col:29> 'bool' '<'
| | |   | | |-ImplicitCastExpr 0x5634745da318 <col:25> 'int' <LValueToRValue>
| | |   | | | `-DeclRefExpr 0x5634745da2d8 <col:25> 'int' lvalue Var 0x5634745da238 'i' 'int'
| | |   | | `-ImplicitCastExpr 0x5634745da330 <col:29> 'int' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x5634745da2f8 <col:29> 'const int' lvalue Var 0x5634745d82c0 'WIDTH' 'const int'
| | |   | |-UnaryOperator 0x5634745da388 <col:36, col:37> 'int' postfix '++'
| | |   | | `-DeclRefExpr 0x5634745da368 <col:36> 'int' lvalue Var 0x5634745da238 'i' 'int'
| | |   | `-IfStmt 0x5634745da428 <line:34:13, line:35:24>
| | |   |   |-OpaqueValueExpr 0x5634745da410 <<invalid sloc>> 'bool'
| | |   |   `-ReturnStmt 0x5634745da400 <col:17, col:24>
| | |   |     `-CXXBoolLiteralExpr 0x5634745da3f0 <col:24> 'bool' false
| | |   `-ReturnStmt 0x5634745da488 <line:36:9, col:16>
| | |     `-CXXBoolLiteralExpr 0x5634745da478 <col:16> 'bool' true
| | |-CXXMethodDecl 0x5634745d88a8 <line:39:5, line:42:5> line:39:10 SetNull 'void ()'
| | | `-CompoundStmt 0x5634745da538 <line:40:5, line:42:5>
| | |-CXXMethodDecl 0x5634745d8a50 <line:44:5, col:103> col:16 Compare 'int (const base_blob<BITS> &) const' inline
| | | |-ParmVarDecl 0x5634745d8988 <col:24, col:41> col:41 referenced other 'const base_blob<BITS> &'
| | | `-CompoundStmt 0x5634745da610 <col:54, col:103>
| | |-FriendDecl 0x5634745d8d18 <line:46:5, col:103> col:24
| | | `-FunctionDecl 0x5634745d8c58 parent 0x5634744cb688 <col:5, col:103> col:24 operator== 'bool (const base_blob<BITS> &, const base_blob<BITS> &)' inline
| | |   |-ParmVarDecl 0x5634745d8b08 <col:35, col:52> col:52 referenced a 'const base_blob<BITS> &'
| | |   |-ParmVarDecl 0x5634745d8b80 <col:55, col:72> col:72 referenced b 'const base_blob<BITS> &'
| | |   `-CompoundStmt 0x5634745da720 <col:75, col:103>
| | |     `-ReturnStmt 0x5634745da710 <col:77, col:100>
| | |       `-BinaryOperator 0x5634745da6f0 <col:84, col:100> '<dependent type>' '=='
| | |         |-CallExpr 0x5634745da6a8 <col:84, col:95> '<dependent type>'
| | |         | |-CXXDependentScopeMemberExpr 0x5634745da640 <col:84, col:86> '<dependent type>' lvalue .Compare
| | |         | | `-DeclRefExpr 0x5634745da620 <col:84> 'const base_blob<BITS>' lvalue ParmVar 0x5634745d8b08 'a' 'const base_blob<BITS> &'
| | |         | `-DeclRefExpr 0x5634745da688 <col:94> 'const base_blob<BITS>' lvalue ParmVar 0x5634745d8b80 'b' 'const base_blob<BITS> &'
| | |         `-IntegerLiteral 0x5634745da6d0 <col:100> 'int' 0
| | |-FriendDecl 0x5634745d8f38 <line:47:5, col:103> col:24
| | | `-FunctionDecl 0x5634745d8e78 parent 0x5634744cb688 <col:5, col:103> col:24 operator!= 'bool (const base_blob<BITS> &, const base_blob<BITS> &)' inline
| | |   |-ParmVarDecl 0x5634745d8d68 <col:35, col:52> col:52 referenced a 'const base_blob<BITS> &'
| | |   |-ParmVarDecl 0x5634745d8de0 <col:55, col:72> col:72 referenced b 'const base_blob<BITS> &'
| | |   `-CompoundStmt 0x5634745da838 <col:75, col:103>
| | |     `-ReturnStmt 0x5634745da828 <col:77, col:100>
| | |       `-BinaryOperator 0x5634745da808 <col:84, col:100> '<dependent type>' '!='
| | |         |-CallExpr 0x5634745da7c0 <col:84, col:95> '<dependent type>'
| | |         | |-CXXDependentScopeMemberExpr 0x5634745da758 <col:84, col:86> '<dependent type>' lvalue .Compare
| | |         | | `-DeclRefExpr 0x5634745da738 <col:84> 'const base_blob<BITS>' lvalue ParmVar 0x5634745d8d68 'a' 'const base_blob<BITS> &'
| | |         | `-DeclRefExpr 0x5634745da7a0 <col:94> 'const base_blob<BITS>' lvalue ParmVar 0x5634745d8de0 'b' 'const base_blob<BITS> &'
| | |         `-IntegerLiteral 0x5634745da7e8 <col:100> 'int' 0
| | |-FriendDecl 0x5634745d9158 <line:48:5, col:101> col:24
| | | `-FunctionDecl 0x5634745d9098 parent 0x5634744cb688 <col:5, col:101> col:24 operator< 'bool (const base_blob<BITS> &, const base_blob<BITS> &)' inline
| | |   |-ParmVarDecl 0x5634745d8f88 <col:34, col:51> col:51 referenced a 'const base_blob<BITS> &'
| | |   |-ParmVarDecl 0x5634745d9000 <col:54, col:71> col:71 referenced b 'const base_blob<BITS> &'
| | |   `-CompoundStmt 0x5634745da950 <col:74, col:101>
| | |     `-ReturnStmt 0x5634745da940 <col:76, col:98>
| | |       `-BinaryOperator 0x5634745da920 <col:83, col:98> '<dependent type>' '<'
| | |         |-CallExpr 0x5634745da8d8 <col:83, col:94> '<dependent type>'
| | |         | |-CXXDependentScopeMemberExpr 0x5634745da870 <col:83, col:85> '<dependent type>' lvalue .Compare
| | |         | | `-DeclRefExpr 0x5634745da850 <col:83> 'const base_blob<BITS>' lvalue ParmVar 0x5634745d8f88 'a' 'const base_blob<BITS> &'
| | |         | `-DeclRefExpr 0x5634745da8b8 <col:93> 'const base_blob<BITS>' lvalue ParmVar 0x5634745d9000 'b' 'const base_blob<BITS> &'
| | |         `-IntegerLiteral 0x5634745da900 <col:98> 'int' 0
| | |-CXXMethodDecl 0x5634745d9200 <line:50:5, col:26> col:17 invalid GetHex 'int () const'
| | |-CXXMethodDecl 0x5634745d9378 <line:51:5, col:32> col:10 SetHex 'void (const char *)'
| | | `-ParmVarDecl 0x5634745d92b8 <col:17, col:29> col:29 psz 'const char *'
| | |-CXXMethodDecl 0x5634745d94d8 <line:52:5, col:39> col:10 invalid SetHex 'void (const int &)'
| | | `-ParmVarDecl 0x5634745d9448 <col:17, col:36> col:36 invalid str 'const int &'
| | |-CXXMethodDecl 0x5634745d95b8 <line:53:5, col:28> col:17 invalid ToString 'int () const'
| | |-CXXMethodDecl 0x5634745d96b0 <line:55:5, line:58:5> line:55:20 begin 'unsigned char *()'
| | | `-CompoundStmt 0x5634745da998 <line:56:5, line:58:5>
| | |-CXXMethodDecl 0x5634745d9778 <line:60:5, line:63:5> line:60:20 end 'unsigned char *()'
| | | `-CompoundStmt 0x5634745da9d8 <line:61:5, line:63:5>
| | |-CXXMethodDecl 0x5634745d9870 <line:65:5, line:68:5> line:65:26 begin 'const unsigned char *() const'
| | | `-CompoundStmt 0x5634745daa18 <line:66:5, line:68:5>
| | |-CXXMethodDecl 0x5634745d9938 <line:70:5, line:73:5> line:70:26 end 'const unsigned char *() const'
| | | `-CompoundStmt 0x5634745daa58 <line:71:5, line:73:5>
| | |-CXXMethodDecl 0x5634745d9a30 <line:75:5, line:78:5> line:75:18 size 'unsigned int () const'
| | | `-CompoundStmt 0x5634745daa78 <line:76:5, line:78:5>
| | |-CXXMethodDecl 0x5634745d9bc0 <line:80:5, line:91:5> line:80:14 invalid GetUint64 'int (int) const'
| | | |-ParmVarDecl 0x5634745d9af8 <col:24, col:28> col:28 referenced pos 'int'
| | | `-CompoundStmt 0x5634745dac98 <line:81:5, line:91:5>
| | |   `-DeclStmt 0x5634745daba0 <line:82:9, col:44>
| | |     `-VarDecl 0x5634745daab0 <col:9, col:24> col:24 invalid ptr 'const int *'
| | |-FunctionTemplateDecl 0x5634745d9e88 <line:93:5, line:97:5> line:94:10 Serialize
| | | |-TemplateTypeParmDecl 0x5634745d9c68 <line:93:14, col:23> col:23 referenced typename depth 1 index 0 Stream
| | | `-CXXMethodDecl 0x5634745d9de8 <line:94:5, line:97:5> line:94:10 Serialize 'void (Stream &) const'
| | |   |-ParmVarDecl 0x5634745d9d28 <col:20, col:28> col:28 referenced s 'Stream &'
| | |   `-CompoundStmt 0x5634745dad38 <line:95:5, line:97:5>
| | `-FunctionTemplateDecl 0x5634745da108 <line:99:5, line:103:5> line:100:10 Unserialize
| |   |-TemplateTypeParmDecl 0x5634745d9ee8 <line:99:14, col:23> col:23 referenced typename depth 1 index 0 Stream
| |   `-CXXMethodDecl 0x5634745da068 <line:100:5, line:103:5> line:100:10 Unserialize 'void (Stream &)'
| |     |-ParmVarDecl 0x5634745d9fa8 <col:22, col:30> col:30 referenced s 'Stream &'
| |     `-CompoundStmt 0x5634745dadd0 <line:101:5, line:103:5>
| |-ClassTemplateSpecializationDecl 0x5634745daf80 <line:17:1, line:104:1> line:18:7 class base_blob
| | `-TemplateArgument integral 160
| |-ClassTemplateSpecializationDecl 0x5634745db6f0 <line:17:1, line:104:1> line:18:7 class base_blob
| | `-TemplateArgument integral 256
| `-FullComment 0x563474751630 <line:16:4, col:54>
|   `-ParagraphComment 0x563474751600 <col:4, col:54>
|     `-TextComment 0x5634747515d0 <col:4, col:54> Text=" Template base class for fixed-sized opaque blobs. "
|-CXXRecordDecl 0x5634745dae08 <line:110:1, line:114:1> line:110:7 referenced invalid class uint160 definition
| |-DefinitionData parsing_base_specifiers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x5634747517c0 <line:106:4, line:108:50>
| | |-ParagraphComment 0x5634747516f0 <line:106:4, line:107:3>
| | | |-TextComment 0x5634747516a0 <line:106:4, col:24> Text=" 160-bit opaque blob."
| | | `-TextComment 0x5634747516c0 <line:107:3> Text=" "
| | `-BlockCommandComment 0x563474751710 <col:4, line:108:50> Name="note"
| |   `-ParagraphComment 0x563474751790 <line:107:9, line:108:50>
| |     |-TextComment 0x563474751740 <line:107:9, col:81> Text=" This type is called uint160 for historical reasons only. It is an opaque"
| |     `-TextComment 0x563474751760 <line:108:3, col:50> Text=" blob of 160 bits and has no integer operations."
| |-CXXRecordDecl 0x5634745db0f0 <line:110:1, col:7> col:7 implicit referenced class uint160
| |-AccessSpecDecl 0x5634745db180 <line:111:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745db220 <line:112:5, col:16> col:5 referenced uint160 'void ()'
| | `-CompoundStmt 0x5634745db460 <col:15, col:16>
| |-CXXConstructorDecl 0x5634745db398 <line:113:5, col:84> col:14 invalid uint160 'void (const int)'
| | |-ParmVarDecl 0x5634745db308 <col:22, <invalid sloc>> col:54 invalid 'const int'
| | `-CompoundStmt 0x5634745db540 <col:83, col:84>
| |-CXXConstructorDecl 0x563474651ee8 <line:110:7> col:7 implicit constexpr uint160 'void (const uint160 &)' inline default trivial noexcept-unevaluated 0x563474651ee8
| | `-ParmVarDecl 0x563474651ff8 <col:7> col:7 'const uint160 &'
| `-CXXConstructorDecl 0x563474652098 <col:7> col:7 implicit used constexpr uint160 'void (uint160 &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5634746521a8 <col:7> col:7 'uint160 &&'
|   `-CompoundStmt 0x563474652ac0 <col:7>
|-CXXRecordDecl 0x5634745db578 <line:121:1, line:125:1> line:121:7 referenced invalid class uint256 definition
| |-DefinitionData parsing_base_specifiers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474751980 <line:116:4, line:119:22>
| | |-ParagraphComment 0x563474751880 <line:116:4, line:117:3>
| | | |-TextComment 0x563474751830 <line:116:4, col:24> Text=" 256-bit opaque blob."
| | | `-TextComment 0x563474751850 <line:117:3> Text=" "
| | `-BlockCommandComment 0x5634747518a0 <col:4, line:119:22> Name="note"
| |   `-ParagraphComment 0x563474751950 <line:117:9, line:119:22>
| |     |-TextComment 0x5634747518d0 <line:117:9, col:74> Text=" This type is called uint256 for historical reasons only. It is an"
| |     |-TextComment 0x5634747518f0 <line:118:3, col:78> Text=" opaque blob of 256 bits and has no integer operations. Use arith_uint256 if"
| |     `-TextComment 0x563474751910 <line:119:3, col:22> Text=" those are required."
| |-CXXRecordDecl 0x5634745db860 <line:121:1, col:7> col:7 implicit referenced class uint256
| |-AccessSpecDecl 0x5634745db8f0 <line:122:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745db980 <line:123:5, col:16> col:5 used uint256 'void ()'
| | `-CompoundStmt 0x5634745dbbc0 <col:15, col:16>
| |-CXXConstructorDecl 0x5634745dbaf8 <line:124:5, col:84> col:14 invalid uint256 'void (const int)'
| | |-ParmVarDecl 0x5634745dba68 <col:22, <invalid sloc>> col:54 invalid 'const int'
| | `-CompoundStmt 0x5634745dbca0 <col:83, col:84>
| |-CXXConstructorDecl 0x5634745dbed8 <line:121:7> col:7 implicit constexpr uint256 'void (const uint256 &)' inline default trivial noexcept-unevaluated 0x5634745dbed8
| | `-ParmVarDecl 0x5634745dbfe8 <col:7> col:7 'const uint256 &'
| `-CXXConstructorDecl 0x5634745dc088 <col:7> col:7 implicit used constexpr uint256 'void (uint256 &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5634745dc198 <col:7> col:7 'uint256 &&'
|   `-CompoundStmt 0x5634745dc320 <col:7>
|-FunctionDecl 0x5634745dbd88 <line:131:1, line:136:1> line:131:16 uint256S 'uint256 (const char *)' inline
| |-ParmVarDecl 0x5634745dbcc8 <col:25, col:37> col:37 used str 'const char *'
| `-CompoundStmt 0x5634745dc378 <line:132:1, line:136:1>
|   |-DeclStmt 0x5634745dc258 <line:133:5, col:15>
|   | `-VarDecl 0x5634745dbe40 <col:5, col:13> col:13 used rv 'uint256' nrvo callinit
|   |   `-CXXConstructExpr 0x5634745dc230 <col:13> 'uint256' 'void ()'
|   `-ReturnStmt 0x5634745dc360 <line:135:5, col:12>
|     `-CXXConstructExpr 0x5634745dc330 <col:12> 'uint256' 'void (uint256 &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5634745dc2d0 <col:12> 'uint256' xvalue <NoOp>
|         `-DeclRefExpr 0x5634745dc2b0 <col:12> 'uint256' lvalue Var 0x5634745dbe40 'rv' 'uint256'
|-FunctionDecl 0x5634745dc488 <line:141:1, line:146:1> line:141:16 invalid uint256S 'uint256 (const int &)' inline
| |-ParmVarDecl 0x5634745dc3c0 <col:25, col:44> col:44 invalid str 'const int &'
| `-CompoundStmt 0x5634745dc6b8 <line:142:1, line:146:1>
|   |-DeclStmt 0x5634745dc5d0 <line:143:5, col:15>
|   | `-VarDecl 0x5634745dc540 <col:5, col:13> col:13 used rv 'uint256' nrvo callinit
|   |   `-CXXConstructExpr 0x5634745dc5a8 <col:13> 'uint256' 'void ()'
|   `-ReturnStmt 0x5634745dc670 <line:145:5, col:12>
|     `-CXXConstructExpr 0x5634745dc640 <col:12> 'uint256' 'void (uint256 &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5634745dc628 <col:12> 'uint256' xvalue <NoOp>
|         `-DeclRefExpr 0x5634745dc608 <col:12> 'uint256' lvalue Var 0x5634745dc540 'rv' 'uint256'
|-VarDecl 0x5634745dc6f0 <bitcoin/src/version.h:12:1, col:37> col:18 referenced PROTOCOL_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dc758 <col:37> 'int' 70015
| `-FullComment 0x563474751a50 <line:9:3, col:30>
|   `-ParagraphComment 0x563474751a20 <col:3, col:30>
|     `-TextComment 0x5634747519f0 <col:3, col:30> Text=" network protocol versioning"
|-VarDecl 0x5634745dc810 <line:15:1, col:39> col:18 referenced INIT_PROTO_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dc878 <col:39> 'int' 209
| `-FullComment 0x563474751b20 <line:14:4, col:75>
|   `-ParagraphComment 0x563474751af0 <col:4, col:75>
|     `-TextComment 0x563474751ac0 <col:4, col:75> Text=" initial proto version, to be increased after version/verack negotiation"
|-VarDecl 0x5634745dc930 <line:18:1, col:39> col:18 referenced GETHEADERS_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dc998 <col:39> 'int' 31800
| `-FullComment 0x563474757b90 <line:17:4, col:49>
|   `-ParagraphComment 0x563474757b60 <col:4, col:49>
|     `-TextComment 0x563474751b90 <col:4, col:49> Text=" In this version, 'getheaders' was introduced."
|-VarDecl 0x5634745dca50 <line:21:1, col:43> col:18 MIN_PEER_PROTO_VERSION 'const int' static cinit
| |-ImplicitCastExpr 0x5634745dcaf8 <col:43> 'int' <LValueToRValue>
| | `-DeclRefExpr 0x5634745dcad8 <col:43> 'const int' lvalue Var 0x5634745dc930 'GETHEADERS_VERSION' 'const int' non_odr_use_constant
| `-FullComment 0x563474757c60 <line:20:4, col:55>
|   `-ParagraphComment 0x563474757c30 <col:4, col:55>
|     `-TextComment 0x563474757c00 <col:4, col:55> Text=" disconnect from peers older than this proto version"
|-VarDecl 0x5634745dcbb0 <line:25:1, col:39> col:18 referenced CADDR_TIME_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dcc18 <col:39> 'int' 31402
| `-FullComment 0x563474757d50 <line:23:4, line:24:65>
|   `-ParagraphComment 0x563474757d20 <line:23:4, line:24:65>
|     |-TextComment 0x563474757cd0 <line:23:4, col:62> Text=" nTime field added to CAddress, starting with this version;"
|     `-TextComment 0x563474757cf0 <line:24:4, col:65> Text=" if possible, avoid requesting addresses nodes older than this"
|-VarDecl 0x5634745dccd0 <line:28:1, col:36> col:18 referenced BIP0031_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dcd38 <col:36> 'int' 60000
| `-FullComment 0x563474757e20 <line:27:4, col:70>
|   `-ParagraphComment 0x563474757df0 <col:4, col:70>
|     `-TextComment 0x563474757dc0 <col:4, col:70> Text=" BIP 0031, pong message, is enabled for all versions AFTER this one"
|-VarDecl 0x5634745dcdf0 <line:31:1, col:37> col:18 NO_BLOOM_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dce58 <col:37> 'int' 70011
| `-FullComment 0x563474757ef0 <line:30:4, col:87>
|   `-ParagraphComment 0x563474757ec0 <col:4, col:87>
|     `-TextComment 0x563474757e90 <col:4, col:87> Text=" "filter*" commands are disabled without NODE_BLOOM after and including this version"
|-VarDecl 0x5634745dcf10 <line:34:1, col:40> col:18 SENDHEADERS_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dcf78 <col:40> 'int' 70012
| `-FullComment 0x563474757fc0 <line:33:4, col:85>
|   `-ParagraphComment 0x563474757f90 <col:4, col:85>
|     `-TextComment 0x563474757f60 <col:4, col:85> Text=" "sendheaders" command and announcing blocks with headers starts with this version"
|-VarDecl 0x5634745dd030 <line:37:1, col:38> col:18 FEEFILTER_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dd098 <col:38> 'int' 70013
| `-FullComment 0x563474758090 <line:36:4, col:81>
|   `-ParagraphComment 0x563474758060 <col:4, col:81>
|     `-TextComment 0x563474758030 <col:4, col:81> Text=" "feefilter" tells peers to filter invs to you by fee starts with this version"
|-VarDecl 0x5634745dd150 <line:40:1, col:45> col:18 SHORT_IDS_BLOCKS_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dd1b8 <col:45> 'int' 70014
| `-FullComment 0x563474758160 <line:39:4, col:58>
|   `-ParagraphComment 0x563474758130 <col:4, col:58>
|     `-TextComment 0x563474758100 <col:4, col:58> Text=" short-id-based block download starts with this version"
|-VarDecl 0x5634745dd280 <line:43:1, col:46> col:18 INVALID_CB_NO_BAN_VERSION 'const int' static cinit
| |-IntegerLiteral 0x5634745dd2e8 <col:46> 'int' 70015
| `-FullComment 0x563474758230 <line:42:4, col:67>
|   `-ParagraphComment 0x563474758200 <col:4, col:67>
|     `-TextComment 0x5634747581d0 <col:4, col:67> Text=" not banning for invalid compact blocks starts with this version"
|-CXXRecordDecl 0x5634745dd388 <bitcoin/src/protocol.h:28:1, line:61:1> line:28:7 referenced invalid class CMessageHeader definition
| |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x5634747583a0 <line:22:4, line:26:16>
| | `-ParagraphComment 0x563474758370 <line:22:4, line:26:16>
| |   |-TextComment 0x5634747582a0 <line:22:4, col:19> Text=" Message header."
| |   |-TextComment 0x5634747582c0 <line:23:3, col:21> Text=" (4) message start."
| |   |-TextComment 0x5634747582e0 <line:24:3, col:16> Text=" (12) command."
| |   |-TextComment 0x563474758300 <line:25:3, col:12> Text=" (4) size."
| |   `-TextComment 0x563474758320 <line:26:3, col:16> Text=" (4) checksum."
| |-CXXRecordDecl 0x5634745dd4a8 <line:28:1, col:7> col:7 implicit referenced class CMessageHeader
| |-AccessSpecDecl 0x5634745dd538 <line:30:1, col:7> col:1 public
| |-VarDecl 0x5634745dd588 <line:31:5, col:29> col:29 invalid MESSAGE_START_SIZE 'const int' static constexpr
| |-VarDecl 0x5634745dd638 <line:32:5, col:29> col:29 invalid COMMAND_SIZE 'const int' static constexpr
| |-VarDecl 0x5634745dd6e8 <line:33:5, col:29> col:29 invalid MESSAGE_SIZE_SIZE 'const int' static constexpr
| |-VarDecl 0x5634745dd798 <line:34:5, col:29> col:29 invalid CHECKSUM_SIZE 'const int' static constexpr
| |-VarDecl 0x5634745dd848 <line:35:5, col:29> col:29 invalid MESSAGE_SIZE_OFFSET 'const int' static constexpr
| |-VarDecl 0x5634745dd8d8 <line:36:5, col:29> col:29 invalid CHECKSUM_OFFSET 'const int' static constexpr
| |-VarDecl 0x5634745dd968 <line:37:5, col:29> col:29 invalid HEADER_SIZE 'const int' static constexpr
| |-TypedefDecl 0x5634745dd9e8 <line:38:5, col:27> col:27 referenced invalid MessageStartChars 'unsigned char'
| | `-BuiltinType 0x5634744cb7e0 'unsigned char'
| |-CXXConstructorDecl 0x5634745ddbc8 <line:40:5, col:71> col:14 CMessageHeader 'void (const CMessageHeader::MessageStartChars &)'
| | `-ParmVarDecl 0x5634745dda98 <col:29, col:54> col:54 pchMessageStartIn 'const CMessageHeader::MessageStartChars &'
| |-CXXConstructorDecl 0x5634745ddea8 <line:41:5, col:115> col:5 CMessageHeader 'void (const CMessageHeader::MessageStartChars &, const char *, unsigned int)'
| | |-ParmVarDecl 0x5634745ddc88 <col:20, col:45> col:45 pchMessageStartIn 'const CMessageHeader::MessageStartChars &'
| | |-ParmVarDecl 0x5634745ddd08 <col:64, col:76> col:76 pszCommand 'const char *'
| | `-ParmVarDecl 0x5634745ddd88 <col:88, col:101> col:101 nMessageSizeIn 'unsigned int'
| |-CXXMethodDecl 0x5634745ddfd0 <line:43:5, col:30> col:17 invalid GetCommand 'int () const'
| |-CXXMethodDecl 0x5634745de178 <line:44:5, col:57> col:10 IsValid 'bool (const CMessageHeader::MessageStartChars &) const'
| | `-ParmVarDecl 0x5634745de080 <col:18, col:43> col:43 messageStart 'const CMessageHeader::MessageStartChars &'
| |-FunctionTemplateDecl 0x5634745e0498 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634745e0270 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745e03f8 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634745e0338 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745e0d90 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634745e0718 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634745e04f8 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745e0678 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634745e05b8 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745e0e98 <col:33, line:201:5>
| |     `-CallExpr 0x5634745e0e68 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634745e0db0 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634745e0e08 <col:25> 'Stream' lvalue ParmVar 0x5634745e05b8 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634745e0e38 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634745e0aa8 <bitcoin/src/protocol.h:48:5, line:55:5> line:49:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634745e0778 <line:48:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634745e07e8 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634745e0a08 <line:49:5, line:55:5> line:49:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634745e08b8 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634745e0930 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634745e11b0 <line:50:5, line:55:5>
| |-FieldDecl 0x5634745e0b20 <line:57:5, col:10> col:10 invalid pchMessageStart 'char'
| |-FieldDecl 0x5634745e0b80 <line:58:5, col:10> col:10 invalid pchCommand 'char'
| |-FieldDecl 0x5634745e0bf8 <line:59:5, col:14> col:14 invalid nMessageSize 'int'
| `-FieldDecl 0x5634745e0c70 <line:60:5, col:13> col:13 invalid pchChecksum 'int'
|-NamespaceDecl 0x5634745e1280 <line:67:1, line:234:1> line:67:11 NetMsgType
| |-FullComment 0x563474758610 <line:64:3, line:65:48>
| | `-ParagraphComment 0x5634747585e0 <line:64:3, line:65:48>
| |   |-TextComment 0x563474758590 <line:64:3, col:78> Text=" Bitcoin protocol message types. When adding new message types, don't forget"
| |   `-TextComment 0x5634747585b0 <line:65:3, col:48> Text=" to update allNetMessageTypes in protocol.cpp."
| |-VarDecl 0x5634745e1308 <line:74:1, col:20> col:20 VERSION 'const char *' extern
| | `-FullComment 0x5634747587b0 <line:70:3, line:72:58>
| |   |-ParagraphComment 0x563474758700 <line:70:3, line:72:3>
| |   | |-TextComment 0x563474758680 <line:70:3, col:78> Text=" The version message provides information about the transmitting node to the"
| |   | |-TextComment 0x5634747586a0 <line:71:3, col:51> Text=" receiving node at the beginning of a connection."
| |   | `-TextComment 0x5634747586c0 <line:72:3> Text=" "
| |   `-BlockCommandComment 0x563474758720 <col:4, col:58> Name="see"
| |     `-ParagraphComment 0x563474758780 <col:8, col:58>
| |       `-TextComment 0x563474758750 <col:8, col:58> Text=" https://bitcoin.org/en/developer-reference#version"
| |-VarDecl 0x5634745e13b0 <line:80:1, col:20> col:20 VERACK 'const char *' extern
| | `-FullComment 0x563474758950 <line:76:3, line:78:57>
| |   |-ParagraphComment 0x5634747588a0 <line:76:3, line:78:3>
| |   | |-TextComment 0x563474758820 <line:76:3, col:73> Text=" The verack message acknowledges a previously-received version message,"
| |   | |-TextComment 0x563474758840 <line:77:3, col:74> Text=" informing the connecting node that it can begin to send other messages."
| |   | `-TextComment 0x563474758860 <line:78:3> Text=" "
| |   `-BlockCommandComment 0x5634747588c0 <col:4, col:57> Name="see"
| |     `-ParagraphComment 0x563474758920 <col:8, col:57>
| |       `-TextComment 0x5634747588f0 <col:8, col:57> Text=" https://bitcoin.org/en/developer-reference#verack"
| |-VarDecl 0x5634745e1460 <line:86:1, col:20> col:20 ADDR 'const char *' extern
| | `-FullComment 0x563474758af0 <line:82:3, line:84:55>
| |   |-ParagraphComment 0x563474758a40 <line:82:3, line:84:3>
| |   | |-TextComment 0x5634747589c0 <line:82:3, col:79> Text=" The addr (IP address) message relays connection information for peers on the"
| |   | |-TextComment 0x5634747589e0 <line:83:3, col:11> Text=" network."
| |   | `-TextComment 0x563474758a00 <line:84:3> Text=" "
| |   `-BlockCommandComment 0x563474758a60 <col:4, col:55> Name="see"
| |     `-ParagraphComment 0x563474758ac0 <col:8, col:55>
| |       `-TextComment 0x563474758a90 <col:8, col:55> Text=" https://bitcoin.org/en/developer-reference#addr"
| |-VarDecl 0x5634745e1510 <line:92:1, col:20> col:20 INV 'const char *' extern
| | `-FullComment 0x563474758c90 <line:88:3, line:90:54>
| |   |-ParagraphComment 0x563474758be0 <line:88:3, line:90:3>
| |   | |-TextComment 0x563474758b60 <line:88:3, col:75> Text=" The inv message (inventory message) transmits one or more inventories of"
| |   | |-TextComment 0x563474758b80 <line:89:3, col:42> Text=" objects known to the transmitting peer."
| |   | `-TextComment 0x563474758ba0 <line:90:3> Text=" "
| |   `-BlockCommandComment 0x563474758c00 <col:4, col:54> Name="see"
| |     `-ParagraphComment 0x563474758c60 <col:8, col:54>
| |       `-TextComment 0x563474758c30 <col:8, col:54> Text=" https://bitcoin.org/en/developer-reference#inv"
| |-VarDecl 0x5634745e15c0 <line:97:1, col:20> col:20 GETDATA 'const char *' extern
| | `-FullComment 0x563474758e00 <line:94:3, line:95:58>
| |   |-ParagraphComment 0x563474758d50 <line:94:3, line:95:3>
| |   | |-TextComment 0x563474758d00 <line:94:3, col:75> Text=" The getdata message requests one or more data objects from another node."
| |   | `-TextComment 0x563474758d20 <line:95:3> Text=" "
| |   `-BlockCommandComment 0x563474758d70 <col:4, col:58> Name="see"
| |     `-ParagraphComment 0x563474758dd0 <col:8, col:58>
| |       `-TextComment 0x563474758da0 <col:8, col:58> Text=" https://bitcoin.org/en/developer-reference#getdata"
| |-VarDecl 0x5634745e1670 <line:104:1, col:20> col:20 MERKLEBLOCK 'const char *' extern
| | `-FullComment 0x563474759050 <line:99:3, line:102:62>
| |   |-ParagraphComment 0x563474758ef0 <line:99:3, line:101:3>
| |   | |-TextComment 0x563474758e70 <line:99:3, col:76> Text=" The merkleblock message is a reply to a getdata message which requested a"
| |   | |-TextComment 0x563474758e90 <line:100:3, col:50> Text=" block using the inventory type MSG_MERKLEBLOCK."
| |   | `-TextComment 0x563474758eb0 <line:101:3> Text=" "
| |   |-BlockCommandComment 0x563474758f10 <col:4, line:102:3> Name="since"
| |   | `-ParagraphComment 0x563474758f90 <line:101:10, line:102:3>
| |   |   |-TextComment 0x563474758f40 <line:101:10, col:55> Text=" protocol version 70001 as described by BIP37."
| |   |   `-TextComment 0x563474758f60 <line:102:3> Text=" "
| |   `-BlockCommandComment 0x563474758fb0 <col:4, col:62> Name="see"
| |     `-ParagraphComment 0x563474759010 <col:8, col:62>
| |       `-TextComment 0x563474758fe0 <col:8, col:62> Text=" https://bitcoin.org/en/developer-reference#merkleblock"
| |-VarDecl 0x5634745e1720 <line:110:1, col:20> col:20 GETBLOCKS 'const char *' extern
| | `-FullComment 0x5634747591f0 <line:106:3, line:108:60>
| |   |-ParagraphComment 0x563474759140 <line:106:3, line:108:3>
| |   | |-TextComment 0x5634747590c0 <line:106:3, col:75> Text=" The getblocks message requests an inv message that provides block header"
| |   | |-TextComment 0x5634747590e0 <line:107:3, col:62> Text=" hashes starting from a particular point in the block chain."
| |   | `-TextComment 0x563474759100 <line:108:3> Text=" "
| |   `-BlockCommandComment 0x563474759160 <col:4, col:60> Name="see"
| |     `-ParagraphComment 0x5634747591c0 <col:8, col:60>
| |       `-TextComment 0x563474759190 <col:8, col:60> Text=" https://bitcoin.org/en/developer-reference#getblocks"
| |-VarDecl 0x5634745e17d0 <line:117:1, col:20> col:20 GETHEADERS 'const char *' extern
| | `-FullComment 0x563474759440 <line:112:3, line:115:61>
| |   |-ParagraphComment 0x5634747592e0 <line:112:3, line:114:3>
| |   | |-TextComment 0x563474759260 <line:112:3, col:72> Text=" The getheaders message requests a headers message that provides block"
| |   | |-TextComment 0x563474759280 <line:113:3, col:63> Text=" headers starting from a particular point in the block chain."
| |   | `-TextComment 0x5634747592a0 <line:114:3> Text=" "
| |   |-BlockCommandComment 0x563474759300 <col:4, line:115:3> Name="since"
| |   | `-ParagraphComment 0x563474759380 <line:114:10, line:115:3>
| |   |   |-TextComment 0x563474759330 <line:114:10, col:33> Text=" protocol version 31800."
| |   |   `-TextComment 0x563474759350 <line:115:3> Text=" "
| |   `-BlockCommandComment 0x5634747593a0 <col:4, col:61> Name="see"
| |     `-ParagraphComment 0x563474759400 <col:8, col:61>
| |       `-TextComment 0x5634747593d0 <col:8, col:61> Text=" https://bitcoin.org/en/developer-reference#getheaders"
| |-VarDecl 0x5634745e1880 <line:122:1, col:20> col:20 TX 'const char *' extern
| | `-FullComment 0x5634747595b0 <line:119:3, line:120:53>
| |   |-ParagraphComment 0x563474759500 <line:119:3, line:120:3>
| |   | |-TextComment 0x5634747594b0 <line:119:3, col:49> Text=" The tx message transmits a single transaction."
| |   | `-TextComment 0x5634747594d0 <line:120:3> Text=" "
| |   `-BlockCommandComment 0x563474759520 <col:4, col:53> Name="see"
| |     `-ParagraphComment 0x563474759580 <col:8, col:53>
| |       `-TextComment 0x563474759550 <col:8, col:53> Text=" https://bitcoin.org/en/developer-reference#tx"
| |-VarDecl 0x5634745e1930 <line:129:1, col:20> col:20 HEADERS 'const char *' extern
| | `-FullComment 0x563474759800 <line:124:3, line:127:58>
| |   |-ParagraphComment 0x5634747596a0 <line:124:3, line:126:3>
| |   | |-TextComment 0x563474759620 <line:124:3, col:70> Text=" The headers message sends one or more block headers to a node which"
| |   | |-TextComment 0x563474759640 <line:125:3, col:66> Text=" previously requested certain headers with a getheaders message."
| |   | `-TextComment 0x563474759660 <line:126:3> Text=" "
| |   |-BlockCommandComment 0x5634747596c0 <col:4, line:127:3> Name="since"
| |   | `-ParagraphComment 0x563474759740 <line:126:10, line:127:3>
| |   |   |-TextComment 0x5634747596f0 <line:126:10, col:33> Text=" protocol version 31800."
| |   |   `-TextComment 0x563474759710 <line:127:3> Text=" "
| |   `-BlockCommandComment 0x563474759760 <col:4, col:58> Name="see"
| |     `-ParagraphComment 0x5634747597c0 <col:8, col:58>
| |       `-TextComment 0x563474759790 <col:8, col:58> Text=" https://bitcoin.org/en/developer-reference#headers"
| |-VarDecl 0x5634745e19e0 <line:134:1, col:20> col:20 BLOCK 'const char *' extern
| | `-FullComment 0x563474759970 <line:131:3, line:132:56>
| |   |-ParagraphComment 0x5634747598c0 <line:131:3, line:132:3>
| |   | |-TextComment 0x563474759870 <line:131:3, col:57> Text=" The block message transmits a single serialized block."
| |   | `-TextComment 0x563474759890 <line:132:3> Text=" "
| |   `-BlockCommandComment 0x5634747598e0 <col:4, col:56> Name="see"
| |     `-ParagraphComment 0x563474759940 <col:8, col:56>
| |       `-TextComment 0x563474759910 <col:8, col:56> Text=" https://bitcoin.org/en/developer-reference#block"
| |-VarDecl 0x5634745e1a90 <line:140:1, col:20> col:20 GETADDR 'const char *' extern
| | `-FullComment 0x563474759b10 <line:136:3, line:138:58>
| |   |-ParagraphComment 0x563474759a60 <line:136:3, line:138:3>
| |   | |-TextComment 0x5634747599e0 <line:136:3, col:72> Text=" The getaddr message requests an addr message from the receiving node,"
| |   | |-TextComment 0x563474759a00 <line:137:3, col:69> Text=" preferably one with lots of IP addresses of other receiving nodes."
| |   | `-TextComment 0x563474759a20 <line:138:3> Text=" "
| |   `-BlockCommandComment 0x563474759a80 <col:4, col:58> Name="see"
| |     `-ParagraphComment 0x563474759ae0 <col:8, col:58>
| |       `-TextComment 0x563474759ab0 <col:8, col:58> Text=" https://bitcoin.org/en/developer-reference#getaddr"
| |-VarDecl 0x5634745e1b40 <line:147:1, col:20> col:20 MEMPOOL 'const char *' extern
| | `-FullComment 0x56347475a3c0 <line:142:3, line:145:58>
| |   |-ParagraphComment 0x56347475a260 <line:142:3, line:144:3>
| |   | |-TextComment 0x56347475a1e0 <line:142:3, col:76> Text=" The mempool message requests the TXIDs of transactions that the receiving"
| |   | |-TextComment 0x56347475a200 <line:143:3, col:73> Text=" node has verified as valid but which have not yet appeared in a block."
| |   | `-TextComment 0x56347475a220 <line:144:3> Text=" "
| |   |-BlockCommandComment 0x56347475a280 <col:4, line:145:3> Name="since"
| |   | `-ParagraphComment 0x56347475a300 <line:144:10, line:145:3>
| |   |   |-TextComment 0x56347475a2b0 <line:144:10, col:33> Text=" protocol version 60002."
| |   |   `-TextComment 0x56347475a2d0 <line:145:3> Text=" "
| |   `-BlockCommandComment 0x56347475a320 <col:4, col:58> Name="see"
| |     `-ParagraphComment 0x56347475a380 <col:8, col:58>
| |       `-TextComment 0x56347475a350 <col:8, col:58> Text=" https://bitcoin.org/en/developer-reference#mempool"
| |-VarDecl 0x5634745e1bf0 <line:153:1, col:20> col:20 PING 'const char *' extern
| | `-FullComment 0x56347475a560 <line:149:3, line:151:55>
| |   |-ParagraphComment 0x56347475a4b0 <line:149:3, line:151:3>
| |   | |-TextComment 0x56347475a430 <line:149:3, col:75> Text=" The ping message is sent periodically to help confirm that the receiving"
| |   | |-TextComment 0x56347475a450 <line:150:3, col:27> Text=" peer is still connected."
| |   | `-TextComment 0x56347475a470 <line:151:3> Text=" "
| |   `-BlockCommandComment 0x56347475a4d0 <col:4, col:55> Name="see"
| |     `-ParagraphComment 0x56347475a530 <col:8, col:55>
| |       `-TextComment 0x56347475a500 <col:8, col:55> Text=" https://bitcoin.org/en/developer-reference#ping"
| |-VarDecl 0x5634745e1ca0 <line:160:1, col:20> col:20 PONG 'const char *' extern
| | `-FullComment 0x56347475a7b0 <line:155:3, line:158:55>
| |   |-ParagraphComment 0x56347475a650 <line:155:3, line:157:3>
| |   | |-TextComment 0x56347475a5d0 <line:155:3, col:79> Text=" The pong message replies to a ping message, proving to the pinging node that"
| |   | |-TextComment 0x56347475a5f0 <line:156:3, col:35> Text=" the ponging node is still alive."
| |   | `-TextComment 0x56347475a610 <line:157:3> Text=" "
| |   |-BlockCommandComment 0x56347475a670 <col:4, line:158:3> Name="since"
| |   | `-ParagraphComment 0x56347475a6f0 <line:157:10, line:158:3>
| |   |   |-TextComment 0x56347475a6a0 <line:157:10, col:55> Text=" protocol version 60001 as described by BIP31."
| |   |   `-TextComment 0x56347475a6c0 <line:158:3> Text=" "
| |   `-BlockCommandComment 0x56347475a710 <col:4, col:55> Name="see"
| |     `-ParagraphComment 0x56347475a770 <col:8, col:55>
| |       `-TextComment 0x56347475a740 <col:8, col:55> Text=" https://bitcoin.org/en/developer-reference#pong"
| |-VarDecl 0x5634745e1d50 <line:167:1, col:20> col:20 NOTFOUND 'const char *' extern
| | `-FullComment 0x56347475aa00 <line:162:3, line:165:59>
| |   |-ParagraphComment 0x56347475a8a0 <line:162:3, line:164:3>
| |   | |-TextComment 0x56347475a820 <line:162:3, col:74> Text=" The notfound message is a reply to a getdata message which requested an"
| |   | |-TextComment 0x56347475a840 <line:163:3, col:63> Text=" object the receiving node does not have available for relay."
| |   | `-TextComment 0x56347475a860 <line:164:3> Text=" "
| |   |-BlockCommandComment 0x56347475a8c0 <col:4, line:165:3> Name="since"
| |   | `-ParagraphComment 0x56347475a940 <line:164:10, line:165:3>
| |   |   |-TextComment 0x56347475a8f0 <line:164:10, col:33> Text=" protocol version 70001."
| |   |   `-TextComment 0x56347475a910 <line:165:3> Text=" "
| |   `-BlockCommandComment 0x56347475a960 <col:4, col:59> Name="see"
| |     `-ParagraphComment 0x56347475a9c0 <col:8, col:59>
| |       `-TextComment 0x56347475a990 <col:8, col:59> Text=" https://bitcoin.org/en/developer-reference#notfound"
| |-VarDecl 0x5634745e1e00 <line:176:1, col:20> col:20 FILTERLOAD 'const char *' extern
| | `-FullComment 0x56347475aca0 <line:169:3, line:174:61>
| |   |-ParagraphComment 0x56347475aaf0 <line:169:3, line:171:3>
| |   | |-TextComment 0x56347475aa70 <line:169:3, col:72> Text=" The filterload message tells the receiving peer to filter all relayed"
| |   | |-TextComment 0x56347475aa90 <line:170:3, col:72> Text=" transactions and requested merkle blocks through the provided filter."
| |   | `-TextComment 0x56347475aab0 <line:171:3> Text=" "
| |   |-BlockCommandComment 0x56347475ab10 <col:4, line:174:3> Name="since"
| |   | `-ParagraphComment 0x56347475abe0 <line:171:10, line:174:3>
| |   |   |-TextComment 0x56347475ab40 <line:171:10, col:55> Text=" protocol version 70001 as described by BIP37."
| |   |   |-TextComment 0x56347475ab60 <line:172:3, col:70> Text="   Only available with service bit NODE_BLOOM since protocol version"
| |   |   |-TextComment 0x56347475ab80 <line:173:3, col:34> Text="   70011 as described by BIP111."
| |   |   `-TextComment 0x56347475aba0 <line:174:3> Text=" "
| |   `-BlockCommandComment 0x56347475ac00 <col:4, col:61> Name="see"
| |     `-ParagraphComment 0x56347475ac60 <col:8, col:61>
| |       `-TextComment 0x56347475ac30 <col:8, col:61> Text=" https://bitcoin.org/en/developer-reference#filterload"
| |-VarDecl 0x5634745e1eb0 <line:185:1, col:20> col:20 FILTERADD 'const char *' extern
| | `-FullComment 0x56347475af40 <line:178:3, line:183:60>
| |   |-ParagraphComment 0x56347475ad90 <line:178:3, line:180:3>
| |   | |-TextComment 0x56347475ad10 <line:178:3, col:78> Text=" The filteradd message tells the receiving peer to add a single element to a"
| |   | |-TextComment 0x56347475ad30 <line:179:3, col:57> Text=" previously-set bloom filter, such as a new public key."
| |   | `-TextComment 0x56347475ad50 <line:180:3> Text=" "
| |   |-BlockCommandComment 0x56347475adb0 <col:4, line:183:3> Name="since"
| |   | `-ParagraphComment 0x56347475ae80 <line:180:10, line:183:3>
| |   |   |-TextComment 0x56347475ade0 <line:180:10, col:55> Text=" protocol version 70001 as described by BIP37."
| |   |   |-TextComment 0x56347475ae00 <line:181:3, col:70> Text="   Only available with service bit NODE_BLOOM since protocol version"
| |   |   |-TextComment 0x56347475ae20 <line:182:3, col:34> Text="   70011 as described by BIP111."
| |   |   `-TextComment 0x56347475ae40 <line:183:3> Text=" "
| |   `-BlockCommandComment 0x56347475aea0 <col:4, col:60> Name="see"
| |     `-ParagraphComment 0x56347475af00 <col:8, col:60>
| |       `-TextComment 0x56347475aed0 <col:8, col:60> Text=" https://bitcoin.org/en/developer-reference#filteradd"
| |-VarDecl 0x5634745e1f60 <line:194:1, col:20> col:20 FILTERCLEAR 'const char *' extern
| | `-FullComment 0x56347475b1e0 <line:187:3, line:192:62>
| |   |-ParagraphComment 0x56347475b030 <line:187:3, line:189:3>
| |   | |-TextComment 0x56347475afb0 <line:187:3, col:78> Text=" The filterclear message tells the receiving peer to remove a previously-set"
| |   | |-TextComment 0x56347475afd0 <line:188:3, col:16> Text=" bloom filter."
| |   | `-TextComment 0x56347475aff0 <line:189:3> Text=" "
| |   |-BlockCommandComment 0x56347475b050 <col:4, line:192:3> Name="since"
| |   | `-ParagraphComment 0x56347475b120 <line:189:10, line:192:3>
| |   |   |-TextComment 0x56347475b080 <line:189:10, col:55> Text=" protocol version 70001 as described by BIP37."
| |   |   |-TextComment 0x56347475b0a0 <line:190:3, col:70> Text="   Only available with service bit NODE_BLOOM since protocol version"
| |   |   |-TextComment 0x56347475b0c0 <line:191:3, col:34> Text="   70011 as described by BIP111."
| |   |   `-TextComment 0x56347475b0e0 <line:192:3> Text=" "
| |   `-BlockCommandComment 0x56347475b140 <col:4, col:62> Name="see"
| |     `-ParagraphComment 0x56347475b1a0 <col:8, col:62>
| |       `-TextComment 0x56347475b170 <col:8, col:62> Text=" https://bitcoin.org/en/developer-reference#filterclear"
| |-VarDecl 0x5634745e2010 <line:201:1, col:20> col:20 SENDHEADERS 'const char *' extern
| | `-FullComment 0x56347475b430 <line:196:3, line:199:62>
| |   |-ParagraphComment 0x56347475b2d0 <line:196:3, line:198:3>
| |   | |-TextComment 0x56347475b250 <line:196:3, col:73> Text=" Indicates that a node prefers to receive new block announcements via a"
| |   | |-TextComment 0x56347475b270 <line:197:3, col:42> Text=" "headers" message rather than an "inv"."
| |   | `-TextComment 0x56347475b290 <line:198:3> Text=" "
| |   |-BlockCommandComment 0x56347475b2f0 <col:4, line:199:3> Name="since"
| |   | `-ParagraphComment 0x56347475b370 <line:198:10, line:199:3>
| |   |   |-TextComment 0x56347475b320 <line:198:10, col:56> Text=" protocol version 70012 as described by BIP130."
| |   |   `-TextComment 0x56347475b340 <line:199:3> Text=" "
| |   `-BlockCommandComment 0x56347475b390 <col:4, col:62> Name="see"
| |     `-ParagraphComment 0x56347475b3f0 <col:8, col:62>
| |       `-TextComment 0x56347475b3c0 <col:8, col:62> Text=" https://bitcoin.org/en/developer-reference#sendheaders"
| |-VarDecl 0x5634745e20c0 <line:207:1, col:20> col:20 FEEFILTER 'const char *' extern
| | `-FullComment 0x56347475b5d0 <line:203:3, line:205:55>
| |   |-ParagraphComment 0x56347475b520 <line:203:3, line:205:3>
| |   | |-TextComment 0x56347475b4a0 <line:203:3, col:71> Text=" The feefilter message tells the receiving peer not to inv us any txs"
| |   | |-TextComment 0x56347475b4c0 <line:204:3, col:48> Text=" which do not meet the specified min fee rate."
| |   | `-TextComment 0x56347475b4e0 <line:205:3> Text=" "
| |   `-BlockCommandComment 0x56347475b540 <col:4, col:55> Name="since"
| |     `-ParagraphComment 0x56347475b5a0 <col:10, col:55>
| |       `-TextComment 0x56347475b570 <col:10, col:55> Text=" protocol version 70013 as described by BIP133"
| |-VarDecl 0x5634745e2170 <line:215:1, col:20> col:20 SENDCMPCT 'const char *' extern
| | `-FullComment 0x56347475b7c0 <line:209:3, line:213:56>
| |   |-ParagraphComment 0x56347475b710 <line:209:3, line:213:3>
| |   | |-TextComment 0x56347475b640 <line:209:3, col:55> Text=" Contains a 1-byte bool and 8-byte LE version number."
| |   | |-TextComment 0x56347475b660 <line:210:3, col:80> Text=" Indicates that a node is willing to provide blocks via "cmpctblock" messages."
| |   | |-TextComment 0x56347475b680 <line:211:3, col:76> Text=" May indicate that a node prefers to receive new block announcements via a"
| |   | |-TextComment 0x56347475b6a0 <line:212:3, col:76> Text=" "cmpctblock" message rather than an "inv", depending on message contents."
| |   | `-TextComment 0x56347475b6c0 <line:213:3> Text=" "
| |   `-BlockCommandComment 0x56347475b730 <col:4, col:56> Name="since"
| |     `-ParagraphComment 0x56347475b790 <col:10, col:56>
| |       `-TextComment 0x56347475b760 <col:10, col:56> Text=" protocol version 70014 as described by BIP 152"
| |-VarDecl 0x5634745e2290 <line:221:1, col:20> col:20 CMPCTBLOCK 'const char *' extern
| | `-FullComment 0x56347475b960 <line:217:3, line:219:56>
| |   |-ParagraphComment 0x56347475b8b0 <line:217:3, line:219:3>
| |   | |-TextComment 0x56347475b830 <line:217:3, col:71> Text=" Contains a CBlockHeaderAndShortTxIDs object - providing a header and"
| |   | |-TextComment 0x56347475b850 <line:218:3, col:25> Text=" list of "short txids"."
| |   | `-TextComment 0x56347475b870 <line:219:3> Text=" "
| |   `-BlockCommandComment 0x56347475b8d0 <col:4, col:56> Name="since"
| |     `-ParagraphComment 0x56347475b930 <col:10, col:56>
| |       `-TextComment 0x56347475b900 <col:10, col:56> Text=" protocol version 70014 as described by BIP 152"
| |-VarDecl 0x5634745e2340 <line:227:1, col:20> col:20 GETBLOCKTXN 'const char *' extern
| | `-FullComment 0x56347475bb00 <line:223:3, line:225:56>
| |   |-ParagraphComment 0x56347475ba50 <line:223:3, line:225:3>
| |   | |-TextComment 0x56347475b9d0 <line:223:3, col:38> Text=" Contains a BlockTransactionsRequest"
| |   | |-TextComment 0x56347475b9f0 <line:224:3, col:47> Text=" Peer should respond with "blocktxn" message."
| |   | `-TextComment 0x56347475ba10 <line:225:3> Text=" "
| |   `-BlockCommandComment 0x56347475ba70 <col:4, col:56> Name="since"
| |     `-ParagraphComment 0x56347475bad0 <col:10, col:56>
| |       `-TextComment 0x56347475baa0 <col:10, col:56> Text=" protocol version 70014 as described by BIP 152"
| `-VarDecl 0x5634745e23f0 <line:233:1, col:20> col:20 BLOCKTXN 'const char *' extern
|   `-FullComment 0x56347475bca0 <line:229:3, line:231:56>
|     |-ParagraphComment 0x56347475bbf0 <line:229:3, line:231:3>
|     | |-TextComment 0x56347475bb70 <line:229:3, col:32> Text=" Contains a BlockTransactions."
|     | |-TextComment 0x56347475bb90 <line:230:3, col:47> Text=" Sent in response to a "getblocktxn" message."
|     | `-TextComment 0x56347475bbb0 <line:231:3> Text=" "
|     `-BlockCommandComment 0x56347475bc10 <col:4, col:56> Name="since"
|       `-ParagraphComment 0x56347475bc70 <col:10, col:56>
|         `-TextComment 0x56347475bc40 <col:10, col:56> Text=" protocol version 70014 as described by BIP 152"
|-EmptyDecl 0x5634745e2458 <line:234:2> col:2
|-FunctionDecl 0x5634745e24f0 <line:237:1, col:55> col:33 invalid getAllNetMessageTypes 'const int &()'
|-EnumDecl 0x5634745e25c8 <line:240:1, line:269:1> line:240:6 referenced ServiceFlags 'int'
| |-FullComment 0x56347475bd70 <line:239:4, col:20>
| | `-ParagraphComment 0x56347475bd40 <col:4, col:20>
| |   `-TextComment 0x56347475bd10 <col:4, col:20> Text=" nServices flags "
| |-EnumConstantDecl 0x5634745e26d0 <line:242:5, col:17> col:5 referenced NODE_NONE 'ServiceFlags'
| | `-ConstantExpr 0x5634745e26b0 <col:17> 'int' 0
| |   `-IntegerLiteral 0x5634745e2690 <col:17> 'int' 0
| |-EnumConstantDecl 0x5634745e27c0 <line:245:5, col:27> col:5 referenced NODE_NETWORK 'ServiceFlags'
| | `-ConstantExpr 0x5634745e27a0 <col:20, col:27> 'int' 1
| |   `-ParenExpr 0x5634745e2780 <col:20, col:27> 'int'
| |     `-BinaryOperator 0x5634745e2760 <col:21, col:26> 'int' '<<'
| |       |-IntegerLiteral 0x5634745e2720 <col:21> 'int' 1
| |       `-IntegerLiteral 0x5634745e2740 <col:26> 'int' 0
| |-EnumConstantDecl 0x5634745e28b0 <line:249:5, col:27> col:5 NODE_GETUTXO 'ServiceFlags'
| | `-ConstantExpr 0x5634745e2890 <col:20, col:27> 'int' 2
| |   `-ParenExpr 0x5634745e2870 <col:20, col:27> 'int'
| |     `-BinaryOperator 0x5634745e2850 <col:21, col:26> 'int' '<<'
| |       |-IntegerLiteral 0x5634745e2810 <col:21> 'int' 1
| |       `-IntegerLiteral 0x5634745e2830 <col:26> 'int' 1
| |-EnumConstantDecl 0x5634745e29a0 <line:253:5, col:25> col:5 referenced NODE_BLOOM 'ServiceFlags'
| | `-ConstantExpr 0x5634745e2980 <col:18, col:25> 'int' 4
| |   `-ParenExpr 0x5634745e2960 <col:18, col:25> 'int'
| |     `-BinaryOperator 0x5634745e2940 <col:19, col:24> 'int' '<<'
| |       |-IntegerLiteral 0x5634745e2900 <col:19> 'int' 1
| |       `-IntegerLiteral 0x5634745e2920 <col:24> 'int' 2
| |-EnumConstantDecl 0x5634745e2a90 <line:256:5, col:27> col:5 NODE_WITNESS 'ServiceFlags'
| | `-ConstantExpr 0x5634745e2a70 <col:20, col:27> 'int' 8
| |   `-ParenExpr 0x5634745e2a50 <col:20, col:27> 'int'
| |     `-BinaryOperator 0x5634745e2a30 <col:21, col:26> 'int' '<<'
| |       |-IntegerLiteral 0x5634745e29f0 <col:21> 'int' 1
| |       `-IntegerLiteral 0x5634745e2a10 <col:26> 'int' 3
| `-EnumConstantDecl 0x5634745e2b80 <line:260:5, col:36> col:5 referenced NODE_NETWORK_LIMITED 'ServiceFlags'
|   `-ConstantExpr 0x5634745e2b60 <col:28, col:36> 'int' 1024
|     `-ParenExpr 0x5634745e2b40 <col:28, col:36> 'int'
|       `-BinaryOperator 0x5634745e2b20 <col:29, col:34> 'int' '<<'
|         |-IntegerLiteral 0x5634745e2ae0 <col:29> 'int' 1
|         `-IntegerLiteral 0x5634745e2b00 <col:34> 'int' 10
|-FunctionDecl 0x5634745e2cc8 <line:295:1, col:60> col:14 used GetDesirableServiceFlags 'ServiceFlags (ServiceFlags)'
| |-ParmVarDecl 0x5634745e2c08 <col:39, col:52> col:52 services 'ServiceFlags'
| `-FullComment 0x56347475c1b0 <line:272:3, line:293:64>
|   |-ParagraphComment 0x56347475be10 <line:272:3, col:72>
|   | `-TextComment 0x56347475bde0 <col:3, col:72> Text=" Gets the set of service flags which are "desirable" for a given peer."
|   |-ParagraphComment 0x56347475bed0 <line:274:3, line:277:27>
|   | |-TextComment 0x56347475be30 <line:274:3, col:72> Text=" These are the flags which are required for a peer to support for them"
|   | |-TextComment 0x56347475be50 <line:275:3, col:69> Text=" to be "interesting" to us, ie for us to wish to use one of our few"
|   | |-TextComment 0x56347475be70 <line:276:3, col:72> Text=" outbound connection slots for or for us to wish to prioritize keeping"
|   | `-TextComment 0x56347475be90 <line:277:3, col:27> Text=" their connection around."
|   |-ParagraphComment 0x56347475bfc0 <line:279:3, line:283:39>
|   | |-TextComment 0x56347475bef0 <line:279:3, col:69> Text=" Relevant service flags may be peer- and state-specific in that the"
|   | |-TextComment 0x56347475bf10 <line:280:3, col:72> Text=" version of the peer may determine which flags are required (eg in the"
|   | |-TextComment 0x56347475bf30 <line:281:3, col:68> Text=" case of NODE_NETWORK_LIMITED where we seek out NODE_NETWORK peers"
|   | |-TextComment 0x56347475bf50 <line:282:3, col:71> Text=" unless they set NODE_NETWORK_LIMITED and we are out of IBD, in which"
|   | `-TextComment 0x56347475bf70 <line:283:3, col:39> Text=" case NODE_NETWORK_LIMITED suffices)."
|   |-ParagraphComment 0x56347475c0d0 <line:285:3, line:290:51>
|   | |-TextComment 0x56347475bfe0 <line:285:3, col:72> Text=" Thus, generally, avoid calling with peerServices == NODE_NONE, unless"
|   | |-TextComment 0x56347475c000 <line:286:3, col:68> Text=" state-specific flags must absolutely be avoided. When called with"
|   | |-TextComment 0x56347475c020 <line:287:3, col:70> Text=" peerServices == NODE_NONE, the returned desirable service flags are"
|   | |-TextComment 0x56347475c040 <line:288:3, col:73> Text=" guaranteed to not change dependent on state - ie they are suitable for"
|   | |-TextComment 0x56347475c060 <line:289:3, col:73> Text=" use when describing peers which we know to be desirable, but for which"
|   | `-TextComment 0x56347475c080 <line:290:3, col:51> Text=" we do not have a confirmed set of service flags."
|   `-ParagraphComment 0x56347475c140 <line:292:3, line:293:64>
|     |-TextComment 0x56347475c0f0 <line:292:3, col:71> Text=" If the NODE_NONE return value is changed, contrib/seeds/makeseeds.py"
|     `-TextComment 0x56347475c110 <line:293:3, col:64> Text=" should be updated appropriately to filter for the same nodes."
|-FunctionDecl 0x5634745e2e68 <line:298:1, col:41> col:6 SetServiceFlagsIBDCache 'void (bool)'
| |-ParmVarDecl 0x5634745e2da8 <col:30, col:35> col:35 status 'bool'
| `-FullComment 0x56347475c280 <line:297:4, col:82>
|   `-ParagraphComment 0x56347475c250 <col:4, col:82>
|     `-TextComment 0x56347475c220 <col:4, col:82> Text=" Set the current IBD status in order to figure out the desirable service flags "
|-FunctionDecl 0x5634745e3008 <line:305:1, line:307:1> line:305:20 HasAllDesirableServiceFlags 'bool (ServiceFlags)' static inline
| |-ParmVarDecl 0x5634745e2f48 <col:48, col:61> col:61 used services 'ServiceFlags'
| |-CompoundStmt 0x5634745e3328 <col:71, line:307:1>
| | `-ReturnStmt 0x5634745e32f0 <line:306:5, col:62>
| |   `-UnaryOperator 0x5634745e32d8 <col:12, col:62> 'bool' prefix '!' cannot overflow
| |     `-ImplicitCastExpr 0x5634745e32c0 <col:13, col:62> 'bool' <IntegralToBoolean>
| |       `-ParenExpr 0x5634745e32a0 <col:13, col:62> 'int'
| |         `-BinaryOperator 0x5634745e3260 <col:14, col:61> 'int' '&'
| |           |-ImplicitCastExpr 0x5634745e3248 <col:14, col:47> 'int' <IntegralCast>
| |           | `-CallExpr 0x5634745e3180 <col:14, col:47> 'ServiceFlags'
| |           |   |-ImplicitCastExpr 0x5634745e3168 <col:14> 'ServiceFlags (*)(ServiceFlags)' <FunctionToPointerDecay>
| |           |   | `-DeclRefExpr 0x5634745e3118 <col:14> 'ServiceFlags (ServiceFlags)' lvalue Function 0x5634745e2cc8 'GetDesirableServiceFlags' 'ServiceFlags (ServiceFlags)'
| |           |   `-ImplicitCastExpr 0x5634745e31a8 <col:39> 'ServiceFlags' <LValueToRValue>
| |           |     `-DeclRefExpr 0x5634745e30f8 <col:39> 'ServiceFlags' lvalue ParmVar 0x5634745e2f48 'services' 'ServiceFlags'
| |           `-ParenExpr 0x5634745e3228 <col:51, col:61> 'int'
| |             `-UnaryOperator 0x5634745e3210 <col:52, col:53> 'int' prefix '~' cannot overflow
| |               `-ImplicitCastExpr 0x5634745e31f8 <col:53> 'int' <IntegralCast>
| |                 `-ImplicitCastExpr 0x5634745e31e0 <col:53> 'ServiceFlags' <LValueToRValue>
| |                   `-DeclRefExpr 0x5634745e31c0 <col:53> 'ServiceFlags' lvalue ParmVar 0x5634745e2f48 'services' 'ServiceFlags'
| `-FullComment 0x56347475c3f0 <line:301:3, line:303:67>
|   `-ParagraphComment 0x56347475c3c0 <line:301:3, line:303:67>
|     |-TextComment 0x56347475c2f0 <line:301:3, col:28> Text=" A shortcut for (services "
|     |-TextComment 0x56347475c310 <col:29> Text="&"
|     |-TextComment 0x56347475c330 <col:30, col:65> Text=" GetDesirableServiceFlags(services))"
|     |-TextComment 0x56347475c350 <line:302:3, col:73> Text=" == GetDesirableServiceFlags(services), ie determines whether the given"
|     `-TextComment 0x56347475c370 <line:303:3, col:67> Text=" set of service flags are sufficient for a peer to be "relevant"."
|-FunctionDecl 0x5634745e33e0 <line:313:1, line:315:1> line:313:20 MayHaveUsefulAddressDB 'bool (ServiceFlags)' static inline
| |-ParmVarDecl 0x5634745e3350 <col:43, col:56> col:56 used services 'ServiceFlags'
| |-CompoundStmt 0x5634745e36a8 <col:66, line:315:1>
| | `-ReturnStmt 0x5634745e3668 <line:314:5, col:73>
| |   `-BinaryOperator 0x5634745e3648 <col:12, col:73> 'bool' '||'
| |     |-ImplicitCastExpr 0x5634745e3618 <col:12, col:36> 'bool' <IntegralToBoolean>
| |     | `-ParenExpr 0x5634745e3530 <col:12, col:36> 'int'
| |     |   `-BinaryOperator 0x5634745e3510 <col:13, col:24> 'int' '&'
| |     |     |-ImplicitCastExpr 0x5634745e34e0 <col:13> 'int' <IntegralCast>
| |     |     | `-ImplicitCastExpr 0x5634745e34c8 <col:13> 'ServiceFlags' <LValueToRValue>
| |     |     |   `-DeclRefExpr 0x5634745e3488 <col:13> 'ServiceFlags' lvalue ParmVar 0x5634745e3350 'services' 'ServiceFlags'
| |     |     `-ImplicitCastExpr 0x5634745e34f8 <col:24> 'int' <IntegralCast>
| |     |       `-DeclRefExpr 0x5634745e34a8 <col:24> 'ServiceFlags' EnumConstant 0x5634745e27c0 'NODE_NETWORK' 'ServiceFlags'
| |     `-ImplicitCastExpr 0x5634745e3630 <col:41, col:73> 'bool' <IntegralToBoolean>
| |       `-ParenExpr 0x5634745e35f8 <col:41, col:73> 'int'
| |         `-BinaryOperator 0x5634745e35d8 <col:42, col:53> 'int' '&'
| |           |-ImplicitCastExpr 0x5634745e35a8 <col:42> 'int' <IntegralCast>
| |           | `-ImplicitCastExpr 0x5634745e3590 <col:42> 'ServiceFlags' <LValueToRValue>
| |           |   `-DeclRefExpr 0x5634745e3550 <col:42> 'ServiceFlags' lvalue ParmVar 0x5634745e3350 'services' 'ServiceFlags'
| |           `-ImplicitCastExpr 0x5634745e35c0 <col:53> 'int' <IntegralCast>
| |             `-DeclRefExpr 0x5634745e3570 <col:53> 'ServiceFlags' EnumConstant 0x5634745e2b80 'NODE_NETWORK_LIMITED' 'ServiceFlags'
| `-FullComment 0x56347475c4e0 <line:310:3, line:311:29>
|   `-ParagraphComment 0x56347475c4b0 <line:310:3, line:311:29>
|     |-TextComment 0x56347475c460 <line:310:3, col:75> Text=" Checks if a peer with the given service flags may be capable of having a"
|     `-TextComment 0x56347475c480 <line:311:3, col:29> Text=" robust address-storage DB."
|-CXXRecordDecl 0x5634745e36c0 <line:318:1, line:351:1> line:318:7 referenced invalid class CAddress definition
| |-DefinitionData trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'CService'
| |-FullComment 0x56347475c5b0 <line:317:4, col:49>
| | `-ParagraphComment 0x56347475c580 <col:4, col:49>
| |   `-TextComment 0x56347475c550 <col:4, col:49> Text=" A CService with information about it as peer "
| |-CXXRecordDecl 0x5634745e3818 <line:318:1, col:7> col:7 implicit referenced class CAddress
| |-AccessSpecDecl 0x5634745e38a8 <line:320:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745e3930 <line:321:5, col:14> col:5 used CAddress 'void ()'
| |-CXXConstructorDecl 0x5634745e3b38 <line:322:5, col:62> col:14 used CAddress 'void (CService, ServiceFlags)'
| | |-ParmVarDecl 0x5634745e39e8 <col:23, col:32> col:32 ipIn 'CService'
| | `-ParmVarDecl 0x5634745e3a60 <col:38, col:51> col:51 nServicesIn 'ServiceFlags'
| |-CXXMethodDecl 0x5634745e3c10 <line:324:5, col:15> col:10 referenced Init 'void ()'
| |-FunctionTemplateDecl 0x5634745e3f08 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634745e3cb0 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745e3e68 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634745e3d78 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745e4750 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634745e4188 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634745e3f68 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745e40e8 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634745e4028 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745e4858 <col:33, line:201:5>
| |     `-CallExpr 0x5634745e4828 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634745e4770 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634745e47c8 <col:25> 'Stream' lvalue ParmVar 0x5634745e4028 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634745e47f8 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634745e4528 <bitcoin/src/protocol.h:328:5, line:343:5> line:329:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634745e41e8 <line:328:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634745e4258 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634745e4488 <line:329:5, line:343:5> line:329:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634745e4338 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634745e43b0 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634745e5480 <line:330:5, line:343:5>
| |     |-IfStmt 0x5634745e4958 <line:331:9, line:332:18>
| |     | |-CallExpr 0x5634745e48d8 <line:331:13, col:32> '<dependent type>'
| |     | | `-CXXDependentScopeMemberExpr 0x5634745e4890 <col:13, col:24> '<dependent type>' lvalue .ForRead
| |     | |   `-DeclRefExpr 0x5634745e4870 <col:13> 'Operation' lvalue ParmVar 0x5634745e43b0 'ser_action' 'Operation'
| |     | `-CXXMemberCallExpr 0x5634745e4938 <line:332:13, col:18> 'void'
| |     |   `-MemberExpr 0x5634745e4908 <col:13> '<bound member function type>' ->Init 0x5634745e3c10
| |     |     `-CXXThisExpr 0x5634745e48f8 <col:13> 'CAddress *' implicit this
| |     |-DeclStmt 0x5634745e4a78 <line:333:9, col:38>
| |     | `-VarDecl 0x5634745e4988 <col:9, col:37> col:13 referenced nVersion 'int' cinit
| |     |   `-CallExpr 0x5634745e4a58 <col:24, col:37> '<dependent type>'
| |     |     `-CXXDependentScopeMemberExpr 0x5634745e4a10 <col:24, col:26> '<dependent type>' lvalue .GetVersion
| |     |       `-DeclRefExpr 0x5634745e49f0 <col:24> 'Stream' lvalue ParmVar 0x5634745e4338 's' 'Stream &'
| |     |-IfStmt 0x5634745e4c80 <line:334:9, bitcoin/src/serialize.h:184:71>
| |     | |-BinaryOperator 0x5634745e4b38 <bitcoin/src/protocol.h:334:13, col:27> '<dependent type>' '&'
| |     | | |-CallExpr 0x5634745e4af8 <col:13, col:23> '<dependent type>'
| |     | | | `-CXXDependentScopeMemberExpr 0x5634745e4ab0 <col:13, col:15> '<dependent type>' lvalue .GetType
| |     | | |   `-DeclRefExpr 0x5634745e4a90 <col:13> 'Stream' lvalue ParmVar 0x5634745e4338 's' 'Stream &'
| |     | | `-DeclRefExpr 0x5634745e4b18 <col:27> '(anonymous enum at bitcoin/src/serialize.h:172:1)' EnumConstant 0x56347458e8c0 'SER_DISK' '(anonymous enum at bitcoin/src/serialize.h:172:1)'
| |     | `-ParenExpr 0x5634745e4c60 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |     |   `-CallExpr 0x5634745e4c28 <col:25, col:70> '<dependent type>'
| |     |     |-UnresolvedLookupExpr 0x5634745e4b78 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |     |     |-DeclRefExpr 0x5634745e4bc8 <col:44> 'Stream' lvalue ParmVar 0x5634745e4338 's' 'Stream &'
| |     |     |-DeclRefExpr 0x5634745e4be8 <col:47> 'Operation' lvalue ParmVar 0x5634745e43b0 'ser_action' 'Operation'
| |     |     `-DeclRefExpr 0x5634745e4c08 <bitcoin/src/protocol.h:335:23> 'int' lvalue Var 0x5634745e4988 'nVersion' 'int'
| |     |-IfStmt 0x5634745e50d8 <line:336:9, bitcoin/src/serialize.h:184:71>
| |     | |-BinaryOperator 0x5634745e4f70 <bitcoin/src/protocol.h:336:13, line:337:76> '<dependent type>' '||'
| |     | | |-ParenExpr 0x5634745e4d60 <line:336:13, col:36> '<dependent type>'
| |     | | | `-BinaryOperator 0x5634745e4d40 <col:14, col:28> '<dependent type>' '&'
| |     | | |   |-CallExpr 0x5634745e4d00 <col:14, col:24> '<dependent type>'
| |     | | |   | `-CXXDependentScopeMemberExpr 0x5634745e4cb8 <col:14, col:16> '<dependent type>' lvalue .GetType
| |     | | |   |   `-DeclRefExpr 0x5634745e4c98 <col:14> 'Stream' lvalue ParmVar 0x5634745e4338 's' 'Stream &'
| |     | | |   `-DeclRefExpr 0x5634745e4d20 <col:28> '(anonymous enum at bitcoin/src/serialize.h:172:1)' EnumConstant 0x56347458e8c0 'SER_DISK' '(anonymous enum at bitcoin/src/serialize.h:172:1)'
| |     | | `-ParenExpr 0x5634745e4f50 <line:337:13, col:76> '<dependent type>'
| |     | |   `-BinaryOperator 0x5634745e4f30 <col:14, col:75> '<dependent type>' '&&'
| |     | |     |-BinaryOperator 0x5634745e4e10 <col:14, col:26> 'bool' '>='
| |     | |     | |-ImplicitCastExpr 0x5634745e4dc0 <col:14> 'int' <LValueToRValue>
| |     | |     | | `-DeclRefExpr 0x5634745e4d80 <col:14> 'int' lvalue Var 0x5634745e4988 'nVersion' 'int'
| |     | |     | `-ImplicitCastExpr 0x5634745e4df8 <col:26> 'int' <LValueToRValue>
| |     | |     |   `-DeclRefExpr 0x5634745e4dd8 <col:26> 'const int' lvalue Var 0x5634745dcbb0 'CADDR_TIME_VERSION' 'const int' non_odr_use_constant
| |     | |     `-UnaryOperator 0x5634745e4f18 <col:48, col:75> '<dependent type>' prefix '!' cannot overflow
| |     | |       `-ParenExpr 0x5634745e4ef8 <col:49, col:75> '<dependent type>'
| |     | |         `-BinaryOperator 0x5634745e4ed8 <col:50, col:64> '<dependent type>' '&'
| |     | |           |-CallExpr 0x5634745e4e98 <col:50, col:60> '<dependent type>'
| |     | |           | `-CXXDependentScopeMemberExpr 0x5634745e4e50 <col:50, col:52> '<dependent type>' lvalue .GetType
| |     | |           |   `-DeclRefExpr 0x5634745e4e30 <col:50> 'Stream' lvalue ParmVar 0x5634745e4338 's' 'Stream &'
| |     | |           `-DeclRefExpr 0x5634745e4eb8 <col:64> '(anonymous enum at bitcoin/src/serialize.h:172:1)' EnumConstant 0x56347458e9b0 'SER_GETHASH' '(anonymous enum at bitcoin/src/serialize.h:172:1)'
| |     | `-ParenExpr 0x5634745e50b8 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |     |   `-CallExpr 0x5634745e5080 <col:25, col:70> '<dependent type>'
| |     |     |-UnresolvedLookupExpr 0x5634745e4fb0 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |     |     |-DeclRefExpr 0x5634745e5000 <col:44> 'Stream' lvalue ParmVar 0x5634745e4338 's' 'Stream &'
| |     |     |-DeclRefExpr 0x5634745e5020 <col:47> 'Operation' lvalue ParmVar 0x5634745e43b0 'ser_action' 'Operation'
| |     |     `-MemberExpr 0x5634745e5050 <bitcoin/src/protocol.h:338:23> 'unsigned int' lvalue ->nTime 0x5634745e4630
| |     |       `-CXXThisExpr 0x5634745e5040 <col:23> 'CAddress *' implicit this
| |     `-DeclStmt 0x5634745e51c0 <line:339:9, col:42>
| |       `-VarDecl 0x5634745e5118 <col:9, col:18> col:18 invalid nServicesInt 'int'
| |-AccessSpecDecl 0x5634745e4590 <line:346:1, col:7> col:1 public
| |-FieldDecl 0x5634745e45c8 <line:347:5, col:18> col:18 referenced nServices 'ServiceFlags'
| |-FieldDecl 0x5634745e4630 <line:350:5, col:18> col:18 referenced nTime 'unsigned int'
| |-CXXConstructorDecl 0x563474622618 <line:318:7> col:7 implicit used constexpr CAddress 'void (const CAddress &) noexcept' inline default trivial
| | |-ParmVarDecl 0x563474622728 <col:7> col:7 used 'const CAddress &'
| | |-CXXCtorInitializer 'CService'
| | | `-CXXConstructExpr 0x563474622c60 <col:7> 'CService' 'void (const CService &) noexcept'
| | |   `-ImplicitCastExpr 0x5634746229a0 <col:7> 'const CService' lvalue <UncheckedDerivedToBase (CService)>
| | |     `-DeclRefExpr 0x563474622980 <col:7> 'const CAddress' lvalue ParmVar 0x563474622728 '' 'const CAddress &'
| | |-CXXCtorInitializer Field 0x5634745e45c8 'nServices' 'ServiceFlags'
| | | `-ImplicitCastExpr 0x563474622d18 <col:7> 'ServiceFlags' <LValueToRValue>
| | |   `-MemberExpr 0x563474622ce8 <col:7> 'const ServiceFlags' lvalue .nServices 0x5634745e45c8
| | |     `-DeclRefExpr 0x563474622cc8 <col:7> 'const CAddress' lvalue ParmVar 0x563474622728 '' 'const CAddress &'
| | |-CXXCtorInitializer Field 0x5634745e4630 'nTime' 'unsigned int'
| | | `-ImplicitCastExpr 0x563474622da8 <col:7> 'unsigned int' <LValueToRValue>
| | |   `-MemberExpr 0x563474622d78 <col:7> 'const unsigned int' lvalue .nTime 0x5634745e4630
| | |     `-DeclRefExpr 0x563474622d58 <col:7> 'const CAddress' lvalue ParmVar 0x563474622728 '' 'const CAddress &'
| | `-CompoundStmt 0x563474622e00 <col:7>
| |-CXXConstructorDecl 0x5634746227c8 <col:7> col:7 implicit used constexpr CAddress 'void (CAddress &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5634746228d8 <col:7> col:7 used 'CAddress &&'
| | |-CXXCtorInitializer 'CService'
| | | `-CXXConstructExpr 0x563474649e50 <col:7> 'CService' 'void (CService &&) noexcept'
| | |   `-ImplicitCastExpr 0x563474649b50 <col:7> 'CService' xvalue <UncheckedDerivedToBase (CService)>
| | |     `-CXXStaticCastExpr 0x563474649b20 <col:7> 'CAddress' xvalue static_cast<class CAddress &&> <NoOp>
| | |       `-DeclRefExpr 0x563474649af0 <col:7> 'CAddress' lvalue ParmVar 0x5634746228d8 '' 'CAddress &&'
| | |-CXXCtorInitializer Field 0x5634745e45c8 'nServices' 'ServiceFlags'
| | | `-ImplicitCastExpr 0x563474649f48 <col:7> 'ServiceFlags' <LValueToRValue>
| | |   `-MemberExpr 0x563474649f18 <col:7> 'ServiceFlags' xvalue .nServices 0x5634745e45c8
| | |     `-CXXStaticCastExpr 0x563474649ee8 <col:7> 'CAddress' xvalue static_cast<class CAddress &&> <NoOp>
| | |       `-DeclRefExpr 0x563474649eb8 <col:7> 'CAddress' lvalue ParmVar 0x5634746228d8 '' 'CAddress &&'
| | |-CXXCtorInitializer Field 0x5634745e4630 'nTime' 'unsigned int'
| | | `-ImplicitCastExpr 0x56347464a018 <col:7> 'unsigned int' <LValueToRValue>
| | |   `-MemberExpr 0x563474649fe8 <col:7> 'unsigned int' xvalue .nTime 0x5634745e4630
| | |     `-CXXStaticCastExpr 0x563474649fb8 <col:7> 'CAddress' xvalue static_cast<class CAddress &&> <NoOp>
| | |       `-DeclRefExpr 0x563474649f88 <col:7> 'CAddress' lvalue ParmVar 0x5634746228d8 '' 'CAddress &&'
| | `-CompoundStmt 0x56347464a070 <col:7>
| |-CXXMethodDecl 0x56347470e468 <col:7> col:7 implicit used invalid operator= 'CAddress &(const CAddress &) noexcept' inline default trivial
| | `-ParmVarDecl 0x56347470e578 <col:7> col:7 'const CAddress &'
| `-CXXMethodDecl 0x56347470ea40 <col:7> col:7 implicit used invalid operator= 'CAddress &(CAddress &&) noexcept' inline default trivial
|   `-ParmVarDecl 0x56347470eb48 <col:7> col:7 'CAddress &&'
|-VarDecl 0x5634745e5510 <line:354:1, col:16> col:16 invalid MSG_WITNESS_FLAG 'const int'
| `-FullComment 0x56347475c800 <line:353:4, col:31>
|   `-ParagraphComment 0x56347475c7d0 <col:4, col:31>
|     `-TextComment 0x56347475c7a0 <col:4, col:31> Text=" getdata message type flags "
|-VarDecl 0x5634745e5600 <line:355:1, col:16> col:16 invalid MSG_TYPE_MASK 'const int'
|-EnumDecl 0x5634745e56f8 <line:361:1, line:372:1> line:361:6 GetDataMsg
| |-FullComment 0x56347475c920 <line:357:4, line:359:39>
| | `-ParagraphComment 0x56347475c8f0 <line:357:4, line:359:39>
| |   |-TextComment 0x56347475c870 <line:357:4, col:32> Text=" getdata / inv message types."
| |   |-TextComment 0x56347475c890 <line:358:3, col:78> Text=" These numbers are defined by the protocol. When adding a new value, be sure"
| |   `-TextComment 0x56347475c8b0 <line:359:3, col:39> Text=" to mention it in the respective BIP."
| |-EnumConstantDecl 0x5634745e5800 <line:363:5, col:17> col:5 UNDEFINED 'GetDataMsg'
| | `-ImplicitCastExpr 0x5634745e5c98 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634745e57e0 <col:17> 'int' 0
| |     `-IntegerLiteral 0x5634745e57c0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5634745e5890 <line:364:5, col:14> col:5 referenced MSG_TX 'GetDataMsg'
| | `-ImplicitCastExpr 0x5634745e5cb0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634745e5870 <col:14> 'int' 1
| |     `-IntegerLiteral 0x5634745e5850 <col:14> 'int' 1
| |-EnumConstantDecl 0x5634745e5920 <line:365:5, col:17> col:5 referenced MSG_BLOCK 'GetDataMsg'
| | `-ImplicitCastExpr 0x5634745e5cc8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5634745e5900 <col:17> 'int' 2
| |     `-IntegerLiteral 0x5634745e58e0 <col:17> 'int' 2
| |-EnumConstantDecl 0x5634745e59b0 <line:367:5, col:26> col:5 referenced MSG_FILTERED_BLOCK 'GetDataMsg'
| | |-ImplicitCastExpr 0x5634745e5ce0 <col:26> 'unsigned int' <IntegralCast>
| | | `-ConstantExpr 0x5634745e5990 <col:26> 'int' 3
| | |   `-IntegerLiteral 0x5634745e5970 <col:26> 'int' 3
| | `-FullComment 0x56347475c9f0 <col:34, col:50>
| |   `-ParagraphComment 0x56347475c9c0 <col:34, col:50>
| |     `-TextComment 0x56347475c990 <col:34, col:50> Text=" Defined in BIP37"
| |-EnumConstantDecl 0x5634745e5a68 <line:368:5, col:23> col:5 MSG_CMPCT_BLOCK 'GetDataMsg'
| | |-ImplicitCastExpr 0x5634745e5cf8 <col:23> 'unsigned int' <IntegralCast>
| | | `-ConstantExpr 0x5634745e5a48 <col:23> 'int' 4
| | |   `-IntegerLiteral 0x5634745e5a28 <col:23> 'int' 4
| | `-FullComment 0x56347475cac0 <col:34, col:51>
| |   `-ParagraphComment 0x56347475ca90 <col:34, col:51>
| |     `-TextComment 0x56347475ca60 <col:34, col:51> Text=" Defined in BIP152"
| |-EnumConstantDecl 0x5634745e5b08 <line:369:5> col:5 MSG_WITNESS_BLOCK 'GetDataMsg'
| | `-FullComment 0x56347475cb90 <col:59, col:76>
| |   `-ParagraphComment 0x56347475cb60 <col:59, col:76>
| |     `-TextComment 0x56347475cb30 <col:59, col:76> Text=" Defined in BIP144"
| |-EnumConstantDecl 0x5634745e5ba8 <line:370:5> col:5 MSG_WITNESS_TX 'GetDataMsg'
| | `-FullComment 0x56347475cc60 <col:59, col:76>
| |   `-ParagraphComment 0x56347475cc30 <col:59, col:76>
| |     `-TextComment 0x56347475cc00 <col:59, col:76> Text=" Defined in BIP144"
| `-EnumConstantDecl 0x5634745e5c48 <line:371:5> col:5 MSG_FILTERED_WITNESS_BLOCK 'GetDataMsg'
|-CXXRecordDecl 0x5634745e5d38 <line:375:1, line:398:1> line:375:7 referenced invalid class CInv definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347475cd30 <line:374:4, col:21>
| | `-ParagraphComment 0x56347475cd00 <col:4, col:21>
| |   `-TextComment 0x56347475ccd0 <col:4, col:21> Text=" inv message data "
| |-CXXRecordDecl 0x5634745e5e58 <line:375:1, col:7> col:7 implicit referenced class CInv
| |-AccessSpecDecl 0x5634745e5ee8 <line:377:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745e5f70 <line:378:5, col:10> col:5 CInv 'void ()'
| |-CXXConstructorDecl 0x5634745e6178 <line:379:5, col:43> col:5 CInv 'void (int, const uint256 &)'
| | |-ParmVarDecl 0x5634745e6030 <col:10, col:14> col:14 typeIn 'int'
| | `-ParmVarDecl 0x5634745e60a8 <col:22, col:37> col:37 hashIn 'const uint256 &'
| |-FunctionTemplateDecl 0x5634745e74a8 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634745e6230 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745e7408 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634745e7318 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745e8118 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634745e7728 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634745e7508 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634745e7688 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634745e75c8 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634745e8220 <col:33, line:201:5>
| |     `-CallExpr 0x5634745e81f0 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634745e8138 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634745e8190 <col:25> 'Stream' lvalue ParmVar 0x5634745e75c8 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634745e81c0 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634745e7ab8 <bitcoin/src/protocol.h:383:5, line:388:5> line:384:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634745e7788 <line:383:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634745e77f8 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634745e7a18 <line:384:5, line:388:5> line:384:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634745e78c8 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634745e7940 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634745e8468 <line:385:5, line:388:5>
| |     `-ParenExpr 0x5634745e8388 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |       `-CallExpr 0x5634745e8350 <col:25, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x5634745e8258 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |         |-DeclRefExpr 0x5634745e82a8 <col:44> 'Stream' lvalue ParmVar 0x5634745e78c8 's' 'Stream &'
| |         |-DeclRefExpr 0x5634745e82f0 <col:47> 'Operation' lvalue ParmVar 0x5634745e7940 'ser_action' 'Operation'
| |         `-MemberExpr 0x5634745e8320 <bitcoin/src/protocol.h:386:19> 'int' lvalue ->type 0x5634745e7f98
| |           `-CXXThisExpr 0x5634745e8310 <col:19> 'CInv *' implicit this
| |-FriendDecl 0x5634745e7d68 <line:390:5, col:55> col:17
| | `-FunctionDecl 0x5634745e7ca8 parent 0x5634744cb688 <col:5, col:55> col:17 operator< 'bool (const CInv &, const CInv &)'
| |   |-ParmVarDecl 0x5634745e7b58 <col:27, col:39> col:39 a 'const CInv &'
| |   `-ParmVarDecl 0x5634745e7bd0 <col:42, col:54> col:54 b 'const CInv &'
| |-CXXMethodDecl 0x5634745e7de0 <line:392:5, col:30> col:17 invalid GetCommand 'int () const'
| |-CXXMethodDecl 0x5634745e7eb8 <line:393:5, col:28> col:17 invalid ToString 'int () const'
| |-AccessSpecDecl 0x5634745e7f58 <line:395:1, col:7> col:1 public
| |-FieldDecl 0x5634745e7f98 <line:396:5, col:9> col:9 referenced type 'int'
| `-FieldDecl 0x5634745e7ff8 <line:397:5, col:13> col:13 invalid hash 'uint256'
|-CXXRecordDecl 0x5634745e84a8 <bitcoin/src/crypto/chacha20.h:13:1, line:32:1> line:13:7 referenced invalid class ChaCha20 definition
| |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347475cfa0 <line:11:4, line:12:48>
| | `-ParagraphComment 0x56347475cf70 <line:11:4, line:12:48>
| |   |-TextComment 0x56347475cf20 <line:11:4, col:79> Text=" A class for ChaCha20 256-bit stream cipher developed by Daniel J. Bernstein"
| |   `-TextComment 0x56347475cf40 <line:12:1, col:48> Text="    https://cr.yp.to/chacha/chacha-20080128.pdf "
| |-CXXRecordDecl 0x5634745e85c8 <line:13:1, col:7> col:7 implicit referenced class ChaCha20
| |-AccessSpecDecl 0x5634745e8658 <line:15:1, col:8> col:1 private
| |-FieldDecl 0x5634745e86f8 <line:16:5, <invalid sloc>> col:14 invalid input 'int [16]'
| |-AccessSpecDecl 0x5634745e8748 <line:18:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745e87d0 <line:19:5, col:14> col:5 ChaCha20 'void ()'
| |-CXXConstructorDecl 0x5634745e89f8 <line:20:5, col:53> col:5 invalid ChaCha20 'void (const unsigned char *, int)'
| | |-ParmVarDecl 0x5634745e8890 <col:14, col:35> col:35 key 'const unsigned char *'
| | `-ParmVarDecl 0x5634745e8920 <col:40, col:47> col:47 invalid keylen 'int'
| |-CXXMethodDecl 0x5634745e8bf0 <line:21:5, col:56> col:10 invalid SetKey 'void (const unsigned char *, int)'
| | |-ParmVarDecl 0x5634745e8ac8 <col:17, col:38> col:38 key 'const unsigned char *'
| | `-ParmVarDecl 0x5634745e8b58 <col:43, col:50> col:50 invalid keylen 'int'
| |-CXXMethodDecl 0x5634745e8d80 <line:22:5, col:27> col:10 invalid SetIV 'void (int)'
| | `-ParmVarDecl 0x5634745e8cf0 <col:16, col:25> col:25 invalid iv 'int'
| |-CXXMethodDecl 0x5634745e8ee0 <line:23:5, col:27> col:10 invalid Seek 'void (int)'
| | `-ParmVarDecl 0x5634745e8e50 <col:15, col:24> col:24 invalid pos 'int'
| |-CXXMethodDecl 0x5634745e9138 <line:26:5, col:50> col:10 invalid Keystream 'void (unsigned char *, int)'
| | |-ParmVarDecl 0x5634745e8fd0 <col:20, col:35> col:35 c 'unsigned char *'
| | |-ParmVarDecl 0x5634745e9060 <col:38, col:45> col:45 invalid bytes 'int'
| | `-FullComment 0x56347475d110 <line:25:8, col:55>
| |   `-ParagraphComment 0x56347475d0e0 <col:8, col:55>
| |     |-TextComment 0x56347475d010 <col:8, col:38> Text=" outputs the keystream of size "
| |     |-TextComment 0x56347475d030 <col:39, col:44> Text="<bytes"
| |     |-TextComment 0x56347475d050 <col:45, col:51> Text="> into "
| |     |-TextComment 0x56347475d070 <col:52, col:53> Text="<c"
| |     `-TextComment 0x56347475d090 <col:54, col:55> Text="> "
| `-CXXMethodDecl 0x5634745ec5f8 <line:31:5, col:79> col:10 invalid Crypt 'void (const unsigned char *, unsigned char *, int)'
|   |-ParmVarDecl 0x5634745e9230 <col:16, col:37> col:37 input 'const unsigned char *'
|   |-ParmVarDecl 0x5634745ec480 <col:44, col:59> col:59 output 'unsigned char *'
|   |-ParmVarDecl 0x5634745ec510 <col:67, col:74> col:74 invalid bytes 'int'
|   `-FullComment 0x56347475d2f0 <line:28:8, line:29:48>
|     `-ParagraphComment 0x56347475d2c0 <line:28:8, line:29:48>
|       |-TextComment 0x56347475d180 <line:28:8, col:30> Text=" enciphers the message "
|       |-TextComment 0x56347475d1a0 <col:31, col:36> Text="<input"
|       |-TextComment 0x56347475d1c0 <col:37, col:48> Text="> of length "
|       |-TextComment 0x56347475d1e0 <col:49, col:54> Text="<bytes"
|       |-TextComment 0x56347475d200 <col:55, col:101> Text="> and write the enciphered representation into "
|       |-TextComment 0x56347475d220 <col:102, col:108> Text="<output"
|       |-TextComment 0x56347475d240 <col:109> Text=">"
|       `-TextComment 0x56347475d260 <line:29:7, col:48> Text="  Used for encryption and decryption (XOR)"
|-FunctionDecl 0x5634745ec7c0 <bitcoin/src/crypto/common.h:17:1, line:22:1> line:17:24 invalid ReadLE16 'int (const unsigned char *)' static inline
| |-ParmVarDecl 0x5634745ec6f0 <col:33, col:54> col:54 used ptr 'const unsigned char *'
| `-CompoundStmt 0x5634745ec990 <line:18:1, line:22:1>
|   `-DeclStmt 0x5634745ec8f8 <line:19:5, col:15>
|     `-VarDecl 0x5634745ec890 <col:5, col:14> col:14 invalid x 'int'
|-FunctionDecl 0x5634745eca68 <line:24:1, line:29:1> line:24:24 invalid ReadLE32 'int (const unsigned char *)' static inline
| |-ParmVarDecl 0x5634745ec9d0 <col:33, col:54> col:54 used ptr 'const unsigned char *'
| `-CompoundStmt 0x5634745ecc38 <line:25:1, line:29:1>
|   `-DeclStmt 0x5634745ecba0 <line:26:5, col:15>
|     `-VarDecl 0x5634745ecb38 <col:5, col:14> col:14 invalid x 'int'
|-FunctionDecl 0x5634745ecd10 <line:31:1, line:36:1> line:31:24 invalid ReadLE64 'int (const unsigned char *)' static inline
| |-ParmVarDecl 0x5634745ecc78 <col:33, col:54> col:54 used ptr 'const unsigned char *'
| `-CompoundStmt 0x5634745ecee0 <line:32:1, line:36:1>
|   `-DeclStmt 0x5634745ece48 <line:33:5, col:15>
|     `-VarDecl 0x5634745ecde0 <col:5, col:14> col:14 invalid x 'int'
|-FunctionDecl 0x5634745ed038 <line:38:1, line:42:1> line:38:20 invalid WriteLE16 'void (unsigned char *, int)' static inline
| |-ParmVarDecl 0x5634745ecf10 <col:30, col:45> col:45 used ptr 'unsigned char *'
| |-ParmVarDecl 0x5634745ecfa0 <col:50, col:59> col:59 invalid x 'int'
| `-CompoundStmt 0x5634745ed210 <line:39:1, line:42:1>
|   `-DeclStmt 0x5634745ed178 <line:40:5, col:28>
|     `-VarDecl 0x5634745ed110 <col:5, col:14> col:14 invalid v 'int'
|-FunctionDecl 0x5634745ed368 <line:44:1, line:48:1> line:44:20 invalid WriteLE32 'void (unsigned char *, int)' static inline
| |-ParmVarDecl 0x5634745ed240 <col:30, col:45> col:45 used ptr 'unsigned char *'
| |-ParmVarDecl 0x5634745ed2d0 <col:50, col:59> col:59 invalid x 'int'
| `-CompoundStmt 0x5634745edee0 <line:45:1, line:48:1>
|   `-DeclStmt 0x5634745ede48 <line:46:5, col:28>
|     `-VarDecl 0x5634745edde0 <col:5, col:14> col:14 invalid v 'int'
|-FunctionDecl 0x5634745ee038 <line:50:1, line:54:1> line:50:20 invalid WriteLE64 'void (unsigned char *, int)' static inline
| |-ParmVarDecl 0x5634745edf10 <col:30, col:45> col:45 used ptr 'unsigned char *'
| |-ParmVarDecl 0x5634745edfa0 <col:50, col:59> col:59 invalid x 'int'
| `-CompoundStmt 0x5634745ee210 <line:51:1, line:54:1>
|   `-DeclStmt 0x5634745ee178 <line:52:5, col:28>
|     `-VarDecl 0x5634745ee110 <col:5, col:14> col:14 invalid v 'int'
|-FunctionDecl 0x5634745ee2e8 <line:56:1, line:61:1> line:56:24 invalid ReadBE32 'int (const unsigned char *)' static inline
| |-ParmVarDecl 0x5634745ee250 <col:33, col:54> col:54 used ptr 'const unsigned char *'
| `-CompoundStmt 0x5634745ee4b8 <line:57:1, line:61:1>
|   `-DeclStmt 0x5634745ee420 <line:58:5, col:15>
|     `-VarDecl 0x5634745ee3b8 <col:5, col:14> col:14 invalid x 'int'
|-FunctionDecl 0x5634745ee590 <line:63:1, line:68:1> line:63:24 invalid ReadBE64 'int (const unsigned char *)' static inline
| |-ParmVarDecl 0x5634745ee4f8 <col:33, col:54> col:54 used ptr 'const unsigned char *'
| `-CompoundStmt 0x5634745ee760 <line:64:1, line:68:1>
|   `-DeclStmt 0x5634745ee6c8 <line:65:5, col:15>
|     `-VarDecl 0x5634745ee660 <col:5, col:14> col:14 invalid x 'int'
|-FunctionDecl 0x5634745ee8b8 <line:70:1, line:74:1> line:70:20 invalid WriteBE32 'void (unsigned char *, int)' static inline
| |-ParmVarDecl 0x5634745ee790 <col:30, col:45> col:45 used ptr 'unsigned char *'
| |-ParmVarDecl 0x5634745ee820 <col:50, col:59> col:59 invalid x 'int'
| `-CompoundStmt 0x5634745eea90 <line:71:1, line:74:1>
|   `-DeclStmt 0x5634745ee9f8 <line:72:5, col:28>
|     `-VarDecl 0x5634745ee990 <col:5, col:14> col:14 invalid v 'int'
|-FunctionDecl 0x5634745eebe8 <line:76:1, line:80:1> line:76:20 invalid WriteBE64 'void (unsigned char *, int)' static inline
| |-ParmVarDecl 0x5634745eeac0 <col:30, col:45> col:45 used ptr 'unsigned char *'
| |-ParmVarDecl 0x5634745eeb50 <col:50, col:59> col:59 invalid x 'int'
| `-CompoundStmt 0x5634745eee18 <line:77:1, line:80:1>
|   `-DeclStmt 0x5634745eed28 <line:78:5, col:28>
|     `-VarDecl 0x5634745eecc0 <col:5, col:14> col:14 invalid v 'int'
|-FunctionDecl 0x5634745eef00 <line:83:1, line:101:1> line:83:24 invalid CountBits 'int (int)' static inline
| |-ParmVarDecl 0x5634745eee68 <col:34, col:43> col:43 invalid x 'int'
| |-CompoundStmt 0x5634745ef178 <line:84:1, line:101:1>
| | |-DeclStmt 0x5634745ef048 <line:95:5, col:16>
| | | `-VarDecl 0x5634745eefc0 <col:5, col:15> col:9 used ret 'int' cinit
| | |   `-IntegerLiteral 0x5634745ef028 <col:15> 'int' 0
| | `-ReturnStmt 0x5634745ef108 <line:100:5, col:12>
| |   `-ImplicitCastExpr 0x5634745ef0f0 <col:12> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5634745ef0d0 <col:12> 'int' lvalue Var 0x5634745eefc0 'ret' 'int'
| `-FullComment 0x56347475d3c0 <line:82:4, col:96>
|   `-ParagraphComment 0x56347475d390 <col:4, col:96>
|     `-TextComment 0x56347475d360 <col:4, col:96> Text=" Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. "
|-FunctionDecl 0x5634745ef310 <bitcoin/src/random.h:71:1, col:48> col:6 GetRandBytes 'void (unsigned char *, int) noexcept'
| |-ParmVarDecl 0x5634745ef1b0 <col:19, col:34> col:34 buf 'unsigned char *'
| |-ParmVarDecl 0x5634745ef230 <col:39, col:43> col:43 num 'int'
| `-FullComment 0x56347475d560 <line:64:3, line:69:15>
|   |-ParagraphComment 0x56347475d460 <line:64:3, col:46>
|   | `-TextComment 0x56347475d430 <col:3, col:46> Text=" Generate random data via the internal PRNG."
|   |-ParagraphComment 0x56347475d4d0 <line:66:3, line:67:46>
|   | |-TextComment 0x56347475d480 <line:66:3, col:84> Text=" These functions are designed to be fast (sub microsecond), but do not necessarily"
|   | `-TextComment 0x56347475d4a0 <line:67:3, col:46> Text=" meaningfully add entropy to the PRNG state."
|   `-ParagraphComment 0x56347475d520 <line:69:3, col:15>
|     `-TextComment 0x56347475d4f0 <col:3, col:15> Text=" Thread-safe."
|-FunctionDecl 0x5634745ef4c8 <line:72:1, col:33> col:10 invalid GetRand 'int (int) noexcept'
| `-ParmVarDecl 0x5634745ef3f8 <col:18, col:27> col:27 invalid nMax 'int'
|-FunctionDecl 0x5634745ef648 <line:73:1, col:81> col:27 invalid GetRandMicros 'int (int) noexcept'
| `-ParmVarDecl 0x5634745ef5a8 <col:41, col:67> col:67 invalid duration_max 'int'
|-FunctionDecl 0x5634745ef7a8 <line:74:1, col:26> col:5 GetRandInt 'int (int) noexcept'
| `-ParmVarDecl 0x5634745ef708 <col:16, col:20> col:20 nMax 'int'
|-FunctionDecl 0x5634745ef8d0 <line:75:1, col:23> col:9 GetRandHash 'uint256 () noexcept'
|-FunctionDecl 0x5634745efad0 <line:85:1, col:54> col:6 GetStrongRandBytes 'void (unsigned char *, int) noexcept'
| |-ParmVarDecl 0x5634745ef9b0 <col:25, col:40> col:40 buf 'unsigned char *'
| |-ParmVarDecl 0x5634745efa30 <col:45, col:49> col:49 num 'int'
| `-FullComment 0x56347475d700 <line:78:3, line:83:15>
|   |-ParagraphComment 0x56347475d620 <line:78:3, line:79:33>
|   | |-TextComment 0x56347475d5d0 <line:78:3, col:75> Text=" Gather entropy from various sources, feed it into the internal PRNG, and"
|   | `-TextComment 0x56347475d5f0 <line:79:3, col:33> Text=" generate random data using it."
|   |-ParagraphComment 0x56347475d670 <line:81:3, col:62>
|   | `-TextComment 0x56347475d640 <col:3, col:62> Text=" This function will cause failure whenever the OS RNG fails."
|   `-ParagraphComment 0x56347475d6c0 <line:83:3, col:15>
|     `-TextComment 0x56347475d690 <col:3, col:15> Text=" Thread-safe."
|-FunctionDecl 0x5634745efbc8 <line:92:1, col:23> col:6 RandAddSeedSleep 'void ()'
| `-FullComment 0x56347475d820 <line:88:3, line:90:15>
|   |-ParagraphComment 0x56347475d7a0 <line:88:3, col:87>
|   | `-TextComment 0x56347475d770 <col:3, col:87> Text=" Sleep for 1ms, gather entropy from various sources, and feed them to the PRNG state."
|   `-ParagraphComment 0x56347475d7f0 <line:90:3, col:15>
|     `-TextComment 0x56347475d7c0 <col:3, col:15> Text=" Thread-safe."
|-CXXRecordDecl 0x5634745efc98 <line:100:1, line:194:1> line:100:7 referenced invalid class FastRandomContext definition
| |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists trivial user_declared
| | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | |-MoveAssignment exists non_trivial user_declared
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347475d960 <line:95:3, line:98:33>
| | |-ParagraphComment 0x56347475d8e0 <line:95:3, line:96:75>
| | | |-TextComment 0x56347475d890 <line:95:3, col:75> Text=" Fast randomness source. This is seeded once with secure random data, but"
| | | `-TextComment 0x56347475d8b0 <line:96:3, col:75> Text=" is completely deterministic and does not gather more entropy after that."
| | `-ParagraphComment 0x56347475d930 <line:98:3, col:33>
| |   `-TextComment 0x56347475d900 <col:3, col:33> Text=" This class is not thread-safe."
| |-CXXRecordDecl 0x5634745efe00 <line:100:1, col:7> col:7 implicit referenced class FastRandomContext
| |-AccessSpecDecl 0x5634745efe90 <line:101:1, col:8> col:1 private
| |-FieldDecl 0x5634745efec8 <line:102:5, col:10> col:10 referenced requires_seed 'bool'
| |-FieldDecl 0x5634745eff28 <line:103:5, col:14> col:14 invalid rng 'ChaCha20'
| |-FieldDecl 0x5634745f0020 <line:105:5, col:29> col:19 referenced bytebuf 'unsigned char [64]'
| |-FieldDecl 0x5634745f0088 <line:106:5, col:9> col:9 referenced bytebuf_size 'int'
| |-FieldDecl 0x5634745f0100 <line:108:5, col:14> col:14 invalid bitbuf 'int'
| |-FieldDecl 0x5634745f0168 <line:109:5, col:9> col:9 referenced bitbuf_size 'int'
| |-CXXMethodDecl 0x5634745f0208 <line:111:5, col:21> col:10 used RandomSeed 'void ()'
| |-CXXMethodDecl 0x5634745f02c8 <line:113:5, line:120:5> line:113:10 used FillByteBuffer 'void ()'
| | `-CompoundStmt 0x5634745f1ca8 <line:114:5, line:120:5>
| |   |-IfStmt 0x5634745f1ac8 <line:115:9, line:117:9>
| |   | |-ImplicitCastExpr 0x5634745f1a38 <line:115:13> 'bool' <LValueToRValue>
| |   | | `-MemberExpr 0x5634745f1a08 <col:13> 'bool' lvalue ->requires_seed 0x5634745efec8
| |   | |   `-CXXThisExpr 0x5634745f19f8 <col:13> 'FastRandomContext *' implicit this
| |   | `-CompoundStmt 0x5634745f1ab0 <col:28, line:117:9>
| |   |   `-CXXMemberCallExpr 0x5634745f1a90 <line:116:13, col:24> 'void'
| |   |     `-MemberExpr 0x5634745f1a60 <col:13> '<bound member function type>' ->RandomSeed 0x5634745f0208
| |   |       `-CXXThisExpr 0x5634745f1a50 <col:13> 'FastRandomContext *' implicit this
| |   `-BinaryOperator 0x5634745f1c88 <line:119:9, col:38> 'int' lvalue '='
| |     |-MemberExpr 0x5634745f1bc0 <col:9> 'int' lvalue ->bytebuf_size 0x5634745f0088
| |     | `-CXXThisExpr 0x5634745f1bb0 <col:9> 'FastRandomContext *' implicit this
| |     `-ImplicitCastExpr 0x5634745f1c70 <col:24, col:38> 'int' <IntegralCast>
| |       `-UnaryExprOrTypeTraitExpr 0x5634745f1c50 <col:24, col:38> 'unsigned long' sizeof
| |         `-ParenExpr 0x5634745f1c30 <col:30, col:38> 'unsigned char [64]' lvalue
| |           `-MemberExpr 0x5634745f1c00 <col:31> 'unsigned char [64]' lvalue ->bytebuf 0x5634745f0020 non_odr_use_unevaluated
| |             `-CXXThisExpr 0x5634745f1bf0 <col:31> 'FastRandomContext *' implicit this
| |-CXXMethodDecl 0x5634745f0388 <line:122:5, line:126:5> line:122:10 used FillBitBuffer 'void ()'
| | `-CompoundStmt 0x5634745f1d68 <line:123:5, line:126:5>
| |   `-BinaryOperator 0x5634745f1d48 <line:125:9, col:23> 'int' lvalue '='
| |     |-MemberExpr 0x5634745f1cf8 <col:9> 'int' lvalue ->bitbuf_size 0x5634745f0168
| |     | `-CXXThisExpr 0x5634745f1ce8 <col:9> 'FastRandomContext *' implicit this
| |     `-IntegerLiteral 0x5634745f1d28 <col:23> 'int' 64
| |-AccessSpecDecl 0x5634745f0428 <line:128:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745f0540 <line:129:5, col:61> col:14 used FastRandomContext 'void (bool) noexcept'
| | `-ParmVarDecl 0x5634745f0460 <col:32, col:54> col:37 fDeterministic 'bool' cinit
| |   `-CXXBoolLiteralExpr 0x5634745f19e8 <col:54> 'bool' false
| |-CXXConstructorDecl 0x5634745f06f0 <line:132:5, col:53> col:14 FastRandomContext 'void (const uint256 &) noexcept'
| | |-ParmVarDecl 0x5634745f0628 <col:32, col:47> col:47 seed 'const uint256 &'
| | `-FullComment 0x56347475da30 <line:131:8, col:57>
| |   `-ParagraphComment 0x56347475da00 <col:8, col:57>
| |     `-TextComment 0x56347475d9d0 <col:8, col:57> Text=" Initialize with explicit seed (only for testing) "
| |-CXXConstructorDecl 0x5634745f0898 <line:135:5, col:56> col:5 FastRandomContext 'void (const FastRandomContext &)' delete trivial
| | `-ParmVarDecl 0x5634745f07d8 <col:23, col:46> col:47 'const FastRandomContext &'
| |-CXXConstructorDecl 0x5634745f0a48 <line:136:5, col:51> col:5 FastRandomContext 'void (FastRandomContext &&)' delete trivial
| | `-ParmVarDecl 0x5634745f0988 <col:23, col:40> col:42 'FastRandomContext &&'
| |-CXXMethodDecl 0x5634745f0bf8 <line:137:5, col:67> col:24 operator= 'FastRandomContext &(const FastRandomContext &)' delete trivial
| | `-ParmVarDecl 0x5634745f0b08 <col:34, col:57> col:58 'const FastRandomContext &'
| |-CXXMethodDecl 0x5634745f0e10 <line:140:5, col:60> col:24 operator= 'FastRandomContext &(FastRandomContext &&) noexcept'
| | |-ParmVarDecl 0x5634745f0cd8 <col:34, col:54> col:54 from 'FastRandomContext &&'
| | `-FullComment 0x56347475db00 <line:139:8, col:90>
| |   `-ParagraphComment 0x56347475dad0 <col:8, col:90>
| |     `-TextComment 0x56347475daa0 <col:8, col:90> Text=" Move a FastRandomContext. If the original one is used again, it will be reseeded. "
| |-CXXMethodDecl 0x5634745f0f58 <line:143:5, line:149:5> line:143:14 invalid rand64 'int () noexcept'
| | |-CompoundStmt 0x5634745f2c80 <line:144:5, line:149:5>
| | | |-IfStmt 0x5634745f2a20 <line:145:9, col:46>
| | | | |-BinaryOperator 0x5634745f29a0 <col:13, col:28> 'bool' '<'
| | | | | |-ImplicitCastExpr 0x5634745f1de0 <col:13> 'int' <LValueToRValue>
| | | | | | `-MemberExpr 0x5634745f1d90 <col:13> 'int' lvalue ->bytebuf_size 0x5634745f0088
| | | | | |   `-CXXThisExpr 0x5634745f1d80 <col:13> 'FastRandomContext *' implicit this
| | | | | `-IntegerLiteral 0x5634745f1dc0 <col:28> 'int' 8
| | | | `-CXXMemberCallExpr 0x5634745f2a00 <col:31, col:46> 'void'
| | | |   `-MemberExpr 0x5634745f29d0 <col:31> '<bound member function type>' ->FillByteBuffer 0x5634745f02c8
| | | |     `-CXXThisExpr 0x5634745f29c0 <col:31> 'FastRandomContext *' implicit this
| | | |-DeclStmt 0x5634745f2bd8 <line:146:9, col:61>
| | | | `-VarDecl 0x5634745f2a60 <col:9, col:18> col:18 invalid ret 'int'
| | | `-CompoundAssignOperator 0x5634745f2c50 <line:147:9, col:25> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
| | |   |-MemberExpr 0x5634745f2c00 <col:9> 'int' lvalue ->bytebuf_size 0x5634745f0088
| | |   | `-CXXThisExpr 0x5634745f2bf0 <col:9> 'FastRandomContext *' implicit this
| | |   `-IntegerLiteral 0x5634745f2c30 <col:25> 'int' 8
| | `-FullComment 0x56347475dbd0 <line:142:8, col:42>
| |   `-ParagraphComment 0x56347475dba0 <col:8, col:42>
| |     `-TextComment 0x56347475db70 <col:8, col:42> Text=" Generate a random 64-bit integer. "
| |-CXXMethodDecl 0x5634745f10f0 <line:152:5, line:164:5> line:152:14 invalid randbits 'int (int) noexcept'
| | |-ParmVarDecl 0x5634745f1050 <col:23, col:27> col:27 used bits 'int'
| | |-CompoundStmt 0x5634745f31c8 <col:42, line:164:5>
| | | `-IfStmt 0x5634745f31a0 <line:153:9, line:163:9> has_else
| | |   |-BinaryOperator 0x5634745f2d00 <line:153:13, col:21> 'bool' '=='
| | |   | |-ImplicitCastExpr 0x5634745f2ce8 <col:13> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x5634745f2ca8 <col:13> 'int' lvalue ParmVar 0x5634745f1050 'bits' 'int'
| | |   | `-IntegerLiteral 0x5634745f2cc8 <col:21> 'int' 0
| | |   |-CompoundStmt 0x5634745f2d50 <col:24, line:155:9>
| | |   | `-ReturnStmt 0x5634745f2d40 <line:154:13, col:20>
| | |   |   `-IntegerLiteral 0x5634745f2d20 <col:20> 'int' 0
| | |   `-IfStmt 0x5634745f3178 <line:155:16, line:163:9> has_else
| | |     |-BinaryOperator 0x5634745f2dc0 <line:155:20, col:27> 'bool' '>'
| | |     | |-ImplicitCastExpr 0x5634745f2da8 <col:20> 'int' <LValueToRValue>
| | |     | | `-DeclRefExpr 0x5634745f2d68 <col:20> 'int' lvalue ParmVar 0x5634745f1050 'bits' 'int'
| | |     | `-IntegerLiteral 0x5634745f2d88 <col:27> 'int' 32
| | |     |-CompoundStmt 0x5634745f2e88 <col:31, line:157:9>
| | |     `-CompoundStmt 0x5634745f3150 <col:16, line:163:9>
| | |       |-IfStmt 0x5634745f2fa8 <line:158:13, col:51>
| | |       | |-BinaryOperator 0x5634745f2f28 <col:17, col:31> 'bool' '<'
| | |       | | |-ImplicitCastExpr 0x5634745f2ef8 <col:17> 'int' <LValueToRValue>
| | |       | | | `-MemberExpr 0x5634745f2ea8 <col:17> 'int' lvalue ->bitbuf_size 0x5634745f0168
| | |       | | |   `-CXXThisExpr 0x5634745f2e98 <col:17> 'FastRandomContext *' implicit this
| | |       | | `-ImplicitCastExpr 0x5634745f2f10 <col:31> 'int' <LValueToRValue>
| | |       | |   `-DeclRefExpr 0x5634745f2ed8 <col:31> 'int' lvalue ParmVar 0x5634745f1050 'bits' 'int'
| | |       | `-CXXMemberCallExpr 0x5634745f2f88 <col:37, col:51> 'void'
| | |       |   `-MemberExpr 0x5634745f2f58 <col:37> '<bound member function type>' ->FillBitBuffer 0x5634745f0388
| | |       |     `-CXXThisExpr 0x5634745f2f48 <col:37> 'FastRandomContext *' implicit this
| | |       |-DeclStmt 0x5634745f3060 <line:159:13, col:66>
| | |       | `-VarDecl 0x5634745f2fe8 <col:13, col:22> col:22 invalid ret 'int'
| | |       `-CompoundAssignOperator 0x5634745f3120 <line:161:13, col:28> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
| | |         |-MemberExpr 0x5634745f30b8 <col:13> 'int' lvalue ->bitbuf_size 0x5634745f0168
| | |         | `-CXXThisExpr 0x5634745f30a8 <col:13> 'FastRandomContext *' implicit this
| | |         `-ImplicitCastExpr 0x5634745f3108 <col:28> 'int' <LValueToRValue>
| | |           `-DeclRefExpr 0x5634745f30e8 <col:28> 'int' lvalue ParmVar 0x5634745f1050 'bits' 'int'
| | `-FullComment 0x56347475dca0 <line:151:8, col:46>
| |   `-ParagraphComment 0x56347475dc70 <col:8, col:46>
| |     `-TextComment 0x56347475dc40 <col:8, col:46> Text=" Generate a random (bits)-bit integer. "
| |-CXXMethodDecl 0x5634745f12a0 <line:167:5, line:175:5> line:167:14 invalid randrange 'int (int) noexcept'
| | |-ParmVarDecl 0x5634745f1200 <col:24, col:33> col:33 invalid range 'int'
| | |-CompoundStmt 0x5634745f3390 <line:168:5, line:175:5>
| | | |-DeclStmt 0x5634745f3260 <line:170:9, col:36>
| | | | `-VarDecl 0x5634745f31f8 <col:9, col:13> col:13 used bits 'int'
| | | `-WhileStmt 0x5634745f3378 <line:171:9, line:174:9>
| | |   |-CXXBoolLiteralExpr 0x5634745f3278 <line:171:16> 'bool' true
| | |   `-CompoundStmt 0x5634745f3360 <col:22, line:174:9>
| | |     `-DeclStmt 0x5634745f3348 <line:172:13, col:42>
| | |       `-VarDecl 0x5634745f32b0 <col:13, col:22> col:22 invalid ret 'int'
| | `-FullComment 0x56347475dd70 <line:166:8, col:59>
| |   `-ParagraphComment 0x56347475dd40 <col:8, col:59>
| |     `-TextComment 0x56347475dd10 <col:8, col:59> Text=" Generate a random integer in the range [0..range). "
| |-CXXMethodDecl 0x5634745f1408 <line:181:5, col:55> col:14 invalid rand32 'int () noexcept'
| | |-CompoundStmt 0x5634745f33e0 <col:32, col:55>
| | `-FullComment 0x56347475de40 <line:180:8, col:42>
| |   `-ParagraphComment 0x56347475de10 <col:8, col:42>
| |     `-TextComment 0x56347475dde0 <col:8, col:42> Text=" Generate a random 32-bit integer. "
| |-CXXMethodDecl 0x5634745f1500 <line:184:5, col:23> col:13 rand256 'uint256 () noexcept'
| | `-FullComment 0x56347475df10 <line:183:8, col:35>
| |   `-ParagraphComment 0x56347475dee0 <col:8, col:35>
| |     `-TextComment 0x56347475deb0 <col:8, col:35> Text=" generate a random uint256. "
| |-CXXMethodDecl 0x5634745f1620 <line:187:5, col:52> col:10 randbool 'bool () noexcept'
| | |-CompoundStmt 0x5634745f3420 <col:30, col:52>
| | `-FullComment 0x56347475dfe0 <line:186:8, col:35>
| |   `-ParagraphComment 0x56347475dfb0 <col:8, col:35>
| |     `-TextComment 0x56347475df80 <col:8, col:35> Text=" Generate a random boolean. "
| |-TypedefDecl 0x5634745f16e8 <line:190:5, col:22> col:22 invalid result_type 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-CXXMethodDecl 0x5634745f1778 <line:191:5, col:49> col:31 invalid constexpr min 'int ()' static
| | `-CompoundStmt 0x5634745f3460 <col:37, col:49>
| |   `-ReturnStmt 0x5634745f3450 <col:39, col:46>
| |     `-IntegerLiteral 0x5634745f3430 <col:46> 'int' 0
| |-CXXMethodDecl 0x5634745f1850 <line:192:5, col:84> col:31 invalid constexpr max 'int ()' static
| | `-CompoundStmt 0x5634745f3498 <col:37, col:84>
| `-CXXMethodDecl 0x5634745f1930 <line:193:5, col:62> col:21 invalid operator() 'int () noexcept' inline
|   `-CompoundStmt 0x5634745f34b8 <col:43, col:62>
|-FunctionTemplateDecl 0x5634745f38e8 <line:206:1, line:217:1> line:207:6 Shuffle
| |-TemplateTypeParmDecl 0x5634745f34f8 <line:206:10, col:19> col:19 referenced typename depth 0 index 0 I
| |-TemplateTypeParmDecl 0x5634745f3568 <col:22, col:31> col:31 referenced typename depth 0 index 1 R
| |-FunctionDecl 0x5634745f3848 <line:207:1, line:217:1> line:207:6 Shuffle 'void (I, I, R &&)'
| | |-ParmVarDecl 0x5634745f3608 <col:14, col:16> col:16 referenced first 'I'
| | |-ParmVarDecl 0x5634745f3680 <col:23, col:25> col:25 referenced last 'I'
| | |-ParmVarDecl 0x5634745f3728 <col:31, col:35> col:35 referenced rng 'R &&'
| | |-CompoundStmt 0x5634745f3cb8 <line:208:1, line:217:1>
| | | `-WhileStmt 0x5634745f3ca0 <line:209:5, line:216:5>
| | |   |-BinaryOperator 0x5634745f39b0 <line:209:12, col:21> '<dependent type>' '!='
| | |   | |-DeclRefExpr 0x5634745f3958 <col:12> 'I' lvalue ParmVar 0x5634745f3608 'first' 'I'
| | |   | `-DeclRefExpr 0x5634745f3978 <col:21> 'I' lvalue ParmVar 0x5634745f3680 'last' 'I'
| | |   `-CompoundStmt 0x5634745f3c78 <col:27, line:216:5>
| | |     |-DeclStmt 0x5634745f3b50 <line:210:9, col:47>
| | |     | `-VarDecl 0x5634745f39f8 <col:9, col:16> col:16 invalid j 'int'
| | |     |-IfStmt 0x5634745f3c28 <line:211:9, line:214:9>
| | |     | |-OpaqueValueExpr 0x5634745f3c10 <<invalid sloc>> 'bool'
| | |     | `-CompoundStmt 0x5634745f3c00 <line:211:16, line:214:9>
| | |     `-UnaryOperator 0x5634745f3c60 <line:215:9, col:11> '<dependent type>' prefix '++' cannot overflow
| | |       `-DeclRefExpr 0x5634745f3c40 <col:11> 'I' lvalue ParmVar 0x5634745f3608 'first' 'I'
| | `-FullComment 0x563474760410 <line:196:4, line:204:86>
| |   |-ParagraphComment 0x563474760220 <line:196:4, col:66>
| |   | `-TextComment 0x5634747601f0 <col:4, col:66> Text=" More efficient than using std::shuffle on a FastRandomContext."
| |   |-ParagraphComment 0x563474760290 <line:198:3, line:199:43>
| |   | |-TextComment 0x563474760240 <line:198:3, col:75> Text=" This is more efficient as std::shuffle will consume entropy in groups of"
| |   | `-TextComment 0x563474760260 <line:199:3, col:43> Text=" 64 bits at the time and throw away most."
| |   `-ParagraphComment 0x5634747603d0 <line:201:3, line:204:86>
| |     |-TextComment 0x5634747602b0 <line:201:3, col:72> Text=" This also works around a bug in libstdc++ std::shuffle that may cause"
| |     |-TextComment 0x5634747602d0 <line:202:3, col:23> Text=" type::operator=(type"
| |     |-TextComment 0x5634747602f0 <col:24> Text="&"
| |     |-TextComment 0x563474760310 <col:25> Text="&"
| |     |-TextComment 0x563474760330 <col:26, col:71> Text=") to be invoked on itself, which the library's"
| |     |-TextComment 0x563474760350 <line:203:3, col:63> Text=" debug mode detects and panics on. This is a known issue, see"
| |     `-TextComment 0x563474760370 <line:204:3, col:86> Text=" https://stackoverflow.com/questions/22915325/avoiding-self-assignment-in-stdshuffle"
| `-FullComment 0x563474760180 <line:196:4, line:204:86>
|   |-ParagraphComment 0x56347475e100 <line:196:4, col:66>
|   | `-TextComment 0x56347475e0d0 <col:4, col:66> Text=" More efficient than using std::shuffle on a FastRandomContext."
|   |-ParagraphComment 0x56347475e170 <line:198:3, line:199:43>
|   | |-TextComment 0x56347475e120 <line:198:3, col:75> Text=" This is more efficient as std::shuffle will consume entropy in groups of"
|   | `-TextComment 0x56347475e140 <line:199:3, col:43> Text=" 64 bits at the time and throw away most."
|   `-ParagraphComment 0x563474760140 <line:201:3, line:204:86>
|     |-TextComment 0x56347475e190 <line:201:3, col:72> Text=" This also works around a bug in libstdc++ std::shuffle that may cause"
|     |-TextComment 0x563474760040 <line:202:3, col:23> Text=" type::operator=(type"
|     |-TextComment 0x563474760060 <col:24> Text="&"
|     |-TextComment 0x563474760080 <col:25> Text="&"
|     |-TextComment 0x5634747600a0 <col:26, col:71> Text=") to be invoked on itself, which the library's"
|     |-TextComment 0x5634747600c0 <line:203:3, col:63> Text=" debug mode detects and panics on. This is a known issue, see"
|     `-TextComment 0x5634747600e0 <line:204:3, col:86> Text=" https://stackoverflow.com/questions/22915325/avoiding-self-assignment-in-stdshuffle"
|-VarDecl 0x5634745f3ce8 <line:224:1, col:40> col:18 NUM_OS_RANDOM_BYTES 'const int' static cinit
| `-IntegerLiteral 0x5634745f3d50 <col:40> 'int' 32
|-FunctionDecl 0x5634745f3ed8 <line:229:1, col:36> col:6 GetOSRand 'void (unsigned char *)'
| |-ParmVarDecl 0x5634745f3e10 <col:16, col:31> col:31 ent32 'unsigned char *'
| `-FullComment 0x563474760500 <line:226:4, line:227:30>
|   `-ParagraphComment 0x5634747604d0 <line:226:4, line:227:30>
|     |-TextComment 0x563474760480 <line:226:4, col:76> Text=" Get 32 bytes of system entropy. Do not use this in application code: use"
|     `-TextComment 0x5634747604a0 <line:227:3, col:30> Text=" GetStrongRandBytes instead."
|-FunctionDecl 0x5634745f3fc8 <line:234:1, col:25> col:6 Random_SanityCheck 'bool ()'
| `-FullComment 0x5634747605f0 <line:231:4, line:232:12>
|   `-ParagraphComment 0x5634747605c0 <line:231:4, line:232:12>
|     |-TextComment 0x563474760570 <line:231:4, col:76> Text=" Check that OS randomness is available and returning the requested number"
|     `-TextComment 0x563474760590 <line:232:3, col:12> Text=" of bytes."
|-FunctionDecl 0x5634745f40b8 <line:242:1, col:17> col:6 RandomInit 'void ()'
| `-FullComment 0x563474760730 <line:237:3, line:240:30>
|   |-ParagraphComment 0x563474760690 <line:237:3, col:70>
|   | `-TextComment 0x563474760660 <col:3, col:70> Text=" Initialize global RNG state and log any CPU features that are used."
|   `-ParagraphComment 0x563474760700 <line:239:3, line:240:30>
|     |-TextComment 0x5634747606b0 <line:239:3, col:78> Text=" Calling this function is optional. RNG state will be initialized when first"
|     `-TextComment 0x5634747606d0 <line:240:3, col:30> Text=" needed if it is not called."
|-FunctionDecl 0x5634745f4538 <bitcoin/src/sync.h:65:1, col:117> col:20 referenced EnterCritical 'void (const char *, const char *, int, void *, bool)' static inline
| |-ParmVarDecl 0x5634745f4230 <col:34, col:46> col:46 pszName 'const char *'
| |-ParmVarDecl 0x5634745f42b0 <col:55, col:67> col:67 pszFile 'const char *'
| |-ParmVarDecl 0x5634745f4330 <col:76, col:80> col:80 nLine 'int'
| |-ParmVarDecl 0x5634745f43b0 <col:87, col:93> col:93 cs 'void *'
| |-ParmVarDecl 0x5634745f4428 <col:97, col:109> col:102 fTry 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5634745f4490 <col:109> 'bool' false
| `-CompoundStmt 0x5634745f4600 <col:116, col:117>
|-FunctionDecl 0x5634745f4630 <line:66:1, col:37> col:20 referenced LeaveCritical 'void ()' static inline
| `-CompoundStmt 0x5634745f46d0 <col:36, col:37>
|-FunctionDecl 0x5634745f9d90 <line:67:1, col:133> col:20 AssertLockHeldInternal 'void (const char *, const char *, int, void *)' static inline
| |-ParmVarDecl 0x5634745f46f8 <col:43, col:55> col:55 pszName 'const char *'
| |-ParmVarDecl 0x5634745f4778 <col:64, col:76> col:76 pszFile 'const char *'
| |-ParmVarDecl 0x5634745f47f8 <col:85, col:89> col:89 nLine 'int'
| |-ParmVarDecl 0x5634745f4878 <col:96, col:102> col:102 referenced cs 'void *'
| |-CompoundStmt 0x5634745f9ec8 <col:132, col:133>
| `-AssertExclusiveLockAttr 0x5634745f9e70 <bitcoin/src/threadsafety.h:34:49, col:82>
|   `-DeclRefExpr 0x5634745f9e50 <bitcoin/src/sync.h:67:128> 'void *' lvalue ParmVar 0x5634745f4878 'cs' 'void *' non_odr_use_unevaluated
|-FunctionDecl 0x5634745fa118 <line:68:1, col:110> col:20 AssertLockNotHeldInternal 'void (const char *, const char *, int, void *)' static inline
| |-ParmVarDecl 0x5634745f9ef0 <col:46, col:58> col:58 pszName 'const char *'
| |-ParmVarDecl 0x5634745f9f70 <col:67, col:79> col:79 pszFile 'const char *'
| |-ParmVarDecl 0x5634745f9ff0 <col:88, col:92> col:92 nLine 'int'
| |-ParmVarDecl 0x5634745fa070 <col:99, col:105> col:105 cs 'void *'
| `-CompoundStmt 0x5634745fa1d8 <col:109, col:110>
|-FunctionDecl 0x5634745fa2c8 <line:69:1, col:42> col:20 referenced DeleteLock 'void (void *)' static inline
| |-ParmVarDecl 0x5634745fa200 <col:31, col:37> col:37 cs 'void *'
| `-CompoundStmt 0x5634745fa398 <col:41, col:42>
|-ClassTemplateDecl 0x5634745fa4c0 <line:78:1, line:102:1> line:79:16 AnnotatedMixin
| |-TemplateTypeParmDecl 0x5634745fa3a8 <line:78:11, col:20> col:20 referenced typename depth 0 index 0 PARENT
| |-CXXRecordDecl 0x5634745fa430 <line:79:1, line:102:1> line:79:16 class AnnotatedMixin definition
| | |-DefinitionData empty standard_layout has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment
| | | `-Destructor non_trivial user_declared
| | |-public 'PARENT'
| | |-CapabilityAttr 0x5634745fa710 <bitcoin/src/threadsafety.h:16:33> capability "mutex"
| | |-FullComment 0x563474760910 <bitcoin/src/sync.h:75:3, line:76:41>
| | | `-ParagraphComment 0x5634747608e0 <line:75:3, line:76:41>
| | |   |-TextComment 0x563474760890 <line:75:3, col:78> Text=" Template mixin that adds -Wthread-safety locking annotations and lock order"
| | |   `-TextComment 0x5634747608b0 <line:76:3, col:41> Text=" checking to a subset of the mutex API."
| | |-CXXRecordDecl 0x5634745fa7a0 <line:79:1, col:16> col:16 implicit referenced class AnnotatedMixin
| | |-AccessSpecDecl 0x5634745fa830 <line:81:1, col:7> col:1 public
| | |-CXXDestructorDecl 0x5634745fa8d0 <line:82:5, line:84:5> line:82:5 ~AnnotatedMixin<PARENT> 'void ()'
| | | `-CompoundStmt 0x5634745fe788 <col:23, line:84:5>
| | |   `-CallExpr 0x5634745fe760 <line:83:9, col:31> 'void'
| | |     |-ImplicitCastExpr 0x5634745fe748 <col:9> 'void (*)(void *)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5634745fe700 <col:9> 'void (void *)' lvalue Function 0x5634745fa2c8 'DeleteLock' 'void (void *)'
| | |     `-CStyleCastExpr 0x5634745fad60 <col:20, col:27> 'void *' <Dependent>
| | |       `-CXXThisExpr 0x5634745fad38 <col:27> 'AnnotatedMixin<PARENT> *' this
| | |-CXXMethodDecl 0x5634745fa9a0 <line:86:5, line:89:5> line:86:10 lock 'void ()'
| | | |-CompoundStmt 0x5634745fe870 <line:87:5, line:89:5>
| | | | `-CallExpr 0x5634745fe850 <line:88:9, col:22> '<dependent type>'
| | | |   `-CXXDependentScopeMemberExpr 0x5634745fe808 <col:9, col:17> '<dependent type>' lvalue ->lock
| | | `-AcquireCapabilityAttr 0x5634745fabe0 <bitcoin/src/threadsafety.h:24:53, col:88> exclusive_lock_function
| | |-CXXMethodDecl 0x5634745faa60 <bitcoin/src/sync.h:91:5, line:94:5> line:91:10 unlock 'void ()'
| | | |-CompoundStmt 0x5634745fe940 <line:92:5, line:94:5>
| | | | `-CallExpr 0x5634745fe920 <line:93:9, col:24> '<dependent type>'
| | | |   `-CXXDependentScopeMemberExpr 0x5634745fe8d8 <col:9, col:17> '<dependent type>' lvalue ->unlock
| | | `-ReleaseCapabilityAttr 0x5634745fac30 <bitcoin/src/threadsafety.h:28:45, col:72> unlock_function
| | `-CXXMethodDecl 0x5634745fab20 <bitcoin/src/sync.h:96:5, line:99:5> line:96:10 try_lock 'bool ()'
| |   |-CompoundStmt 0x5634745fea08 <line:97:5, line:99:5>
| |   | `-ReturnStmt 0x5634745fe9f8 <line:98:9, col:33>
| |   |   `-CallExpr 0x5634745fe9d8 <col:16, col:33> '<dependent type>'
| |   |     `-CXXDependentScopeMemberExpr 0x5634745fe990 <col:16, col:24> '<dependent type>' lvalue ->try_lock
| |   `-ExclusiveTrylockFunctionAttr 0x5634745fac90 <bitcoin/src/threadsafety.h:26:56, col:94>
| |     `-CXXBoolLiteralExpr 0x5634745fac80 <bitcoin/src/sync.h:96:48> 'bool' true
| `-FullComment 0x563474760820 <line:75:3, line:76:41>
|   `-ParagraphComment 0x5634747607f0 <line:75:3, line:76:41>
|     |-TextComment 0x5634747607a0 <line:75:3, col:78> Text=" Template mixin that adds -Wthread-safety locking annotations and lock order"
|     `-TextComment 0x5634747607c0 <line:76:3, col:41> Text=" checking to a subset of the mutex API."
|-TypedefDecl 0x5634745fea80 <line:109:1, col:46> col:46 referenced invalid CCriticalSection 'int'
| `-BuiltinType 0x5634744cb780 'int'
|-TypedefDecl 0x5634745feb30 <line:112:1, col:36> col:36 referenced invalid Mutex 'int'
| |-BuiltinType 0x5634744cb780 'int'
| `-FullComment 0x5634747609e0 <line:111:4, col:62>
|   `-ParagraphComment 0x5634747609b0 <col:4, col:62>
|     `-TextComment 0x563474760980 <col:4, col:62> Text=" Wrapped mutex: supports waiting but not recursive locking "
|-ClassTemplateDecl 0x5634745fee68 <line:119:1, line:175:1> line:120:23 UniqueLock
| |-TemplateTypeParmDecl 0x5634745febb8 <line:119:11, col:20> col:20 referenced typename depth 0 index 0 Mutex
| |-TemplateTypeParmDecl 0x5634745fed40 <col:27, col:59> col:36 referenced typename depth 0 index 1 Base
| | `-TemplateArgument type 'typename Mutex::UniqueLock'
| |-CXXRecordDecl 0x5634745fedd8 <line:120:1, line:175:1> line:120:23 class UniqueLock definition
| | |-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment
| | | `-Destructor non_trivial user_declared
| | |-public 'Base'
| | |-ScopedLockableAttr 0x5634745ff100 <bitcoin/src/threadsafety.h:17:40>
| | |-FullComment 0x563474760b80 <bitcoin/src/sync.h:118:4, col:58>
| | | `-ParagraphComment 0x563474760b50 <col:4, col:58>
| | |   `-TextComment 0x563474760b20 <col:4, col:58> Text=" Wrapper around std::unique_lock style lock for Mutex. "
| | |-CXXRecordDecl 0x5634745ff180 <line:120:1, col:23> col:23 implicit referenced class UniqueLock
| | |-AccessSpecDecl 0x5634745ff210 <line:122:1, col:8> col:1 private
| | |-CXXMethodDecl 0x5634745ff468 <line:123:5, line:134:5> line:123:10 referenced Enter 'void (const char *, const char *, int)'
| | | |-ParmVarDecl 0x5634745ff250 <col:16, col:28> col:28 referenced pszName 'const char *'
| | | |-ParmVarDecl 0x5634745ff2d0 <col:37, col:49> col:49 referenced pszFile 'const char *'
| | | |-ParmVarDecl 0x5634745ff350 <col:58, col:62> col:62 referenced nLine 'int'
| | | `-CompoundStmt 0x563474602a80 <line:124:5, line:134:5>
| | |   |-CallExpr 0x563474601670 <line:125:9, col:70> 'void'
| | |   | |-ImplicitCastExpr 0x563474601658 <col:9> 'void (*)(const char *, const char *, int, void *, bool)' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x563474601608 <col:9> 'void (const char *, const char *, int, void *, bool)' lvalue Function 0x5634745f4538 'EnterCritical' 'void (const char *, const char *, int, void *, bool)'
| | |   | |-ImplicitCastExpr 0x5634746016b8 <col:23> 'const char *' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x563474601458 <col:23> 'const char *' lvalue ParmVar 0x5634745ff250 'pszName' 'const char *'
| | |   | |-ImplicitCastExpr 0x5634746016d0 <col:32> 'const char *' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x563474601478 <col:32> 'const char *' lvalue ParmVar 0x5634745ff2d0 'pszFile' 'const char *'
| | |   | |-ImplicitCastExpr 0x563474602990 <col:41> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x563474601498 <col:41> 'int' lvalue ParmVar 0x5634745ff350 'nLine' 'int'
| | |   | |-CStyleCastExpr 0x5634746015e0 <col:48, col:69> 'void *' <Dependent>
| | |   | | `-ParenExpr 0x5634746015c0 <col:55, col:69> '<dependent type>'
| | |   | |   `-CallExpr 0x563474601568 <col:56, col:68> '<dependent type>'
| | |   | |     `-CXXDependentScopeMemberExpr 0x563474601520 <col:56, col:62> '<dependent type>' lvalue ->mutex
| | |   | `-CXXDefaultArgExpr 0x5634746029a8 <<invalid sloc>> 'bool'
| | |   `-CallExpr 0x563474602a60 <line:130:13, col:24> '<dependent type>'
| | |     `-CXXDependentScopeMemberExpr 0x563474602a18 <col:13, col:19> '<dependent type>' lvalue ->lock
| | |-CXXMethodDecl 0x563474600728 <line:136:5, line:143:5> line:136:10 referenced TryEnter 'bool (const char *, const char *, int)'
| | | |-ParmVarDecl 0x5634745ff538 <col:19, col:31> col:31 referenced pszName 'const char *'
| | | |-ParmVarDecl 0x5634745ff5b8 <col:40, col:52> col:52 referenced pszFile 'const char *'
| | | |-ParmVarDecl 0x5634745ff638 <col:61, col:65> col:65 referenced nLine 'int'
| | | `-CompoundStmt 0x563474603058 <line:137:5, line:143:5>
| | |   |-CallExpr 0x563474602cc8 <line:138:9, col:76> 'void'
| | |   | |-ImplicitCastExpr 0x563474602cb0 <col:9> 'void (*)(const char *, const char *, int, void *, bool)' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x563474602c90 <col:9> 'void (const char *, const char *, int, void *, bool)' lvalue Function 0x5634745f4538 'EnterCritical' 'void (const char *, const char *, int, void *, bool)'
| | |   | |-ImplicitCastExpr 0x563474602d10 <col:23> 'const char *' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x563474602ae8 <col:23> 'const char *' lvalue ParmVar 0x5634745ff538 'pszName' 'const char *'
| | |   | |-ImplicitCastExpr 0x563474602d28 <col:32> 'const char *' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x563474602b08 <col:32> 'const char *' lvalue ParmVar 0x5634745ff5b8 'pszFile' 'const char *'
| | |   | |-ImplicitCastExpr 0x563474602d40 <col:41> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x563474602b28 <col:41> 'int' lvalue ParmVar 0x5634745ff638 'nLine' 'int'
| | |   | |-CStyleCastExpr 0x563474602c58 <col:48, col:69> 'void *' <Dependent>
| | |   | | `-ParenExpr 0x563474602c38 <col:55, col:69> '<dependent type>'
| | |   | |   `-CallExpr 0x563474602be0 <col:56, col:68> '<dependent type>'
| | |   | |     `-CXXDependentScopeMemberExpr 0x563474602b98 <col:56, col:62> '<dependent type>' lvalue ->mutex
| | |   | `-CXXBoolLiteralExpr 0x563474602c80 <col:72> 'bool' true
| | |   |-CallExpr 0x563474602df0 <line:139:9, col:24> '<dependent type>'
| | |   | `-CXXDependentScopeMemberExpr 0x563474602da8 <col:9, col:15> '<dependent type>' lvalue ->try_lock
| | |   |-IfStmt 0x563474602f90 <line:140:9, line:141:27>
| | |   | |-UnaryOperator 0x563474602eb0 <line:140:13, col:30> '<dependent type>' prefix '!' cannot overflow
| | |   | | `-CallExpr 0x563474602e90 <col:14, col:30> '<dependent type>'
| | |   | |   `-CXXDependentScopeMemberExpr 0x563474602e48 <col:14, col:20> '<dependent type>' lvalue ->owns_lock
| | |   | `-CallExpr 0x563474602f70 <line:141:13, col:27> 'void'
| | |   |   `-ImplicitCastExpr 0x563474602f58 <col:13> 'void (*)()' <FunctionToPointerDecay>
| | |   |     `-DeclRefExpr 0x563474602f10 <col:13> 'void ()' lvalue Function 0x5634745f4630 'LeaveCritical' 'void ()'
| | |   `-ReturnStmt 0x563474603048 <line:142:9, col:32>
| | |     `-CallExpr 0x563474603028 <col:16, col:32> '<dependent type>'
| | |       `-CXXDependentScopeMemberExpr 0x563474602fe0 <col:16, col:22> '<dependent type>' lvalue ->owns_lock
| | |-AccessSpecDecl 0x5634746007e0 <line:145:1, col:7> col:1 public
| | |-CXXConstructorDecl 0x563474600ba8 <line:146:5, line:152:5> line:146:5 invalid UniqueLock<Mutex, Base> 'void (Mutex &, const char *, const char *, int, bool)'
| | | |-ParmVarDecl 0x563474600848 <col:16, col:23> col:23 referenced mutexIn 'Mutex &'
| | | |-ParmVarDecl 0x5634746008c8 <col:32, col:44> col:44 referenced pszName 'const char *'
| | | |-ParmVarDecl 0x563474600948 <col:53, col:65> col:65 referenced pszFile 'const char *'
| | | |-ParmVarDecl 0x5634746009c8 <col:74, col:78> col:78 referenced nLine 'int'
| | | |-ParmVarDecl 0x563474600a40 <col:85, col:97> col:90 referenced fTry 'bool' cinit
| | | | `-CXXBoolLiteralExpr 0x5634746013f0 <col:97> 'bool' false
| | | |-CompoundStmt 0x5634746032b8 <line:147:5, line:152:5>
| | | | `-IfStmt 0x563474603290 <line:148:9, line:151:42> has_else
| | | |   |-ImplicitCastExpr 0x5634746030c8 <line:148:13> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x5634746030a8 <col:13> 'bool' lvalue ParmVar 0x563474600a40 'fTry' 'bool'
| | | |   |-CallExpr 0x563474603180 <line:149:13, col:45> '<dependent type>'
| | | |   | |-MemberExpr 0x5634746030f0 <col:13> '<bound member function type>' ->TryEnter 0x563474600728
| | | |   | | `-CXXThisExpr 0x5634746030e0 <col:13> 'UniqueLock<Mutex, Base> *' implicit this
| | | |   | |-DeclRefExpr 0x563474603120 <col:22> 'const char *' lvalue ParmVar 0x5634746008c8 'pszName' 'const char *'
| | | |   | |-DeclRefExpr 0x563474603140 <col:31> 'const char *' lvalue ParmVar 0x563474600948 'pszFile' 'const char *'
| | | |   | `-DeclRefExpr 0x563474603160 <col:40> 'int' lvalue ParmVar 0x5634746009c8 'nLine' 'int'
| | | |   `-CallExpr 0x563474603258 <line:151:13, col:42> '<dependent type>'
| | | |     |-MemberExpr 0x5634746031c8 <col:13> '<bound member function type>' ->Enter 0x5634745ff468
| | | |     | `-CXXThisExpr 0x5634746031b8 <col:13> 'UniqueLock<Mutex, Base> *' implicit this
| | | |     |-DeclRefExpr 0x5634746031f8 <col:19> 'const char *' lvalue ParmVar 0x5634746008c8 'pszName' 'const char *'
| | | |     |-DeclRefExpr 0x563474603218 <col:28> 'const char *' lvalue ParmVar 0x563474600948 'pszFile' 'const char *'
| | | |     `-DeclRefExpr 0x563474603238 <col:37> 'int' lvalue ParmVar 0x5634746009c8 'nLine' 'int'
| | | `-AcquireCapabilityAttr 0x5634746012e8 <bitcoin/src/threadsafety.h:24:53, col:88> exclusive_lock_function
| | |   `-DeclRefExpr 0x5634746012c8 <bitcoin/src/sync.h:146:128> 'Mutex' lvalue ParmVar 0x563474600848 'mutexIn' 'Mutex &' non_odr_use_unevaluated
| | |-CXXConstructorDecl 0x563474601008 <line:154:5, line:163:5> line:154:5 UniqueLock<Mutex, Base> 'void (Mutex *, const char *, const char *, int, bool)'
| | | |-ParmVarDecl 0x563474600cb8 <col:16, col:23> col:23 referenced pmutexIn 'Mutex *'
| | | |-ParmVarDecl 0x563474600d38 <col:33, col:45> col:45 referenced pszName 'const char *'
| | | |-ParmVarDecl 0x563474600db8 <col:54, col:66> col:66 referenced pszFile 'const char *'
| | | |-ParmVarDecl 0x563474600e38 <col:75, col:79> col:79 referenced nLine 'int'
| | | |-ParmVarDecl 0x563474600eb0 <col:86, col:98> col:91 referenced fTry 'bool' cinit
| | | | `-CXXBoolLiteralExpr 0x563474601400 <col:98> 'bool' false
| | | |-CompoundStmt 0x563474603618 <line:155:5, line:163:5>
| | | | |-IfStmt 0x563474603318 <line:156:9, col:24>
| | | | | |-UnaryOperator 0x5634746032f0 <col:13, col:14> '<dependent type>' prefix '!' cannot overflow
| | | | | | `-DeclRefExpr 0x5634746032d0 <col:14> 'Mutex *' lvalue ParmVar 0x563474600cb8 'pmutexIn' 'Mutex *'
| | | | | `-ReturnStmt 0x563474603308 <col:24>
| | | | `-IfStmt 0x5634746035f0 <line:159:9, line:162:42> has_else
| | | |   |-ImplicitCastExpr 0x563474603428 <line:159:13> 'bool' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x563474603408 <col:13> 'bool' lvalue ParmVar 0x563474600eb0 'fTry' 'bool'
| | | |   |-CallExpr 0x5634746034e0 <line:160:13, col:45> '<dependent type>'
| | | |   | |-MemberExpr 0x563474603450 <col:13> '<bound member function type>' ->TryEnter 0x563474600728
| | | |   | | `-CXXThisExpr 0x563474603440 <col:13> 'UniqueLock<Mutex, Base> *' implicit this
| | | |   | |-DeclRefExpr 0x563474603480 <col:22> 'const char *' lvalue ParmVar 0x563474600d38 'pszName' 'const char *'
| | | |   | |-DeclRefExpr 0x5634746034a0 <col:31> 'const char *' lvalue ParmVar 0x563474600db8 'pszFile' 'const char *'
| | | |   | `-DeclRefExpr 0x5634746034c0 <col:40> 'int' lvalue ParmVar 0x563474600e38 'nLine' 'int'
| | | |   `-CallExpr 0x5634746035b8 <line:162:13, col:42> '<dependent type>'
| | | |     |-MemberExpr 0x563474603528 <col:13> '<bound member function type>' ->Enter 0x5634745ff468
| | | |     | `-CXXThisExpr 0x563474603518 <col:13> 'UniqueLock<Mutex, Base> *' implicit this
| | | |     |-DeclRefExpr 0x563474603558 <col:19> 'const char *' lvalue ParmVar 0x563474600d38 'pszName' 'const char *'
| | | |     |-DeclRefExpr 0x563474603578 <col:28> 'const char *' lvalue ParmVar 0x563474600db8 'pszFile' 'const char *'
| | | |     `-DeclRefExpr 0x563474603598 <col:37> 'int' lvalue ParmVar 0x563474600e38 'nLine' 'int'
| | | `-AcquireCapabilityAttr 0x563474601358 <bitcoin/src/threadsafety.h:24:53, col:88> exclusive_lock_function
| | |   `-DeclRefExpr 0x563474601338 <bitcoin/src/sync.h:154:129> 'Mutex *' lvalue ParmVar 0x563474600cb8 'pmutexIn' 'Mutex *' non_odr_use_unevaluated
| | |-CXXDestructorDecl 0x563474601120 <line:165:5, line:169:5> line:165:5 ~UniqueLock<Mutex, Base> 'void ()'
| | | |-CompoundStmt 0x5634746037a8 <line:166:5, line:169:5>
| | | | `-IfStmt 0x563474603790 <line:167:9, line:168:27>
| | | |   |-CallExpr 0x5634746036d0 <line:167:13, col:29> '<dependent type>'
| | | |   | `-CXXDependentScopeMemberExpr 0x563474603688 <col:13, col:19> '<dependent type>' lvalue ->owns_lock
| | | |   `-CallExpr 0x563474603770 <line:168:13, col:27> 'void'
| | | |     `-ImplicitCastExpr 0x563474603758 <col:13> 'void (*)()' <FunctionToPointerDecay>
| | | |       `-DeclRefExpr 0x563474603738 <col:13> 'void ()' lvalue Function 0x5634745f4630 'LeaveCritical' 'void ()'
| | | `-ReleaseCapabilityAttr 0x5634746013a8 <bitcoin/src/threadsafety.h:28:45, col:72> unlock_function
| | `-CXXConversionDecl 0x563474601218 <bitcoin/src/sync.h:171:5, line:174:5> line:171:5 operator bool 'bool ()'
| |   `-CompoundStmt 0x563474603870 <line:172:5, line:174:5>
| |     `-ReturnStmt 0x563474603860 <line:173:9, col:32>
| |       `-CallExpr 0x563474603840 <col:16, col:32> '<dependent type>'
| |         `-CXXDependentScopeMemberExpr 0x5634746037f8 <col:16, col:22> '<dependent type>' lvalue ->owns_lock
| `-FullComment 0x563474760ab0 <line:118:4, col:58>
|   `-ParagraphComment 0x563474760a80 <col:4, col:58>
|     `-TextComment 0x563474760a50 <col:4, col:58> Text=" Wrapper around std::unique_lock style lock for Mutex. "
|-CXXRecordDecl 0x5634746039a0 <line:209:1, line:243:1> line:209:7 referenced invalid class CSemaphore definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563474603ab8 <col:1, col:7> col:7 implicit referenced class CSemaphore
| |-AccessSpecDecl 0x563474603b48 <line:211:1, col:8> col:1 private
| |-FieldDecl 0x563474603b98 <line:212:5, col:29> col:29 invalid condition 'int'
| |-FieldDecl 0x563474603c10 <line:213:5, col:16> col:16 invalid mutex 'int'
| |-FieldDecl 0x563474603c78 <line:214:5, col:9> col:9 referenced value 'int'
| |-AccessSpecDecl 0x563474603cc8 <line:216:1, col:7> col:1 public
| |-CXXConstructorDecl 0x563474603dd8 <line:217:5, col:50> col:14 CSemaphore 'void (int)'
| | |-ParmVarDecl 0x563474603d08 <col:25, col:29> col:29 used init 'int'
| | |-CXXCtorInitializer Field 0x563474603c78 'value' 'int'
| | | `-ImplicitCastExpr 0x563474604120 <col:43> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5634746040e0 <col:43> 'int' lvalue ParmVar 0x563474603d08 'init' 'int'
| | `-CompoundStmt 0x563474604168 <col:49, col:50>
| |-CXXMethodDecl 0x563474603ea8 <line:219:5, line:224:5> line:219:10 used wait 'void ()'
| | `-CompoundStmt 0x563474604848 <line:220:5, line:224:5>
| |   |-DeclStmt 0x563474604250 <line:221:38, col:49>
| |   | `-VarDecl 0x5634746041e8 <col:38, <invalid sloc>> col:43 invalid mutex 'int':'int'
| |   `-UnaryOperator 0x563474604830 <line:223:9, col:14> 'int' postfix '--'
| |     `-MemberExpr 0x563474604800 <col:9> 'int' lvalue ->value 0x563474603c78
| |       `-CXXThisExpr 0x5634746047f0 <col:9> 'CSemaphore *' implicit this
| |-CXXMethodDecl 0x563474603f68 <line:226:5, line:233:5> line:226:10 used try_wait 'bool ()'
| | `-CompoundStmt 0x563474606930 <line:227:5, line:233:5>
| |   |-DeclStmt 0x563474604910 <line:228:37, col:48>
| |   | `-VarDecl 0x5634746048a8 <col:37, <invalid sloc>> col:42 invalid mutex 'int':'int'
| |   |-IfStmt 0x5634746068a0 <line:229:9, line:230:20>
| |   | |-BinaryOperator 0x563474606860 <line:229:13, col:21> 'bool' '<'
| |   | | |-ImplicitCastExpr 0x563474604988 <col:13> 'int' <LValueToRValue>
| |   | | | `-MemberExpr 0x563474604938 <col:13> 'int' lvalue ->value 0x563474603c78
| |   | | |   `-CXXThisExpr 0x563474604928 <col:13> 'CSemaphore *' implicit this
| |   | | `-IntegerLiteral 0x563474604968 <col:21> 'int' 1
| |   | `-ReturnStmt 0x563474606890 <line:230:13, col:20>
| |   |   `-CXXBoolLiteralExpr 0x563474606880 <col:20> 'bool' false
| |   |-UnaryOperator 0x5634746068f8 <line:231:9, col:14> 'int' postfix '--'
| |   | `-MemberExpr 0x5634746068c8 <col:9> 'int' lvalue ->value 0x563474603c78
| |   |   `-CXXThisExpr 0x5634746068b8 <col:9> 'CSemaphore *' implicit this
| |   `-ReturnStmt 0x563474606920 <line:232:9, col:16>
| |     `-CXXBoolLiteralExpr 0x563474606910 <col:16> 'bool' true
| `-CXXMethodDecl 0x563474604028 <line:235:5, line:242:5> line:235:10 used post 'void ()'
|   `-CompoundStmt 0x563474606aa8 <line:236:5, line:242:5>
|     `-CompoundStmt 0x563474606a78 <line:237:9, line:240:9>
|       |-DeclStmt 0x563474606a08 <line:238:41, col:52>
|       | `-VarDecl 0x5634746069a0 <col:41, <invalid sloc>> col:46 invalid mutex 'int':'int'
|       `-UnaryOperator 0x563474606a60 <line:239:13, col:18> 'int' postfix '++'
|         `-MemberExpr 0x563474606a30 <col:13> 'int' lvalue ->value 0x563474603c78
|           `-CXXThisExpr 0x563474606a20 <col:13> 'CSemaphore *' implicit this
|-CXXRecordDecl 0x563474606ae8 <line:246:1, line:303:1> line:246:7 referenced class CSemaphoreGrant definition
| |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-FullComment 0x563474760c50 <line:245:4, col:30>
| | `-ParagraphComment 0x563474760c20 <col:4, col:30>
| |   `-TextComment 0x563474760bf0 <col:4, col:30> Text=" RAII-style semaphore lock "
| |-CXXRecordDecl 0x563474606c08 <line:246:1, col:7> col:7 implicit referenced class CSemaphoreGrant
| |-AccessSpecDecl 0x563474606c98 <line:248:1, col:8> col:1 private
| |-FieldDecl 0x563474606cd0 <line:249:5, col:17> col:17 referenced sem 'CSemaphore *'
| |-FieldDecl 0x563474606d30 <line:250:5, col:10> col:10 referenced fHaveGrant 'bool'
| |-AccessSpecDecl 0x563474606d80 <line:252:1, col:7> col:1 public
| |-CXXMethodDecl 0x563474606df8 <line:253:5, line:259:5> line:253:10 used Acquire 'void ()'
| | `-CompoundStmt 0x563474607c80 <line:254:5, line:259:5>
| |   |-IfStmt 0x563474607790 <line:255:9, line:256:13>
| |   | |-ImplicitCastExpr 0x563474607768 <line:255:13> 'bool' <LValueToRValue>
| |   | | `-MemberExpr 0x563474607738 <col:13> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |   | |   `-CXXThisExpr 0x563474607728 <col:13> 'CSemaphoreGrant *' implicit this
| |   | `-ReturnStmt 0x563474607780 <line:256:13>
| |   |-CXXMemberCallExpr 0x563474607830 <line:257:9, col:19> 'void'
| |   | `-MemberExpr 0x563474607800 <col:9, col:14> '<bound member function type>' ->wait 0x563474603ea8
| |   |   `-ImplicitCastExpr 0x5634746077e8 <col:9> 'CSemaphore *' <LValueToRValue>
| |   |     `-MemberExpr 0x5634746077b8 <col:9> 'CSemaphore *' lvalue ->sem 0x563474606cd0
| |   |       `-CXXThisExpr 0x5634746077a8 <col:9> 'CSemaphoreGrant *' implicit this
| |   `-BinaryOperator 0x563474607c60 <line:258:9, col:22> 'bool' lvalue '='
| |     |-MemberExpr 0x563474607c20 <col:9> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |     | `-CXXThisExpr 0x563474607850 <col:9> 'CSemaphoreGrant *' implicit this
| |     `-CXXBoolLiteralExpr 0x563474607c50 <col:22> 'bool' true
| |-CXXMethodDecl 0x563474606eb8 <line:261:5, line:267:5> line:261:10 used Release 'void ()'
| | `-CompoundStmt 0x563474607e58 <line:262:5, line:267:5>
| |   |-IfStmt 0x563474607d28 <line:263:9, line:264:13>
| |   | |-UnaryOperator 0x563474607d00 <line:263:13, col:14> 'bool' prefix '!' cannot overflow
| |   | | `-ImplicitCastExpr 0x563474607ce8 <col:14> 'bool' <LValueToRValue>
| |   | |   `-MemberExpr 0x563474607cb8 <col:14> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |   | |     `-CXXThisExpr 0x563474607ca8 <col:14> 'CSemaphoreGrant *' implicit this
| |   | `-ReturnStmt 0x563474607d18 <line:264:13>
| |   |-CXXMemberCallExpr 0x563474607dc8 <line:265:9, col:19> 'void'
| |   | `-MemberExpr 0x563474607d98 <col:9, col:14> '<bound member function type>' ->post 0x563474604028
| |   |   `-ImplicitCastExpr 0x563474607d80 <col:9> 'CSemaphore *' <LValueToRValue>
| |   |     `-MemberExpr 0x563474607d50 <col:9> 'CSemaphore *' lvalue ->sem 0x563474606cd0
| |   |       `-CXXThisExpr 0x563474607d40 <col:9> 'CSemaphoreGrant *' implicit this
| |   `-BinaryOperator 0x563474607e38 <line:266:9, col:22> 'bool' lvalue '='
| |     |-MemberExpr 0x563474607df8 <col:9> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |     | `-CXXThisExpr 0x563474607de8 <col:9> 'CSemaphoreGrant *' implicit this
| |     `-CXXBoolLiteralExpr 0x563474607e28 <col:22> 'bool' false
| |-CXXMethodDecl 0x563474606f78 <line:269:5, line:274:5> line:269:10 used TryAcquire 'bool ()'
| | `-CompoundStmt 0x5634746080a8 <line:270:5, line:274:5>
| |   |-IfStmt 0x563474608028 <line:271:9, line:272:26>
| |   | |-BinaryOperator 0x563474607f98 <line:271:13, col:42> 'bool' '&&'
| |   | | |-UnaryOperator 0x563474607ed8 <col:13, col:14> 'bool' prefix '!' cannot overflow
| |   | | | `-ImplicitCastExpr 0x563474607ec0 <col:14> 'bool' <LValueToRValue>
| |   | | |   `-MemberExpr 0x563474607e90 <col:14> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |   | | |     `-CXXThisExpr 0x563474607e80 <col:14> 'CSemaphoreGrant *' implicit this
| |   | | `-CXXMemberCallExpr 0x563474607f78 <col:28, col:42> 'bool'
| |   | |   `-MemberExpr 0x563474607f48 <col:28, col:33> '<bound member function type>' ->try_wait 0x563474603f68
| |   | |     `-ImplicitCastExpr 0x563474607f30 <col:28> 'CSemaphore *' <LValueToRValue>
| |   | |       `-MemberExpr 0x563474607f00 <col:28> 'CSemaphore *' lvalue ->sem 0x563474606cd0
| |   | |         `-CXXThisExpr 0x563474607ef0 <col:28> 'CSemaphoreGrant *' implicit this
| |   | `-BinaryOperator 0x563474608008 <line:272:13, col:26> 'bool' lvalue '='
| |   |   |-MemberExpr 0x563474607fc8 <col:13> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |   |   | `-CXXThisExpr 0x563474607fb8 <col:13> 'CSemaphoreGrant *' implicit this
| |   |   `-CXXBoolLiteralExpr 0x563474607ff8 <col:26> 'bool' true
| |   `-ReturnStmt 0x563474608098 <line:273:9, col:16>
| |     `-ImplicitCastExpr 0x563474608080 <col:16> 'bool' <LValueToRValue>
| |       `-MemberExpr 0x563474608050 <col:16> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |         `-CXXThisExpr 0x563474608040 <col:16> 'CSemaphoreGrant *' implicit this
| |-CXXMethodDecl 0x563474607118 <line:276:5, line:282:5> line:276:10 MoveTo 'void (CSemaphoreGrant &)'
| | |-ParmVarDecl 0x563474607058 <col:17, col:34> col:34 used grant 'CSemaphoreGrant &'
| | `-CompoundStmt 0x563474608338 <line:277:5, line:282:5>
| |   |-CXXMemberCallExpr 0x563474608118 <line:278:9, col:23> 'void'
| |   | `-MemberExpr 0x5634746080e8 <col:9, col:15> '<bound member function type>' .Release 0x563474606eb8
| |   |   `-DeclRefExpr 0x5634746080c8 <col:9> 'CSemaphoreGrant' lvalue ParmVar 0x563474607058 'grant' 'CSemaphoreGrant &'
| |   |-BinaryOperator 0x5634746081e0 <line:279:9, col:21> 'CSemaphore *' lvalue '='
| |   | |-MemberExpr 0x563474608158 <col:9, col:15> 'CSemaphore *' lvalue .sem 0x563474606cd0
| |   | | `-DeclRefExpr 0x563474608138 <col:9> 'CSemaphoreGrant' lvalue ParmVar 0x563474607058 'grant' 'CSemaphoreGrant &'
| |   | `-ImplicitCastExpr 0x5634746081c8 <col:21> 'CSemaphore *' <LValueToRValue>
| |   |   `-MemberExpr 0x563474608198 <col:21> 'CSemaphore *' lvalue ->sem 0x563474606cd0
| |   |     `-CXXThisExpr 0x563474608188 <col:21> 'CSemaphoreGrant *' implicit this
| |   |-BinaryOperator 0x5634746082a8 <line:280:9, col:28> 'bool' lvalue '='
| |   | |-MemberExpr 0x563474608220 <col:9, col:15> 'bool' lvalue .fHaveGrant 0x563474606d30
| |   | | `-DeclRefExpr 0x563474608200 <col:9> 'CSemaphoreGrant' lvalue ParmVar 0x563474607058 'grant' 'CSemaphoreGrant &'
| |   | `-ImplicitCastExpr 0x563474608290 <col:28> 'bool' <LValueToRValue>
| |   |   `-MemberExpr 0x563474608260 <col:28> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |   |     `-CXXThisExpr 0x563474608250 <col:28> 'CSemaphoreGrant *' implicit this
| |   `-BinaryOperator 0x563474608318 <line:281:9, col:22> 'bool' lvalue '='
| |     |-MemberExpr 0x5634746082d8 <col:9> 'bool' lvalue ->fHaveGrant 0x563474606d30
| |     | `-CXXThisExpr 0x5634746082c8 <col:9> 'CSemaphoreGrant *' implicit this
| |     `-CXXBoolLiteralExpr 0x563474608308 <col:22> 'bool' false
| |-CXXConstructorDecl 0x5634746071f8 <line:284:5, col:58> col:5 CSemaphoreGrant 'void ()'
| | |-CXXCtorInitializer Field 0x563474606cd0 'sem' 'CSemaphore *'
| | | `-ImplicitCastExpr 0x563474608398 <col:29> 'CSemaphore *' <NullToPointer>
| | |   `-CXXNullPtrLiteralExpr 0x563474608368 <col:29> 'nullptr_t'
| | |-CXXCtorInitializer Field 0x563474606d30 'fHaveGrant' 'bool'
| | | `-CXXBoolLiteralExpr 0x5634746083d8 <col:50> 'bool' false
| | `-CompoundStmt 0x563474608440 <col:57, col:58>
| |-CXXConstructorDecl 0x563474607428 <line:286:5, line:292:5> line:286:14 CSemaphoreGrant 'void (CSemaphore &, bool)'
| | |-ParmVarDecl 0x5634746072d8 <col:30, col:42> col:42 used sema 'CSemaphore &'
| | |-ParmVarDecl 0x563474607350 <col:48, col:60> col:53 used fTry 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x563474607718 <col:60> 'bool' false
| | |-CXXCtorInitializer Field 0x563474606cd0 'sem' 'CSemaphore *'
| | | `-UnaryOperator 0x563474608470 <col:73, col:74> 'CSemaphore *' prefix '&' cannot overflow
| | |   `-DeclRefExpr 0x563474608450 <col:74> 'CSemaphore' lvalue ParmVar 0x5634746072d8 'sema' 'CSemaphore &'
| | |-CXXCtorInitializer Field 0x563474606d30 'fHaveGrant' 'bool'
| | | `-CXXBoolLiteralExpr 0x5634746084d0 <col:92> 'bool' false
| | `-CompoundStmt 0x563474608658 <line:287:5, line:292:5>
| |   `-IfStmt 0x563474608630 <line:288:9, line:291:21> has_else
| |     |-ImplicitCastExpr 0x563474608558 <line:288:13> 'bool' <LValueToRValue>
| |     | `-DeclRefExpr 0x563474608538 <col:13> 'bool' lvalue ParmVar 0x563474607350 'fTry' 'bool'
| |     |-CXXMemberCallExpr 0x5634746085b0 <line:289:13, col:24> 'bool'
| |     | `-MemberExpr 0x563474608580 <col:13> '<bound member function type>' ->TryAcquire 0x563474606f78
| |     |   `-CXXThisExpr 0x563474608570 <col:13> 'CSemaphoreGrant *' implicit this
| |     `-CXXMemberCallExpr 0x563474608610 <line:291:13, col:21> 'void'
| |       `-MemberExpr 0x5634746085e0 <col:13> '<bound member function type>' ->Acquire 0x563474606df8
| |         `-CXXThisExpr 0x5634746085d0 <col:13> 'CSemaphoreGrant *' implicit this
| |-CXXDestructorDecl 0x563474607528 <line:294:5, line:297:5> line:294:5 ~CSemaphoreGrant 'void () noexcept'
| | `-CompoundStmt 0x5634746086d0 <line:295:5, line:297:5>
| |   `-CXXMemberCallExpr 0x5634746086b0 <line:296:9, col:17> 'void'
| |     `-MemberExpr 0x563474608680 <col:9> '<bound member function type>' ->Release 0x563474606eb8
| |       `-CXXThisExpr 0x563474608670 <col:9> 'CSemaphoreGrant *' implicit this
| |-CXXConversionDecl 0x563474607668 <line:299:5, line:302:5> line:299:5 operator bool 'bool () const'
| | `-CompoundStmt 0x563474608750 <line:300:5, line:302:5>
| |   `-ReturnStmt 0x563474608740 <line:301:9, col:16>
| |     `-ImplicitCastExpr 0x563474608728 <col:16> 'bool' <LValueToRValue>
| |       `-MemberExpr 0x5634746086f8 <col:16> 'const bool' lvalue ->fHaveGrant 0x563474606d30
| |         `-CXXThisExpr 0x5634746086e8 <col:16> 'const CSemaphoreGrant *' implicit this
| |-CXXConstructorDecl 0x5634746bb0a8 <line:246:7> col:7 implicit constexpr CSemaphoreGrant 'void (const CSemaphoreGrant &)' inline default trivial noexcept-unevaluated 0x5634746bb0a8
| | `-ParmVarDecl 0x5634746bb1b8 <col:7> col:7 'const CSemaphoreGrant &'
| `-CXXMethodDecl 0x5634746bb228 <col:7> col:7 implicit operator= 'CSemaphoreGrant &(const CSemaphoreGrant &)' inline default trivial noexcept-unevaluated 0x5634746bb228
|   `-ParmVarDecl 0x5634746bb338 <col:7> col:7 'const CSemaphoreGrant &'
|-CXXRecordDecl 0x563474608768 <line:307:1, line:317:1> line:307:24 struct LockAssertion definition
| |-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-ScopedLockableAttr 0x563474608888 <bitcoin/src/threadsafety.h:17:40>
| |-CXXRecordDecl 0x5634746088c8 <bitcoin/src/sync.h:307:1, col:24> col:24 implicit referenced struct LockAssertion
| |-FunctionTemplateDecl 0x563474608bc0 <line:309:5, line:315:5> line:310:14 LockAssertion
| | |-TemplateTypeParmDecl 0x563474608958 <line:309:15, col:24> col:24 referenced typename depth 0 index 0 Mutex
| | `-CXXConstructorDecl 0x563474608b18 <line:310:5, line:315:5> line:310:14 LockAssertion 'void (Mutex &)'
| |   |-ParmVarDecl 0x563474608a18 <col:28, col:35> col:35 referenced mutex 'Mutex &'
| |   |-CompoundStmt 0x5634746099f0 <line:311:5, line:315:5>
| |   `-AcquireCapabilityAttr 0x563474609950 <bitcoin/src/threadsafety.h:24:53, col:88> exclusive_lock_function
| |     `-DeclRefExpr 0x563474609930 <bitcoin/src/sync.h:310:66> 'Mutex' lvalue ParmVar 0x563474608a18 'mutex' 'Mutex &' non_odr_use_unevaluated
| `-CXXDestructorDecl 0x563474609848 <line:316:5, col:41> col:5 ~LockAssertion 'void () noexcept'
|   |-CompoundStmt 0x563474609a00 <col:40, col:41>
|   `-ReleaseCapabilityAttr 0x5634746099a8 <bitcoin/src/threadsafety.h:28:45, col:72> unlock_function
|-VarDecl 0x563474609a38 <bitcoin/src/timedata.h:13:1, col:22> col:22 invalid DEFAULT_MAX_TIME_ADJUSTMENT 'const int' static
|-CXXRecordDecl 0x563474609b00 prev 0x5634745c5f08 <line:15:1, col:7> col:7 referenced class CNetAddr
|-ClassTemplateDecl 0x563474609cd0 <line:21:1, line:71:1> line:22:7 CMedianFilter
| |-TemplateTypeParmDecl 0x563474609bb8 <line:21:11, col:20> col:20 referenced typename depth 0 index 0 T
| |-CXXRecordDecl 0x563474609c40 <line:22:1, line:71:1> line:22:7 class CMedianFilter definition
| | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FullComment 0x563474760eb0 <line:18:3, line:19:43>
| | | `-ParagraphComment 0x563474760e80 <line:18:3, line:19:43>
| | |   |-TextComment 0x563474760e30 <line:18:3, col:41> Text=" Median filter over a stream of values."
| | |   `-TextComment 0x563474760e50 <line:19:3, col:43> Text=" Returns the median of the last N numbers"
| | |-CXXRecordDecl 0x563474609f20 <line:22:1, col:7> col:7 implicit referenced class CMedianFilter
| | |-AccessSpecDecl 0x563474609fb0 <line:24:1, col:8> col:1 private
| | |-FieldDecl 0x56347460a030 <line:27:5, col:18> col:18 referenced nSize 'unsigned int'
| | |-AccessSpecDecl 0x56347460a080 <line:29:1, col:7> col:1 public
| | |-CXXConstructorDecl 0x56347460a288 <line:30:5, line:35:5> line:30:5 CMedianFilter<T> 'void (unsigned int, T)'
| | | |-ParmVarDecl 0x56347460a0c0 <col:19, col:32> col:32 referenced _size 'unsigned int'
| | | |-ParmVarDecl 0x56347460a138 <col:39, col:41> col:41 referenced initial_value 'T'
| | | |-CXXCtorInitializer Field 0x56347460a030 'nSize' 'unsigned int'
| | | | `-ImplicitCastExpr 0x56347460a778 <col:64> 'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x56347460a738 <col:64> 'unsigned int' lvalue ParmVar 0x56347460a0c0 '_size' 'unsigned int'
| | | `-CompoundStmt 0x56347460be70 <line:31:5, line:35:5>
| | |-CXXMethodDecl 0x56347460a448 <line:37:5, line:47:5> line:37:10 input 'void (T)'
| | | |-ParmVarDecl 0x56347460a350 <col:16, col:18> col:18 referenced value 'T'
| | | `-CompoundStmt 0x56347460bf20 <line:38:5, line:47:5>
| | |   `-IfStmt 0x56347460bee8 <line:39:9, line:41:9>
| | |     |-OpaqueValueExpr 0x56347460bed0 <<invalid sloc>> 'bool'
| | |     `-CompoundStmt 0x56347460bec0 <line:39:38, line:41:9>
| | |-CXXMethodDecl 0x56347460a598 <line:49:5, line:60:5> line:49:7 median 'T () const'
| | | `-CompoundStmt 0x56347460c328 <line:50:5, line:60:5>
| | |   |-DeclStmt 0x56347460bfb8 <line:51:9, col:41>
| | |   | `-VarDecl 0x56347460bf50 <col:9, col:13> col:13 referenced vSortedSize 'int'
| | |   `-IfStmt 0x56347460c300 <line:53:9, line:59:9> has_else
| | |     |-ImplicitCastExpr 0x56347460c100 <line:53:13, col:27> 'bool' <IntegralToBoolean>
| | |     | `-BinaryOperator 0x56347460c0e0 <col:13, col:27> 'int' '&'
| | |     |   |-ImplicitCastExpr 0x56347460c0c8 <col:13> 'int' <LValueToRValue>
| | |     |   | `-DeclRefExpr 0x56347460c088 <col:13> 'int' lvalue Var 0x56347460bf50 'vSortedSize' 'int'
| | |     |   `-IntegerLiteral 0x56347460c0a8 <col:27> 'int' 1
| | |     |-CompoundStmt 0x56347460c190 <line:54:9, line:56:9>
| | |     `-CompoundStmt 0x56347460c2f0 <line:57:9, line:59:9>
| | `-CXXMethodDecl 0x56347460a660 <line:62:5, line:65:5> line:62:9 size 'int () const'
| |   `-CompoundStmt 0x56347460c348 <line:63:5, line:65:5>
| `-FullComment 0x563474760dc0 <line:18:3, line:19:43>
|   `-ParagraphComment 0x563474760d90 <line:18:3, line:19:43>
|     |-TextComment 0x563474760d40 <line:18:3, col:41> Text=" Median filter over a stream of values."
|     `-TextComment 0x563474760d60 <line:19:3, col:43> Text=" Returns the median of the last N numbers"
|-FunctionDecl 0x56347460c3c0 <line:74:1, col:23> col:9 invalid GetTimeOffset 'int ()'
| `-FullComment 0x563474760f80 <line:73:4, col:49>
|   `-ParagraphComment 0x563474760f50 <col:4, col:49>
|     `-TextComment 0x563474760f20 <col:4, col:49> Text=" Functions to keep track of adjusted P2P time "
|-FunctionDecl 0x56347460c498 <line:75:1, col:25> col:9 invalid GetAdjustedTime 'int ()'
|-FunctionDecl 0x56347460c670 <line:76:1, col:51> col:6 invalid AddTimeData 'void (const CNetAddr &, int)'
| |-ParmVarDecl 0x56347460c548 <col:18, col:34> col:34 ip 'const CNetAddr &'
| `-ParmVarDecl 0x56347460c5d8 <col:38, col:46> col:46 invalid nTime 'int'
|-FunctionDecl 0x56347460c780 <bitcoin/src/util/system.h:39:1, col:24> col:9 invalid GetStartupTime 'int ()'
|-VarDecl 0x56347460c838 <line:41:1, col:27> col:27 BITCOIN_CONF_FILENAME 'const char *const' extern
|-FunctionDecl 0x56347460c8c0 <line:43:1, col:23> col:6 SetupEnvironment 'void ()'
|-FunctionDecl 0x56347460c980 <line:44:1, col:22> col:6 SetupNetworking 'bool ()'
|-FunctionTemplateDecl 0x56347460cd58 <line:46:1, line:51:1> line:47:6 error
| |-TemplateTypeParmDecl 0x56347460ca20 <line:46:10, col:22> col:22 referenced typename depth 0 index 0 ... Args
| `-FunctionDecl 0x56347460ccb8 <line:47:1, line:51:1> line:47:6 error 'bool (const char *, const Args &...)'
|   |-ParmVarDecl 0x56347460cac8 <col:12, col:24> col:24 referenced fmt 'const char *'
|   |-ParmVarDecl 0x56347460cba0 <col:29, col:44> col:44 referenced args 'const Args &...' pack
|   `-CompoundStmt 0x56347460cf20 <line:48:1, line:51:1>
|     `-ReturnStmt 0x56347460cf10 <line:50:5, col:12>
|       `-CXXBoolLiteralExpr 0x56347460cf00 <col:12> 'bool' false
|-FunctionDecl 0x56347460d0b8 <line:53:1, col:77> col:6 invalid PrintExceptionContinue 'void (const int *, const char *)'
| |-ParmVarDecl 0x56347460cf60 <col:29, col:51> col:51 invalid pex 'const int *'
| `-ParmVarDecl 0x56347460cfe0 <col:56, col:68> col:68 pszThread 'const char *'
|-FunctionDecl 0x56347460d258 <line:54:1, col:27> col:6 invalid FileCommit 'bool (int *)'
| `-ParmVarDecl 0x56347460d190 <col:17, col:23> col:23 invalid file 'int *'
|-FunctionDecl 0x56347460d478 <line:55:1, col:50> col:6 invalid TruncateFile 'bool (int *, unsigned int)'
| |-ParmVarDecl 0x56347460d328 <col:19, col:25> col:25 invalid file 'int *'
| `-ParmVarDecl 0x56347460d3a8 <col:31, col:44> col:44 length 'unsigned int'
|-FunctionDecl 0x56347460d5d8 <line:56:1, col:40> col:5 RaiseFileDescriptorLimit 'int (int)'
| `-ParmVarDecl 0x56347460d540 <col:30, col:34> col:34 nMinFD 'int'
|-FunctionDecl 0x56347460d888 <line:57:1, col:76> col:6 invalid AllocateFileRange 'void (int *, unsigned int, unsigned int)'
| |-ParmVarDecl 0x56347460d6a8 <col:24, col:30> col:30 invalid file 'int *'
| |-ParmVarDecl 0x56347460d728 <col:36, col:49> col:49 offset 'unsigned int'
| `-ParmVarDecl 0x56347460d7a8 <col:57, col:70> col:70 length 'unsigned int'
|-FunctionDecl 0x56347460dac8 <line:58:1, col:44> col:6 invalid RenameOver 'bool (int, int)'
| |-ParmVarDecl 0x56347460d968 <col:17, col:26> col:26 invalid src 'int'
| `-ParmVarDecl 0x56347460d9f8 <col:31, col:40> col:40 invalid dest 'int'
|-FunctionDecl 0x563474612cc0 <line:59:1, col:101> col:6 invalid LockDirectory 'bool (const int &, const int, bool)'
| |-ParmVarDecl 0x56347460dba0 <col:20, col:36> col:36 invalid directory 'const int &'
| |-ParmVarDecl 0x56347460dc30 <col:47, col:65> col:65 invalid lockfile_name 'const int'
| `-ParmVarDecl 0x56347460dca8 <col:80, col:96> col:85 probe_only 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56347460dd10 <col:96> 'bool' false
|-FunctionDecl 0x563474612f08 <line:60:1, col:81> col:6 invalid UnlockDirectory 'void (const int &, const int &)'
| |-ParmVarDecl 0x563474612da0 <col:22, col:38> col:38 invalid directory 'const int &'
| `-ParmVarDecl 0x563474612e30 <col:49, col:68> col:68 invalid lockfile_name 'const int &'
|-FunctionDecl 0x563474613070 <line:61:1, col:45> col:6 invalid DirIsWritable 'bool (const int &)'
| `-ParmVarDecl 0x563474612fe0 <col:20, col:36> col:36 invalid directory 'const int &'
|-FunctionDecl 0x5634746132c8 <line:62:1, col:71> col:6 invalid CheckDiskSpace 'bool (const int &, int)'
| |-ParmVarDecl 0x563474613140 <col:21, col:37> col:37 invalid dir 'const int &'
| `-ParmVarDecl 0x5634746131d0 <col:42, col:70> col:51 invalid additional_bytes 'int' cinit
|   `-IntegerLiteral 0x563474613238 <col:70> 'int' 0
|-FunctionDecl 0x5634746133c8 <line:67:1, col:28> col:6 ReleaseDirectoryLocks 'void ()'
| `-FullComment 0x5634747610f0 <line:64:4, line:65:53>
|   `-ParagraphComment 0x5634747610c0 <line:64:4, line:65:53>
|     |-TextComment 0x563474761070 <line:64:4, col:79> Text=" Release all directory locks. This is used for unit testing only, at runtime"
|     `-TextComment 0x563474761090 <line:65:3, col:53> Text=" the global destructor will take care of the locks."
|-FunctionDecl 0x563474613520 <line:69:1, col:44> col:6 invalid TryCreateDirectories 'bool (const int &)'
| `-ParmVarDecl 0x563474613490 <col:27, col:43> col:43 invalid p 'const int &'
|-FunctionDecl 0x563474613600 <line:70:1, col:28> col:10 invalid GetDefaultDataDir 'int ()'
|-FunctionDecl 0x5634746136d8 <line:72:1, col:30> col:17 invalid GetBlocksDir 'const int &()'
|-FunctionDecl 0x563474613870 <line:73:1, col:52> col:17 invalid GetDataDir 'const int &(bool)'
| `-ParmVarDecl 0x563474613798 <col:28, col:48> col:33 fNetSpecific 'bool' cinit
|   `-CXXBoolLiteralExpr 0x563474613800 <col:48> 'bool' true
|-FunctionDecl 0x563474613938 <line:75:1, col:25> col:6 CheckDataDirOption 'bool ()'
|-FunctionDecl 0x563474613a28 <line:77:1, col:24> col:6 ClearDatadirCache 'void ()'
| `-FullComment 0x5634747611c0 <line:76:4, col:15>
|   `-ParagraphComment 0x563474761190 <col:4, col:15>
|     `-TextComment 0x563474761160 <col:4, col:15> Text=" Tests only "
|-FunctionDecl 0x563474613b98 <line:78:1, col:51> col:10 invalid GetConfigFile 'int (const int &)'
| `-ParmVarDecl 0x563474613b00 <col:24, col:43> col:43 invalid confPath 'const int &'
|-FunctionDecl 0x563474613e00 <line:94:1, col:76> col:10 invalid AbsPathForConfigVal 'int (const int &, bool)'
| |-ParmVarDecl 0x563474613ca0 <col:30, col:46> col:46 invalid path 'const int &'
| |-ParmVarDecl 0x563474613d18 <col:52, col:72> col:57 net_specific 'bool' cinit
| | `-CXXBoolLiteralExpr 0x563474613d80 <col:72> 'bool' true
| `-FullComment 0x563474761540 <line:87:3, line:92:31>
|   |-ParagraphComment 0x563474761280 <line:87:3, line:88:40>
|   | |-TextComment 0x563474761230 <line:87:3, col:74> Text=" Most paths passed as configuration arguments are treated as relative to"
|   | `-TextComment 0x563474761250 <line:88:3, col:40> Text=" the datadir if they are not absolute."
|   |-ParagraphComment 0x5634747612d0 <line:90:3>
|   | `-TextComment 0x5634747612a0 <col:3> Text=" "
|   |-ParamCommandComment 0x5634747612f0 <col:4, line:91:3> [in] implicitly Param="path" ParamIndex=0
|   | `-ParagraphComment 0x5634747613a0 <line:90:15, line:91:3>
|   |   |-TextComment 0x563474761350 <line:90:15, col:66> Text=" The path to be conditionally prefixed with datadir."
|   |   `-TextComment 0x563474761370 <line:91:3> Text=" "
|   |-ParamCommandComment 0x5634747613c0 <col:4, line:92:3> [in] implicitly Param="net_specific" ParamIndex=1
|   | `-ParagraphComment 0x563474761470 <line:91:23, line:92:3>
|   |   |-TextComment 0x563474761420 <line:91:23, col:49> Text=" Forwarded to GetDataDir()."
|   |   `-TextComment 0x563474761440 <line:92:3> Text=" "
|   `-BlockCommandComment 0x563474761490 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x5634747614f0 <col:11, col:31>
|       `-TextComment 0x5634747614c0 <col:11, col:31> Text=" The normalized path."
|-FunctionDecl 0x563474613f88 <line:96:1, line:103:1> line:96:13 IsSwitchChar 'bool (char)' inline
| |-ParmVarDecl 0x563474613ec0 <col:26, col:31> col:31 used c 'char'
| `-CompoundStmt 0x5634746140e0 <line:97:1, line:103:1>
|   `-ReturnStmt 0x5634746140d0 <line:101:5, col:17>
|     `-BinaryOperator 0x5634746140b0 <col:12, col:17> 'bool' '=='
|       |-ImplicitCastExpr 0x563474614080 <col:12> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x563474614068 <col:12> 'char' <LValueToRValue>
|       |   `-DeclRefExpr 0x563474614030 <col:12> 'char' lvalue ParmVar 0x563474613ec0 'c' 'char'
|       `-ImplicitCastExpr 0x563474614098 <col:17> 'int' <IntegralCast>
|         `-CharacterLiteral 0x563474614050 <col:17> 'char' 45
|-EnumDecl 0x5634746140f8 <line:105:1, line:121:1> line:105:12 referenced class OptionsCategory 'int'
| |-EnumConstantDecl 0x5634746141c0 <line:106:5> col:5 OPTIONS 'OptionsCategory'
| |-EnumConstantDecl 0x563474614210 <line:107:5> col:5 CONNECTION 'OptionsCategory'
| |-EnumConstantDecl 0x563474614260 <line:108:5> col:5 WALLET 'OptionsCategory'
| |-EnumConstantDecl 0x5634746142b0 <line:109:5> col:5 WALLET_DEBUG_TEST 'OptionsCategory'
| |-EnumConstantDecl 0x563474614300 <line:110:5> col:5 ZMQ 'OptionsCategory'
| |-EnumConstantDecl 0x563474614350 <line:111:5> col:5 DEBUG_TEST 'OptionsCategory'
| |-EnumConstantDecl 0x5634746143a0 <line:112:5> col:5 CHAINPARAMS 'OptionsCategory'
| |-EnumConstantDecl 0x5634746143f0 <line:113:5> col:5 NODE_RELAY 'OptionsCategory'
| |-EnumConstantDecl 0x563474614440 <line:114:5> col:5 BLOCK_CREATION 'OptionsCategory'
| |-EnumConstantDecl 0x563474614490 <line:115:5> col:5 RPC 'OptionsCategory'
| |-EnumConstantDecl 0x5634746144e0 <line:116:5> col:5 GUI 'OptionsCategory'
| |-EnumConstantDecl 0x563474614530 <line:117:5> col:5 COMMANDS 'OptionsCategory'
| |-EnumConstantDecl 0x563474614580 <line:118:5> col:5 REGISTER_COMMANDS 'OptionsCategory'
| `-EnumConstantDecl 0x5634746145d0 <line:120:5> col:5 HIDDEN 'OptionsCategory'
|-CXXRecordDecl 0x563474614620 <line:123:1, line:128:1> line:123:8 referenced invalid struct SectionInfo definition
| |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563474614738 <col:1, col:8> col:8 implicit struct SectionInfo
| |-FieldDecl 0x5634746147f0 <line:125:5, col:17> col:17 invalid m_name 'int'
| |-FieldDecl 0x563474614868 <line:126:5, col:17> col:17 invalid m_file 'int'
| `-FieldDecl 0x5634746148d0 <line:127:5, col:9> col:9 m_line 'int'
|-CXXRecordDecl 0x563474614938 <line:130:1, line:302:1> line:130:7 referenced invalid class ArgsManager definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563474614a58 <col:1, col:7> col:7 implicit referenced class ArgsManager
| |-AccessSpecDecl 0x563474614ae8 <line:132:1, col:7> col:1 public
| |-EnumDecl 0x563474614b10 <line:133:5, line:147:5> line:133:10 Flags
| | |-EnumConstantDecl 0x563474614c10 <line:134:9, col:16> col:9 NONE 'ArgsManager::Flags'
| | | `-ImplicitCastExpr 0x563474615070 <col:16> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0x563474614bf0 <col:16> 'int' 0
| | |     `-IntegerLiteral 0x563474614bd0 <col:16> 'int' 0
| | |-EnumConstantDecl 0x563474614cd0 <line:136:9, col:22> col:9 referenced ALLOW_BOOL 'ArgsManager::Flags'
| | | `-ImplicitCastExpr 0x563474615088 <col:22> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0x563474614c80 <col:22> 'int' 1
| | |     `-IntegerLiteral 0x563474614c60 <col:22> 'int' 1
| | |-EnumConstantDecl 0x563474614d60 <line:137:9, col:21> col:9 referenced ALLOW_INT 'ArgsManager::Flags'
| | | `-ImplicitCastExpr 0x5634746150a0 <col:21> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0x563474614d40 <col:21> 'int' 2
| | |     `-IntegerLiteral 0x563474614d20 <col:21> 'int' 2
| | |-EnumConstantDecl 0x563474614df0 <line:138:9, col:24> col:9 referenced ALLOW_STRING 'ArgsManager::Flags'
| | | `-ImplicitCastExpr 0x5634746150b8 <col:24> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0x563474614dd0 <col:24> 'int' 4
| | |     `-IntegerLiteral 0x563474614db0 <col:24> 'int' 4
| | |-EnumConstantDecl 0x563474614f00 <line:139:9, col:46> col:9 ALLOW_ANY 'ArgsManager::Flags'
| | | `-ImplicitCastExpr 0x5634746150d0 <col:21, col:46> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0x563474614ee0 <col:21, col:46> 'int' 7
| | |     `-BinaryOperator 0x563474614ec0 <col:21, col:46> 'int' '|'
| | |       |-BinaryOperator 0x563474614e80 <col:21, col:34> 'int' '|'
| | |       | |-DeclRefExpr 0x563474614e40 <col:21> 'int' EnumConstant 0x563474614cd0 'ALLOW_BOOL' 'ArgsManager::Flags'
| | |       | `-DeclRefExpr 0x563474614e60 <col:34> 'int' EnumConstant 0x563474614d60 'ALLOW_INT' 'ArgsManager::Flags'
| | |       `-DeclRefExpr 0x563474614ea0 <col:46> 'int' EnumConstant 0x563474614df0 'ALLOW_STRING' 'ArgsManager::Flags'
| | |-EnumConstantDecl 0x563474614f90 <line:140:9, col:22> col:9 DEBUG_ONLY 'ArgsManager::Flags'
| | | `-ImplicitCastExpr 0x5634746150e8 <col:22> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0x563474614f70 <col:22> 'int' 256
| | |     `-IntegerLiteral 0x563474614f50 <col:22> 'int' 256
| | `-EnumConstantDecl 0x563474615020 <line:146:9, col:24> col:9 NETWORK_ONLY 'ArgsManager::Flags'
| |   `-ImplicitCastExpr 0x563474615100 <col:24> 'unsigned int' <IntegralCast>
| |     `-ConstantExpr 0x563474615000 <col:24> 'int' 512
| |       `-IntegerLiteral 0x563474614fe0 <col:24> 'int' 512
| |-AccessSpecDecl 0x563474615118 <line:149:1, col:10> col:1 protected
| |-FriendDecl 0x563474615258 <line:150:5, col:18> col:12 'class ArgsManagerHelper':'ArgsManagerHelper'
| |-CXXRecordDecl 0x563474615298 <line:152:5, line:157:5> line:152:12 invalid struct Arg definition
| | |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x5634746153b8 <col:5, col:12> col:12 implicit struct Arg
| | |-FieldDecl 0x563474615470 <line:154:9, col:21> col:21 invalid m_help_param 'int'
| | |-FieldDecl 0x5634746154e8 <line:155:9, col:21> col:21 invalid m_help_text 'int'
| | `-FieldDecl 0x563474615550 <line:156:9, col:22> col:22 m_flags 'unsigned int'
| |-FieldDecl 0x5634746155f0 <line:159:5, col:30> col:30 referenced cs_args 'CCriticalSection':'int' mutable
| |-FieldDecl 0x5634746156a8 <line:162:5, col:17> col:17 invalid m_network 'int'
| |-FieldDecl 0x563474615730 <line:163:27> col:27 invalid m_network_only_args 'int'
| |-CXXMethodDecl 0x563474615ae0 <line:167:5, col:140> col:20 invalid ReadConfigStream 'int (int &, const int &, int &, bool)'
| | |-ParmVarDecl 0x563474615818 <col:37, col:51> col:51 invalid stream 'int &'
| | |-ParmVarDecl 0x5634746158a8 <col:59, col:78> col:78 invalid filepath 'const int &'
| | |-ParmVarDecl 0x563474615938 <col:88, col:101> col:101 invalid error 'int &'
| | `-ParmVarDecl 0x5634746159b0 <col:108, col:135> col:113 ignore_invalid_keys 'bool' cinit
| |   `-CXXBoolLiteralExpr 0x563474619730 <col:135> 'bool' false
| |-AccessSpecDecl 0x563474615ba0 <line:169:1, col:7> col:1 public
| |-CXXConstructorDecl 0x563474615c00 <line:170:5, col:17> col:5 ArgsManager 'void ()'
| |-CXXMethodDecl 0x563474615d90 <line:175:5, col:56> col:10 invalid SelectConfigNetwork 'void (const int &)'
| | |-ParmVarDecl 0x563474615d00 <col:30, col:49> col:49 invalid network 'const int &'
| | `-FullComment 0x563474761610 <line:173:7, col:32>
| |   `-ParagraphComment 0x5634747615e0 <col:7, col:32>
| |     `-TextComment 0x5634747615b0 <col:7, col:32> Text=" Select the network in use"
| |-CXXMethodDecl 0x563474616170 <line:177:5, col:90> col:20 invalid ParseParameters 'int (int, const char *const *, int &)'
| | |-ParmVarDecl 0x563474615e60 <col:36, col:40> col:40 argc 'int'
| | |-ParmVarDecl 0x563474615fb0 <col:46, col:69> col:64 argv 'const char *const *':'const char *const *'
| | `-ParmVarDecl 0x563474616040 <col:72, col:85> col:85 invalid error 'int &'
| |-CXXMethodDecl 0x5634746163b0 <line:178:5, col:88> col:20 invalid ReadConfigFiles 'int (int &, bool)'
| | |-ParmVarDecl 0x563474616260 <col:36, col:49> col:49 invalid error 'int &'
| | `-ParmVarDecl 0x5634746162d8 <col:56, col:83> col:61 ignore_invalid_keys 'bool' cinit
| |   `-CXXBoolLiteralExpr 0x563474619740 <col:83> 'bool' false
| |-CXXMethodDecl 0x563474616530 <line:186:5, col:64> col:33 invalid GetUnsuitableSectionOnlyArgs 'const int () const'
| | `-FullComment 0x563474761750 <line:181:7, line:184:19>
| |   `-ParagraphComment 0x563474761720 <line:181:7, line:184:19>
| |     |-TextComment 0x563474761680 <line:181:7, col:59> Text=" Log warnings for options in m_section_only_args when"
| |     |-TextComment 0x5634747616a0 <line:182:7, col:67> Text=" they are specified in the default section but not overridden"
| |     |-TextComment 0x5634747616c0 <line:183:7, col:66> Text=" on the command line or in a network-specific section in the"
| |     `-TextComment 0x5634747616e0 <line:184:7, col:19> Text=" config file."
| |-CXXMethodDecl 0x563474616760 <line:199:30, col:65> col:30 invalid GetArgs 'int (const int &) const'
| | |-ParmVarDecl 0x563474616690 <col:38, col:57> col:57 invalid strArg 'const int &'
| | `-FullComment 0x5634747619d0 <line:194:7, line:197:37>
| |   |-ParagraphComment 0x5634747617f0 <line:194:7, col:55>
| |   | `-TextComment 0x5634747617c0 <col:7, col:55> Text=" Return a vector of strings of the given argument"
| |   |-ParagraphComment 0x563474761840 <line:196:7>
| |   | `-TextComment 0x563474761810 <col:7> Text=" "
| |   |-ParamCommandComment 0x563474761860 <col:8, line:197:7> [in] implicitly Param="strArg" ParamIndex=0
| |   | `-ParagraphComment 0x563474761910 <line:196:21, line:197:7>
| |   |   |-TextComment 0x5634747618c0 <line:196:21, col:50> Text=" Argument to get (e.g. "-foo")"
| |   |   `-TextComment 0x5634747618e0 <line:197:7> Text=" "
| |   `-BlockCommandComment 0x563474761930 <col:8, col:37> Name="return"
| |     `-ParagraphComment 0x563474761990 <col:15, col:37>
| |       `-TextComment 0x563474761960 <col:15, col:37> Text=" command-line arguments"
| |-CXXMethodDecl 0x563474616928 <line:207:5, col:46> col:10 invalid IsArgSet 'bool (const int &) const'
| | |-ParmVarDecl 0x563474616860 <col:19, col:38> col:38 invalid strArg 'const int &'
| | `-FullComment 0x563474761c50 <line:202:7, line:205:48>
| |   |-ParagraphComment 0x563474761a70 <line:202:7, col:62>
| |   | `-TextComment 0x563474761a40 <col:7, col:62> Text=" Return true if the given argument has been manually set"
| |   |-ParagraphComment 0x563474761ac0 <line:204:7>
| |   | `-TextComment 0x563474761a90 <col:7> Text=" "
| |   |-ParamCommandComment 0x563474761ae0 <col:8, line:205:7> [in] implicitly Param="strArg" ParamIndex=0
| |   | `-ParagraphComment 0x563474761b90 <line:204:21, line:205:7>
| |   |   |-TextComment 0x563474761b40 <line:204:21, col:50> Text=" Argument to get (e.g. "-foo")"
| |   |   `-TextComment 0x563474761b60 <line:205:7> Text=" "
| |   `-BlockCommandComment 0x563474761bb0 <col:8, col:48> Name="return"
| |     `-ParagraphComment 0x563474761c10 <col:15, col:48>
| |       `-TextComment 0x563474761be0 <col:15, col:48> Text=" true if the argument has been set"
| |-CXXMethodDecl 0x563474616ab0 <line:216:5, col:50> col:10 invalid IsArgNegated 'bool (const int &) const'
| | |-ParmVarDecl 0x563474616a20 <col:23, col:42> col:42 invalid strArg 'const int &'
| | `-FullComment 0x563474761ef0 <line:210:7, line:214:54>
| |   |-ParagraphComment 0x563474761d10 <line:210:7, line:211:19>
| |   | |-TextComment 0x563474761cc0 <line:210:7, col:77> Text=" Return true if the argument was originally passed as a negated option,"
| |   | `-TextComment 0x563474761ce0 <line:211:7, col:19> Text=" i.e. -nofoo."
| |   |-ParagraphComment 0x563474761d60 <line:213:7>
| |   | `-TextComment 0x563474761d30 <col:7> Text=" "
| |   |-ParamCommandComment 0x563474761d80 <col:8, line:214:7> [in] implicitly Param="strArg" ParamIndex=0
| |   | `-ParagraphComment 0x563474761e30 <line:213:21, line:214:7>
| |   |   |-TextComment 0x563474761de0 <line:213:21, col:50> Text=" Argument to get (e.g. "-foo")"
| |   |   `-TextComment 0x563474761e00 <line:214:7> Text=" "
| |   `-BlockCommandComment 0x563474761e50 <col:8, col:54> Name="return"
| |     `-ParagraphComment 0x563474761eb0 <col:15, col:54>
| |       `-TextComment 0x563474761e80 <col:15, col:54> Text=" true if the argument was passed negated"
| |-CXXMethodDecl 0x563474617d60 <line:225:5, col:82> col:17 invalid GetArg 'int (const int &, const int &) const'
| | |-ParmVarDecl 0x563474616bc0 <col:24, col:43> col:43 invalid strArg 'const int &'
| | |-ParmVarDecl 0x563474616c50 <col:51, col:70> col:70 invalid strDefault 'const int &'
| | `-FullComment 0x563474762680 <line:219:7, line:223:53>
| |   |-ParagraphComment 0x563474761f90 <line:219:7, col:46>
| |   | `-TextComment 0x563474761f60 <col:7, col:46> Text=" Return string argument or default value"
| |   |-ParagraphComment 0x563474761fe0 <line:221:7>
| |   | `-TextComment 0x563474761fb0 <col:7> Text=" "
| |   |-ParamCommandComment 0x563474762000 <col:8, line:222:7> [in] implicitly Param="strArg" ParamIndex=0
| |   | `-ParagraphComment 0x5634747624e0 <line:221:21, line:222:7>
| |   |   |-TextComment 0x563474762490 <line:221:21, col:50> Text=" Argument to get (e.g. "-foo")"
| |   |   `-TextComment 0x5634747624b0 <line:222:7> Text=" "
| |   |-ParamCommandComment 0x563474762500 <col:8, line:223:7> [in] implicitly Param="strDefault" ParamIndex=1
| |   | `-ParagraphComment 0x5634747625b0 <line:222:25, line:223:7>
| |   |   |-TextComment 0x563474762560 <line:222:25, col:35> Text=" (e.g. "1")"
| |   |   `-TextComment 0x563474762580 <line:223:7> Text=" "
| |   `-BlockCommandComment 0x5634747625d0 <col:8, col:53> Name="return"
| |     `-ParagraphComment 0x563474762630 <col:15, col:53>
| |       `-TextComment 0x563474762600 <col:15, col:53> Text=" command-line argument or default value"
| |-CXXMethodDecl 0x563474617fe0 <line:234:5, col:65> col:13 invalid GetArg 'int (const int &, int) const'
| | |-ParmVarDecl 0x563474617e70 <col:20, col:39> col:39 invalid strArg 'const int &'
| | |-ParmVarDecl 0x563474617f00 <col:47, col:55> col:55 invalid nDefault 'int'
| | `-FullComment 0x5634747629e0 <line:228:7, line:232:75>
| |   |-ParagraphComment 0x563474762720 <line:228:7, col:47>
| |   | `-TextComment 0x5634747626f0 <col:7, col:47> Text=" Return integer argument or default value"
| |   |-ParagraphComment 0x563474762770 <line:230:7>
| |   | `-TextComment 0x563474762740 <col:7> Text=" "
| |   |-ParamCommandComment 0x563474762790 <col:8, line:231:7> [in] implicitly Param="strArg" ParamIndex=0
| |   | `-ParagraphComment 0x563474762840 <line:230:21, line:231:7>
| |   |   |-TextComment 0x5634747627f0 <line:230:21, col:50> Text=" Argument to get (e.g. "-foo")"
| |   |   `-TextComment 0x563474762810 <line:231:7> Text=" "
| |   |-ParamCommandComment 0x563474762860 <col:8, line:232:7> [in] implicitly Param="nDefault" ParamIndex=1
| |   | `-ParagraphComment 0x563474762910 <line:231:23, line:232:7>
| |   |   |-TextComment 0x5634747628c0 <line:231:23, col:31> Text=" (e.g. 1)"
| |   |   `-TextComment 0x5634747628e0 <line:232:7> Text=" "
| |   `-BlockCommandComment 0x563474762930 <col:8, col:75> Name="return"
| |     `-ParagraphComment 0x563474762990 <col:15, col:75>
| |       `-TextComment 0x563474762960 <col:15, col:75> Text=" command-line argument (0 if invalid number) or default value"
| |-CXXMethodDecl 0x563474618228 <line:243:5, col:63> col:10 invalid GetBoolArg 'bool (const int &, bool) const'
| | |-ParmVarDecl 0x5634746180e0 <col:21, col:40> col:40 invalid strArg 'const int &'
| | |-ParmVarDecl 0x563474618158 <col:48, col:53> col:53 fDefault 'bool'
| | `-FullComment 0x563474762d40 <line:237:7, line:241:53>
| |   |-ParagraphComment 0x563474762a80 <line:237:7, col:47>
| |   | `-TextComment 0x563474762a50 <col:7, col:47> Text=" Return boolean argument or default value"
| |   |-ParagraphComment 0x563474762ad0 <line:239:7>
| |   | `-TextComment 0x563474762aa0 <col:7> Text=" "
| |   |-ParamCommandComment 0x563474762af0 <col:8, line:240:7> [in] implicitly Param="strArg" ParamIndex=0
| |   | `-ParagraphComment 0x563474762ba0 <line:239:21, line:240:7>
| |   |   |-TextComment 0x563474762b50 <line:239:21, col:50> Text=" Argument to get (e.g. "-foo")"
| |   |   `-TextComment 0x563474762b70 <line:240:7> Text=" "
| |   |-ParamCommandComment 0x563474762bc0 <col:8, line:241:7> [in] implicitly Param="fDefault" ParamIndex=1
| |   | `-ParagraphComment 0x563474762c70 <line:240:23, line:241:7>
| |   |   |-TextComment 0x563474762c20 <line:240:23, col:38> Text=" (true or false)"
| |   |   `-TextComment 0x563474762c40 <line:241:7> Text=" "
| |   `-BlockCommandComment 0x563474762c90 <col:8, col:53> Name="return"
| |     `-ParagraphComment 0x563474762cf0 <col:15, col:53>
| |       `-TextComment 0x563474762cc0 <col:15, col:53> Text=" command-line argument or default value"
| |-CXXMethodDecl 0x563474618498 <line:252:5, col:75> col:10 invalid SoftSetArg 'bool (const int &, const int &)'
| | |-ParmVarDecl 0x563474618330 <col:21, col:40> col:40 invalid strArg 'const int &'
| | |-ParmVarDecl 0x5634746183c0 <col:48, col:67> col:67 invalid strValue 'const int &'
| | `-FullComment 0x5634747630a0 <line:246:7, line:250:73>
| |   |-ParagraphComment 0x563474762de0 <line:246:7, col:57>
| |   | `-TextComment 0x563474762db0 <col:7, col:57> Text=" Set an argument if it doesn't already have a value"
| |   |-ParagraphComment 0x563474762e30 <line:248:7>
| |   | `-TextComment 0x563474762e00 <col:7> Text=" "
| |   |-ParamCommandComment 0x563474762e50 <col:8, line:249:7> [in] implicitly Param="strArg" ParamIndex=0
| |   | `-ParagraphComment 0x563474762f00 <line:248:21, line:249:7>
| |   |   |-TextComment 0x563474762eb0 <line:248:21, col:50> Text=" Argument to set (e.g. "-foo")"
| |   |   `-TextComment 0x563474762ed0 <line:249:7> Text=" "
| |   |-ParamCommandComment 0x563474762f20 <col:8, line:250:7> [in] implicitly Param="strValue" ParamIndex=1
| |   | `-ParagraphComment 0x563474762fd0 <line:249:23, line:250:7>
| |   |   |-TextComment 0x563474762f80 <line:249:23, col:39> Text=" Value (e.g. "1")"
| |   |   `-TextComment 0x563474762fa0 <line:250:7> Text=" "
| |   `-BlockCommandComment 0x563474762ff0 <col:8, col:73> Name="return"
| |     `-ParagraphComment 0x563474763050 <col:15, col:73>
| |       `-TextComment 0x563474763020 <col:15, col:73> Text=" true if argument gets set, false if it already had a value"
| |-CXXMethodDecl 0x5634746186e8 <line:261:5, col:63> col:10 invalid SoftSetBoolArg 'bool (const int &, bool)'
| | |-ParmVarDecl 0x5634746185a0 <col:25, col:44> col:44 invalid strArg 'const int &'
| | |-ParmVarDecl 0x563474618618 <col:52, col:57> col:57 fValue 'bool'
| | `-FullComment 0x563474763400 <line:255:7, line:259:73>
| |   |-ParagraphComment 0x563474763140 <line:255:7, col:64>
| |   | `-TextComment 0x563474763110 <col:7, col:64> Text=" Set a boolean argument if it doesn't already have a value"
| |   |-ParagraphComment 0x563474763190 <line:257:7>
| |   | `-TextComment 0x563474763160 <col:7> Text=" "
| |   |-ParamCommandComment 0x5634747631b0 <col:8, line:258:7> [in] implicitly Param="strArg" ParamIndex=0
| |   | `-ParagraphComment 0x563474763260 <line:257:21, line:258:7>
| |   |   |-TextComment 0x563474763210 <line:257:21, col:50> Text=" Argument to set (e.g. "-foo")"
| |   |   `-TextComment 0x563474763230 <line:258:7> Text=" "
| |   |-ParamCommandComment 0x563474763280 <col:8, line:259:7> [in] implicitly Param="fValue" ParamIndex=1
| |   | `-ParagraphComment 0x563474763330 <line:258:21, line:259:7>
| |   |   |-TextComment 0x5634747632e0 <line:258:21, col:39> Text=" Value (e.g. false)"
| |   |   `-TextComment 0x563474763300 <line:259:7> Text=" "
| |   `-BlockCommandComment 0x563474763350 <col:8, col:73> Name="return"
| |     `-ParagraphComment 0x5634747633b0 <col:15, col:73>
| |       `-TextComment 0x563474763380 <col:15, col:73> Text=" true if argument gets set, false if it already had a value"
| |-CXXMethodDecl 0x5634746188e8 <line:265:5, col:76> col:10 invalid ForceSetArg 'void (const int &, const int &)'
| | |-ParmVarDecl 0x5634746187c0 <col:22, col:41> col:41 invalid strArg 'const int &'
| | `-ParmVarDecl 0x563474618850 <col:49, col:68> col:68 invalid strValue 'const int &'
| |-CXXMethodDecl 0x563474618a00 <line:271:5, col:32> col:17 invalid GetChainName 'int () const'
| | `-FullComment 0x563474763570 <line:268:7, line:269:106>
| |   |-ParagraphComment 0x5634747634c0 <line:268:7, line:269:7>
| |   | |-TextComment 0x563474763470 <line:268:7, col:81> Text=" Looks for -regtest, -testnet and returns the appropriate BIP70 chain name."
| |   | `-TextComment 0x563474763490 <line:269:7> Text=" "
| |   `-BlockCommandComment 0x5634747634e0 <col:8, col:106> Name="return"
| |     `-ParagraphComment 0x563474763540 <col:15, col:106>
| |       `-TextComment 0x563474763510 <col:15, col:106> Text=" CBaseChainParams::MAIN by default; raises runtime error if an invalid combination is given."
| |-CXXMethodDecl 0x563474618d98 <line:276:5, col:113> col:10 invalid AddArg 'void (const int &, const int &, unsigned int, const OptionsCategory &)'
| | |-ParmVarDecl 0x563474618af0 <col:17, col:36> col:36 invalid name 'const int &'
| | |-ParmVarDecl 0x563474618b80 <col:42, col:61> col:61 invalid help 'const int &'
| | |-ParmVarDecl 0x563474618c00 <col:67, col:80> col:80 flags 'unsigned int'
| | |-ParmVarDecl 0x563474618ca8 <col:87, col:110> col:110 cat 'const OptionsCategory &'
| | `-FullComment 0x563474763640 <line:274:7, col:19>
| |   `-ParagraphComment 0x563474763610 <col:7, col:19>
| |     `-TextComment 0x5634747635e0 <col:7, col:19> Text=" Add argument"
| |-CXXMethodDecl 0x563474618f50 <line:281:5, col:60> col:10 invalid AddHiddenArgs 'void (const int &)'
| | |-ParmVarDecl 0x563474618ec0 <col:24, col:56> col:56 invalid args 'const int &'
| | `-FullComment 0x563474763710 <line:279:7, col:32>
| |   `-ParagraphComment 0x5634747636e0 <col:7, col:32>
| |     `-TextComment 0x5634747636b0 <col:7, col:32> Text=" Add many hidden arguments"
| |-CXXMethodDecl 0x563474619048 <line:286:5, line:290:5> line:286:10 ClearArgs 'void ()'
| | |-CompoundStmt 0x563474619828 <col:22, line:290:5>
| | `-FullComment 0x5634747637e0 <line:284:7, col:32>
| |   `-ParagraphComment 0x5634747637b0 <col:7, col:32>
| |     `-TextComment 0x563474763780 <col:7, col:32> Text=" Clear available arguments"
| |-CXXMethodDecl 0x563474619150 <line:295:5, col:34> col:17 invalid GetHelpMessage 'int () const'
| | `-FullComment 0x5634747638b0 <line:293:7, col:26>
| |   `-ParagraphComment 0x563474763880 <col:7, col:26>
| |     `-TextComment 0x563474763850 <col:7, col:26> Text=" Get the help string"
| |-CXXMethodDecl 0x563474619310 <line:301:5, col:58> col:18 invalid FlagsOfKnownArg 'unsigned int (const int &) const'
| | |-ParmVarDecl 0x563474619240 <col:34, col:53> col:53 invalid key 'const int &'
| | `-FullComment 0x5634747639a0 <line:298:7, line:299:48>
| |   `-ParagraphComment 0x563474763970 <line:298:7, line:299:48>
| |     |-TextComment 0x563474763920 <line:298:7, col:34> Text=" Return Flags for known arg."
| |     `-TextComment 0x563474763940 <line:299:7, col:48> Text=" Return ArgsManager::NONE for unknown arg."
| |-CXXConstructorDecl 0x5634746193e8 <line:130:7> col:7 implicit constexpr ArgsManager 'void (const ArgsManager &)' inline default trivial noexcept-unevaluated 0x5634746193e8
| | `-ParmVarDecl 0x5634746194f8 <col:7> col:7 'const ArgsManager &'
| `-CXXMethodDecl 0x563474619598 <col:7> col:7 implicit operator= 'ArgsManager &(const ArgsManager &)' inline default trivial noexcept-unevaluated 0x563474619598
|   `-ParmVarDecl 0x5634746196a8 <col:7> col:7 'const ArgsManager &'
|-VarDecl 0x563474619848 <line:304:1, col:20> col:20 used gArgs 'ArgsManager' extern
|-FunctionDecl 0x5634746199a8 <line:309:1, col:43> col:6 HelpRequested 'bool (const ArgsManager &)'
| |-ParmVarDecl 0x5634746198e8 <col:20, col:39> col:39 args 'const ArgsManager &'
| `-FullComment 0x563474763af0 <line:307:3, col:65>
|   |-ParagraphComment 0x563474763a40 <col:3>
|   | `-TextComment 0x563474763a10 <col:3> Text=" "
|   `-BlockCommandComment 0x563474763a60 <col:4, col:65> Name="return"
|     `-ParagraphComment 0x563474763ac0 <col:11, col:65>
|       `-TextComment 0x563474763a90 <col:11, col:65> Text=" true if help has been requested via a command-line arg"
|-FunctionDecl 0x563474619b48 <line:312:1, col:40> col:6 SetupHelpOptions 'void (ArgsManager &)'
| |-ParmVarDecl 0x563474619a88 <col:23, col:36> col:36 args 'ArgsManager &'
| `-FullComment 0x563474763bc0 <line:311:4, col:41>
|   `-ParagraphComment 0x563474763b90 <col:4, col:41>
|     `-TextComment 0x563474763b60 <col:4, col:41> Text=" Add help options to the args manager "
|-FunctionDecl 0x56347461bd30 <line:320:1, col:56> col:13 invalid HelpMessageGroup 'int (const int &)'
| |-ParmVarDecl 0x563474619c50 <col:30, col:49> col:49 invalid message 'const int &'
| `-FullComment 0x563474763e40 <line:315:3, line:318:31>
|   |-ParagraphComment 0x563474763c60 <line:315:3, col:66>
|   | `-TextComment 0x563474763c30 <col:3, col:66> Text=" Format a string to be used as group of options in help messages"
|   |-ParagraphComment 0x563474763cb0 <line:317:3>
|   | `-TextComment 0x563474763c80 <col:3> Text=" "
|   |-ParamCommandComment 0x563474763cd0 <col:4, line:318:3> [in] implicitly Param="message" ParamIndex=0
|   | `-ParagraphComment 0x563474763d80 <line:317:18, line:318:3>
|   |   |-TextComment 0x563474763d30 <line:317:18, col:57> Text=" Group name (e.g. "RPC server options:")"
|   |   `-TextComment 0x563474763d50 <line:318:3> Text=" "
|   `-BlockCommandComment 0x563474763da0 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x563474763e00 <col:11, col:31>
|       `-TextComment 0x563474763dd0 <col:11, col:31> Text=" the formatted string"
|-FunctionDecl 0x56347461bfb0 <line:329:1, col:81> col:13 invalid HelpMessageOpt 'int (const int &, const int &)'
| |-ParmVarDecl 0x56347461be40 <col:28, col:47> col:47 invalid option 'const int &'
| |-ParmVarDecl 0x56347461bed0 <col:55, col:74> col:74 invalid message 'const int &'
| `-FullComment 0x5634747641f0 <line:323:3, line:327:31>
|   |-ParagraphComment 0x563474763ee0 <line:323:3, col:68>
|   | `-TextComment 0x563474763eb0 <col:3, col:68> Text=" Format a string to be used as option description in help messages"
|   |-ParagraphComment 0x563474763f30 <line:325:3>
|   | `-TextComment 0x563474763f00 <col:3> Text=" "
|   |-ParamCommandComment 0x563474763f50 <col:4, line:326:3> [in] implicitly Param="option" ParamIndex=0
|   | `-ParagraphComment 0x563474764050 <line:325:17, line:326:3>
|   |   |-TextComment 0x563474763fb0 <line:325:17, col:48> Text=" Option message (e.g. "-rpcuser="
|   |   |-TextComment 0x563474763fd0 <col:49, col:53> Text="<user"
|   |   |-TextComment 0x563474763ff0 <col:54, col:56> Text=">")"
|   |   `-TextComment 0x563474764010 <line:326:3> Text=" "
|   |-ParamCommandComment 0x563474764070 <col:4, line:327:3> [in] implicitly Param="message" ParamIndex=1
|   | `-ParagraphComment 0x563474764120 <line:326:18, line:327:3>
|   |   |-TextComment 0x5634747640d0 <line:326:18, col:79> Text=" Option description (e.g. "Username for JSON-RPC connections")"
|   |   `-TextComment 0x5634747640f0 <line:327:3> Text=" "
|   `-BlockCommandComment 0x563474764140 <col:4, col:31> Name="return"
|     `-ParagraphComment 0x5634747641a0 <col:11, col:31>
|       `-TextComment 0x563474764170 <col:11, col:31> Text=" the formatted string"
|-FunctionDecl 0x56347461c0b0 <line:335:1, col:17> col:5 GetNumCores 'int ()'
| `-FullComment 0x563474764360 <line:332:3, line:333:81>
|   |-ParagraphComment 0x5634747642b0 <line:332:3, line:333:3>
|   | |-TextComment 0x563474764260 <line:332:3, col:62> Text=" Return the number of cores available on the current system."
|   | `-TextComment 0x563474764280 <line:333:3> Text=" "
|   `-BlockCommandComment 0x5634747642d0 <col:4, col:81> Name="note"
|     `-ParagraphComment 0x563474764330 <col:9, col:81>
|       `-TextComment 0x563474764300 <col:9, col:81> Text=" This does count virtual cores, such as those provided by HyperThreading."
|-FunctionTemplateDecl 0x56347461c448 <line:340:1, line:362:1> line:340:35 TraceThread
| |-TemplateTypeParmDecl 0x56347461c178 <col:11, col:20> col:20 referenced typename depth 0 index 0 Callable
| |-FunctionDecl 0x56347461c3a8 <col:30, line:362:1> line:340:35 TraceThread 'void (const char *, Callable)'
| | |-ParmVarDecl 0x56347461c218 <col:47, col:59> col:59 referenced name 'const char *'
| | |-ParmVarDecl 0x56347461c290 <col:66, col:75> col:75 referenced func 'Callable'
| | |-CompoundStmt 0x56347461cae8 <line:341:1, line:362:1>
| | | |-DeclStmt 0x56347461c548 <line:342:5, col:29>
| | | | `-VarDecl 0x56347461c4e0 <col:5, <invalid sloc>> col:24 invalid name 'int':'int'
| | | `-CXXTryStmt 0x56347461cab8 <line:343:5, line:361:5>
| | |   |-CompoundStmt 0x56347461c730 <line:344:5, line:348:5>
| | |   | `-CallExpr 0x56347461c608 <line:346:9, col:14> '<dependent type>'
| | |   |   `-DeclRefExpr 0x56347461c5e8 <col:9> 'Callable' lvalue ParmVar 0x56347461c290 'func' 'Callable'
| | |   |-CXXCatchStmt 0x56347461c918 <line:349:5, line:353:5>
| | |   | |-VarDecl 0x56347461c770 <line:349:12, <invalid sloc>> col:44 invalid 'const int &'
| | |   | `-CompoundStmt 0x56347461c900 <line:350:5, line:353:5>
| | |   |   `-CXXThrowExpr 0x56347461c8e8 <line:352:9> 'void'
| | |   |-CXXCatchStmt 0x56347461ca18 <line:354:5, line:357:5>
| | |   | |-VarDecl 0x56347461c960 <line:354:12, col:34> col:34 invalid e 'const int &'
| | |   | `-CompoundStmt 0x56347461ca00 <col:37, line:357:5>
| | |   |   `-CXXThrowExpr 0x56347461c9e8 <line:356:9> 'void'
| | |   `-CXXCatchStmt 0x56347461ca98 <line:358:5, line:361:5>
| | |     |-<<<NULL>>>
| | |     `-CompoundStmt 0x56347461ca80 <line:358:17, line:361:5>
| | |       `-CXXThrowExpr 0x56347461ca68 <line:360:9> 'void'
| | `-FullComment 0x5634747647a0 <line:338:3, col:45>
| |   `-ParagraphComment 0x563474764770 <col:3, col:45>
| |     `-TextComment 0x563474764740 <col:3, col:45> Text=" .. and a wrapper that just calls func once"
| `-FullComment 0x5634747646d0 <col:3, col:45>
|   `-ParagraphComment 0x5634747646a0 <col:3, col:45>
|     `-TextComment 0x563474764450 <col:3, col:45> Text=" .. and a wrapper that just calls func once"
|-FunctionDecl 0x56347461cbd8 <line:364:1, col:58> col:13 invalid CopyrightHolders 'int (const int &)'
| `-ParmVarDecl 0x56347461cb40 <col:30, col:49> col:49 invalid strPrefix 'const int &'
|-FunctionDecl 0x56347461ccd0 <line:373:1, col:27> col:5 ScheduleBatchPriority 'int ()'
| `-FullComment 0x563474764990 <line:367:3, line:371:23>
|   |-ParagraphComment 0x563474764860 <line:367:3, line:368:78>
|   | |-TextComment 0x563474764810 <line:367:3, col:70> Text=" On platforms that support it, tell the kernel the calling thread is"
|   | `-TextComment 0x563474764830 <line:368:3, col:78> Text=" CPU-intensive and non-interactive. See SCHED_BATCH in sched(7) for details."
|   |-ParagraphComment 0x5634747648b0 <line:370:3>
|   | `-TextComment 0x563474764880 <col:3> Text=" "
|   `-BlockCommandComment 0x5634747648d0 <col:4, line:371:23> Name="return"
|     `-ParagraphComment 0x563474764950 <line:370:11, line:371:23>
|       |-TextComment 0x563474764900 <line:370:11, col:75> Text=" The return value of sched_setschedule(), or 1 on systems without"
|       `-TextComment 0x563474764920 <line:371:3, col:23> Text=" sched_setschedule()."
|-NamespaceDecl 0x56347461cd98 <line:375:1, line:402:1> line:375:11 util
| |-FunctionTemplateDecl 0x56347461d158 <line:378:1, line:381:1> line:379:13 insert
| | |-TemplateTypeParmDecl 0x56347461ce08 <line:378:11, col:20> col:20 referenced typename depth 0 index 0 Tdst
| | |-TemplateTypeParmDecl 0x56347461ce78 <col:26, col:35> col:35 referenced typename depth 0 index 1 Tsrc
| | |-FunctionDecl 0x56347461d0b8 <line:379:1, line:381:1> line:379:13 insert 'void (Tdst &, const Tsrc &)' inline
| | | |-ParmVarDecl 0x56347461cf48 <col:20, col:26> col:26 referenced dst 'Tdst &'
| | | |-ParmVarDecl 0x56347461cfe8 <col:31, col:43> col:43 referenced src 'const Tsrc &'
| | | |-CompoundStmt 0x56347461d3f8 <col:48, line:381:1>
| | | | `-CallExpr 0x56347461d3c0 <line:380:5, col:51> '<dependent type>'
| | | |   |-CXXDependentScopeMemberExpr 0x56347461d1e0 <col:5, col:9> '<dependent type>' lvalue .insert
| | | |   | `-DeclRefExpr 0x56347461d1c0 <col:5> 'Tdst' lvalue ParmVar 0x56347461cf48 'dst' 'Tdst &'
| | | |   |-CallExpr 0x56347461d290 <col:16, col:26> '<dependent type>'
| | | |   | `-CXXDependentScopeMemberExpr 0x56347461d248 <col:16, col:20> '<dependent type>' lvalue .begin
| | | |   |   `-DeclRefExpr 0x56347461d228 <col:16> 'Tdst' lvalue ParmVar 0x56347461cf48 'dst' 'Tdst &'
| | | |   |-CallExpr 0x56347461d318 <col:29, col:39> '<dependent type>'
| | | |   | `-CXXDependentScopeMemberExpr 0x56347461d2d0 <col:29, col:33> '<dependent type>' lvalue .begin
| | | |   |   `-DeclRefExpr 0x56347461d2b0 <col:29> 'const Tsrc' lvalue ParmVar 0x56347461cfe8 'src' 'const Tsrc &'
| | | |   `-CallExpr 0x56347461d3a0 <col:42, col:50> '<dependent type>'
| | | |     `-CXXDependentScopeMemberExpr 0x56347461d358 <col:42, col:46> '<dependent type>' lvalue .end
| | | |       `-DeclRefExpr 0x56347461d338 <col:42> 'const Tsrc' lvalue ParmVar 0x56347461cfe8 'src' 'const Tsrc &'
| | | `-FullComment 0x563474764bb0 <line:377:4, col:35>
| | |   `-ParagraphComment 0x563474764b80 <col:4, col:35>
| | |     `-TextComment 0x563474764b50 <col:4, col:35> Text=" Simplification of std insertion"
| | `-FullComment 0x563474764ae0 <col:4, col:35>
| |   `-ParagraphComment 0x563474764ab0 <col:4, col:35>
| |     `-TextComment 0x563474764a80 <col:4, col:35> Text=" Simplification of std insertion"
| `-VarTemplateDecl 0x56347461d5b0 <line:382:1, line:383:13> col:13 invalid insert
|   |-TemplateTypeParmDecl 0x56347461d410 <line:382:11, col:20> col:20 referenced typename depth 0 index 0 TsetT
|   |-TemplateTypeParmDecl 0x56347461d488 <col:27, col:36> col:36 typename depth 0 index 1 Tsrc
|   `-VarDecl 0x56347461d548 <line:383:1, col:13> col:13 invalid insert 'void' inline
|-CXXRecordDecl 0x56347461d638 <bitcoin/src/addrman.h:24:1, line:94:1> line:24:7 referenced invalid class CAddrInfo definition
| |-DefinitionData trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'CAddress'
| |-FullComment 0x563474764d60 <line:22:3, col:39>
| | `-ParagraphComment 0x563474764d30 <col:3, col:39>
| |   `-TextComment 0x563474764d00 <col:3, col:39> Text=" Extended statistics about a CAddress"
| |-CXXRecordDecl 0x56347461d798 <line:24:1, col:7> col:7 implicit referenced class CAddrInfo
| |-AccessSpecDecl 0x56347461d858 <line:26:1, col:7> col:1 public
| |-FieldDecl 0x56347461d8a8 <line:28:5, col:13> col:13 invalid nLastTry 'int'
| | `-FullComment 0x563474764e30 <line:27:8, col:47>
| |   `-ParagraphComment 0x563474764e00 <col:8, col:47>
| |     `-TextComment 0x563474764dd0 <col:8, col:47> Text=" last try whatsoever by us (memory only)"
| |-FieldDecl 0x56347461d950 <line:31:5, col:13> col:13 invalid nLastCountAttempt 'int'
| | `-FullComment 0x563474764f00 <line:30:8, col:42>
| |   `-ParagraphComment 0x563474764ed0 <col:8, col:42>
| |     `-TextComment 0x563474764ea0 <col:8, col:42> Text=" last counted attempt (memory only)"
| |-AccessSpecDecl 0x56347461d9c8 <line:33:1, col:8> col:1 private
| |-FieldDecl 0x56347461da00 <line:35:5, col:14> col:14 invalid source 'CNetAddr'
| | `-FullComment 0x563474764fd0 <line:34:8, col:58>
| |   `-ParagraphComment 0x563474764fa0 <col:8, col:58>
| |     `-TextComment 0x563474764f70 <col:8, col:58> Text=" where knowledge about this address first came from"
| |-FieldDecl 0x56347461daa0 <line:38:5, col:13> col:13 invalid nLastSuccess 'int'
| | `-FullComment 0x5634747650a0 <line:37:8, col:40>
| |   `-ParagraphComment 0x563474765070 <col:8, col:40>
| |     `-TextComment 0x563474765040 <col:8, col:40> Text=" last successful connection by us"
| |-FieldDecl 0x56347461db30 <line:41:5, col:20> col:9 referenced nAttempts 'int'
| | |-InitListExpr 0x56347461f698 <col:18, col:20> 'int'
| | | `-IntegerLiteral 0x56347461f630 <col:19> 'int' 0
| | `-FullComment 0x563474765170 <line:40:8, col:57>
| |   `-ParagraphComment 0x563474765140 <col:8, col:57>
| |     `-TextComment 0x563474765110 <col:8, col:57> Text=" connection attempts since last successful attempt"
| |-FieldDecl 0x56347461dbc0 <line:44:5, col:20> col:9 referenced nRefCount 'int'
| | |-InitListExpr 0x56347461f748 <col:18, col:20> 'int'
| | | `-IntegerLiteral 0x56347461f6e0 <col:19> 'int' 0
| | `-FullComment 0x563474765240 <line:43:8, col:49>
| |   `-ParagraphComment 0x563474765210 <col:8, col:49>
| |     `-TextComment 0x5634747651e0 <col:8, col:49> Text=" reference count in new sets (memory only)"
| |-FieldDecl 0x56347461dc48 <line:47:5, col:24> col:10 referenced fInTried 'bool'
| | |-InitListExpr 0x56347461f7e8 <col:18, col:24> 'bool'
| | | `-CXXBoolLiteralExpr 0x56347461f790 <col:19> 'bool' false
| | `-FullComment 0x563474765310 <line:46:8, col:35>
| |   `-ParagraphComment 0x5634747652e0 <col:8, col:35>
| |     `-TextComment 0x5634747652b0 <col:8, col:35> Text=" in tried set? (memory only)"
| |-FieldDecl 0x56347461dce0 <line:50:5, col:22> col:9 referenced nRandomPos 'int'
| | |-InitListExpr 0x56347461f8b0 <col:19, col:22> 'int'
| | | `-UnaryOperator 0x56347461f850 <col:20, col:21> 'int' prefix '-'
| | |   `-IntegerLiteral 0x56347461f830 <col:21> 'int' 1
| | `-FullComment 0x5634747653e0 <line:49:8, col:27>
| |   `-ParagraphComment 0x5634747653b0 <col:8, col:27>
| |     `-TextComment 0x563474765380 <col:8, col:27> Text=" position in vRandom"
| |-FriendDecl 0x56347461dd90 <line:52:5, col:18> col:12 'class CAddrMan':'CAddrMan'
| |-AccessSpecDecl 0x56347461ddd0 <line:54:1, col:7> col:1 public
| |-FunctionTemplateDecl 0x56347461e048 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x56347461ddf8 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x56347461dfa8 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x56347461deb8 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x56347461f9b0 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x56347461e2f8 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x56347461e0a8 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x56347461e258 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x56347461e168 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x56347461fab8 <col:33, line:201:5>
| |     `-CallExpr 0x56347461fa88 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56347461f9d0 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56347461fa28 <col:25> 'Stream' lvalue ParmVar 0x56347461e168 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x56347461fa58 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x56347461e688 <bitcoin/src/addrman.h:58:5, line:64:5> line:59:17 SerializationOp
| | |-TemplateTypeParmDecl 0x56347461e358 <line:58:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x56347461e3c8 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x56347461e5e8 <line:59:5, line:64:5> line:59:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x56347461e498 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x56347461e510 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x563474622278 <col:66, line:64:5>
| |     `-ParenExpr 0x563474622258 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |       `-CallExpr 0x563474622220 <col:25, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x563474622150 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |         |-DeclRefExpr 0x5634746221a0 <col:44> 'Stream' lvalue ParmVar 0x56347461e498 's' 'Stream &'
| |         |-DeclRefExpr 0x5634746221c0 <col:47> 'Operation' lvalue ParmVar 0x56347461e510 'ser_action' 'Operation'
| |         `-MemberExpr 0x5634746221f0 <bitcoin/src/addrman.h:63:19> 'int' lvalue ->nAttempts 0x56347461db30
| |           `-CXXThisExpr 0x5634746221e0 <col:19> 'CAddrInfo *' implicit this
| |-CXXConstructorDecl 0x56347461e888 <line:66:5, line:68:5> line:66:5 CAddrInfo 'void (const CAddress &, const CNetAddr &)'
| | |-ParmVarDecl 0x56347461e728 <col:15, col:31> col:31 used addrIn 'const CAddress &'
| | |-ParmVarDecl 0x56347461e7a0 <col:39, col:55> col:55 used addrSource 'const CNetAddr &'
| | |-CXXCtorInitializer 'CAddress'
| | | `-CXXConstructExpr 0x563474622e10 <col:69, col:84> 'CAddress' 'void (const CAddress &) noexcept'
| | |   `-DeclRefExpr 0x563474622290 <col:78> 'const CAddress' lvalue ParmVar 0x56347461e728 'addrIn' 'const CAddress &'
| | |-CXXCtorInitializer Field 0x56347461db30 'nAttempts' 'int'
| | | `-CXXDefaultInitExpr 0x563474622ea8 <col:5> 'int'
| | |-CXXCtorInitializer Field 0x56347461dbc0 'nRefCount' 'int'
| | | `-CXXDefaultInitExpr 0x563474622ef0 <col:5> 'int'
| | |-CXXCtorInitializer Field 0x56347461dc48 'fInTried' 'bool'
| | | `-CXXDefaultInitExpr 0x563474622f38 <col:5> 'bool'
| | |-CXXCtorInitializer Field 0x56347461dce0 'nRandomPos' 'int'
| | | `-CXXDefaultInitExpr 0x563474622f80 <col:5> 'int'
| | `-CompoundStmt 0x563474622ff0 <line:67:5, line:68:5>
| |-CXXConstructorDecl 0x56347461e960 <line:70:5, line:72:5> line:70:5 used CAddrInfo 'void ()'
| | |-CXXCtorInitializer 'CAddress'
| | | `-CXXConstructExpr 0x563474623028 <col:19, col:28> 'CAddress' 'void ()'
| | |-CXXCtorInitializer Field 0x56347461db30 'nAttempts' 'int'
| | | `-CXXDefaultInitExpr 0x563474623090 <col:5> 'int'
| | |-CXXCtorInitializer Field 0x56347461dbc0 'nRefCount' 'int'
| | | `-CXXDefaultInitExpr 0x5634746230d8 <col:5> 'int'
| | |-CXXCtorInitializer Field 0x56347461dc48 'fInTried' 'bool'
| | | `-CXXDefaultInitExpr 0x563474623120 <col:5> 'bool'
| | |-CXXCtorInitializer Field 0x56347461dce0 'nRandomPos' 'int'
| | | `-CXXDefaultInitExpr 0x563474623168 <col:5> 'int'
| | `-CompoundStmt 0x5634746231d8 <line:71:5, line:72:5>
| |-CXXMethodDecl 0x56347461eb10 <line:75:5, col:45> col:9 referenced GetTriedBucket 'int (const uint256 &) const'
| | |-ParmVarDecl 0x56347461ea48 <col:24, col:39> col:39 nKey 'const uint256 &'
| | `-FullComment 0x563474765630 <line:74:8, col:60>
| |   `-ParagraphComment 0x563474765600 <col:8, col:60>
| |     `-TextComment 0x5634747655d0 <col:8, col:60> Text=" Calculate in which "tried" bucket this entry belongs"
| |-CXXMethodDecl 0x56347461ed50 <line:78:5, col:64> col:9 GetNewBucket 'int (const uint256 &, const CNetAddr &) const'
| | |-ParmVarDecl 0x56347461ebf8 <col:22, col:37> col:37 nKey 'const uint256 &'
| | |-ParmVarDecl 0x56347461ec70 <col:43, col:59> col:59 src 'const CNetAddr &'
| | `-FullComment 0x563474765700 <line:77:8, col:82>
| |   `-ParagraphComment 0x5634747656d0 <col:8, col:82>
| |     `-TextComment 0x5634747656a0 <col:8, col:82> Text=" Calculate in which "new" bucket this entry belongs, given a certain source"
| |-CXXMethodDecl 0x56347461eed0 <line:81:5, line:84:5> line:81:9 GetNewBucket 'int (const uint256 &) const'
| | |-ParmVarDecl 0x56347461ee38 <col:22, col:37> col:37 used nKey 'const uint256 &'
| | |-CompoundStmt 0x563474623288 <line:82:5, line:84:5>
| | `-FullComment 0x5634747657d0 <line:80:8, col:84>
| |   `-ParagraphComment 0x5634747657a0 <col:8, col:84>
| |     `-TextComment 0x563474765770 <col:8, col:84> Text=" Calculate in which "new" bucket this entry belongs, using its default source"
| |-CXXMethodDecl 0x56347461f1a0 <line:87:5, col:72> col:9 referenced GetBucketPosition 'int (const uint256 &, bool, int) const'
| | |-ParmVarDecl 0x56347461efb8 <col:27, col:42> col:42 nKey 'const uint256 &'
| | |-ParmVarDecl 0x56347461f030 <col:48, col:53> col:53 fNew 'bool'
| | |-ParmVarDecl 0x56347461f0b0 <col:59, col:63> col:63 nBucket 'int'
| | `-FullComment 0x5634747658a0 <line:86:8, col:68>
| |   `-ParagraphComment 0x563474765870 <col:8, col:68>
| |     `-TextComment 0x563474765840 <col:8, col:68> Text=" Calculate in which position of a bucket to store this entry."
| |-CXXMethodDecl 0x56347461f378 <line:90:5, col:55> col:10 invalid IsTerrible 'bool (int) const'
| | |-ParmVarDecl 0x56347461f2b0 <col:21, col:34> col:29 invalid nNow 'int' cinit
| | | `-OpaqueValueExpr 0x56347461f600 <col:34> 'int'
| | `-FullComment 0x563474765970 <line:89:8, col:103>
| |   `-ParagraphComment 0x563474765940 <col:8, col:103>
| |     `-TextComment 0x563474765910 <col:8, col:103> Text=" Determine whether the statistics about this entry are bad enough so that it can just be deleted"
| |-CXXMethodDecl 0x56347461f540 <line:93:5, col:56> col:12 invalid GetChance 'double (int) const'
| | |-ParmVarDecl 0x56347461f470 <col:22, col:35> col:30 invalid nNow 'int' cinit
| | | `-OpaqueValueExpr 0x56347461f618 <col:35> 'int'
| | `-FullComment 0x563474765a40 <line:92:8, col:99>
| |   `-ParagraphComment 0x563474765a10 <col:8, col:99>
| |     `-TextComment 0x5634747659e0 <col:8, col:99> Text=" Calculate the relative chance this entry should be given when selecting nodes to connect to"
| |-CXXConstructorDecl 0x563474642c08 <line:24:7> col:7 implicit constexpr CAddrInfo 'void (const CAddrInfo &)' inline default trivial noexcept-unevaluated 0x563474642c08
| | `-ParmVarDecl 0x563474642d18 <col:7> col:7 'const CAddrInfo &'
| |-CXXConstructorDecl 0x563474642db8 <col:7> col:7 implicit used constexpr CAddrInfo 'void (CAddrInfo &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x563474642ec8 <col:7> col:7 used 'CAddrInfo &&'
| | |-CXXCtorInitializer 'CAddress'
| | | `-CXXConstructExpr 0x56347464a080 <col:7> 'CAddress' 'void (CAddress &&) noexcept'
| | |   `-ImplicitCastExpr 0x563474649aa0 <col:7> 'CAddress' xvalue <UncheckedDerivedToBase (CAddress)>
| | |     `-CXXStaticCastExpr 0x563474649a70 <col:7> 'CAddrInfo' xvalue static_cast<class CAddrInfo &&> <NoOp>
| | |       `-DeclRefExpr 0x563474649a40 <col:7> 'CAddrInfo' lvalue ParmVar 0x563474642ec8 '' 'CAddrInfo &&'
| | |-CXXCtorInitializer Field 0x56347461db30 'nAttempts' 'int'
| | | `-ImplicitCastExpr 0x56347464a190 <col:7> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56347464a148 <col:7> 'int' xvalue .nAttempts 0x56347461db30
| | |     `-CXXStaticCastExpr 0x56347464a118 <col:7> 'CAddrInfo' xvalue static_cast<class CAddrInfo &&> <NoOp>
| | |       `-DeclRefExpr 0x56347464a0e8 <col:7> 'CAddrInfo' lvalue ParmVar 0x563474642ec8 '' 'CAddrInfo &&'
| | |-CXXCtorInitializer Field 0x56347461dbc0 'nRefCount' 'int'
| | | `-ImplicitCastExpr 0x56347464a278 <col:7> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56347464a230 <col:7> 'int' xvalue .nRefCount 0x56347461dbc0
| | |     `-CXXStaticCastExpr 0x56347464a200 <col:7> 'CAddrInfo' xvalue static_cast<class CAddrInfo &&> <NoOp>
| | |       `-DeclRefExpr 0x56347464a1d0 <col:7> 'CAddrInfo' lvalue ParmVar 0x563474642ec8 '' 'CAddrInfo &&'
| | |-CXXCtorInitializer Field 0x56347461dc48 'fInTried' 'bool'
| | | `-ImplicitCastExpr 0x56347464a360 <col:7> 'bool' <LValueToRValue>
| | |   `-MemberExpr 0x56347464a318 <col:7> 'bool' xvalue .fInTried 0x56347461dc48
| | |     `-CXXStaticCastExpr 0x56347464a2e8 <col:7> 'CAddrInfo' xvalue static_cast<class CAddrInfo &&> <NoOp>
| | |       `-DeclRefExpr 0x56347464a2b8 <col:7> 'CAddrInfo' lvalue ParmVar 0x563474642ec8 '' 'CAddrInfo &&'
| | |-CXXCtorInitializer Field 0x56347461dce0 'nRandomPos' 'int'
| | | `-ImplicitCastExpr 0x56347464a448 <col:7> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56347464a400 <col:7> 'int' xvalue .nRandomPos 0x56347461dce0
| | |     `-CXXStaticCastExpr 0x56347464a3d0 <col:7> 'CAddrInfo' xvalue static_cast<class CAddrInfo &&> <NoOp>
| | |       `-DeclRefExpr 0x56347464a3a0 <col:7> 'CAddrInfo' lvalue ParmVar 0x563474642ec8 '' 'CAddrInfo &&'
| | `-CompoundStmt 0x56347464a4b0 <col:7>
| |-CXXMethodDecl 0x563474649528 <col:7> col:7 implicit used invalid operator= 'CAddrInfo &(const CAddrInfo &) noexcept' inline default trivial
| | `-ParmVarDecl 0x563474649638 <col:7> col:7 'const CAddrInfo &'
| `-CXXMethodDecl 0x5634746496a8 <col:7> col:7 implicit used invalid operator= 'CAddrInfo &(CAddrInfo &&) noexcept' inline default trivial
|   `-ParmVarDecl 0x5634746497b8 <col:7> col:7 'CAddrInfo &&'
|-VarDecl 0x5634746235f0 <line:170:1, col:22> col:22 invalid ADDRMAN_TEST_WINDOW 'const int' static
| `-FullComment 0x563474765b10 <line:169:4, col:86>
|   `-ParagraphComment 0x563474765ae0 <col:4, col:86>
|     `-TextComment 0x563474765ab0 <col:4, col:86> Text=" the maximum time we'll spend trying to resolve a tried table collision, in seconds"
|-CXXRecordDecl 0x5634746236e8 prev 0x5634745bd5c0 <line:175:1, line:624:1> line:175:7 referenced invalid class CAddrMan definition
| |-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-FullComment 0x563474765be0 <line:173:3, col:36>
| | `-ParagraphComment 0x563474765bb0 <col:3, col:36>
| |   `-TextComment 0x563474765b80 <col:3, col:36> Text=" Stochastical (IP) address manager"
| |-CXXRecordDecl 0x5634746237e0 <line:175:1, col:7> col:7 implicit referenced class CAddrMan
| |-AccessSpecDecl 0x563474623898 <line:177:1, col:10> col:1 protected
| |-FieldDecl 0x5634746238d0 <line:179:5, col:30> col:30 referenced cs 'CCriticalSection':'int' mutable
| | `-FullComment 0x563474765cb0 <line:178:8, col:61>
| |   `-ParagraphComment 0x563474765c80 <col:8, col:61>
| |     `-TextComment 0x563474765c50 <col:8, col:61> Text=" critical section to protect the inner data structures"
| |-AccessSpecDecl 0x563474623948 <line:181:1, col:8> col:1 private
| |-FieldDecl 0x563474623988 <line:183:5, col:9> col:9 referenced nIdCount 'int'
| | |-GuardedByAttr 0x56347462b448 <bitcoin/src/threadsafety.h:18:38, col:50>
| | | `-MemberExpr 0x56347462b418 <bitcoin/src/addrman.h:183:29> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347462b408 <col:29> 'CAddrMan *' implicit this
| | `-FullComment 0x563474765d80 <line:182:8, col:21>
| |   `-ParagraphComment 0x563474765d50 <col:8, col:21>
| |     `-TextComment 0x563474765d20 <col:8, col:21> Text=" last used nId"
| |-FieldDecl 0x563474623b08 <line:195:5, col:9> col:9 referenced nTried 'int'
| | `-GuardedByAttr 0x56347462b4d0 <bitcoin/src/threadsafety.h:18:38, col:50>
| |   `-MemberExpr 0x56347462b4a0 <bitcoin/src/addrman.h:195:27> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| |     `-CXXThisExpr 0x56347462b490 <col:27> 'CAddrMan *' implicit this
| |-FieldDecl 0x563474623d80 <line:198:5, col:64> col:9 referenced vvTried 'int [256][64]'
| | |-GuardedByAttr 0x56347462b558 <bitcoin/src/threadsafety.h:18:38, col:50>
| | | `-MemberExpr 0x56347462b528 <bitcoin/src/addrman.h:198:77> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347462b518 <col:77> 'CAddrMan *' implicit this
| | `-FullComment 0x563474765e50 <line:197:8, col:31>
| |   `-ParagraphComment 0x563474765e20 <col:8, col:31>
| |     `-TextComment 0x563474765df0 <col:8, col:31> Text=" list of "tried" buckets"
| |-FieldDecl 0x563474623e10 <line:201:5, col:9> col:9 referenced nNew 'int'
| | |-GuardedByAttr 0x56347462b5e0 <bitcoin/src/threadsafety.h:18:38, col:50>
| | | `-MemberExpr 0x56347462b5b0 <bitcoin/src/addrman.h:201:25> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347462b5a0 <col:25> 'CAddrMan *' implicit this
| | `-FullComment 0x563474765f20 <line:200:8, col:40>
| |   `-ParagraphComment 0x563474765ef0 <col:8, col:40>
| |     `-TextComment 0x563474765ec0 <col:8, col:40> Text=" number of (unique) "new" entries"
| |-FieldDecl 0x563474624040 <line:204:5, col:60> col:9 referenced vvNew 'int [1024][64]'
| | |-GuardedByAttr 0x56347462b668 <bitcoin/src/threadsafety.h:18:38, col:50>
| | | `-MemberExpr 0x56347462b638 <bitcoin/src/addrman.h:204:73> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347462b628 <col:73> 'CAddrMan *' implicit this
| | `-FullComment 0x563474765ff0 <line:203:8, col:29>
| |   `-ParagraphComment 0x563474765fc0 <col:8, col:29>
| |     `-TextComment 0x563474765f90 <col:8, col:29> Text=" list of "new" buckets"
| |-FieldDecl 0x563474627760 <line:207:5, col:13> col:13 invalid nLastGood 'int'
| | `-FullComment 0x5634747660c0 <line:206:8, col:47>
| |   `-ParagraphComment 0x563474766090 <col:8, col:47>
| |     `-TextComment 0x563474766060 <col:8, col:47> Text=" last time Good was called (memory only)"
| |-AccessSpecDecl 0x563474627828 <line:212:1, col:10> col:1 protected
| |-FieldDecl 0x563474627860 <line:214:5, col:13> col:13 invalid nKey 'uint256'
| | `-FullComment 0x563474766190 <line:213:8, col:50>
| |   `-ParagraphComment 0x563474766160 <col:8, col:50>
| |     `-TextComment 0x563474766130 <col:8, col:50> Text=" secret key to randomize bucket select with"
| |-FieldDecl 0x5634746278e8 <line:217:5, col:23> col:23 invalid insecure_rand 'FastRandomContext'
| | `-FullComment 0x563474766260 <line:216:8, col:65>
| |   `-ParagraphComment 0x563474766230 <col:8, col:65>
| |     `-TextComment 0x563474766200 <col:8, col:65> Text=" Source of random numbers for randomization in inner loops"
| |-CXXMethodDecl 0x563474627af8 <line:220:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:220:16 Find 'CAddrInfo *(const CNetAddr &, int *)'
| | |-ParmVarDecl 0x563474627978 <col:21, col:37> col:37 addr 'const CNetAddr &'
| | |-ParmVarDecl 0x5634746279f8 <col:43, col:55> col:48 pnId 'int *' cinit
| | | `-ImplicitCastExpr 0x56347463de08 <col:55> 'int *' <NullToPointer>
| | |   `-CXXNullPtrLiteralExpr 0x56347463ddf8 <col:55> 'nullptr_t'
| | |-RequiresCapabilityAttr 0x56347462b6f0 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347462b6c0 <bitcoin/src/addrman.h:220:89> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347462b6b0 <col:89> 'CAddrMan *' implicit this
| | `-FullComment 0x563474766330 <line:219:8, col:22>
| |   `-ParagraphComment 0x563474766300 <col:8, col:22>
| |     `-TextComment 0x5634747662d0 <col:8, col:22> Text=" Find an entry."
| |-CXXMethodDecl 0x563474627dc8 <line:224:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:224:16 Create 'CAddrInfo *(const CAddress &, const CNetAddr &, int *)'
| | |-ParmVarDecl 0x563474627be8 <col:23, col:39> col:39 addr 'const CAddress &'
| | |-ParmVarDecl 0x563474627c60 <col:45, col:61> col:61 addrSource 'const CNetAddr &'
| | |-ParmVarDecl 0x563474627ce0 <col:73, col:85> col:78 pnId 'int *' cinit
| | | `-ImplicitCastExpr 0x56347463de30 <col:85> 'int *' <NullToPointer>
| | |   `-CXXNullPtrLiteralExpr 0x56347463de20 <col:85> 'nullptr_t'
| | |-RequiresCapabilityAttr 0x56347463d890 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463d860 <bitcoin/src/addrman.h:224:119> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463d850 <col:119> 'CAddrMan *' implicit this
| | `-FullComment 0x563474766420 <line:222:8, line:223:72>
| |   `-ParagraphComment 0x5634747663f0 <line:222:8, line:223:72>
| |     |-TextComment 0x5634747663a0 <line:222:8, col:48> Text=" find an entry, creating it if necessary."
| |     `-TextComment 0x5634747663c0 <line:223:8, col:72> Text=" nTime and nServices of the found node are updated, if necessary."
| |-CXXMethodDecl 0x563474628018 <line:227:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:227:10 SwapRandom 'void (unsigned int, unsigned int)'
| | |-ParmVarDecl 0x563474627ec0 <col:21, col:34> col:34 nRandomPos1 'unsigned int'
| | |-ParmVarDecl 0x563474627f40 <col:47, col:60> col:60 nRandomPos2 'unsigned int'
| | |-RequiresCapabilityAttr 0x56347463d928 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463d8f8 <bitcoin/src/addrman.h:227:98> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463d8e8 <col:98> 'CAddrMan *' implicit this
| | `-FullComment 0x5634747664f0 <line:226:8, col:37>
| |   `-ParagraphComment 0x5634747664c0 <col:8, col:37>
| |     `-TextComment 0x563474766490 <col:8, col:37> Text=" Swap two elements in vRandom."
| |-CXXMethodDecl 0x563474628288 <line:230:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:230:10 MakeTried 'void (CAddrInfo &, int)'
| | |-ParmVarDecl 0x563474628138 <col:20, col:31> col:31 info 'CAddrInfo &'
| | |-ParmVarDecl 0x5634746281b8 <col:37, col:41> col:41 nId 'int'
| | |-RequiresCapabilityAttr 0x56347463d9b8 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463d988 <bitcoin/src/addrman.h:230:71> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463d978 <col:71> 'CAddrMan *' implicit this
| | `-FullComment 0x5634747665c0 <line:229:8, col:66>
| |   `-ParagraphComment 0x563474766590 <col:8, col:66>
| |     `-TextComment 0x563474766560 <col:8, col:66> Text=" Move an entry from the "new" table(s) to the "tried" table"
| |-CXXMethodDecl 0x563474628410 <line:233:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:233:10 referenced Delete 'void (int)'
| | |-ParmVarDecl 0x563474628380 <col:17, col:21> col:21 nId 'int'
| | |-RequiresCapabilityAttr 0x56347463da48 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463da18 <bitcoin/src/addrman.h:233:51> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463da08 <col:51> 'CAddrMan *' implicit this
| | `-FullComment 0x563474767300 <line:232:8, col:70>
| |   `-ParagraphComment 0x563474766660 <col:8, col:70>
| |     `-TextComment 0x563474766630 <col:8, col:70> Text=" Delete an entry. It must not be in tried, and have refcount 0."
| |-CXXMethodDecl 0x563474628658 <line:236:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:236:10 ClearNew 'void (int, int)'
| | |-ParmVarDecl 0x563474628500 <col:19, col:23> col:23 nUBucket 'int'
| | |-ParmVarDecl 0x563474628580 <col:33, col:37> col:37 nUBucketPos 'int'
| | |-RequiresCapabilityAttr 0x56347463dad8 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463daa8 <bitcoin/src/addrman.h:236:75> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463da98 <col:75> 'CAddrMan *' implicit this
| | `-FullComment 0x5634747673d0 <line:235:8, col:101>
| |   `-ParagraphComment 0x5634747673a0 <col:8, col:101>
| |     `-TextComment 0x563474767370 <col:8, col:101> Text=" Clear a position in a "new" table. This is the only place where entries are actually deleted."
| |-CXXMethodDecl 0x563474628938 <line:239:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:239:10 invalid Good_ 'void (const CService &, bool, int)'
| | |-ParmVarDecl 0x563474628748 <col:16, col:32> col:32 addr 'const CService &'
| | |-ParmVarDecl 0x5634746287c0 <col:38, col:43> col:43 test_before_evict 'bool'
| | |-ParmVarDecl 0x563474628850 <col:62, col:70> col:70 invalid time 'int'
| | `-FullComment 0x5634747674a0 <line:238:8, col:71>
| |   `-ParagraphComment 0x563474767470 <col:8, col:71>
| |     `-TextComment 0x563474767440 <col:8, col:71> Text=" Mark an entry "good", possibly moving it from "new" to "tried"."
| |-CXXMethodDecl 0x563474628c18 <line:242:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:242:10 invalid Add_ 'bool (const CAddress &, const CNetAddr &, int)'
| | |-ParmVarDecl 0x563474628a28 <col:15, col:31> col:31 addr 'const CAddress &'
| | |-ParmVarDecl 0x563474628aa0 <col:37, col:53> col:53 source 'const CNetAddr &'
| | |-ParmVarDecl 0x563474628b30 <col:61, col:69> col:69 invalid nTimePenalty 'int'
| | `-FullComment 0x563474767570 <line:241:8, col:40>
| |   `-ParagraphComment 0x563474767540 <col:8, col:40>
| |     `-TextComment 0x563474767510 <col:8, col:40> Text=" Add an entry to the "new" table."
| |-CXXMethodDecl 0x563474628eb0 <line:245:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:245:10 invalid Attempt_ 'void (const CService &, bool, int)'
| | |-ParmVarDecl 0x563474628d08 <col:19, col:35> col:35 addr 'const CService &'
| | |-ParmVarDecl 0x563474628d80 <col:41, col:46> col:46 fCountFailure 'bool'
| | |-ParmVarDecl 0x563474628e10 <col:61, col:69> col:69 invalid nTime 'int'
| | `-FullComment 0x563474767640 <line:244:8, col:46>
| |   `-ParagraphComment 0x563474767610 <col:8, col:46>
| |     `-TextComment 0x5634747675e0 <col:8, col:46> Text=" Mark an entry as attempted to connect."
| |-CXXMethodDecl 0x563474629068 <line:248:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:248:15 used Select_ 'CAddrInfo (bool)'
| | |-ParmVarDecl 0x563474628fa8 <col:23, col:28> col:28 newOnly 'bool'
| | |-RequiresCapabilityAttr 0x56347463db68 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463db38 <bitcoin/src/addrman.h:248:62> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463db28 <col:62> 'CAddrMan *' implicit this
| | `-FullComment 0x563474767710 <line:247:8, col:104>
| |   `-ParagraphComment 0x5634747676e0 <col:8, col:104>
| |     `-TextComment 0x5634747676b0 <col:8, col:104> Text=" Select an address to connect to, if newOnly is set to true, only the new table is selected from."
| |-CXXMethodDecl 0x563474629158 <line:251:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:251:10 used ResolveCollisions_ 'void ()'
| | |-RequiresCapabilityAttr 0x56347463dbf8 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463dbc8 <bitcoin/src/addrman.h:251:56> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463dbb8 <col:56> 'CAddrMan *' implicit this
| | `-FullComment 0x5634747677e0 <line:250:8, col:103>
| |   `-ParagraphComment 0x5634747677b0 <col:8, col:103>
| |     `-TextComment 0x563474767780 <col:8, col:103> Text=" See if any to-be-evicted tried table entries have been tested and if so resolve the collisions."
| |-CXXMethodDecl 0x563474629278 <line:254:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:254:15 used SelectTriedCollision_ 'CAddrInfo ()'
| | |-RequiresCapabilityAttr 0x56347463dc88 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463dc58 <bitcoin/src/addrman.h:254:64> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463dc48 <col:64> 'CAddrMan *' implicit this
| | `-FullComment 0x5634747678b0 <line:253:8, col:58>
| |   `-ParagraphComment 0x563474767880 <col:8, col:58>
| |     `-TextComment 0x563474767850 <col:8, col:58> Text=" Return a random to-be-evicted tried table address."
| |-CXXMethodDecl 0x563474629388 <line:262:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:262:10 GetAddr_ 'void ()'
| | |-RequiresCapabilityAttr 0x56347463dd18 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463dce8 <bitcoin/src/addrman.h:262:74> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463dcd8 <col:74> 'CAddrMan *' implicit this
| | `-FullComment 0x563474767980 <line:261:8, col:41>
| |   `-ParagraphComment 0x563474767950 <col:8, col:41>
| |     `-TextComment 0x563474767920 <col:8, col:41> Text=" Select several addresses at once."
| |-CXXMethodDecl 0x5634746295c8 <line:265:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:265:10 invalid Connected_ 'void (const CService &, int)'
| | |-ParmVarDecl 0x563474629468 <col:21, col:37> col:37 addr 'const CService &'
| | |-ParmVarDecl 0x5634746294f8 <col:43, col:51> col:51 invalid nTime 'int'
| | `-FullComment 0x563474767a50 <line:264:8, col:48>
| |   `-ParagraphComment 0x563474767a20 <col:8, col:48>
| |     `-TextComment 0x5634747679f0 <col:8, col:48> Text=" Mark an entry as currently-connected-to."
| |-CXXMethodDecl 0x563474629868 <line:268:5, bitcoin/src/threadsafety.h:31:92> bitcoin/src/addrman.h:268:10 SetServices_ 'void (const CService &, ServiceFlags)'
| | |-ParmVarDecl 0x563474629720 <col:23, col:39> col:39 addr 'const CService &'
| | |-ParmVarDecl 0x563474629798 <col:45, col:58> col:58 nServices 'ServiceFlags'
| | |-RequiresCapabilityAttr 0x56347463dda8 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
| | | `-MemberExpr 0x56347463dd78 <bitcoin/src/addrman.h:268:94> 'CCriticalSection':'int' lvalue ->cs 0x5634746238d0 non_odr_use_unevaluated
| | |   `-CXXThisExpr 0x56347463dd68 <col:94> 'CAddrMan *' implicit this
| | `-FullComment 0x563474767b20 <line:267:8, col:39>
| |   `-ParagraphComment 0x563474767af0 <col:8, col:39>
| |     `-TextComment 0x563474767ac0 <col:8, col:39> Text=" Update an entry's service bits."
| |-AccessSpecDecl 0x563474629948 <line:270:1, col:7> col:1 public
| |-FunctionTemplateDecl 0x563474629bc8 <line:300:5, line:348:5> line:301:10 Serialize
| | |-TemplateTypeParmDecl 0x563474629970 <line:300:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | |-CXXMethodDecl 0x563474629b28 <line:301:5, line:348:5> line:301:10 Serialize 'void (Stream &) const'
| | | |-ParmVarDecl 0x563474629a38 <col:20, col:28> col:28 referenced s 'Stream &'
| | | |-CompoundStmt 0x563474640e68 <line:302:5, line:348:5>
| | | | |-DeclStmt 0x56347463e040 <line:305:9, col:35>
| | | | | `-VarDecl 0x56347463dfa0 <col:9, col:34> col:23 referenced nVersion 'unsigned char' cinit
| | | | |   `-ImplicitCastExpr 0x56347463e028 <col:34> 'unsigned char' <IntegralCast>
| | | | |     `-IntegerLiteral 0x56347463e008 <col:34> 'int' 1
| | | | |-BinaryOperator 0x56347463e098 <line:306:9, col:14> '<dependent type>' '<<'
| | | | | |-DeclRefExpr 0x56347463e058 <col:9> 'Stream' lvalue ParmVar 0x563474629a38 's' 'Stream &'
| | | | | `-DeclRefExpr 0x56347463e078 <col:14> 'unsigned char' lvalue Var 0x56347463dfa0 'nVersion' 'unsigned char'
| | | | |-BinaryOperator 0x56347463e170 <line:307:9, col:32> '<dependent type>' '<<'
| | | | | |-DeclRefExpr 0x56347463e0b8 <col:9> 'Stream' lvalue ParmVar 0x563474629a38 's' 'Stream &'
| | | | | `-ParenExpr 0x56347463e150 <col:14, col:32> 'unsigned char'
| | | | |   `-CStyleCastExpr 0x56347463e128 <col:15, col:30> 'unsigned char' <NoOp>
| | | | |     `-ImplicitCastExpr 0x56347463e110 <col:30> 'unsigned char' <IntegralCast> part_of_explicit_cast
| | | | |       `-IntegerLiteral 0x56347463e0d8 <col:30> 'int' 32
| | | | |-BinaryOperator 0x56347463e220 <line:309:9, col:14> '<dependent type>' '<<'
| | | | | |-DeclRefExpr 0x56347463e1c0 <col:9> 'Stream' lvalue ParmVar 0x563474629a38 's' 'Stream &'
| | | | | `-MemberExpr 0x56347463e1f0 <col:14> 'const int' lvalue ->nNew 0x563474623e10
| | | | |   `-CXXThisExpr 0x56347463e1e0 <col:14> 'const CAddrMan *' implicit this
| | | | |-BinaryOperator 0x56347463e2a0 <line:310:9, col:14> '<dependent type>' '<<'
| | | | | |-DeclRefExpr 0x56347463e240 <col:9> 'Stream' lvalue ParmVar 0x563474629a38 's' 'Stream &'
| | | | | `-MemberExpr 0x56347463e270 <col:14> 'const int' lvalue ->nTried 0x563474623b08
| | | | |   `-CXXThisExpr 0x56347463e260 <col:14> 'const CAddrMan *' implicit this
| | | | |-DeclStmt 0x56347463e460 <line:312:9, col:61>
| | | | | `-VarDecl 0x56347463e2d8 <col:9, col:60> col:13 referenced nUBuckets 'int' cinit
| | | | |   `-BinaryOperator 0x56347463e440 <line:163:34, line:312:60> 'int' '^'
| | | | |     |-ParenExpr 0x56347463e3a0 <line:163:34, col:69> 'int'
| | | | |     | `-BinaryOperator 0x56347463e380 <col:35, line:126:39> 'int' '<<'
| | | | |     |   |-IntegerLiteral 0x56347463e340 <line:163:35> 'int' 1
| | | | |     |   `-IntegerLiteral 0x56347463e360 <line:126:39> 'int' 10
| | | | |     `-ParenExpr 0x56347463e420 <line:312:52, col:60> 'int'
| | | | |       `-BinaryOperator 0x56347463e400 <col:53, col:58> 'int' '<<'
| | | | |         |-IntegerLiteral 0x56347463e3c0 <col:53> 'int' 1
| | | | |         `-IntegerLiteral 0x56347463e3e0 <col:58> 'int' 30
| | | | |-BinaryOperator 0x56347463e4b8 <line:313:9, col:14> '<dependent type>' '<<'
| | | | | |-DeclRefExpr 0x56347463e478 <col:9> 'Stream' lvalue ParmVar 0x563474629a38 's' 'Stream &'
| | | | | `-DeclRefExpr 0x56347463e498 <col:14> 'int' lvalue Var 0x56347463e2d8 'nUBuckets' 'int'
| | | | |-DeclStmt 0x56347463e5b8 <line:315:9, col:21>
| | | | | `-VarDecl 0x56347463e530 <col:9, col:20> col:13 referenced nIds 'int' cinit
| | | | |   `-IntegerLiteral 0x56347463e598 <col:20> 'int' 0
| | | | |-BinaryOperator 0x56347463e9d8 <line:325:9, col:16> 'int' lvalue '='
| | | | | |-DeclRefExpr 0x56347463e998 <col:9> 'int' lvalue Var 0x56347463e530 'nIds' 'int'
| | | | | `-IntegerLiteral 0x56347463e9b8 <col:16> 'int' 0
| | | | `-ForStmt 0x563474640e30 <line:334:9, line:347:9>
| | | |   |-DeclStmt 0x56347463ee00 <line:334:14, col:28>
| | | |   | `-VarDecl 0x56347463ed78 <col:14, col:27> col:18 referenced bucket 'int' cinit
| | | |   |   `-IntegerLiteral 0x56347463ede0 <col:27> 'int' 0
| | | |   |-<<<NULL>>>
| | | |   |-BinaryOperator 0x56347463eed0 <col:30, line:163:69> 'bool' '<'
| | | |   | |-ImplicitCastExpr 0x56347463eeb8 <line:334:30> 'int' <LValueToRValue>
| | | |   | | `-DeclRefExpr 0x56347463ee18 <col:30> 'int' lvalue Var 0x56347463ed78 'bucket' 'int'
| | | |   | `-ParenExpr 0x56347463ee98 <line:163:34, col:69> 'int'
| | | |   |   `-BinaryOperator 0x56347463ee78 <col:35, line:126:39> 'int' '<<'
| | | |   |     |-IntegerLiteral 0x56347463ee38 <line:163:35> 'int' 1
| | | |   |     `-IntegerLiteral 0x56347463ee58 <line:126:39> 'int' 10
| | | |   |-UnaryOperator 0x56347463ef10 <line:334:65, col:71> 'int' postfix '++'
| | | |   | `-DeclRefExpr 0x56347463eef0 <col:65> 'int' lvalue Var 0x56347463ed78 'bucket' 'int'
| | | |   `-CompoundStmt 0x563474640e00 <col:75, line:347:9>
| | | |     |-DeclStmt 0x56347463efc8 <line:335:13, col:26>
| | | |     | `-VarDecl 0x56347463ef40 <col:13, col:25> col:17 referenced nSize 'int' cinit
| | | |     |   `-IntegerLiteral 0x56347463efa8 <col:25> 'int' 0
| | | |     |-ForStmt 0x56347463f450 <line:336:13, line:339:13>
| | | |     | |-DeclStmt 0x56347463f080 <line:336:18, col:27>
| | | |     | | `-VarDecl 0x56347463eff8 <col:18, col:26> col:22 referenced i 'int' cinit
| | | |     | |   `-IntegerLiteral 0x56347463f060 <col:26> 'int' 0
| | | |     | |-<<<NULL>>>
| | | |     | |-BinaryOperator 0x56347463f150 <col:29, line:164:59> 'bool' '<'
| | | |     | | |-ImplicitCastExpr 0x56347463f138 <line:336:29> 'int' <LValueToRValue>
| | | |     | | | `-DeclRefExpr 0x56347463f098 <col:29> 'int' lvalue Var 0x56347463eff8 'i' 'int'
| | | |     | | `-ParenExpr 0x56347463f118 <line:164:29, col:59> 'int'
| | | |     | |   `-BinaryOperator 0x56347463f0f8 <col:30, line:129:34> 'int' '<<'
| | | |     | |     |-IntegerLiteral 0x56347463f0b8 <line:164:30> 'int' 1
| | | |     | |     `-IntegerLiteral 0x56347463f0d8 <line:129:34> 'int' 6
| | | |     | |-UnaryOperator 0x56347463f190 <line:336:54, col:55> 'int' postfix '++'
| | | |     | | `-DeclRefExpr 0x56347463f170 <col:54> 'int' lvalue Var 0x56347463eff8 'i' 'int'
| | | |     | `-CompoundStmt 0x56347463f438 <col:59, line:339:13>
| | | |     |   `-IfStmt 0x56347463f420 <line:337:17, line:338:26>
| | | |     |     |-BinaryOperator 0x56347463f3c8 <line:337:21, col:42> 'bool' '!='
| | | |     |     | |-ImplicitCastExpr 0x56347463f3b0 <col:21, col:36> 'int' <LValueToRValue>
| | | |     |     | | `-ArraySubscriptExpr 0x56347463f358 <col:21, col:36> 'const int' lvalue
| | | |     |     | |   |-ImplicitCastExpr 0x56347463f328 <col:21, col:33> 'const int *' <ArrayToPointerDecay>
| | | |     |     | |   | `-ArraySubscriptExpr 0x56347463f2a8 <col:21, col:33> 'int const[64]' lvalue
| | | |     |     | |   |   |-ImplicitCastExpr 0x56347463f278 <col:21> 'int const (*)[64]' <ArrayToPointerDecay>
| | | |     |     | |   |   | `-MemberExpr 0x56347463f1b8 <col:21> 'int const[1024][64]' lvalue ->vvNew 0x563474624040
| | | |     |     | |   |   |   `-CXXThisExpr 0x56347463f1a8 <col:21> 'const CAddrMan *' implicit this
| | | |     |     | |   |   `-ImplicitCastExpr 0x56347463f290 <col:27> 'int' <LValueToRValue>
| | | |     |     | |   |     `-DeclRefExpr 0x56347463f1e8 <col:27> 'int' lvalue Var 0x56347463ed78 'bucket' 'int'
| | | |     |     | |   `-ImplicitCastExpr 0x56347463f340 <col:35> 'int' <LValueToRValue>
| | | |     |     | |     `-DeclRefExpr 0x56347463f2c8 <col:35> 'int' lvalue Var 0x56347463eff8 'i' 'int'
| | | |     |     | `-UnaryOperator 0x56347463f398 <col:41, col:42> 'int' prefix '-'
| | | |     |     |   `-IntegerLiteral 0x56347463f378 <col:42> 'int' 1
| | | |     |     `-UnaryOperator 0x56347463f408 <line:338:21, col:26> 'int' postfix '++'
| | | |     |       `-DeclRefExpr 0x56347463f3e8 <col:21> 'int' lvalue Var 0x56347463ef40 'nSize' 'int'
| | | |     |-BinaryOperator 0x56347463f4c8 <line:340:13, col:18> '<dependent type>' '<<'
| | | |     | |-DeclRefExpr 0x56347463f488 <col:13> 'Stream' lvalue ParmVar 0x563474629a38 's' 'Stream &'
| | | |     | `-DeclRefExpr 0x56347463f4a8 <col:18> 'int' lvalue Var 0x56347463ef40 'nSize' 'int'
| | | |     `-ForStmt 0x563474640dc8 <line:341:13, line:346:13>
| | | |       |-DeclStmt 0x56347463f588 <line:341:18, col:27>
| | | |       | `-VarDecl 0x56347463f500 <col:18, col:26> col:22 referenced i 'int' cinit
| | | |       |   `-IntegerLiteral 0x56347463f568 <col:26> 'int' 0
| | | |       |-<<<NULL>>>
| | | |       |-BinaryOperator 0x56347463f658 <col:29, line:164:59> 'bool' '<'
| | | |       | |-ImplicitCastExpr 0x56347463f640 <line:341:29> 'int' <LValueToRValue>
| | | |       | | `-DeclRefExpr 0x56347463f5a0 <col:29> 'int' lvalue Var 0x56347463f500 'i' 'int'
| | | |       | `-ParenExpr 0x56347463f620 <line:164:29, col:59> 'int'
| | | |       |   `-BinaryOperator 0x56347463f600 <col:30, line:129:34> 'int' '<<'
| | | |       |     |-IntegerLiteral 0x56347463f5c0 <line:164:30> 'int' 1
| | | |       |     `-IntegerLiteral 0x56347463f5e0 <line:129:34> 'int' 6
| | | |       |-UnaryOperator 0x56347463f698 <line:341:54, col:55> 'int' postfix '++'
| | | |       | `-DeclRefExpr 0x56347463f678 <col:54> 'int' lvalue Var 0x56347463f500 'i' 'int'
| | | |       `-CompoundStmt 0x563474640db0 <col:59, line:346:13>
| | | |         `-IfStmt 0x563474640d98 <line:342:17, line:345:17>
| | | |           |-BinaryOperator 0x563474640b40 <line:342:21, col:42> 'bool' '!='
| | | |           | |-ImplicitCastExpr 0x56347463f808 <col:21, col:36> 'int' <LValueToRValue>
| | | |           | | `-ArraySubscriptExpr 0x56347463f7b0 <col:21, col:36> 'const int' lvalue
| | | |           | |   |-ImplicitCastExpr 0x56347463f780 <col:21, col:33> 'const int *' <ArrayToPointerDecay>
| | | |           | |   | `-ArraySubscriptExpr 0x56347463f740 <col:21, col:33> 'int const[64]' lvalue
| | | |           | |   |   |-ImplicitCastExpr 0x56347463f710 <col:21> 'int const (*)[64]' <ArrayToPointerDecay>
| | | |           | |   |   | `-MemberExpr 0x56347463f6c0 <col:21> 'int const[1024][64]' lvalue ->vvNew 0x563474624040
| | | |           | |   |   |   `-CXXThisExpr 0x56347463f6b0 <col:21> 'const CAddrMan *' implicit this
| | | |           | |   |   `-ImplicitCastExpr 0x56347463f728 <col:27> 'int' <LValueToRValue>
| | | |           | |   |     `-DeclRefExpr 0x56347463f6f0 <col:27> 'int' lvalue Var 0x56347463ed78 'bucket' 'int'
| | | |           | |   `-ImplicitCastExpr 0x56347463f798 <col:35> 'int' <LValueToRValue>
| | | |           | |     `-DeclRefExpr 0x56347463f760 <col:35> 'int' lvalue Var 0x56347463f500 'i' 'int'
| | | |           | `-UnaryOperator 0x56347463f7f0 <col:41, col:42> 'int' prefix '-'
| | | |           |   `-IntegerLiteral 0x56347463f7d0 <col:42> 'int' 1
| | | |           `-CompoundStmt 0x563474640d78 <col:45, line:345:17>
| | | |             |-DeclStmt 0x563474640d00 <line:343:21, col:61>
| | | |             | `-VarDecl 0x563474640b78 <col:21, col:25> col:25 referenced nIndex 'int'
| | | |             `-BinaryOperator 0x563474640d58 <line:344:21, col:26> '<dependent type>' '<<'
| | | |               |-DeclRefExpr 0x563474640d18 <col:21> 'Stream' lvalue ParmVar 0x563474629a38 's' 'Stream &'
| | | |               `-DeclRefExpr 0x563474640d38 <col:26> 'int' lvalue Var 0x563474640b78 'nIndex' 'int'
| | | `-FullComment 0x563474768560 <line:272:7, line:298:29>
| | |   |-ParagraphComment 0x5634747682b0 <line:272:7, line:282:34>
| | |   | |-TextComment 0x5634747680f0 <line:272:7, col:25> Text=" serialized format:"
| | |   | |-TextComment 0x563474768110 <line:273:7, col:35> Text=" * version byte (currently 1)"
| | |   | |-TextComment 0x563474768130 <line:274:7, col:84> Text=" * 0x20 + nKey (serialized as if it were a vector, for backward compatibility)"
| | |   | |-TextComment 0x563474768150 <line:275:7, col:13> Text=" * nNew"
| | |   | |-TextComment 0x563474768170 <line:276:7, col:15> Text=" * nTried"
| | |   | |-TextComment 0x563474768190 <line:277:7, col:42> Text=" * number of "new" buckets XOR 2**30"
| | |   | |-TextComment 0x5634747681b0 <line:278:7, col:36> Text=" * all nNew addrinfos in vvNew"
| | |   | |-TextComment 0x5634747681d0 <line:279:7, col:40> Text=" * all nTried addrinfos in vvTried"
| | |   | |-TextComment 0x5634747681f0 <line:280:7, col:25> Text=" * for each bucket:"
| | |   | |-TextComment 0x563474768210 <line:281:7, col:29> Text="   * number of elements"
| | |   | `-TextComment 0x563474768230 <line:282:7, col:34> Text="   * for each element: index"
| | |   |-ParagraphComment 0x563474768350 <line:284:7, line:286:23>
| | |   | |-TextComment 0x5634747682d0 <line:284:7, col:91> Text=" 2**30 is xorred with the number of buckets to make addrman deserializer v0 detect it"
| | |   | |-TextComment 0x5634747682f0 <line:285:7, col:88> Text=" as incompatible. This is necessary because it did not check the version number on"
| | |   | `-TextComment 0x563474768310 <line:286:7, col:23> Text=" deserialization."
| | |   |-ParagraphComment 0x5634747683c0 <line:288:7, line:289:65>
| | |   | |-TextComment 0x563474768370 <line:288:7, col:77> Text=" Notice that vvTried, mapAddr and vVector are never encoded explicitly;"
| | |   | `-TextComment 0x563474768390 <line:289:7, col:65> Text=" they are instead reconstructed from the other information."
| | |   |-ParagraphComment 0x563474768430 <line:291:7, line:292:45>
| | |   | |-TextComment 0x5634747683e0 <line:291:7, col:88> Text=" vvNew is serialized, but only used if ADDRMAN_UNKNOWN_BUCKET_COUNT didn't change,"
| | |   | `-TextComment 0x563474768400 <line:292:7, col:45> Text=" otherwise it is reconstructed as well."
| | |   |-ParagraphComment 0x5634747684a0 <line:294:7, line:295:81>
| | |   | |-TextComment 0x563474768450 <line:294:7, col:93> Text=" This format is more complex, but significantly smaller (at most 1.5 MiB), and supports"
| | |   | `-TextComment 0x563474768470 <line:295:7, col:81> Text=" changes to the ADDRMAN_ parameters without breaking the on-disk structure."
| | |   `-ParagraphComment 0x563474768510 <line:297:7, line:298:29>
| | |     |-TextComment 0x5634747684c0 <line:297:7, col:94> Text=" We don't use ADD_SERIALIZE_METHODS since the serialization and deserialization code has"
| | |     `-TextComment 0x5634747684e0 <line:298:7, col:29> Text=" very little in common."
| | `-FullComment 0x563474768080 <line:272:7, line:298:29>
| |   |-ParagraphComment 0x563474767dd0 <line:272:7, line:282:34>
| |   | |-TextComment 0x563474767c10 <line:272:7, col:25> Text=" serialized format:"
| |   | |-TextComment 0x563474767c30 <line:273:7, col:35> Text=" * version byte (currently 1)"
| |   | |-TextComment 0x563474767c50 <line:274:7, col:84> Text=" * 0x20 + nKey (serialized as if it were a vector, for backward compatibility)"
| |   | |-TextComment 0x563474767c70 <line:275:7, col:13> Text=" * nNew"
| |   | |-TextComment 0x563474767c90 <line:276:7, col:15> Text=" * nTried"
| |   | |-TextComment 0x563474767cb0 <line:277:7, col:42> Text=" * number of "new" buckets XOR 2**30"
| |   | |-TextComment 0x563474767cd0 <line:278:7, col:36> Text=" * all nNew addrinfos in vvNew"
| |   | |-TextComment 0x563474767cf0 <line:279:7, col:40> Text=" * all nTried addrinfos in vvTried"
| |   | |-TextComment 0x563474767d10 <line:280:7, col:25> Text=" * for each bucket:"
| |   | |-TextComment 0x563474767d30 <line:281:7, col:29> Text="   * number of elements"
| |   | `-TextComment 0x563474767d50 <line:282:7, col:34> Text="   * for each element: index"
| |   |-ParagraphComment 0x563474767e70 <line:284:7, line:286:23>
| |   | |-TextComment 0x563474767df0 <line:284:7, col:91> Text=" 2**30 is xorred with the number of buckets to make addrman deserializer v0 detect it"
| |   | |-TextComment 0x563474767e10 <line:285:7, col:88> Text=" as incompatible. This is necessary because it did not check the version number on"
| |   | `-TextComment 0x563474767e30 <line:286:7, col:23> Text=" deserialization."
| |   |-ParagraphComment 0x563474767ee0 <line:288:7, line:289:65>
| |   | |-TextComment 0x563474767e90 <line:288:7, col:77> Text=" Notice that vvTried, mapAddr and vVector are never encoded explicitly;"
| |   | `-TextComment 0x563474767eb0 <line:289:7, col:65> Text=" they are instead reconstructed from the other information."
| |   |-ParagraphComment 0x563474767f50 <line:291:7, line:292:45>
| |   | |-TextComment 0x563474767f00 <line:291:7, col:88> Text=" vvNew is serialized, but only used if ADDRMAN_UNKNOWN_BUCKET_COUNT didn't change,"
| |   | `-TextComment 0x563474767f20 <line:292:7, col:45> Text=" otherwise it is reconstructed as well."
| |   |-ParagraphComment 0x563474767fc0 <line:294:7, line:295:81>
| |   | |-TextComment 0x563474767f70 <line:294:7, col:93> Text=" This format is more complex, but significantly smaller (at most 1.5 MiB), and supports"
| |   | `-TextComment 0x563474767f90 <line:295:7, col:81> Text=" changes to the ADDRMAN_ parameters without breaking the on-disk structure."
| |   `-ParagraphComment 0x563474768030 <line:297:7, line:298:29>
| |     |-TextComment 0x563474767fe0 <line:297:7, col:94> Text=" We don't use ADD_SERIALIZE_METHODS since the serialization and deserialization code has"
| |     `-TextComment 0x563474768000 <line:298:7, col:29> Text=" very little in common."
| |-FunctionTemplateDecl 0x563474629e48 <line:350:5, line:454:5> line:351:10 Unserialize
| | |-TemplateTypeParmDecl 0x563474629c28 <line:350:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x563474629da8 <line:351:5, line:454:5> line:351:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x563474629ce8 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x563474646178 <line:352:5, line:454:5>
| |     |-CXXMemberCallExpr 0x563474640fd8 <line:355:9, col:15> 'void'
| |     | `-MemberExpr 0x563474640fa8 <col:9> '<bound member function type>' ->Clear 0x563474629ec8
| |     |   `-CXXThisExpr 0x563474640f98 <col:9> 'CAddrMan *' implicit this
| |     |-DeclStmt 0x563474641078 <line:357:9, col:31>
| |     | `-VarDecl 0x563474641010 <col:9, col:23> col:23 referenced nVersion 'unsigned char'
| |     |-BinaryOperator 0x5634746410d0 <line:358:9, col:14> '<dependent type>' '>>'
| |     | |-DeclRefExpr 0x563474641090 <col:9> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     | `-DeclRefExpr 0x5634746410b0 <col:14> 'unsigned char' lvalue Var 0x563474641010 'nVersion' 'unsigned char'
| |     |-DeclStmt 0x563474641170 <line:359:9, col:31>
| |     | `-VarDecl 0x563474641108 <col:9, col:23> col:23 referenced nKeySize 'unsigned char'
| |     |-BinaryOperator 0x5634746411c8 <line:360:9, col:14> '<dependent type>' '>>'
| |     | |-DeclRefExpr 0x563474641188 <col:9> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     | `-DeclRefExpr 0x5634746411a8 <col:14> 'unsigned char' lvalue Var 0x563474641108 'nKeySize' 'unsigned char'
| |     |-BinaryOperator 0x5634746413d0 <line:363:9, col:14> '<dependent type>' '>>'
| |     | |-DeclRefExpr 0x563474641370 <col:9> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     | `-MemberExpr 0x5634746413a0 <col:14> 'int' lvalue ->nNew 0x563474623e10
| |     |   `-CXXThisExpr 0x563474641390 <col:14> 'CAddrMan *' implicit this
| |     |-BinaryOperator 0x563474641450 <line:364:9, col:14> '<dependent type>' '>>'
| |     | |-DeclRefExpr 0x5634746413f0 <col:9> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     | `-MemberExpr 0x563474641420 <col:14> 'int' lvalue ->nTried 0x563474623b08
| |     |   `-CXXThisExpr 0x563474641410 <col:14> 'CAddrMan *' implicit this
| |     |-DeclStmt 0x563474641510 <line:365:9, col:26>
| |     | `-VarDecl 0x563474641488 <col:9, col:25> col:13 referenced nUBuckets 'int' cinit
| |     |   `-IntegerLiteral 0x5634746414f0 <col:25> 'int' 0
| |     |-BinaryOperator 0x563474641568 <line:366:9, col:14> '<dependent type>' '>>'
| |     | |-DeclRefExpr 0x563474641528 <col:9> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     | `-DeclRefExpr 0x563474641548 <col:14> 'int' lvalue Var 0x563474641488 'nUBuckets' 'int'
| |     |-IfStmt 0x563474641700 <line:367:9, line:369:9>
| |     | |-BinaryOperator 0x5634746415f8 <line:367:13, col:25> 'bool' '!='
| |     | | |-ImplicitCastExpr 0x5634746415e0 <col:13> 'int' <IntegralCast>
| |     | | | `-ImplicitCastExpr 0x5634746415c8 <col:13> 'unsigned char' <LValueToRValue>
| |     | | |   `-DeclRefExpr 0x563474641588 <col:13> 'unsigned char' lvalue Var 0x563474641010 'nVersion' 'unsigned char'
| |     | | `-IntegerLiteral 0x5634746415a8 <col:25> 'int' 0
| |     | `-CompoundStmt 0x5634746416e8 <col:28, line:369:9>
| |     |   `-CompoundAssignOperator 0x5634746416b8 <line:368:13, col:34> 'int' lvalue '^=' ComputeLHSTy='int' ComputeResultTy='int'
| |     |     |-DeclRefExpr 0x563474641618 <col:13> 'int' lvalue Var 0x563474641488 'nUBuckets' 'int'
| |     |     `-ParenExpr 0x563474641698 <col:26, col:34> 'int'
| |     |       `-BinaryOperator 0x563474641678 <col:27, col:32> 'int' '<<'
| |     |         |-IntegerLiteral 0x563474641638 <col:27> 'int' 1
| |     |         `-IntegerLiteral 0x563474641658 <col:32> 'int' 30
| |     |-IfStmt 0x563474641988 <line:371:9, line:373:9>
| |     | |-BinaryOperator 0x563474641890 <line:371:13, line:164:59> 'bool' '>'
| |     | | |-ImplicitCastExpr 0x563474641878 <line:371:13> 'int' <LValueToRValue>
| |     | | | `-MemberExpr 0x563474641728 <col:13> 'int' lvalue ->nNew 0x563474623e10
| |     | | |   `-CXXThisExpr 0x563474641718 <col:13> 'CAddrMan *' implicit this
| |     | | `-BinaryOperator 0x563474641858 <line:163:34, line:164:59> 'int' '*'
| |     | |   |-ParenExpr 0x5634746417b8 <line:163:34, col:69> 'int'
| |     | |   | `-BinaryOperator 0x563474641798 <col:35, line:126:39> 'int' '<<'
| |     | |   |   |-IntegerLiteral 0x563474641758 <line:163:35> 'int' 1
| |     | |   |   `-IntegerLiteral 0x563474641778 <line:126:39> 'int' 10
| |     | |   `-ParenExpr 0x563474641838 <line:164:29, col:59> 'int'
| |     | |     `-BinaryOperator 0x563474641818 <col:30, line:129:34> 'int' '<<'
| |     | |       |-IntegerLiteral 0x5634746417d8 <line:164:30> 'int' 1
| |     | |       `-IntegerLiteral 0x5634746417f8 <line:129:34> 'int' 6
| |     | `-CompoundStmt 0x563474641978 <line:371:68, line:373:9>
| |     |-IfStmt 0x563474641c18 <line:375:9, line:377:9>
| |     | |-BinaryOperator 0x563474641b18 <line:375:13, line:164:59> 'bool' '>'
| |     | | |-ImplicitCastExpr 0x563474641b00 <line:375:13> 'int' <LValueToRValue>
| |     | | | `-MemberExpr 0x5634746419b0 <col:13> 'int' lvalue ->nTried 0x563474623b08
| |     | | |   `-CXXThisExpr 0x5634746419a0 <col:13> 'CAddrMan *' implicit this
| |     | | `-BinaryOperator 0x563474641ae0 <line:162:36, line:164:59> 'int' '*'
| |     | |   |-ParenExpr 0x563474641a40 <line:162:36, col:73> 'int'
| |     | |   | `-BinaryOperator 0x563474641a20 <col:37, line:123:41> 'int' '<<'
| |     | |   |   |-IntegerLiteral 0x5634746419e0 <line:162:37> 'int' 1
| |     | |   |   `-IntegerLiteral 0x563474641a00 <line:123:41> 'int' 8
| |     | |   `-ParenExpr 0x563474641ac0 <line:164:29, col:59> 'int'
| |     | |     `-BinaryOperator 0x563474641aa0 <col:30, line:129:34> 'int' '<<'
| |     | |       |-IntegerLiteral 0x563474641a60 <line:164:30> 'int' 1
| |     | |       `-IntegerLiteral 0x563474641a80 <line:129:34> 'int' 6
| |     | `-CompoundStmt 0x563474641c08 <line:375:72, line:377:9>
| |     |-ForStmt 0x5634746427a8 <line:380:9, line:396:9>
| |     | |-DeclStmt 0x563474641cd0 <line:380:14, col:23>
| |     | | `-VarDecl 0x563474641c48 <col:14, col:22> col:18 referenced n 'int' cinit
| |     | |   `-IntegerLiteral 0x563474641cb0 <col:22> 'int' 0
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x563474641d78 <col:25, col:29> 'bool' '<'
| |     | | |-ImplicitCastExpr 0x563474641d48 <col:25> 'int' <LValueToRValue>
| |     | | | `-DeclRefExpr 0x563474641ce8 <col:25> 'int' lvalue Var 0x563474641c48 'n' 'int'
| |     | | `-ImplicitCastExpr 0x563474641d60 <col:29> 'int' <LValueToRValue>
| |     | |   `-MemberExpr 0x563474641d18 <col:29> 'int' lvalue ->nNew 0x563474623e10
| |     | |     `-CXXThisExpr 0x563474641d08 <col:29> 'CAddrMan *' implicit this
| |     | |-UnaryOperator 0x563474641db8 <col:35, col:36> 'int' postfix '++'
| |     | | `-DeclRefExpr 0x563474641d98 <col:35> 'int' lvalue Var 0x563474641c48 'n' 'int'
| |     | `-CompoundStmt 0x563474642780 <col:40, line:396:9>
| |     |   |-DeclStmt 0x563474641e68 <line:381:13, col:41>
| |     |   | `-VarDecl 0x563474641de0 <col:13, col:24> col:24 referenced info 'CAddrInfo &'
| |     |   |-BinaryOperator 0x563474641ec0 <line:382:13, col:18> '<dependent type>' '>>'
| |     |   | |-DeclRefExpr 0x563474641e80 <col:13> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     |   | `-DeclRefExpr 0x563474641ea0 <col:18> 'CAddrInfo' lvalue Var 0x563474641de0 'info' 'CAddrInfo &'
| |     |   `-IfStmt 0x563474642768 <line:386:13, line:395:13>
| |     |     |-BinaryOperator 0x5634746420f8 <line:386:17, line:163:69> 'bool' '||'
| |     |     | |-BinaryOperator 0x563474642000 <line:386:17, col:29> 'bool' '!='
| |     |     | | |-ImplicitCastExpr 0x563474641fe8 <col:17> 'int' <IntegralCast>
| |     |     | | | `-ImplicitCastExpr 0x563474641fd0 <col:17> 'unsigned char' <LValueToRValue>
| |     |     | | |   `-DeclRefExpr 0x563474641f90 <col:17> 'unsigned char' lvalue Var 0x563474641010 'nVersion' 'unsigned char'
| |     |     | | `-IntegerLiteral 0x563474641fb0 <col:29> 'int' 1
| |     |     | `-BinaryOperator 0x5634746420d8 <col:34, line:163:69> 'bool' '!='
| |     |     |   |-ImplicitCastExpr 0x5634746420c0 <line:386:34> 'int' <LValueToRValue>
| |     |     |   | `-DeclRefExpr 0x563474642020 <col:34> 'int' lvalue Var 0x563474641488 'nUBuckets' 'int'
| |     |     |   `-ParenExpr 0x5634746420a0 <line:163:34, col:69> 'int'
| |     |     |     `-BinaryOperator 0x563474642080 <col:35, line:126:39> 'int' '<<'
| |     |     |       |-IntegerLiteral 0x563474642040 <line:163:35> 'int' 1
| |     |     |       `-IntegerLiteral 0x563474642060 <line:126:39> 'int' 10
| |     |     `-CompoundStmt 0x563474642740 <line:386:73, line:395:13>
| |     |       |-DeclStmt 0x563474642228 <line:389:17, col:55>
| |     |       | `-VarDecl 0x563474642130 <col:17, col:21> col:21 referenced nUBucket 'int'
| |     |       |-DeclStmt 0x563474642350 <line:390:17, col:79>
| |     |       | `-VarDecl 0x563474642258 <col:17, col:21> col:21 referenced nUBucketPos 'int'
| |     |       `-IfStmt 0x563474642728 <line:391:17, line:394:17>
| |     |         |-BinaryOperator 0x563474642508 <line:391:21, col:54> 'bool' '=='
| |     |         | |-ImplicitCastExpr 0x5634746424f0 <col:21, col:48> 'int' <LValueToRValue>
| |     |         | | `-ArraySubscriptExpr 0x563474642498 <col:21, col:48> 'int' lvalue
| |     |         | |   |-ImplicitCastExpr 0x563474642468 <col:21, col:35> 'int *' <ArrayToPointerDecay>
| |     |         | |   | `-ArraySubscriptExpr 0x563474642428 <col:21, col:35> 'int [64]' lvalue
| |     |         | |   |   |-ImplicitCastExpr 0x5634746423f8 <col:21> 'int (*)[64]' <ArrayToPointerDecay>
| |     |         | |   |   | `-MemberExpr 0x563474642378 <col:21> 'int [1024][64]' lvalue ->vvNew 0x563474624040
| |     |         | |   |   |   `-CXXThisExpr 0x563474642368 <col:21> 'CAddrMan *' implicit this
| |     |         | |   |   `-ImplicitCastExpr 0x563474642410 <col:27> 'int' <LValueToRValue>
| |     |         | |   |     `-DeclRefExpr 0x5634746423a8 <col:27> 'int' lvalue Var 0x563474642130 'nUBucket' 'int'
| |     |         | |   `-ImplicitCastExpr 0x563474642480 <col:37> 'int' <LValueToRValue>
| |     |         | |     `-DeclRefExpr 0x563474642448 <col:37> 'int' lvalue Var 0x563474642258 'nUBucketPos' 'int'
| |     |         | `-UnaryOperator 0x5634746424d8 <col:53, col:54> 'int' prefix '-'
| |     |         |   `-IntegerLiteral 0x5634746424b8 <col:54> 'int' 1
| |     |         `-CompoundStmt 0x563474642708 <col:57, line:394:17>
| |     |           |-BinaryOperator 0x563474642680 <line:392:21, col:52> 'int' lvalue '='
| |     |           | |-ArraySubscriptExpr 0x563474642628 <col:21, col:48> 'int' lvalue
| |     |           | | |-ImplicitCastExpr 0x5634746425f8 <col:21, col:35> 'int *' <ArrayToPointerDecay>
| |     |           | | | `-ArraySubscriptExpr 0x5634746425b8 <col:21, col:35> 'int [64]' lvalue
| |     |           | | |   |-ImplicitCastExpr 0x563474642588 <col:21> 'int (*)[64]' <ArrayToPointerDecay>
| |     |           | | |   | `-MemberExpr 0x563474642538 <col:21> 'int [1024][64]' lvalue ->vvNew 0x563474624040
| |     |           | | |   |   `-CXXThisExpr 0x563474642528 <col:21> 'CAddrMan *' implicit this
| |     |           | | |   `-ImplicitCastExpr 0x5634746425a0 <col:27> 'int' <LValueToRValue>
| |     |           | | |     `-DeclRefExpr 0x563474642568 <col:27> 'int' lvalue Var 0x563474642130 'nUBucket' 'int'
| |     |           | | `-ImplicitCastExpr 0x563474642610 <col:37> 'int' <LValueToRValue>
| |     |           | |   `-DeclRefExpr 0x5634746425d8 <col:37> 'int' lvalue Var 0x563474642258 'nUBucketPos' 'int'
| |     |           | `-ImplicitCastExpr 0x563474642668 <col:52> 'int' <LValueToRValue>
| |     |           |   `-DeclRefExpr 0x563474642648 <col:52> 'int' lvalue Var 0x563474641c48 'n' 'int'
| |     |           `-UnaryOperator 0x5634746426f0 <line:393:21, col:35> 'int' postfix '++'
| |     |             `-MemberExpr 0x5634746426c0 <col:21, col:26> 'int' lvalue .nRefCount 0x56347461dbc0
| |     |               `-DeclRefExpr 0x5634746426a0 <col:21> 'CAddrInfo' lvalue Var 0x563474641de0 'info' 'CAddrInfo &'
| |     |-BinaryOperator 0x563474642878 <line:397:9, col:20> 'int' lvalue '='
| |     | |-MemberExpr 0x5634746427f0 <col:9> 'int' lvalue ->nIdCount 0x563474623988
| |     | | `-CXXThisExpr 0x5634746427e0 <col:9> 'CAddrMan *' implicit this
| |     | `-ImplicitCastExpr 0x563474642860 <col:20> 'int' <LValueToRValue>
| |     |   `-MemberExpr 0x563474642830 <col:20> 'int' lvalue ->nNew 0x563474623e10
| |     |     `-CXXThisExpr 0x563474642820 <col:20> 'CAddrMan *' implicit this
| |     |-DeclStmt 0x563474642938 <line:400:9, col:22>
| |     | `-VarDecl 0x5634746428b0 <col:9, col:21> col:13 referenced nLost 'int' cinit
| |     |   `-IntegerLiteral 0x563474642918 <col:21> 'int' 0
| |     |-ForStmt 0x563474643820 <line:401:9, line:417:9>
| |     | |-DeclStmt 0x5634746429f0 <line:401:14, col:23>
| |     | | `-VarDecl 0x563474642968 <col:14, col:22> col:18 referenced n 'int' cinit
| |     | |   `-IntegerLiteral 0x5634746429d0 <col:22> 'int' 0
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x563474642a98 <col:25, col:29> 'bool' '<'
| |     | | |-ImplicitCastExpr 0x563474642a68 <col:25> 'int' <LValueToRValue>
| |     | | | `-DeclRefExpr 0x563474642a08 <col:25> 'int' lvalue Var 0x563474642968 'n' 'int'
| |     | | `-ImplicitCastExpr 0x563474642a80 <col:29> 'int' <LValueToRValue>
| |     | |   `-MemberExpr 0x563474642a38 <col:29> 'int' lvalue ->nTried 0x563474623b08
| |     | |     `-CXXThisExpr 0x563474642a28 <col:29> 'CAddrMan *' implicit this
| |     | |-UnaryOperator 0x563474642ad8 <col:37, col:38> 'int' postfix '++'
| |     | | `-DeclRefExpr 0x563474642ab8 <col:37> 'int' lvalue Var 0x563474642968 'n' 'int'
| |     | `-CompoundStmt 0x5634746437e8 <col:42, line:417:9>
| |     |   |-DeclStmt 0x563474642f60 <line:402:13, col:27>
| |     |   | `-VarDecl 0x563474642ba0 <col:13, col:23> col:23 referenced info 'CAddrInfo' callinit
| |     |   |   `-CXXConstructExpr 0x563474642f38 <col:23> 'CAddrInfo' 'void ()'
| |     |   |-BinaryOperator 0x563474642fb8 <line:403:13, col:18> '<dependent type>' '>>'
| |     |   | |-DeclRefExpr 0x563474642f78 <col:13> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     |   | `-DeclRefExpr 0x563474642f98 <col:18> 'CAddrInfo' lvalue Var 0x563474642ba0 'info' 'CAddrInfo'
| |     |   |-DeclStmt 0x5634746430b8 <line:404:13, col:53>
| |     |   | `-VarDecl 0x563474642ff0 <col:13, col:17> col:17 referenced nKBucket 'int'
| |     |   |-DeclStmt 0x5634746431e0 <line:405:13, col:76>
| |     |   | `-VarDecl 0x5634746430e8 <col:13, col:17> col:17 referenced nKBucketPos 'int'
| |     |   `-IfStmt 0x5634746437c0 <line:406:13, line:416:13> has_else
| |     |     |-BinaryOperator 0x563474643368 <line:406:17, col:52> 'bool' '=='
| |     |     | |-ImplicitCastExpr 0x563474643350 <col:17, col:46> 'int' <LValueToRValue>
| |     |     | | `-ArraySubscriptExpr 0x5634746432f8 <col:17, col:46> 'int' lvalue
| |     |     | |   |-ImplicitCastExpr 0x5634746432c8 <col:17, col:33> 'int *' <ArrayToPointerDecay>
| |     |     | |   | `-ArraySubscriptExpr 0x563474643288 <col:17, col:33> 'int [64]' lvalue
| |     |     | |   |   |-ImplicitCastExpr 0x563474643258 <col:17> 'int (*)[64]' <ArrayToPointerDecay>
| |     |     | |   |   | `-MemberExpr 0x563474643208 <col:17> 'int [256][64]' lvalue ->vvTried 0x563474623d80
| |     |     | |   |   |   `-CXXThisExpr 0x5634746431f8 <col:17> 'CAddrMan *' implicit this
| |     |     | |   |   `-ImplicitCastExpr 0x563474643270 <col:25> 'int' <LValueToRValue>
| |     |     | |   |     `-DeclRefExpr 0x563474643238 <col:25> 'int' lvalue Var 0x563474642ff0 'nKBucket' 'int'
| |     |     | |   `-ImplicitCastExpr 0x5634746432e0 <col:35> 'int' <LValueToRValue>
| |     |     | |     `-DeclRefExpr 0x5634746432a8 <col:35> 'int' lvalue Var 0x5634746430e8 'nKBucketPos' 'int'
| |     |     | `-UnaryOperator 0x563474643338 <col:51, col:52> 'int' prefix '-'
| |     |     |   `-IntegerLiteral 0x563474643318 <col:52> 'int' 1
| |     |     |-CompoundStmt 0x563474643748 <col:55, line:414:13>
| |     |     | |-BinaryOperator 0x563474643438 <line:408:17, col:33> 'bool' lvalue '='
| |     |     | | |-MemberExpr 0x5634746433f8 <col:17, col:22> 'bool' lvalue .fInTried 0x56347461dc48
| |     |     | | | `-DeclRefExpr 0x5634746433d8 <col:17> 'CAddrInfo' lvalue Var 0x563474642ba0 'info' 'CAddrInfo'
| |     |     | | `-CXXBoolLiteralExpr 0x563474643428 <col:33> 'bool' true
| |     |     | |-BinaryOperator 0x5634746436d0 <line:412:17, col:50> 'int' lvalue '='
| |     |     | | |-ArraySubscriptExpr 0x563474643658 <col:17, col:46> 'int' lvalue
| |     |     | | | |-ImplicitCastExpr 0x563474643628 <col:17, col:33> 'int *' <ArrayToPointerDecay>
| |     |     | | | | `-ArraySubscriptExpr 0x5634746435e8 <col:17, col:33> 'int [64]' lvalue
| |     |     | | | |   |-ImplicitCastExpr 0x5634746435b8 <col:17> 'int (*)[64]' <ArrayToPointerDecay>
| |     |     | | | |   | `-MemberExpr 0x563474643568 <col:17> 'int [256][64]' lvalue ->vvTried 0x563474623d80
| |     |     | | | |   |   `-CXXThisExpr 0x563474643558 <col:17> 'CAddrMan *' implicit this
| |     |     | | | |   `-ImplicitCastExpr 0x5634746435d0 <col:25> 'int' <LValueToRValue>
| |     |     | | | |     `-DeclRefExpr 0x563474643598 <col:25> 'int' lvalue Var 0x563474642ff0 'nKBucket' 'int'
| |     |     | | | `-ImplicitCastExpr 0x563474643640 <col:35> 'int' <LValueToRValue>
| |     |     | | |   `-DeclRefExpr 0x563474643608 <col:35> 'int' lvalue Var 0x5634746430e8 'nKBucketPos' 'int'
| |     |     | | `-ImplicitCastExpr 0x5634746436b8 <col:50> 'int' <LValueToRValue>
| |     |     | |   `-MemberExpr 0x563474643688 <col:50> 'int' lvalue ->nIdCount 0x563474623988
| |     |     | |     `-CXXThisExpr 0x563474643678 <col:50> 'CAddrMan *' implicit this
| |     |     | `-UnaryOperator 0x563474643730 <line:413:17, col:25> 'int' postfix '++'
| |     |     |   `-MemberExpr 0x563474643700 <col:17> 'int' lvalue ->nIdCount 0x563474623988
| |     |     |     `-CXXThisExpr 0x5634746436f0 <col:17> 'CAddrMan *' implicit this
| |     |     `-CompoundStmt 0x5634746437a8 <line:414:20, line:416:13>
| |     |       `-UnaryOperator 0x563474643790 <line:415:17, col:22> 'int' postfix '++'
| |     |         `-DeclRefExpr 0x563474643770 <col:17> 'int' lvalue Var 0x5634746428b0 'nLost' 'int'
| |     |-CompoundAssignOperator 0x5634746438d0 <line:418:9, col:19> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
| |     | |-MemberExpr 0x563474643868 <col:9> 'int' lvalue ->nTried 0x563474623b08
| |     | | `-CXXThisExpr 0x563474643858 <col:9> 'CAddrMan *' implicit this
| |     | `-ImplicitCastExpr 0x5634746438b8 <col:19> 'int' <LValueToRValue>
| |     |   `-DeclRefExpr 0x563474643898 <col:19> 'int' lvalue Var 0x5634746428b0 'nLost' 'int'
| |     |-ForStmt 0x563474644830 <line:421:9, line:436:9>
| |     | |-DeclStmt 0x5634746439a0 <line:421:14, col:28>
| |     | | `-VarDecl 0x563474643918 <col:14, col:27> col:18 referenced bucket 'int' cinit
| |     | |   `-IntegerLiteral 0x563474643980 <col:27> 'int' 0
| |     | |-<<<NULL>>>
| |     | |-BinaryOperator 0x563474643a28 <col:30, col:39> 'bool' '<'
| |     | | |-ImplicitCastExpr 0x5634746439f8 <col:30> 'int' <LValueToRValue>
| |     | | | `-DeclRefExpr 0x5634746439b8 <col:30> 'int' lvalue Var 0x563474643918 'bucket' 'int'
| |     | | `-ImplicitCastExpr 0x563474643a10 <col:39> 'int' <LValueToRValue>
| |     | |   `-DeclRefExpr 0x5634746439d8 <col:39> 'int' lvalue Var 0x563474641488 'nUBuckets' 'int'
| |     | |-UnaryOperator 0x563474643a68 <col:50, col:56> 'int' postfix '++'
| |     | | `-DeclRefExpr 0x563474643a48 <col:50> 'int' lvalue Var 0x563474643918 'bucket' 'int'
| |     | `-CompoundStmt 0x563474644808 <col:60, line:436:9>
| |     |   |-DeclStmt 0x563474643b20 <line:422:13, col:26>
| |     |   | `-VarDecl 0x563474643a98 <col:13, col:25> col:17 referenced nSize 'int' cinit
| |     |   |   `-IntegerLiteral 0x563474643b00 <col:25> 'int' 0
| |     |   |-BinaryOperator 0x563474643b78 <line:423:13, col:18> '<dependent type>' '>>'
| |     |   | |-DeclRefExpr 0x563474643b38 <col:13> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     |   | `-DeclRefExpr 0x563474643b58 <col:18> 'int' lvalue Var 0x563474643a98 'nSize' 'int'
| |     |   `-ForStmt 0x5634746447d0 <line:424:13, line:435:13>
| |     |     |-DeclStmt 0x563474643c38 <line:424:18, col:27>
| |     |     | `-VarDecl 0x563474643bb0 <col:18, col:26> col:22 referenced n 'int' cinit
| |     |     |   `-IntegerLiteral 0x563474643c18 <col:26> 'int' 0
| |     |     |-<<<NULL>>>
| |     |     |-BinaryOperator 0x563474643cc0 <col:29, col:33> 'bool' '<'
| |     |     | |-ImplicitCastExpr 0x563474643c90 <col:29> 'int' <LValueToRValue>
| |     |     | | `-DeclRefExpr 0x563474643c50 <col:29> 'int' lvalue Var 0x563474643bb0 'n' 'int'
| |     |     | `-ImplicitCastExpr 0x563474643ca8 <col:33> 'int' <LValueToRValue>
| |     |     |   `-DeclRefExpr 0x563474643c70 <col:33> 'int' lvalue Var 0x563474643a98 'nSize' 'int'
| |     |     |-UnaryOperator 0x563474643d00 <col:40, col:41> 'int' postfix '++'
| |     |     | `-DeclRefExpr 0x563474643ce0 <col:40> 'int' lvalue Var 0x563474643bb0 'n' 'int'
| |     |     `-CompoundStmt 0x5634746447a8 <col:45, line:435:13>
| |     |       |-DeclStmt 0x563474643db8 <line:425:17, col:31>
| |     |       | `-VarDecl 0x563474643d30 <col:17, col:30> col:21 referenced nIndex 'int' cinit
| |     |       |   `-IntegerLiteral 0x563474643d98 <col:30> 'int' 0
| |     |       |-BinaryOperator 0x563474643e10 <line:426:17, col:22> '<dependent type>' '>>'
| |     |       | |-DeclRefExpr 0x563474643dd0 <col:17> 'Stream' lvalue ParmVar 0x563474629ce8 's' 'Stream &'
| |     |       | `-DeclRefExpr 0x563474643df0 <col:22> 'int' lvalue Var 0x563474643d30 'nIndex' 'int'
| |     |       `-IfStmt 0x563474644790 <line:427:17, line:434:17>
| |     |         |-BinaryOperator 0x563474643f58 <line:427:21, col:45> 'bool' '&&'
| |     |         | |-BinaryOperator 0x563474643e88 <col:21, col:31> 'bool' '>='
| |     |         | | |-ImplicitCastExpr 0x563474643e70 <col:21> 'int' <LValueToRValue>
| |     |         | | | `-DeclRefExpr 0x563474643e30 <col:21> 'int' lvalue Var 0x563474643d30 'nIndex' 'int'
| |     |         | | `-IntegerLiteral 0x563474643e50 <col:31> 'int' 0
| |     |         | `-BinaryOperator 0x563474643f38 <col:36, col:45> 'bool' '<'
| |     |         |   |-ImplicitCastExpr 0x563474643f08 <col:36> 'int' <LValueToRValue>
| |     |         |   | `-DeclRefExpr 0x563474643ea8 <col:36> 'int' lvalue Var 0x563474643d30 'nIndex' 'int'
| |     |         |   `-ImplicitCastExpr 0x563474643f20 <col:45> 'int' <LValueToRValue>
| |     |         |     `-MemberExpr 0x563474643ed8 <col:45> 'int' lvalue ->nNew 0x563474623e10
| |     |         |       `-CXXThisExpr 0x563474643ec8 <col:45> 'CAddrMan *' implicit this
| |     |         `-CompoundStmt 0x563474644768 <col:51, line:434:17>
| |     |           |-DeclStmt 0x563474644010 <line:428:21, col:54>
| |     |           | `-VarDecl 0x563474643f88 <col:21, col:32> col:32 referenced info 'CAddrInfo &'
| |     |           |-DeclStmt 0x563474644138 <line:429:21, col:81>
| |     |           | `-VarDecl 0x563474644040 <col:21, col:25> col:25 referenced nUBucketPos 'int'
| |     |           `-IfStmt 0x563474644750 <line:430:21, line:433:21>
| |     |             |-BinaryOperator 0x563474644530 <line:430:25, line:138:41> 'bool' '&&'
| |     |             | |-BinaryOperator 0x563474644468 <line:430:25, col:114> 'bool' '&&'
| |     |             | | |-BinaryOperator 0x5634746442b8 <col:25, line:163:69> 'bool' '&&'
| |     |             | | | |-BinaryOperator 0x5634746441c0 <line:430:25, col:37> 'bool' '=='
| |     |             | | | | |-ImplicitCastExpr 0x5634746441a8 <col:25> 'int' <IntegralCast>
| |     |             | | | | | `-ImplicitCastExpr 0x563474644190 <col:25> 'unsigned char' <LValueToRValue>
| |     |             | | | | |   `-DeclRefExpr 0x563474644150 <col:25> 'unsigned char' lvalue Var 0x563474641010 'nVersion' 'unsigned char'
| |     |             | | | | `-IntegerLiteral 0x563474644170 <col:37> 'int' 1
| |     |             | | | `-BinaryOperator 0x563474644298 <col:42, line:163:69> 'bool' '=='
| |     |             | | |   |-ImplicitCastExpr 0x563474644280 <line:430:42> 'int' <LValueToRValue>
| |     |             | | |   | `-DeclRefExpr 0x5634746441e0 <col:42> 'int' lvalue Var 0x563474641488 'nUBuckets' 'int'
| |     |             | | |   `-ParenExpr 0x563474644260 <line:163:34, col:69> 'int'
| |     |             | | |     `-BinaryOperator 0x563474644240 <col:35, line:126:39> 'int' '<<'
| |     |             | | |       |-IntegerLiteral 0x563474644200 <line:163:35> 'int' 1
| |     |             | | |       `-IntegerLiteral 0x563474644220 <line:126:39> 'int' 10
| |     |             | | `-BinaryOperator 0x563474644448 <line:430:83, col:114> 'bool' '=='
| |     |             | |   |-ImplicitCastExpr 0x563474644430 <col:83, col:108> 'int' <LValueToRValue>
| |     |             | |   | `-ArraySubscriptExpr 0x5634746443d8 <col:83, col:108> 'int' lvalue
| |     |             | |   |   |-ImplicitCastExpr 0x5634746443a8 <col:83, col:95> 'int *' <ArrayToPointerDecay>
| |     |             | |   |   | `-ArraySubscriptExpr 0x563474644368 <col:83, col:95> 'int [64]' lvalue
| |     |             | |   |   |   |-ImplicitCastExpr 0x563474644338 <col:83> 'int (*)[64]' <ArrayToPointerDecay>
| |     |             | |   |   |   | `-MemberExpr 0x5634746442e8 <col:83> 'int [1024][64]' lvalue ->vvNew 0x563474624040
| |     |             | |   |   |   |   `-CXXThisExpr 0x5634746442d8 <col:83> 'CAddrMan *' implicit this
| |     |             | |   |   |   `-ImplicitCastExpr 0x563474644350 <col:89> 'int' <LValueToRValue>
| |     |             | |   |   |     `-DeclRefExpr 0x563474644318 <col:89> 'int' lvalue Var 0x563474643918 'bucket' 'int'
| |     |             | |   |   `-ImplicitCastExpr 0x5634746443c0 <col:97> 'int' <LValueToRValue>
| |     |             | |   |     `-DeclRefExpr 0x563474644388 <col:97> 'int' lvalue Var 0x563474644040 'nUBucketPos' 'int'
| |     |             | |   `-UnaryOperator 0x563474644418 <col:113, col:114> 'int' prefix '-'
| |     |             | |     `-IntegerLiteral 0x5634746443f8 <col:114> 'int' 1
| |     |             | `-BinaryOperator 0x563474644510 <col:119, line:138:41> 'bool' '<'
| |     |             |   |-ImplicitCastExpr 0x5634746444f8 <line:430:119, col:124> 'int' <LValueToRValue>
| |     |             |   | `-MemberExpr 0x5634746444a8 <col:119, col:124> 'int' lvalue .nRefCount 0x56347461dbc0
| |     |             |   |   `-DeclRefExpr 0x563474644488 <col:119> 'CAddrInfo' lvalue Var 0x563474643f88 'info' 'CAddrInfo &'
| |     |             |   `-IntegerLiteral 0x5634746444d8 <line:138:41> 'int' 8
| |     |             `-CompoundStmt 0x563474644730 <line:430:169, line:433:21>
| |     |               |-UnaryOperator 0x5634746445a0 <line:431:25, col:39> 'int' postfix '++'
| |     |               | `-MemberExpr 0x563474644570 <col:25, col:30> 'int' lvalue .nRefCount 0x56347461dbc0
| |     |               |   `-DeclRefExpr 0x563474644550 <col:25> 'CAddrInfo' lvalue Var 0x563474643f88 'info' 'CAddrInfo &'
| |     |               `-BinaryOperator 0x563474644710 <line:432:25, col:54> 'int' lvalue '='
| |     |                 |-ArraySubscriptExpr 0x5634746446b8 <col:25, col:50> 'int' lvalue
| |     |                 | |-ImplicitCastExpr 0x563474644688 <col:25, col:37> 'int *' <ArrayToPointerDecay>
| |     |                 | | `-ArraySubscriptExpr 0x563474644648 <col:25, col:37> 'int [64]' lvalue
| |     |                 | |   |-ImplicitCastExpr 0x563474644618 <col:25> 'int (*)[64]' <ArrayToPointerDecay>
| |     |                 | |   | `-MemberExpr 0x5634746445c8 <col:25> 'int [1024][64]' lvalue ->vvNew 0x563474624040
| |     |                 | |   |   `-CXXThisExpr 0x5634746445b8 <col:25> 'CAddrMan *' implicit this
| |     |                 | |   `-ImplicitCastExpr 0x563474644630 <col:31> 'int' <LValueToRValue>
| |     |                 | |     `-DeclRefExpr 0x5634746445f8 <col:31> 'int' lvalue Var 0x563474643918 'bucket' 'int'
| |     |                 | `-ImplicitCastExpr 0x5634746446a0 <col:39> 'int' <LValueToRValue>
| |     |                 |   `-DeclRefExpr 0x563474644668 <col:39> 'int' lvalue Var 0x563474644040 'nUBucketPos' 'int'
| |     |                 `-ImplicitCastExpr 0x5634746446f8 <col:54> 'int' <LValueToRValue>
| |     |                   `-DeclRefExpr 0x5634746446d8 <col:54> 'int' lvalue Var 0x563474643d30 'nIndex' 'int'
| |     |-DeclStmt 0x563474644908 <line:439:9, col:25>
| |     | `-VarDecl 0x563474644880 <col:9, col:24> col:13 referenced nLostUnk 'int' cinit
| |     |   `-IntegerLiteral 0x5634746448e8 <col:24> 'int' 0
| |     |-IfStmt 0x563474646100 <line:449:9, line:451:9>
| |     | |-BinaryOperator 0x563474645f78 <line:449:13, col:32> 'bool' '>'
| |     | | |-BinaryOperator 0x563474645f38 <col:13, col:21> 'int' '+'
| |     | | | |-ImplicitCastExpr 0x563474645f08 <col:13> 'int' <LValueToRValue>
| |     | | | | `-DeclRefExpr 0x563474645ec8 <col:13> 'int' lvalue Var 0x5634746428b0 'nLost' 'int'
| |     | | | `-ImplicitCastExpr 0x563474645f20 <col:21> 'int' <LValueToRValue>
| |     | | |   `-DeclRefExpr 0x563474645ee8 <col:21> 'int' lvalue Var 0x563474644880 'nLostUnk' 'int'
| |     | | `-IntegerLiteral 0x563474645f58 <col:32> 'int' 0
| |     | `-CompoundStmt 0x5634746460f0 <col:35, line:451:9>
| |     `-CXXMemberCallExpr 0x563474646158 <line:453:9, col:15> 'void'
| |       `-MemberExpr 0x563474646128 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| |         `-CXXThisExpr 0x563474646118 <col:9> 'CAddrMan *' implicit this
| |-CXXMethodDecl 0x563474629ec8 <line:456:5, line:478:5> line:456:10 used Clear 'void ()'
| | `-CompoundStmt 0x563474646b40 <line:457:5, line:478:5>
| |   |-BinaryOperator 0x5634746469f0 <line:472:9, col:20> 'int' lvalue '='
| |   | |-MemberExpr 0x5634746469a0 <col:9> 'int' lvalue ->nIdCount 0x563474623988
| |   | | `-CXXThisExpr 0x563474646990 <col:9> 'CAddrMan *' implicit this
| |   | `-IntegerLiteral 0x5634746469d0 <col:20> 'int' 0
| |   |-BinaryOperator 0x563474646a70 <line:473:9, col:18> 'int' lvalue '='
| |   | |-MemberExpr 0x563474646a20 <col:9> 'int' lvalue ->nTried 0x563474623b08
| |   | | `-CXXThisExpr 0x563474646a10 <col:9> 'CAddrMan *' implicit this
| |   | `-IntegerLiteral 0x563474646a50 <col:18> 'int' 0
| |   `-BinaryOperator 0x563474646af0 <line:474:9, col:16> 'int' lvalue '='
| |     |-MemberExpr 0x563474646aa0 <col:9> 'int' lvalue ->nNew 0x563474623e10
| |     | `-CXXThisExpr 0x563474646a90 <col:9> 'CAddrMan *' implicit this
| |     `-IntegerLiteral 0x563474646ad0 <col:16> 'int' 0
| |-CXXConstructorDecl 0x563474629fa0 <line:480:5, line:483:5> line:480:5 CAddrMan 'void ()'
| | `-CompoundStmt 0x563474646bc8 <line:481:5, line:483:5>
| |   `-CXXMemberCallExpr 0x563474646ba8 <line:482:9, col:15> 'void'
| |     `-MemberExpr 0x563474646b78 <col:9> '<bound member function type>' ->Clear 0x563474629ec8
| |       `-CXXThisExpr 0x563474646b68 <col:9> 'CAddrMan *' implicit this
| |-CXXDestructorDecl 0x56347462a090 <line:485:5, line:488:5> line:485:5 ~CAddrMan 'void () noexcept'
| | `-CompoundStmt 0x563474646bf0 <line:486:5, line:488:5>
| |-CXXMethodDecl 0x56347462a1d0 <line:491:5, line:495:5> line:491:12 invalid size 'int () const'
| | |-CompoundStmt 0x563474646cc8 <line:492:5, line:495:5>
| | `-FullComment 0x5634747686b0 <line:490:8, col:62>
| |   `-ParagraphComment 0x563474768680 <col:8, col:62>
| |     `-TextComment 0x563474768650 <col:8, col:62> Text=" Return the number of (unique) addresses in all tables."
| |-CXXMethodDecl 0x56347462a2b8 <line:498:5, line:508:5> line:498:10 used Check 'void ()'
| | |-CompoundStmt 0x563474646cd8 <line:499:5, line:508:5>
| | `-FullComment 0x563474768780 <line:497:8, col:25>
| |   `-ParagraphComment 0x563474768750 <col:8, col:25>
| |     `-TextComment 0x563474768720 <col:8, col:25> Text=" Consistency check"
| |-CXXMethodDecl 0x56347462a540 <line:511:5, line:522:5> line:511:10 invalid Add 'bool (const CAddress &, const CNetAddr &, int)'
| | |-ParmVarDecl 0x56347462a398 <col:14, col:30> col:30 used addr 'const CAddress &'
| | |-ParmVarDecl 0x56347462a410 <col:36, col:52> col:52 used source 'const CNetAddr &'
| | |-ParmVarDecl 0x56347462a4a0 <col:60, col:83> col:68 invalid nTimePenalty 'int' cinit
| | | `-IntegerLiteral 0x56347463de48 <col:83> 'int' 0
| | |-CompoundStmt 0x5634746471e8 <line:512:5, line:522:5>
| | | |-DeclStmt 0x563474646e40 <line:514:9, col:26>
| | | | `-VarDecl 0x563474646dc8 <col:9, col:21> col:14 used fRet 'bool' cinit
| | | |   `-CXXBoolLiteralExpr 0x563474646e30 <col:21> 'bool' false
| | | |-CXXMemberCallExpr 0x563474646e98 <line:515:9, col:15> 'void'
| | | | `-MemberExpr 0x563474646e68 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | | |   `-CXXThisExpr 0x563474646e58 <col:9> 'CAddrMan *' implicit this
| | | |-CXXMemberCallExpr 0x563474646f68 <line:517:9, col:15> 'void'
| | | | `-MemberExpr 0x563474646f38 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | | |   `-CXXThisExpr 0x563474646f28 <col:9> 'CAddrMan *' implicit this
| | | |-IfStmt 0x563474647188 <line:518:9, line:520:9>
| | | | |-ImplicitCastExpr 0x563474646fa8 <line:518:13> 'bool' <LValueToRValue>
| | | | | `-DeclRefExpr 0x563474646f88 <col:13> 'bool' lvalue Var 0x563474646dc8 'fRet' 'bool'
| | | | `-CompoundStmt 0x563474647178 <col:19, line:520:9>
| | | `-ReturnStmt 0x5634746471d8 <line:521:9, col:16>
| | |   `-ImplicitCastExpr 0x5634746471c0 <col:16> 'bool' <LValueToRValue>
| | |     `-DeclRefExpr 0x5634746471a0 <col:16> 'bool' lvalue Var 0x563474646dc8 'fRet' 'bool'
| | `-FullComment 0x563474768850 <line:510:8, col:29>
| |   `-ParagraphComment 0x563474768820 <col:8, col:29>
| |     `-TextComment 0x5634747687f0 <col:8, col:29> Text=" Add a single address."
| |-CXXMethodDecl 0x56347462a758 <line:525:5, line:537:5> line:525:10 invalid Add 'bool (const int)'
| | |-ParmVarDecl 0x56347462a660 <col:14, <invalid sloc>> col:42 invalid 'const int'
| | |-CompoundStmt 0x563474647840 <line:526:5, line:537:5>
| | | |-DeclStmt 0x563474647388 <line:528:9, col:21>
| | | | `-VarDecl 0x563474647300 <col:9, col:20> col:13 used nAdd 'int' cinit
| | | |   `-IntegerLiteral 0x563474647368 <col:20> 'int' 0
| | | |-CXXMemberCallExpr 0x5634746473e0 <line:529:9, col:15> 'void'
| | | | `-MemberExpr 0x5634746473b0 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | | |   `-CXXThisExpr 0x5634746473a0 <col:9> 'CAddrMan *' implicit this
| | | |-CXXMemberCallExpr 0x563474647578 <line:532:9, col:15> 'void'
| | | | `-MemberExpr 0x563474647548 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | | |   `-CXXThisExpr 0x563474647538 <col:9> 'CAddrMan *' implicit this
| | | |-IfStmt 0x5634746477a0 <line:533:9, line:535:9>
| | | | |-ImplicitCastExpr 0x5634746475d0 <line:533:13> 'bool' <IntegralToBoolean>
| | | | | `-ImplicitCastExpr 0x5634746475b8 <col:13> 'int' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x563474647598 <col:13> 'int' lvalue Var 0x563474647300 'nAdd' 'int'
| | | | `-CompoundStmt 0x563474647790 <col:19, line:535:9>
| | | `-ReturnStmt 0x563474647830 <line:536:9, col:23>
| | |   `-BinaryOperator 0x563474647810 <col:16, col:23> 'bool' '>'
| | |     |-ImplicitCastExpr 0x5634746477f8 <col:16> 'int' <LValueToRValue>
| | |     | `-DeclRefExpr 0x5634746477b8 <col:16> 'int' lvalue Var 0x563474647300 'nAdd' 'int'
| | |     `-IntegerLiteral 0x5634746477d8 <col:23> 'int' 0
| | `-FullComment 0x563474768920 <line:524:8, col:31>
| |   `-ParagraphComment 0x5634747688f0 <col:8, col:31>
| |     `-TextComment 0x5634747688c0 <col:8, col:31> Text=" Add multiple addresses."
| |-CXXMethodDecl 0x56347462a9e0 <line:540:5, line:546:5> line:540:10 invalid Good 'void (const CService &, bool, int)'
| | |-ParmVarDecl 0x56347462a838 <col:15, col:31> col:31 used addr 'const CService &'
| | |-ParmVarDecl 0x56347462a8b0 <col:37, col:62> col:42 used test_before_evict 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x56347463de68 <col:62> 'bool' true
| | |-ParmVarDecl 0x56347462a940 <col:68, col:82> col:76 invalid nTime 'int' cinit
| | | `-OpaqueValueExpr 0x56347463de78 <col:82> 'int'
| | |-CompoundStmt 0x563474647a58 <line:541:5, line:546:5>
| | | |-CXXMemberCallExpr 0x563474647988 <line:543:9, col:15> 'void'
| | | | `-MemberExpr 0x563474647958 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | | |   `-CXXThisExpr 0x563474647948 <col:9> 'CAddrMan *' implicit this
| | | `-CXXMemberCallExpr 0x563474647a38 <line:545:9, col:15> 'void'
| | |   `-MemberExpr 0x563474647a08 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | |     `-CXXThisExpr 0x5634746479f8 <col:9> 'CAddrMan *' implicit this
| | `-FullComment 0x5634747689f0 <line:539:8, col:36>
| |   `-ParagraphComment 0x5634747689c0 <col:8, col:36>
| |     `-TextComment 0x563474768990 <col:8, col:36> Text=" Mark an entry as accessible."
| |-CXXMethodDecl 0x56347462ac80 <line:549:5, line:555:5> line:549:10 invalid Attempt 'void (const CService &, bool, int)'
| | |-ParmVarDecl 0x56347462aad8 <col:18, col:34> col:34 used addr 'const CService &'
| | |-ParmVarDecl 0x56347462ab50 <col:40, col:45> col:45 used fCountFailure 'bool'
| | |-ParmVarDecl 0x56347462abe0 <col:60, col:74> col:68 invalid nTime 'int' cinit
| | | `-OpaqueValueExpr 0x56347463de90 <col:74> 'int'
| | |-CompoundStmt 0x563474647c58 <line:550:5, line:555:5>
| | | |-CXXMemberCallExpr 0x563474647b88 <line:552:9, col:15> 'void'
| | | | `-MemberExpr 0x563474647b58 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | | |   `-CXXThisExpr 0x563474647b48 <col:9> 'CAddrMan *' implicit this
| | | `-CXXMemberCallExpr 0x563474647c38 <line:554:9, col:15> 'void'
| | |   `-MemberExpr 0x563474647c08 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | |     `-CXXThisExpr 0x563474647bf8 <col:9> 'CAddrMan *' implicit this
| | `-FullComment 0x563474768ac0 <line:548:8, col:49>
| |   `-ParagraphComment 0x563474768a90 <col:8, col:49>
| |     `-TextComment 0x563474768a60 <col:8, col:49> Text=" Mark an entry as connection attempted to."
| |-CXXMethodDecl 0x56347462ad88 <line:558:5, line:564:5> line:558:10 ResolveCollisions 'void ()'
| | |-CompoundStmt 0x5634746492a0 <line:559:5, line:564:5>
| | | |-CXXMemberCallExpr 0x563474647d88 <line:561:9, col:15> 'void'
| | | | `-MemberExpr 0x563474647d58 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | | |   `-CXXThisExpr 0x563474647d48 <col:9> 'CAddrMan *' implicit this
| | | |-CXXMemberCallExpr 0x563474647de8 <line:562:9, col:28> 'void'
| | | | `-MemberExpr 0x563474647db8 <col:9> '<bound member function type>' ->ResolveCollisions_ 0x563474629158
| | | |   `-CXXThisExpr 0x563474647da8 <col:9> 'CAddrMan *' implicit this
| | | `-CXXMemberCallExpr 0x563474649280 <line:563:9, col:15> 'void'
| | |   `-MemberExpr 0x563474649250 <col:9> '<bound member function type>' ->Check 0x56347462a2b8
| | |     `-CXXThisExpr 0x563474647e08 <col:9> 'CAddrMan *' implicit this
| | `-FullComment 0x563474768b90 <line:557:8, col:103>
| |   `-ParagraphComment 0x563474768b60 <col:8, col:103>
| |     `-TextComment 0x563474768b30 <col:8, col:103> Text=" See if any to-be-evicted tried table entries have been tested and if so resolve the collisions."
| |-CXXMethodDecl 0x56347462ae78 <line:567:5, line:577:5> line:567:15 SelectTriedCollision 'CAddrInfo ()'
| | |-CompoundStmt 0x56347464a508 <line:568:5, line:577:5>
| | | |-DeclStmt 0x563474649368 <line:569:9, col:22>
| | | | `-VarDecl 0x5634746492d8 <col:9, col:19> col:19 used ret 'CAddrInfo' nrvo callinit
| | | |   `-CXXConstructExpr 0x563474649340 <col:19> 'CAddrInfo' 'void ()'
| | | |-CompoundStmt 0x5634746499b0 <line:570:9, line:575:9>
| | | | |-CXXMemberCallExpr 0x563474649488 <line:572:13, col:19> 'void'
| | | | | `-MemberExpr 0x563474649458 <col:13> '<bound member function type>' ->Check 0x56347462a2b8
| | | | |   `-CXXThisExpr 0x563474649448 <col:13> 'CAddrMan *' implicit this
| | | | |-ExprWithCleanups 0x563474649938 <line:573:13, col:41> 'CAddrInfo' lvalue
| | | | | `-CXXOperatorCallExpr 0x563474649900 <col:13, col:41> 'CAddrInfo' lvalue
| | | | |   |-ImplicitCastExpr 0x5634746498e8 <col:17> 'CAddrInfo &(*)(CAddrInfo &&) noexcept' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x563474649870 <col:17> 'CAddrInfo &(CAddrInfo &&) noexcept' lvalue CXXMethod 0x5634746496a8 'operator=' 'CAddrInfo &(CAddrInfo &&) noexcept'
| | | | |   |-DeclRefExpr 0x5634746494a8 <col:13> 'CAddrInfo' lvalue Var 0x5634746492d8 'ret' 'CAddrInfo'
| | | | |   `-MaterializeTemporaryExpr 0x563474649828 <col:19, col:41> 'CAddrInfo' xvalue
| | | | |     `-CXXMemberCallExpr 0x563474649508 <col:19, col:41> 'CAddrInfo'
| | | | |       `-MemberExpr 0x5634746494d8 <col:19> '<bound member function type>' ->SelectTriedCollision_ 0x563474629278
| | | | |         `-CXXThisExpr 0x5634746494c8 <col:19> 'CAddrMan *' implicit this
| | | | `-CXXMemberCallExpr 0x563474649990 <line:574:13, col:19> 'void'
| | | |   `-MemberExpr 0x563474649960 <col:13> '<bound member function type>' ->Check 0x56347462a2b8
| | | |     `-CXXThisExpr 0x563474649950 <col:13> 'CAddrMan *' implicit this
| | | `-ReturnStmt 0x56347464a4f0 <line:576:9, col:16>
| | |   `-CXXConstructExpr 0x56347464a4c0 <col:16> 'CAddrInfo' 'void (CAddrInfo &&) noexcept' elidable
| | |     `-ImplicitCastExpr 0x5634746499f8 <col:16> 'CAddrInfo' xvalue <NoOp>
| | |       `-DeclRefExpr 0x5634746499d8 <col:16> 'CAddrInfo' lvalue Var 0x5634746492d8 'ret' 'CAddrInfo'
| | `-FullComment 0x563474768c60 <line:566:8, col:88>
| |   `-ParagraphComment 0x563474768c30 <col:8, col:88>
| |     `-TextComment 0x563474768c00 <col:8, col:88> Text=" Randomly select an address in tried that another address is attempting to evict."
| |-CXXMethodDecl 0x56347462afe8 <line:582:5, line:592:5> line:582:15 Select 'CAddrInfo (bool)'
| | |-ParmVarDecl 0x56347462af58 <col:22, col:37> col:27 used newOnly 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x56347463dea8 <col:37> 'bool' false
| | |-CompoundStmt 0x56347464aa28 <line:583:5, line:592:5>
| | | |-DeclStmt 0x56347464a5d0 <line:584:9, col:26>
| | | | `-VarDecl 0x56347464a540 <col:9, col:19> col:19 used addrRet 'CAddrInfo' nrvo callinit
| | | |   `-CXXConstructExpr 0x56347464a5a8 <col:19> 'CAddrInfo' 'void ()'
| | | |-CompoundStmt 0x56347464a980 <line:585:9, line:590:9>
| | | | |-CXXMemberCallExpr 0x56347464a6f8 <line:587:13, col:19> 'void'
| | | | | `-MemberExpr 0x56347464a6c8 <col:13> '<bound member function type>' ->Check 0x56347462a2b8
| | | | |   `-CXXThisExpr 0x56347464a6b8 <col:13> 'CAddrMan *' implicit this
| | | | |-ExprWithCleanups 0x56347464a908 <line:588:13, col:38> 'CAddrInfo' lvalue
| | | | | `-CXXOperatorCallExpr 0x56347464a8d0 <col:13, col:38> 'CAddrInfo' lvalue
| | | | |   |-ImplicitCastExpr 0x56347464a8b8 <col:21> 'CAddrInfo &(*)(const CAddrInfo &) noexcept' <FunctionToPointerDecay>
| | | | |   | `-DeclRefExpr 0x56347464a840 <col:21> 'CAddrInfo &(const CAddrInfo &) noexcept' lvalue CXXMethod 0x563474649528 'operator=' 'CAddrInfo &(const CAddrInfo &) noexcept'
| | | | |   |-DeclRefExpr 0x56347464a718 <col:13> 'CAddrInfo' lvalue Var 0x56347464a540 'addrRet' 'CAddrInfo'
| | | | |   `-MaterializeTemporaryExpr 0x56347464a7f0 <col:23, col:38> 'const CAddrInfo' lvalue
| | | | |     `-ImplicitCastExpr 0x56347464a7d8 <col:23, col:38> 'const CAddrInfo' <NoOp>
| | | | |       `-CXXMemberCallExpr 0x56347464a798 <col:23, col:38> 'CAddrInfo'
| | | | |         |-MemberExpr 0x56347464a748 <col:23> '<bound member function type>' ->Select_ 0x563474629068
| | | | |         | `-CXXThisExpr 0x56347464a738 <col:23> 'CAddrMan *' implicit this
| | | | |         `-ImplicitCastExpr 0x56347464a7c0 <col:31> 'bool' <LValueToRValue>
| | | | |           `-DeclRefExpr 0x56347464a778 <col:31> 'bool' lvalue ParmVar 0x56347462af58 'newOnly' 'bool'
| | | | `-CXXMemberCallExpr 0x56347464a960 <line:589:13, col:19> 'void'
| | | |   `-MemberExpr 0x56347464a930 <col:13> '<bound member function type>' ->Check 0x56347462a2b8
| | | |     `-CXXThisExpr 0x56347464a920 <col:13> 'CAddrMan *' implicit this
| | | `-ReturnStmt 0x56347464aa10 <line:591:9, col:16>
| | |   `-CXXConstructExpr 0x56347464a9e0 <col:16> 'CAddrInfo' 'void (CAddrInfo &&) noexcept' elidable
| | |     `-ImplicitCastExpr 0x56347464a9c8 <col:16> 'CAddrInfo' xvalue <NoOp>
| | |       `-DeclRefExpr 0x56347464a9a8 <col:16> 'CAddrInfo' lvalue Var 0x56347464a540 'addrRet' 'CAddrInfo'
| | `-FullComment 0x563474768d30 <line:580:7, col:39>
| |   `-ParagraphComment 0x563474768d00 <col:7, col:39>
| |     `-TextComment 0x563474768cd0 <col:7, col:39> Text=" Choose an address to connect to."
| |-CXXConstructorDecl 0x56347462b108 <line:175:7> col:7 implicit constexpr CAddrMan 'void (const CAddrMan &)' inline default trivial noexcept-unevaluated 0x56347462b108
| | `-ParmVarDecl 0x56347462b218 <col:7> col:7 'const CAddrMan &'
| `-CXXMethodDecl 0x56347462b288 <col:7> col:7 implicit operator= 'CAddrMan &(const CAddrMan &)' inline default trivial noexcept-unevaluated 0x56347462b288
|   `-ParmVarDecl 0x56347462b398 <col:7> col:7 'const CAddrMan &'
|-TypedefDecl 0x56347464aaa0 <bitcoin/src/amount.h:12:1, col:17> col:17 referenced invalid CAmount 'int'
| |-BuiltinType 0x5634744cb780 'int'
| `-FullComment 0x563474768e00 <line:11:4, col:41>
|   `-ParagraphComment 0x563474768dd0 <col:4, col:41>
|     `-TextComment 0x563474768da0 <col:4, col:41> Text=" Amount in satoshis (Can be negative) "
|-VarDecl 0x56347464ab30 <line:14:1, col:29> col:22 referenced COIN 'const CAmount':'const int' static cinit
| `-IntegerLiteral 0x56347464ab98 <col:29> 'int' 100000000
|-VarDecl 0x56347464ac48 <line:25:1, col:45> col:22 used MAX_MONEY 'const CAmount':'const int' static cinit
| |-BinaryOperator 0x56347464ad28 <col:34, col:45> 'int' '*'
| | |-IntegerLiteral 0x56347464acb0 <col:34> 'int' 21000000
| | `-ImplicitCastExpr 0x56347464ad10 <col:45> 'CAmount':'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56347464acf0 <col:45> 'const CAmount':'const int' lvalue Var 0x56347464ab30 'COIN' 'const CAmount':'const int' non_odr_use_constant
| `-FullComment 0x563474768fe0 <line:16:4, line:23:79>
|   |-ParagraphComment 0x563474768ea0 <line:16:4, col:53>
|   | `-TextComment 0x563474768e70 <col:4, col:53> Text=" No amount larger than this (in satoshi) is valid."
|   `-ParagraphComment 0x563474768fb0 <line:18:3, line:23:79>
|     |-TextComment 0x563474768ec0 <line:18:3, col:76> Text=" Note that this constant is *not* the total money supply, which in Bitcoin"
|     |-TextComment 0x563474768ee0 <line:19:3, col:76> Text=" currently happens to be less than 21,000,000 BTC for various reasons, but"
|     |-TextComment 0x563474768f00 <line:20:3, col:76> Text=" rather a sanity check. As this sanity check is used by consensus-critical"
|     |-TextComment 0x563474768f20 <line:21:3, col:74> Text=" validation code, the exact value of the MAX_MONEY constant is consensus"
|     |-TextComment 0x563474768f40 <line:22:3, col:78> Text=" critical; in unusual circumstances like a(nother) overflow bug that allowed"
|     `-TextComment 0x563474768f60 <line:23:3, col:79> Text=" for the creation of coins out of thin air modification could lead to a fork."
|-FunctionDecl 0x56347464ae98 <line:26:1, col:94> col:13 MoneyRange 'bool (const CAmount &)' inline
| |-ParmVarDecl 0x56347464add8 <col:24, col:39> col:39 used nValue 'const CAmount &'
| `-CompoundStmt 0x56347464b098 <col:47, col:94>
|   `-ReturnStmt 0x56347464b088 <col:49, col:91>
|     `-ParenExpr 0x56347464b068 <col:56, col:91> 'bool'
|       `-BinaryOperator 0x56347464b048 <col:57, col:82> 'bool' '&&'
|         |-BinaryOperator 0x56347464af98 <col:57, col:67> 'bool' '>='
|         | |-ImplicitCastExpr 0x56347464af80 <col:57> 'CAmount':'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56347464af40 <col:57> 'const CAmount':'const int' lvalue ParmVar 0x56347464add8 'nValue' 'const CAmount &'
|         | `-IntegerLiteral 0x56347464af60 <col:67> 'int' 0
|         `-BinaryOperator 0x56347464b028 <col:72, col:82> 'bool' '<='
|           |-ImplicitCastExpr 0x56347464aff8 <col:72> 'CAmount':'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56347464afb8 <col:72> 'const CAmount':'const int' lvalue ParmVar 0x56347464add8 'nValue' 'const CAmount &'
|           `-ImplicitCastExpr 0x56347464b010 <col:82> 'CAmount':'int' <LValueToRValue>
|             `-DeclRefExpr 0x56347464afd8 <col:82> 'const CAmount':'const int' lvalue Var 0x56347464ac48 'MAX_MONEY' 'const CAmount':'const int'
|-CXXRecordDecl 0x56347464b0b0 <bitcoin/src/bloom.h:12:1, col:7> col:7 referenced class COutPoint
|-CXXRecordDecl 0x56347464b160 <line:13:1, col:7> col:7 referenced class CTransaction
|-CXXRecordDecl 0x56347462ebb0 prev 0x5634745db578 <line:14:1, col:7> col:7 referenced class uint256
|-VarDecl 0x56347462ec80 <line:17:1, col:51> col:27 MAX_BLOOM_FILTER_SIZE 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x56347462ed08 <col:51> 'const unsigned int' <IntegralCast>
| | `-IntegerLiteral 0x56347462ece8 <col:51> 'int' 36000
| `-FullComment 0x563474769150 <line:16:4, col:65>
|   `-ParagraphComment 0x563474769120 <col:4, col:65>
|     |-TextComment 0x563474769050 <col:4, col:30> Text=" 20,000 items with fp rate "
|     |-TextComment 0x563474769070 <col:31> Text="<"
|     |-TextComment 0x563474769090 <col:32, col:57> Text=" 0.1% or 10,000 items and "
|     |-TextComment 0x5634747690b0 <col:58> Text="<"
|     `-TextComment 0x5634747690d0 <col:59, col:65> Text="0.0001%"
|-VarDecl 0x56347462ed90 <line:18:1, col:44> col:27 MAX_HASH_FUNCS 'const unsigned int' static cinit
| `-ImplicitCastExpr 0x56347462ee18 <col:44> 'const unsigned int' <IntegralCast>
|   `-IntegerLiteral 0x56347462edf8 <col:44> 'int' 50
|-EnumDecl 0x56347462eeb8 <line:24:1, line:31:1> line:24:6 bloomflags
| |-FullComment 0x563474769240 <line:21:3, line:22:34>
| | `-ParagraphComment 0x563474769210 <line:21:3, line:22:34>
| |   |-TextComment 0x5634747691c0 <line:21:3, col:81> Text=" First two bits of nFlags control how much IsRelevantAndUpdate actually updates"
| |   `-TextComment 0x5634747691e0 <line:22:3, col:34> Text=" The remaining bits are reserved"
| |-EnumConstantDecl 0x56347462efc0 <line:26:5, col:25> col:5 BLOOM_UPDATE_NONE 'bloomflags'
| | `-ImplicitCastExpr 0x56347462f1c0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56347462efa0 <col:25> 'int' 0
| |     `-IntegerLiteral 0x56347462ef80 <col:25> 'int' 0
| |-EnumConstantDecl 0x56347462f050 <line:27:5, col:24> col:5 BLOOM_UPDATE_ALL 'bloomflags'
| | `-ImplicitCastExpr 0x56347462f1d8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56347462f030 <col:24> 'int' 1
| |     `-IntegerLiteral 0x56347462f010 <col:24> 'int' 1
| |-EnumConstantDecl 0x56347462f0e0 <line:29:5, col:34> col:5 BLOOM_UPDATE_P2PUBKEY_ONLY 'bloomflags'
| | `-ImplicitCastExpr 0x56347462f1f0 <col:34> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56347462f0c0 <col:34> 'int' 2
| |     `-IntegerLiteral 0x56347462f0a0 <col:34> 'int' 2
| `-EnumConstantDecl 0x56347462f170 <line:30:5, col:25> col:5 BLOOM_UPDATE_MASK 'bloomflags'
|   `-ImplicitCastExpr 0x56347462f208 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56347462f150 <col:25> 'int' 3
|       `-IntegerLiteral 0x56347462f130 <col:25> 'int' 3
|-CXXRecordDecl 0x56347462f248 <line:44:1, line:99:1> line:44:7 referenced class CBloomFilter definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474769880 <line:34:3, line:42:31>
| | |-ParagraphComment 0x563474769730 <line:34:3, line:35:55>
| | | |-TextComment 0x5634747692b0 <line:34:3, col:66> Text=" BloomFilter is a probabilistic filter which SPV clients provide"
| | | `-TextComment 0x5634747692d0 <line:35:3, col:55> Text=" so that we can filter the transactions we send them."
| | |-ParagraphComment 0x563474769780 <line:37:3, col:80>
| | | `-TextComment 0x563474769750 <col:3, col:80> Text=" This allows for significantly more efficient transaction and block downloads."
| | `-ParagraphComment 0x563474769840 <line:39:3, line:42:31>
| |   |-TextComment 0x5634747697a0 <line:39:3, col:78> Text=" Because bloom filters are probabilistic, a SPV node can increase the false-"
| |   |-TextComment 0x5634747697c0 <line:40:3, col:75> Text=" positive rate, making us send it transactions which aren't actually its,"
| |   |-TextComment 0x5634747697e0 <line:41:3, col:81> Text=" allowing clients to trade more bandwidth for more privacy by obfuscating which"
| |   `-TextComment 0x563474769800 <line:42:3, col:31> Text=" keys are controlled by them."
| |-CXXRecordDecl 0x56347462f368 <line:44:1, col:7> col:7 implicit referenced class CBloomFilter
| |-AccessSpecDecl 0x56347462f3f8 <line:46:1, col:8> col:1 private
| |-FieldDecl 0x56347462f458 <line:48:5, col:10> col:10 isFull 'bool'
| |-FieldDecl 0x56347462f4b8 <line:49:5, col:10> col:10 isEmpty 'bool'
| |-FieldDecl 0x56347462f520 <line:50:5, col:18> col:18 referenced nHashFuncs 'unsigned int'
| |-FieldDecl 0x56347462f588 <line:51:5, col:18> col:18 referenced nTweak 'unsigned int'
| |-FieldDecl 0x56347462f5f0 <line:52:5, col:19> col:19 referenced nFlags 'unsigned char'
| |-CXXMethodDecl 0x56347462f850 <line:54:5, col:93> col:18 invalid Hash 'unsigned int (unsigned int, const int) const'
| | |-ParmVarDecl 0x56347462f658 <col:23, col:36> col:36 nHashNum 'unsigned int'
| | `-ParmVarDecl 0x56347462f700 <col:46, <invalid sloc>> col:78 invalid 'const int'
| |-AccessSpecDecl 0x56347462f928 <line:56:1, col:7> col:1 public
| |-CXXConstructorDecl 0x56347462fc68 <line:66:5, col:119> col:5 CBloomFilter 'void (const unsigned int, const double, const unsigned int, unsigned char)'
| | |-ParmVarDecl 0x56347462f968 <col:18, col:37> col:37 nElements 'const unsigned int'
| | |-ParmVarDecl 0x56347462f9e8 <col:48, col:61> col:61 nFPRate 'const double'
| | |-ParmVarDecl 0x56347462fa68 <col:70, col:89> col:89 nTweak 'const unsigned int'
| | |-ParmVarDecl 0x56347462fae8 <col:97, col:111> col:111 nFlagsIn 'unsigned char'
| | `-FullComment 0x563474769a40 <line:58:7, line:64:67>
| |   `-ParagraphComment 0x563474769a10 <line:58:7, line:64:67>
| |     |-TextComment 0x5634747698f0 <line:58:7, col:116> Text=" Creates a new bloom filter which will provide the given fp rate when filled with the given number of elements"
| |     |-TextComment 0x563474769910 <line:59:7, col:107> Text=" Note that if the given parameters will result in a filter outside the bounds of the protocol limits,"
| |     |-TextComment 0x563474769930 <line:60:7, col:106> Text=" the filter created will be as close to the given parameters as possible within the protocol limits."
| |     |-TextComment 0x563474769950 <line:61:7, col:80> Text=" This will apply if nFPRate is very low or nElements is unreasonably high."
| |     |-TextComment 0x563474769970 <line:62:7, col:88> Text=" nTweak is a constant which is added to the seed value passed to the hash function"
| |     |-TextComment 0x563474769990 <line:63:7, col:98> Text=" It should generally always be a random value (and is largely only exposed for unit testing)"
| |     `-TextComment 0x5634747699b0 <line:64:7, col:67> Text=" nFlags should be one of the BLOOM_UPDATE_* enums (not _MASK)"
| |-CXXConstructorDecl 0x56347462fd50 <line:67:5, col:89> col:5 CBloomFilter 'void ()'
| | |-CXXCtorInitializer Field 0x56347462f458 'isFull' 'bool'
| | | `-CXXBoolLiteralExpr 0x5634746315f0 <col:29> 'bool' true
| | |-CXXCtorInitializer Field 0x56347462f4b8 'isEmpty' 'bool'
| | | `-CXXBoolLiteralExpr 0x563474631648 <col:44> 'bool' false
| | |-CXXCtorInitializer Field 0x56347462f520 'nHashFuncs' 'unsigned int'
| | | `-ImplicitCastExpr 0x5634746316e0 <col:63> 'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x5634746316a0 <col:63> 'int' 0
| | |-CXXCtorInitializer Field 0x56347462f588 'nTweak' 'unsigned int'
| | | `-ImplicitCastExpr 0x563474631760 <col:74> 'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x563474631720 <col:74> 'int' 0
| | |-CXXCtorInitializer Field 0x56347462f5f0 'nFlags' 'unsigned char'
| | | `-ImplicitCastExpr 0x5634746317e0 <col:85> 'unsigned char' <IntegralCast>
| | |   `-IntegerLiteral 0x5634746317a0 <col:85> 'int' 0
| | `-CompoundStmt 0x563474631848 <col:88, col:89>
| |-FunctionTemplateDecl 0x563474630018 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x56347462fdf8 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x56347462ff78 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x56347462feb8 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x563474631910 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x563474630298 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x563474630078 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746301f8 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x563474630138 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x563474631a18 <col:33, line:201:5>
| |     `-CallExpr 0x5634746319e8 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563474631930 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563474631988 <col:25> 'Stream' lvalue ParmVar 0x563474630138 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634746319b8 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x563474630628 <bitcoin/src/bloom.h:71:5, line:77:5> line:72:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634746302f8 <line:71:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x563474630368 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x563474630588 <line:72:5, line:77:5> line:72:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x563474630438 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634746304b0 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x563474631eb8 <col:66, line:77:5>
| |     |-ParenExpr 0x563474631c08 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |     | `-CallExpr 0x563474631bd0 <col:25, col:70> '<dependent type>'
| |     |   |-UnresolvedLookupExpr 0x563474631b00 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |     |   |-DeclRefExpr 0x563474631b50 <col:44> 'Stream' lvalue ParmVar 0x563474630438 's' 'Stream &'
| |     |   |-DeclRefExpr 0x563474631b70 <col:47> 'Operation' lvalue ParmVar 0x5634746304b0 'ser_action' 'Operation'
| |     |   `-MemberExpr 0x563474631ba0 <bitcoin/src/bloom.h:74:19> 'unsigned int' lvalue ->nHashFuncs 0x56347462f520
| |     |     `-CXXThisExpr 0x563474631b90 <col:19> 'CBloomFilter *' implicit this
| |     |-ParenExpr 0x563474631d50 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |     | `-CallExpr 0x563474631d18 <col:25, col:70> '<dependent type>'
| |     |   |-UnresolvedLookupExpr 0x563474631c48 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |     |   |-DeclRefExpr 0x563474631c98 <col:44> 'Stream' lvalue ParmVar 0x563474630438 's' 'Stream &'
| |     |   |-DeclRefExpr 0x563474631cb8 <col:47> 'Operation' lvalue ParmVar 0x5634746304b0 'ser_action' 'Operation'
| |     |   `-MemberExpr 0x563474631ce8 <bitcoin/src/bloom.h:75:19> 'unsigned int' lvalue ->nTweak 0x56347462f588
| |     |     `-CXXThisExpr 0x563474631cd8 <col:19> 'CBloomFilter *' implicit this
| |     `-ParenExpr 0x563474631e98 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |       `-CallExpr 0x563474631e60 <col:25, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x563474631d90 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |         |-DeclRefExpr 0x563474631de0 <col:44> 'Stream' lvalue ParmVar 0x563474630438 's' 'Stream &'
| |         |-DeclRefExpr 0x563474631e00 <col:47> 'Operation' lvalue ParmVar 0x5634746304b0 'ser_action' 'Operation'
| |         `-MemberExpr 0x563474631e30 <bitcoin/src/bloom.h:76:19> 'unsigned char' lvalue ->nFlags 0x56347462f5f0
| |           `-CXXThisExpr 0x563474631e20 <col:19> 'CBloomFilter *' implicit this
| |-CXXMethodDecl 0x563474630760 <line:79:5, col:55> col:10 invalid insert 'void (const int)'
| | `-ParmVarDecl 0x5634746306d0 <col:17, <invalid sloc>> col:49 invalid 'const int'
| |-CXXMethodDecl 0x563474630908 <line:80:5, col:42> col:10 insert 'void (const COutPoint &)'
| | `-ParmVarDecl 0x563474630848 <col:17, col:34> col:34 outpoint 'const COutPoint &'
| |-CXXMethodDecl 0x563474630a50 <line:81:5, col:36> col:10 insert 'void (const uint256 &)'
| | `-ParmVarDecl 0x5634746309c0 <col:17, col:32> col:32 hash 'const uint256 &'
| |-CXXMethodDecl 0x563474630c18 <line:83:5, col:59> col:10 invalid contains 'bool (const int) const'
| | `-ParmVarDecl 0x563474630b38 <col:19, <invalid sloc>> col:51 invalid 'const int'
| |-CXXMethodDecl 0x563474630d98 <line:84:5, col:46> col:10 contains 'bool (const COutPoint &) const'
| | `-ParmVarDecl 0x563474630cd0 <col:19, col:36> col:36 outpoint 'const COutPoint &'
| |-CXXMethodDecl 0x563474630f18 <line:85:5, col:40> col:10 contains 'bool (const uint256 &) const'
| | `-ParmVarDecl 0x563474630e50 <col:19, col:34> col:34 hash 'const uint256 &'
| |-CXXMethodDecl 0x563474630fe0 <line:87:5, col:16> col:10 clear 'void ()'
| |-CXXMethodDecl 0x563474631188 <line:88:5, col:44> col:10 reset 'void (const unsigned int)'
| | `-ParmVarDecl 0x563474631098 <col:16, col:35> col:35 nNewTweak 'const unsigned int'
| |-CXXMethodDecl 0x563474631278 <line:92:5, col:36> col:10 IsWithinSizeConstraints 'bool () const'
| | `-FullComment 0x563474769d50 <line:90:8, line:91:70>
| |   `-ParagraphComment 0x563474769d20 <line:90:8, line:91:70>
| |     |-TextComment 0x563474769c30 <line:90:8, col:28> Text=" True if the size is "
| |     |-TextComment 0x563474769c50 <col:29> Text="<"
| |     |-TextComment 0x563474769c70 <col:30, col:89> Text="= MAX_BLOOM_FILTER_SIZE and the number of hash functions is "
| |     |-TextComment 0x563474769c90 <col:90> Text="<"
| |     |-TextComment 0x563474769cb0 <col:91, col:106> Text="= MAX_HASH_FUNCS"
| |     `-TextComment 0x563474769cd0 <line:91:8, col:70> Text=" (catch a filter which was just deserialized which was too big)"
| |-CXXMethodDecl 0x563474631448 <line:95:5, col:52> col:10 IsRelevantAndUpdate 'bool (const CTransaction &)'
| | |-ParmVarDecl 0x563474631388 <col:30, col:50> col:50 tx 'const CTransaction &'
| | `-FullComment 0x563474769e20 <line:94:8, col:97>
| |   `-ParagraphComment 0x563474769df0 <col:8, col:97>
| |     `-TextComment 0x563474769dc0 <col:8, col:97> Text=" Also adds any outputs which match the filter to the filter (to match their spending txes)"
| `-CXXMethodDecl 0x563474631538 <line:98:5, col:26> col:10 UpdateEmptyFull 'void ()'
|   `-FullComment 0x563474769ef0 <line:97:8, col:62>
|     `-ParagraphComment 0x563474769ec0 <col:8, col:62>
|       `-TextComment 0x563474769e90 <col:8, col:62> Text=" Checks for empty and full filters to avoid wasting cpu"
|-CXXRecordDecl 0x563474631f08 <line:115:1, line:137:1> line:115:7 referenced invalid class CRollingBloomFilter definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476a170 <line:102:3, line:113:75>
| | |-ParagraphComment 0x56347476a050 <line:102:3, line:107:19>
| | | |-TextComment 0x563474769f60 <line:102:3, col:84> Text=" RollingBloomFilter is a probabilistic "keep track of most recently inserted" set."
| | | |-TextComment 0x563474769f80 <line:103:3, col:79> Text=" Construct it with the number of items to keep track of, and a false-positive"
| | | |-TextComment 0x563474769fa0 <line:104:3, col:77> Text=" rate. Unlike CBloomFilter, by default nTweak is set to a cryptographically"
| | | |-TextComment 0x563474769fc0 <line:105:3, col:72> Text=" secure random value for you. Similarly rather than clear() the method"
| | | |-TextComment 0x563474769fe0 <line:106:3, col:75> Text=" reset() is provided, which also changes nTweak to decrease the impact of"
| | | `-TextComment 0x56347476a000 <line:107:3, col:19> Text=" false-positives."
| | |-ParagraphComment 0x56347476a0c0 <line:109:3, line:110:77>
| | | |-TextComment 0x56347476a070 <line:109:3, col:80> Text=" contains(item) will always return true if item was one of the last N to 1.5*N"
| | | `-TextComment 0x56347476a090 <line:110:3, col:77> Text=" insert()'ed ... but may also return true for items that were not inserted."
| | `-ParagraphComment 0x56347476a130 <line:112:3, line:113:75>
| |   |-TextComment 0x56347476a0e0 <line:112:3, col:79> Text=" It needs around 1.8 bytes per element per factor 0.1 of false positive rate."
| |   `-TextComment 0x56347476a100 <line:113:3, col:75> Text=" (More accurately: 3/(log(256)*log(2)) * log(1/fpRate) * nElements bytes)"
| |-CXXRecordDecl 0x563474632028 <line:115:1, col:7> col:7 implicit referenced class CRollingBloomFilter
| |-AccessSpecDecl 0x5634746320b8 <line:117:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634746322c8 <line:121:5, col:75> col:5 CRollingBloomFilter 'void (const unsigned int, const double)'
| | |-ParmVarDecl 0x5634746320f8 <col:25, col:44> col:44 nElements 'const unsigned int'
| | `-ParmVarDecl 0x563474632178 <col:55, col:68> col:68 nFPRate 'const double'
| |-CXXMethodDecl 0x563474632450 <line:123:5, col:55> col:10 invalid insert 'void (const int)'
| | `-ParmVarDecl 0x5634746323c0 <col:17, <invalid sloc>> col:49 invalid 'const int'
| |-CXXMethodDecl 0x563474632598 <line:124:5, col:36> col:10 insert 'void (const uint256 &)'
| | `-ParmVarDecl 0x563474632508 <col:17, col:32> col:32 hash 'const uint256 &'
| |-CXXMethodDecl 0x563474632740 <line:125:5, col:59> col:10 invalid contains 'bool (const int) const'
| | `-ParmVarDecl 0x563474632680 <col:19, <invalid sloc>> col:51 invalid 'const int'
| |-CXXMethodDecl 0x563474632888 <line:126:5, col:40> col:10 contains 'bool (const uint256 &) const'
| | `-ParmVarDecl 0x5634746327f8 <col:19, col:34> col:34 hash 'const uint256 &'
| |-CXXMethodDecl 0x563474632950 <line:128:5, col:16> col:10 reset 'void ()'
| |-AccessSpecDecl 0x5634746329f0 <line:130:1, col:8> col:1 private
| |-FieldDecl 0x563474632a30 <line:131:5, col:9> col:9 nEntriesPerGeneration 'int'
| |-FieldDecl 0x563474632a98 <line:132:5, col:9> col:9 nEntriesThisGeneration 'int'
| |-FieldDecl 0x563474632b00 <line:133:5, col:9> col:9 nGeneration 'int'
| |-FieldDecl 0x563474632bd0 <line:134:27> col:27 invalid data 'int'
| |-FieldDecl 0x563474632c38 <line:135:5, col:18> col:18 nTweak 'unsigned int'
| `-FieldDecl 0x563474632ca0 <line:136:5, col:9> col:9 nHashFuncs 'int'
|-CXXRecordDecl 0x563474632d38 <bitcoin/src/crypto/siphash.h:13:1, line:32:1> line:13:7 referenced invalid class CSipHasher definition
| |-DefinitionData standard_layout trivially_copyable trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476a240 <line:12:4, col:16>
| | `-ParagraphComment 0x56347476a210 <col:4, col:16>
| |   `-TextComment 0x56347476a1e0 <col:4, col:16> Text=" SipHash-2-4 "
| |-CXXRecordDecl 0x563474632e58 <line:13:1, col:7> col:7 implicit referenced class CSipHasher
| |-AccessSpecDecl 0x563474632ee8 <line:15:1, col:8> col:1 private
| |-FieldDecl 0x563474632fc0 <line:16:5, <invalid sloc>> col:14 invalid v 'int [4]'
| |-FieldDecl 0x563474633038 <line:17:5, col:14> col:14 invalid tmp 'int'
| |-FieldDecl 0x5634746330a0 <line:18:5, col:9> col:9 count 'int'
| |-AccessSpecDecl 0x563474633118 <line:20:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634746332d0 <line:22:5, col:40> col:5 invalid CSipHasher 'void (int, int)'
| | |-ParmVarDecl 0x563474633168 <col:16, col:25> col:25 invalid k0 'int'
| | |-ParmVarDecl 0x5634746331f8 <col:29, col:38> col:38 invalid k1 'int'
| | `-FullComment 0x56347476a310 <line:21:8, col:77>
| |   `-ParagraphComment 0x56347476a2e0 <col:8, col:77>
| |     `-TextComment 0x56347476a2b0 <col:8, col:77> Text=" Construct a SipHash calculator initialized with 128-bit key (k0, k1) "
| |-CXXMethodDecl 0x5634746334d8 <line:27:5, col:36> col:17 invalid Write 'CSipHasher &(int)'
| | |-ParmVarDecl 0x5634746333e0 <col:23, col:32> col:32 invalid data 'int'
| | `-FullComment 0x56347476a430 <line:23:8, line:25:91>
| |   `-ParagraphComment 0x56347476a400 <line:23:8, line:25:91>
| |     |-TextComment 0x56347476a380 <line:23:8, col:43> Text=" Hash a 64-bit integer worth of data"
| |     |-TextComment 0x56347476a3a0 <line:24:7, col:81> Text="  It is treated as if this was the little-endian interpretation of 8 bytes."
| |     `-TextComment 0x56347476a3c0 <line:25:7, col:91> Text="  This function can only be used when a multiple of 8 bytes have been written so far."
| |-CXXMethodDecl 0x563474633728 <line:29:5, col:61> col:17 invalid Write 'CSipHasher &(const unsigned char *, int)'
| | |-ParmVarDecl 0x5634746335c0 <col:23, col:44> col:44 data 'const unsigned char *'
| | |-ParmVarDecl 0x563474633650 <col:50, col:57> col:57 invalid size 'int'
| | `-FullComment 0x56347476a500 <line:28:8, col:30>
| |   `-ParagraphComment 0x56347476a4d0 <col:8, col:30>
| |     `-TextComment 0x56347476a4a0 <col:8, col:30> Text=" Hash arbitrary bytes. "
| `-CXXMethodDecl 0x563474633870 <line:31:5, col:25> col:14 invalid Finalize 'int () const'
|   `-FullComment 0x56347476a5d0 <line:30:8, col:97>
|     `-ParagraphComment 0x56347476a5a0 <col:8, col:97>
|       `-TextComment 0x56347476a570 <col:8, col:97> Text=" Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. "
|-FunctionDecl 0x563474633b80 <line:44:1, col:69> col:10 invalid SipHashUint256 'int (int, int, const uint256 &)'
| |-ParmVarDecl 0x563474633990 <col:25, col:34> col:34 invalid k0 'int'
| |-ParmVarDecl 0x563474633a20 <col:38, col:47> col:47 invalid k1 'int'
| |-ParmVarDecl 0x563474633a98 <col:51, col:66> col:66 val 'const uint256 &'
| `-FullComment 0x56347476a7e0 <line:34:4, line:42:19>
|   |-ParagraphComment 0x56347476a670 <line:34:4, col:53>
|   | `-TextComment 0x56347476a640 <col:4, col:53> Text=" Optimized SipHash-2-4 implementation for uint256."
|   `-ParagraphComment 0x56347476a7b0 <line:36:3, line:42:19>
|     |-TextComment 0x56347476a690 <line:36:3, col:23> Text="  It is identical to:"
|     |-TextComment 0x56347476a6b0 <line:37:3, col:23> Text="    SipHasher(k0, k1)"
|     |-TextComment 0x56347476a6d0 <line:38:3, col:32> Text="      .Write(val.GetUint64(0))"
|     |-TextComment 0x56347476a6f0 <line:39:3, col:32> Text="      .Write(val.GetUint64(1))"
|     |-TextComment 0x56347476a710 <line:40:3, col:32> Text="      .Write(val.GetUint64(2))"
|     |-TextComment 0x56347476a730 <line:41:3, col:32> Text="      .Write(val.GetUint64(3))"
|     `-TextComment 0x56347476a750 <line:42:3, col:19> Text="      .Finalize()"
|-FunctionDecl 0x563474633f00 <line:45:1, col:90> col:10 invalid SipHashUint256Extra 'int (int, int, const uint256 &, int)'
| |-ParmVarDecl 0x563474633c70 <col:30, col:39> col:39 invalid k0 'int'
| |-ParmVarDecl 0x563474633d00 <col:43, col:52> col:52 invalid k1 'int'
| |-ParmVarDecl 0x563474633d78 <col:56, col:71> col:71 val 'const uint256 &'
| `-ParmVarDecl 0x563474633e08 <col:76, col:85> col:85 invalid extra 'int'
|-CXXRecordDecl 0x563474633fe8 <bitcoin/src/crypto/ripemd160.h:12:1, line:26:1> line:12:7 referenced invalid class CRIPEMD160 definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476a8b0 <line:11:4, col:35>
| | `-ParagraphComment 0x56347476a880 <col:4, col:35>
| |   `-TextComment 0x56347476a850 <col:4, col:35> Text=" A hasher class for RIPEMD-160. "
| |-CXXRecordDecl 0x563474634108 <line:12:1, col:7> col:7 implicit referenced class CRIPEMD160
| |-AccessSpecDecl 0x563474634198 <line:14:1, col:8> col:1 private
| |-FieldDecl 0x563474634270 <line:15:5, <invalid sloc>> col:14 invalid s 'int [5]'
| |-FieldDecl 0x563474634328 <line:16:5, col:25> col:19 buf 'unsigned char [64]'
| |-FieldDecl 0x5634746343a0 <line:17:5, col:14> col:14 invalid bytes 'int'
| |-AccessSpecDecl 0x5634746343f0 <line:19:1, col:7> col:1 public
| |-VarDecl 0x563474634440 <line:20:5, col:25> col:25 invalid OUTPUT_SIZE 'const int' static
| |-CXXConstructorDecl 0x563474634530 <line:22:5, col:16> col:5 used CRIPEMD160 'void ()'
| |-CXXMethodDecl 0x563474634788 <line:23:5, col:60> col:17 invalid Write 'CRIPEMD160 &(const unsigned char *, int)'
| | |-ParmVarDecl 0x5634746345f0 <col:23, col:44> col:44 data 'const unsigned char *'
| | `-ParmVarDecl 0x563474634680 <col:50, col:57> col:57 invalid len 'int'
| |-CXXMethodDecl 0x563474634918 <line:24:5, col:50> col:10 invalid Finalize 'void (unsigned char)'
| | `-ParmVarDecl 0x563474634850 <col:19, col:33> col:33 invalid hash 'unsigned char'
| |-CXXMethodDecl 0x563474634a08 <line:25:5, col:23> col:17 Reset 'CRIPEMD160 &()'
| |-CXXConstructorDecl 0x56347464e7d8 <line:12:7> col:7 implicit constexpr CRIPEMD160 'void (const CRIPEMD160 &)' inline default trivial noexcept-unevaluated 0x56347464e7d8
| | `-ParmVarDecl 0x56347464e8e8 <col:7> col:7 'const CRIPEMD160 &'
| `-CXXConstructorDecl 0x56347464e988 <col:7> col:7 implicit constexpr CRIPEMD160 'void (CRIPEMD160 &&)' inline default trivial noexcept-unevaluated 0x56347464e988
|   `-ParmVarDecl 0x56347464ea98 <col:7> col:7 'CRIPEMD160 &&'
|-CXXRecordDecl 0x563474634ae8 <bitcoin/src/crypto/sha256.h:13:1, line:27:1> line:13:7 referenced invalid class CSHA256 definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476a980 <line:12:4, col:32>
| | `-ParagraphComment 0x56347476a950 <col:4, col:32>
| |   `-TextComment 0x56347476a920 <col:4, col:32> Text=" A hasher class for SHA-256. "
| |-CXXRecordDecl 0x56347464c608 <line:13:1, col:7> col:7 implicit referenced class CSHA256
| |-AccessSpecDecl 0x56347464c698 <line:15:1, col:8> col:1 private
| |-FieldDecl 0x56347464c770 <line:16:5, <invalid sloc>> col:14 invalid s 'int [8]'
| |-FieldDecl 0x56347464c828 <line:17:5, col:25> col:19 buf 'unsigned char [64]'
| |-FieldDecl 0x56347464c8a0 <line:18:5, col:14> col:14 invalid bytes 'int'
| |-AccessSpecDecl 0x56347464c8f0 <line:20:1, col:7> col:1 public
| |-VarDecl 0x56347464c940 <line:21:5, col:25> col:25 invalid OUTPUT_SIZE 'const int' static
| |-CXXConstructorDecl 0x56347464ca30 <line:23:5, col:13> col:5 CSHA256 'void ()'
| |-CXXMethodDecl 0x56347464cc88 <line:24:5, col:57> col:14 invalid Write 'CSHA256 &(const unsigned char *, int)'
| | |-ParmVarDecl 0x56347464caf0 <col:20, col:41> col:41 data 'const unsigned char *'
| | `-ParmVarDecl 0x56347464cb80 <col:47, col:54> col:54 invalid len 'int'
| |-CXXMethodDecl 0x56347464cde0 <line:25:5, col:50> col:10 invalid Finalize 'void (unsigned char)'
| | `-ParmVarDecl 0x56347464cd50 <col:19, col:33> col:33 invalid hash 'unsigned char'
| `-CXXMethodDecl 0x56347464ced8 <line:26:5, col:20> col:14 Reset 'CSHA256 &()'
|-FunctionDecl 0x56347464cff0 <line:32:1, col:30> col:13 invalid SHA256AutoDetect 'int ()'
| `-FullComment 0x56347476aa70 <line:29:4, line:30:43>
|   `-ParagraphComment 0x56347476aa40 <line:29:4, line:30:43>
|     |-TextComment 0x56347476a9f0 <line:29:4, col:56> Text=" Autodetect the best available SHA256 implementation."
|     `-TextComment 0x56347476aa10 <line:30:3, col:43> Text="  Returns the name of the implementation."
|-FunctionDecl 0x56347464d2c8 <line:39:1, col:80> col:6 invalid SHA256D64 'void (unsigned char *, const unsigned char *, int)'
| |-ParmVarDecl 0x56347464d0d0 <col:16, col:31> col:31 output 'unsigned char *'
| |-ParmVarDecl 0x56347464d150 <col:39, col:60> col:60 input 'const unsigned char *'
| |-ParmVarDecl 0x56347464d1e0 <col:67, col:74> col:74 invalid blocks 'int'
| `-FullComment 0x56347476abb0 <line:34:4, line:37:45>
|   `-ParagraphComment 0x56347476ab80 <line:34:4, line:37:45>
|     |-TextComment 0x56347476aae0 <line:34:4, col:54> Text=" Compute multiple double-SHA256's of 64-byte blobs."
|     |-TextComment 0x56347476ab00 <line:35:3, col:54> Text="  output:  pointer to a blocks*32 byte output buffer"
|     |-TextComment 0x56347476ab20 <line:36:3, col:53> Text="  input:   pointer to a blocks*64 byte input buffer"
|     `-TextComment 0x56347476ab40 <line:37:3, col:45> Text="  blocks:  the number of hashes to compute."
|-TypedefDecl 0x56347464d390 <bitcoin/src/hash.h:19:1, col:17> col:17 referenced ChainCode 'uint256'
| `-RecordType 0x5634745db610 'uint256'
|   `-CXXRecord 0x5634745db578 'uint256'
|-CXXRecordDecl 0x56347464d418 <line:22:1, line:43:1> line:22:7 referenced invalid class CHash256 definition
| |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476ac80 <line:21:4, col:64>
| | `-ParagraphComment 0x56347476ac50 <col:4, col:64>
| |   `-TextComment 0x56347476ac20 <col:4, col:64> Text=" A hasher class for Bitcoin's 256-bit hash (double SHA-256). "
| |-CXXRecordDecl 0x56347464d538 <line:22:1, col:7> col:7 implicit referenced class CHash256
| |-AccessSpecDecl 0x56347464d5c8 <line:23:1, col:8> col:1 private
| |-FieldDecl 0x56347464d600 <line:24:5, col:13> col:13 invalid sha 'CSHA256'
| |-AccessSpecDecl 0x56347464d650 <line:25:1, col:7> col:1 public
| |-VarDecl 0x56347464d6a0 <line:26:5, col:25> col:25 invalid OUTPUT_SIZE 'const int' static
| |-CXXMethodDecl 0x56347464d830 <line:28:5, line:32:5> line:28:10 invalid Finalize 'void (unsigned char)'
| | |-ParmVarDecl 0x56347464d770 <col:19, col:33> col:33 invalid hash 'unsigned char'
| | `-CompoundStmt 0x56347464dd68 <col:52, line:32:5>
| |   `-DeclStmt 0x56347464dcf8 <line:29:9, col:48>
| |     `-VarDecl 0x56347464dc90 <col:9, col:23> col:23 invalid buf 'unsigned char'
| |-CXXMethodDecl 0x56347464da88 <line:34:5, line:37:5> line:34:15 invalid Write 'CHash256 &(const unsigned char *, int)'
| | |-ParmVarDecl 0x56347464d8f0 <col:21, col:42> col:42 used data 'const unsigned char *'
| | |-ParmVarDecl 0x56347464d980 <col:48, col:55> col:55 invalid len 'int'
| | `-CompoundStmt 0x56347464dde8 <col:60, line:37:5>
| |   `-ReturnStmt 0x56347464ddd8 <line:36:9, col:17>
| |     `-UnaryOperator 0x56347464ddc0 <col:16, col:17> 'CHash256' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56347464ddb0 <col:17> 'CHash256 *' this
| |-CXXMethodDecl 0x56347464db88 <line:39:5, line:42:5> line:39:15 Reset 'CHash256 &()'
| | `-CompoundStmt 0x56347464de48 <col:23, line:42:5>
| |   `-ReturnStmt 0x56347464de38 <line:41:9, col:17>
| |     `-UnaryOperator 0x56347464de20 <col:16, col:17> 'CHash256' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56347464de10 <col:17> 'CHash256 *' this
| |-CXXConstructorDecl 0x56347464f2a0 <line:22:7> col:7 implicit referenced constexpr CHash256 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56347464f3a8 <col:7> col:7 implicit constexpr CHash256 'void (const CHash256 &)' inline default trivial noexcept-unevaluated 0x56347464f3a8
| | `-ParmVarDecl 0x56347464f4b8 <col:7> col:7 'const CHash256 &'
| `-CXXConstructorDecl 0x56347464f558 <col:7> col:7 implicit constexpr CHash256 'void (CHash256 &&)' inline default trivial noexcept-unevaluated 0x56347464f558
|   `-ParmVarDecl 0x56347464f668 <col:7> col:7 'CHash256 &&'
|-CXXRecordDecl 0x56347464de88 <line:46:1, line:67:1> line:46:7 referenced invalid class CHash160 definition
| |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476ad50 <line:45:4, col:70>
| | `-ParagraphComment 0x56347476ad20 <col:4, col:70>
| |   `-TextComment 0x56347476acf0 <col:4, col:70> Text=" A hasher class for Bitcoin's 160-bit hash (SHA-256 + RIPEMD-160). "
| |-CXXRecordDecl 0x56347464dfa8 <line:46:1, col:7> col:7 implicit referenced class CHash160
| |-AccessSpecDecl 0x56347464e038 <line:47:1, col:8> col:1 private
| |-FieldDecl 0x56347464e070 <line:48:5, col:13> col:13 invalid sha 'CSHA256'
| |-AccessSpecDecl 0x56347464e0c0 <line:49:1, col:7> col:1 public
| |-VarDecl 0x56347464e110 <line:50:5, col:25> col:25 invalid OUTPUT_SIZE 'const int' static
| |-CXXMethodDecl 0x56347464e2a0 <line:52:5, line:56:5> line:52:10 invalid Finalize 'void (unsigned char)'
| | |-ParmVarDecl 0x56347464e1e0 <col:19, col:33> col:33 invalid hash 'unsigned char'
| | `-CompoundStmt 0x56347464eb88 <col:52, line:56:5>
| |   `-DeclStmt 0x56347464e778 <line:53:9, col:48>
| |     `-VarDecl 0x56347464e710 <col:9, col:23> col:23 invalid buf 'unsigned char'
| |-CXXMethodDecl 0x56347464e4f8 <line:58:5, line:61:5> line:58:15 invalid Write 'CHash160 &(const unsigned char *, int)'
| | |-ParmVarDecl 0x56347464e360 <col:21, col:42> col:42 used data 'const unsigned char *'
| | |-ParmVarDecl 0x56347464e3f0 <col:48, col:55> col:55 invalid len 'int'
| | `-CompoundStmt 0x56347464ec08 <col:60, line:61:5>
| |   `-ReturnStmt 0x56347464ebf8 <line:60:9, col:17>
| |     `-UnaryOperator 0x56347464ebe0 <col:16, col:17> 'CHash160' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56347464ebd0 <col:17> 'CHash160 *' this
| |-CXXMethodDecl 0x56347464e608 <line:63:5, line:66:5> line:63:15 Reset 'CHash160 &()'
| | `-CompoundStmt 0x56347464ec68 <col:23, line:66:5>
| |   `-ReturnStmt 0x56347464ec58 <line:65:9, col:17>
| |     `-UnaryOperator 0x56347464ec40 <col:16, col:17> 'CHash160' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56347464ec30 <col:17> 'CHash160 *' this
| |-CXXConstructorDecl 0x563474652280 <line:46:7> col:7 implicit referenced constexpr CHash160 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x563474652388 <col:7> col:7 implicit constexpr CHash160 'void (const CHash160 &)' inline default trivial noexcept-unevaluated 0x563474652388
| | `-ParmVarDecl 0x563474652498 <col:7> col:7 'const CHash160 &'
| `-CXXConstructorDecl 0x563474652538 <col:7> col:7 implicit constexpr CHash160 'void (CHash160 &&)' inline default trivial noexcept-unevaluated 0x563474652538
|   `-ParmVarDecl 0x563474652648 <col:7> col:7 'CHash160 &&'
|-FunctionTemplateDecl 0x56347464ef68 <line:70:1, line:78:1> line:71:16 Hash
| |-TemplateTypeParmDecl 0x56347464eca8 <line:70:10, col:19> col:19 referenced typename depth 0 index 0 T1
| |-FunctionDecl 0x56347464eec8 <line:71:1, line:78:1> line:71:16 Hash 'uint256 (const T1, const T1)' inline
| | |-ParmVarDecl 0x56347464ed40 <col:21, col:30> col:30 referenced pbegin 'const T1'
| | |-ParmVarDecl 0x56347464edb8 <col:38, col:47> col:47 referenced pend 'const T1'
| | |-CompoundStmt 0x56347464fb08 <line:72:1, line:78:1>
| | | |-DeclStmt 0x56347464f1a8 <line:73:5, col:46>
| | | | `-VarDecl 0x56347464f0b0 <col:5, col:45> col:32 referenced pblank 'const unsigned char [1]' static cinit
| | | |   `-InitListExpr 0x56347464f158 <col:44, col:45> 'const unsigned char [1]'
| | | |     `-array_filler: ImplicitValueInitExpr 0x56347464f198 <<invalid sloc>> 'const unsigned char'
| | | |-DeclStmt 0x56347464f260 <line:74:5, col:19>
| | | | `-VarDecl 0x56347464f1d0 <col:5, col:13> col:13 referenced result 'uint256' nrvo callinit
| | | |   `-CXXConstructExpr 0x56347464f238 <col:13> 'uint256' 'void ()'
| | | `-ReturnStmt 0x56347464fac0 <line:77:5, col:12>
| | |   `-CXXConstructExpr 0x56347464fa90 <col:12> 'uint256' 'void (uint256 &&) noexcept' elidable
| | |     `-ImplicitCastExpr 0x56347464fa78 <col:12> 'uint256' xvalue <NoOp>
| | |       `-DeclRefExpr 0x56347464fa58 <col:12> 'uint256' lvalue Var 0x56347464f1d0 'result' 'uint256'
| | `-FullComment 0x56347476af70 <line:69:4, col:43>
| |   `-ParagraphComment 0x56347476af40 <col:4, col:43>
| |     `-TextComment 0x56347476af10 <col:4, col:43> Text=" Compute the 256-bit hash of an object. "
| `-FullComment 0x56347476aea0 <col:4, col:43>
|   `-ParagraphComment 0x56347476ae70 <col:4, col:43>
|     `-TextComment 0x56347476ae40 <col:4, col:43> Text=" Compute the 256-bit hash of an object. "
|-FunctionTemplateDecl 0x56347464ff98 <line:81:1, line:90:1> line:82:16 Hash
| |-TemplateTypeParmDecl 0x56347464fb30 <line:81:10, col:19> col:19 referenced typename depth 0 index 0 T1
| |-TemplateTypeParmDecl 0x56347464fba8 <col:23, col:32> col:32 referenced typename depth 0 index 1 T2
| |-FunctionDecl 0x56347464fef8 <line:82:1, line:90:1> line:82:16 Hash 'uint256 (const T1, const T1, const T2, const T2)' inline
| | |-ParmVarDecl 0x56347464fc48 <col:21, col:30> col:30 referenced p1begin 'const T1'
| | |-ParmVarDecl 0x56347464fcc0 <col:39, col:48> col:48 referenced p1end 'const T1'
| | |-ParmVarDecl 0x56347464fd38 <line:83:21, col:30> col:30 referenced p2begin 'const T2'
| | |-ParmVarDecl 0x56347464fdb0 <col:39, col:48> col:48 referenced p2end 'const T2'
| | |-CompoundStmt 0x563474651978 <col:55, line:90:1>
| | | |-DeclStmt 0x563474650170 <line:84:5, col:46>
| | | | `-VarDecl 0x563474650078 <col:5, col:45> col:32 referenced pblank 'const unsigned char [1]' static cinit
| | | |   `-InitListExpr 0x563474650120 <col:44, col:45> 'const unsigned char [1]'
| | | |     `-array_filler: ImplicitValueInitExpr 0x563474650160 <<invalid sloc>> 'const unsigned char'
| | | |-DeclStmt 0x563474650228 <line:85:5, col:19>
| | | | `-VarDecl 0x563474650198 <col:5, col:13> col:13 referenced result 'uint256' nrvo callinit
| | | |   `-CXXConstructExpr 0x563474650200 <col:13> 'uint256' 'void ()'
| | | `-ReturnStmt 0x563474651930 <line:89:5, col:12>
| | |   `-CXXConstructExpr 0x563474651900 <col:12> 'uint256' 'void (uint256 &&) noexcept' elidable
| | |     `-ImplicitCastExpr 0x5634746518e8 <col:12> 'uint256' xvalue <NoOp>
| | |       `-DeclRefExpr 0x5634746518c8 <col:12> 'uint256' lvalue Var 0x563474650198 'result' 'uint256'
| | `-FullComment 0x56347476b190 <line:80:4, col:66>
| |   `-ParagraphComment 0x56347476b160 <col:4, col:66>
| |     `-TextComment 0x56347476b130 <col:4, col:66> Text=" Compute the 256-bit hash of the concatenation of two objects. "
| `-FullComment 0x56347476b0c0 <col:4, col:66>
|   `-ParagraphComment 0x56347476b090 <col:4, col:66>
|     `-TextComment 0x56347476b060 <col:4, col:66> Text=" Compute the 256-bit hash of the concatenation of two objects. "
|-FunctionTemplateDecl 0x563474651c68 <line:93:1, line:101:1> line:94:16 Hash160
| |-TemplateTypeParmDecl 0x5634746519a0 <line:93:10, col:19> col:19 referenced typename depth 0 index 0 T1
| |-FunctionDecl 0x563474651bc8 <line:94:1, line:101:1> line:94:16 Hash160 'uint160 (const T1, const T1)' inline
| | |-ParmVarDecl 0x563474651a40 <col:24, col:33> col:33 referenced pbegin 'const T1'
| | |-ParmVarDecl 0x563474651ab8 <col:41, col:50> col:50 referenced pend 'const T1'
| | |-CompoundStmt 0x563474652b48 <line:95:1, line:101:1>
| | | |-DeclStmt 0x563474651e30 <line:96:5, col:40>
| | | | `-VarDecl 0x563474651d38 <col:5, col:39> col:26 referenced pblank 'unsigned char [1]' static cinit
| | | |   `-InitListExpr 0x563474651de0 <col:38, col:39> 'unsigned char [1]'
| | | |     `-array_filler: ImplicitValueInitExpr 0x563474651e20 <<invalid sloc>> 'unsigned char'
| | | |-DeclStmt 0x563474652240 <line:97:5, col:19>
| | | | `-VarDecl 0x563474651e58 <col:5, col:13> col:13 referenced result 'uint160' nrvo callinit
| | | |   `-CXXConstructExpr 0x563474652218 <col:13> 'uint160' 'void ()'
| | | `-ReturnStmt 0x563474652b00 <line:100:5, col:12>
| | |   `-CXXConstructExpr 0x563474652ad0 <col:12> 'uint160' 'void (uint160 &&) noexcept' elidable
| | |     `-ImplicitCastExpr 0x563474652a70 <col:12> 'uint160' xvalue <NoOp>
| | |       `-DeclRefExpr 0x563474652a50 <col:12> 'uint160' lvalue Var 0x563474651e58 'result' 'uint160'
| | `-FullComment 0x56347476b3b0 <line:92:4, col:40>
| |   `-ParagraphComment 0x56347476b380 <col:4, col:40>
| |     `-TextComment 0x56347476b350 <col:4, col:40> Text=" Compute the 160-bit hash an object. "
| `-FullComment 0x56347476b2e0 <col:4, col:40>
|   `-ParagraphComment 0x56347476b2b0 <col:4, col:40>
|     `-TextComment 0x56347476b280 <col:4, col:40> Text=" Compute the 160-bit hash an object. "
|-FunctionDecl 0x563474652ca8 <line:104:1, line:107:1> line:104:16 invalid Hash160 'uint160 (const int)' inline
| |-ParmVarDecl 0x563474652bb0 <col:24, <invalid sloc>> col:56 invalid 'const int'
| |-CompoundStmt 0x563474652dc8 <line:105:1, line:107:1>
| `-FullComment 0x56347476b480 <line:103:4, col:42>
|   `-ParagraphComment 0x56347476b450 <col:4, col:42>
|     `-TextComment 0x56347476b420 <col:4, col:42> Text=" Compute the 160-bit hash of a vector. "
|-FunctionTemplateDecl 0x563474653018 <line:110:1, line:114:1> line:111:16 invalid Hash160
| |-NonTypeTemplateParmDecl 0x563474652df0 <line:110:10, col:23> col:23 referenced 'unsigned int' depth 0 index 0 N
| |-FunctionDecl 0x563474652f78 <line:111:1, line:114:1> line:111:16 invalid Hash160 'uint160 (const int &)' inline
| | |-ParmVarDecl 0x563474652eb8 <col:24, col:59> col:59 invalid vch 'const int &'
| | |-CompoundStmt 0x5634746530e8 <line:112:1, line:114:1>
| | `-FullComment 0x56347476b6a0 <line:109:4, col:42>
| |   `-ParagraphComment 0x56347476b670 <col:4, col:42>
| |     `-TextComment 0x56347476b640 <col:4, col:42> Text=" Compute the 160-bit hash of a vector. "
| `-FullComment 0x56347476b5d0 <col:4, col:42>
|   `-ParagraphComment 0x56347476b5a0 <col:4, col:42>
|     `-TextComment 0x56347476b570 <col:4, col:42> Text=" Compute the 160-bit hash of a vector. "
|-CXXRecordDecl 0x5634746530f8 <line:117:1, line:157:1> line:117:7 referenced invalid class CHashWriter definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476d600 <line:116:4, col:70>
| | `-ParagraphComment 0x56347476d5d0 <col:4, col:70>
| |   `-TextComment 0x56347476b710 <col:4, col:70> Text=" A writer stream (for serialization) that computes a 256-bit hash. "
| |-CXXRecordDecl 0x563474653218 <line:117:1, col:7> col:7 implicit referenced class CHashWriter
| |-AccessSpecDecl 0x5634746532a8 <line:119:1, col:8> col:1 private
| |-FieldDecl 0x5634746532e0 <line:120:5, col:14> col:14 invalid ctx 'CHash256'
| |-FieldDecl 0x563474653348 <line:122:5, col:15> col:15 referenced nType 'const int'
| |-FieldDecl 0x5634746533b0 <line:123:5, col:15> col:15 referenced nVersion 'const int'
| |-AccessSpecDecl 0x563474653400 <line:124:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634746535e0 <line:126:5, col:86> col:5 referenced CHashWriter 'void (int, int)'
| | |-ParmVarDecl 0x563474653440 <col:17, col:21> col:21 used nTypeIn 'int'
| | |-ParmVarDecl 0x5634746534c0 <col:30, col:34> col:34 used nVersionIn 'int'
| | |-CXXCtorInitializer Field 0x563474653348 'nType' 'const int'
| | | `-ImplicitCastExpr 0x563474653f50 <col:54> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x563474653f10 <col:54> 'int' lvalue ParmVar 0x563474653440 'nTypeIn' 'int'
| | |-CXXCtorInitializer Field 0x5634746533b0 'nVersion' 'const int'
| | | `-ImplicitCastExpr 0x563474653fd0 <col:73> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x563474653f90 <col:73> 'int' lvalue ParmVar 0x5634746534c0 'nVersionIn' 'int'
| | `-CompoundStmt 0x563474654020 <col:85, col:86>
| |-CXXMethodDecl 0x5634746536f0 <line:128:5, col:41> col:9 GetType 'int () const'
| | `-CompoundStmt 0x563474654098 <col:25, col:41>
| |   `-ReturnStmt 0x563474654088 <col:27, col:34>
| |     `-ImplicitCastExpr 0x563474654070 <col:34> 'int' <LValueToRValue>
| |       `-MemberExpr 0x563474654040 <col:34> 'const int' lvalue ->nType 0x563474653348
| |         `-CXXThisExpr 0x563474654030 <col:34> 'const CHashWriter *' implicit this
| |-CXXMethodDecl 0x5634746537b8 <line:129:5, col:47> col:9 GetVersion 'int () const'
| | `-CompoundStmt 0x563474654118 <col:28, col:47>
| |   `-ReturnStmt 0x563474654108 <col:30, col:37>
| |     `-ImplicitCastExpr 0x5634746540f0 <col:37> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5634746540c0 <col:37> 'const int' lvalue ->nVersion 0x5634746533b0
| |         `-CXXThisExpr 0x5634746540b0 <col:37> 'const CHashWriter *' implicit this
| |-CXXMethodDecl 0x563474653998 <line:131:5, line:133:5> line:131:10 invalid write 'void (const char *, int)'
| | |-ParmVarDecl 0x563474653870 <col:16, col:28> col:28 used pch 'const char *'
| | |-ParmVarDecl 0x563474653900 <col:33, col:40> col:40 invalid size 'int'
| | `-CompoundStmt 0x5634746541b8 <col:46, line:133:5>
| |-CXXMethodDecl 0x563474653a68 <line:136:5, line:140:5> line:136:13 referenced GetHash 'uint256 ()'
| | `-CompoundStmt 0x563474654388 <col:23, line:140:5>
| |   |-DeclStmt 0x563474654268 <line:137:9, col:23>
| |   | `-VarDecl 0x5634746541d8 <col:9, col:17> col:17 used result 'uint256' nrvo callinit
| |   |   `-CXXConstructExpr 0x563474654240 <col:17> 'uint256' 'void ()'
| |   `-ReturnStmt 0x563474654370 <line:139:9, col:16>
| |     `-CXXConstructExpr 0x563474654340 <col:16> 'uint256' 'void (uint256 &&) noexcept' elidable
| |       `-ImplicitCastExpr 0x563474654328 <col:16> 'uint256' xvalue <NoOp>
| |         `-DeclRefExpr 0x563474654308 <col:16> 'uint256' lvalue Var 0x5634746541d8 'result' 'uint256'
| |-CXXMethodDecl 0x563474653b70 <line:145:5, line:149:5> line:145:21 invalid GetCheapHash 'int ()' inline
| | |-CompoundStmt 0x5634746544a0 <col:36, line:149:5>
| | | `-DeclStmt 0x563474654478 <line:146:9, col:52>
| | |   `-VarDecl 0x563474654410 <col:9, col:23> col:23 invalid result 'unsigned char'
| | `-FullComment 0x56347476d6d0 <line:143:7, col:57>
| |   `-ParagraphComment 0x56347476d6a0 <col:7, col:57>
| |     `-TextComment 0x56347476d670 <col:7, col:57> Text=" Returns the first 64 bits from the resulting hash."
| |-FunctionTemplateDecl 0x563474653e98 <line:151:5, line:156:5> line:152:18 operator<<
| | |-TemplateTypeParmDecl 0x563474653c10 <line:151:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x563474653df8 <line:152:5, line:156:5> line:152:18 operator<< 'CHashWriter &(const T &)'
| |   |-ParmVarDecl 0x563474653cd8 <col:29, col:38> col:38 referenced obj 'const T &'
| |   `-CompoundStmt 0x563474654630 <col:43, line:156:5>
| |     |-CallExpr 0x5634746545a8 <line:154:9, col:31> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x5634746544d8 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Serialize' 0x56347458f418 0x5634745ac278 0x5634745995a8 0x563474593318 0x563474592c88 0x5634745925a8 0x563474591f88 0x5634745919a8 0x5634745915b8
| |     | |-UnaryOperator 0x563474654570 <col:21, col:22> 'CHashWriter' lvalue prefix '*' cannot overflow
| |     | | `-CXXThisExpr 0x563474654560 <col:22> 'CHashWriter *' this
| |     | `-DeclRefExpr 0x563474654588 <col:28> 'const T' lvalue ParmVar 0x563474653cd8 'obj' 'const T &'
| |     `-ReturnStmt 0x563474654620 <line:155:9, col:22>
| |       `-ParenExpr 0x563474654600 <col:16, col:22> 'CHashWriter' lvalue
| |         `-UnaryOperator 0x5634746545e8 <col:17, col:18> 'CHashWriter' lvalue prefix '*' cannot overflow
| |           `-CXXThisExpr 0x5634746545d8 <col:18> 'CHashWriter *' this
| |-CXXConstructorDecl 0x563474656268 <line:117:7> col:7 implicit constexpr CHashWriter 'void (const CHashWriter &)' inline default trivial noexcept-unevaluated 0x563474656268
| | `-ParmVarDecl 0x563474656378 <col:7> col:7 'const CHashWriter &'
| `-CXXConstructorDecl 0x563474656418 <col:7> col:7 implicit constexpr CHashWriter 'void (CHashWriter &&)' inline default trivial noexcept-unevaluated 0x563474656418
|   `-ParmVarDecl 0x563474656528 <col:7> col:7 'CHashWriter &&'
|-ClassTemplateDecl 0x563474654790 <line:160:1, line:192:1> line:161:7 CHashVerifier
| |-TemplateTypeParmDecl 0x563474654678 <line:160:10, col:19> col:19 referenced typename depth 0 index 0 Source
| |-CXXRecordDecl 0x563474654700 <line:161:1, line:192:1> line:161:7 invalid class CHashVerifier definition
| | |-DefinitionData trivially_copyable has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit needs_overload_resolution
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-public 'CHashWriter'
| | |-FullComment 0x56347476d8f0 <line:159:4, col:71>
| | | `-ParagraphComment 0x56347476d8c0 <col:4, col:71>
| | |   `-TextComment 0x56347476d890 <col:4, col:71> Text=" Reads data from an underlying stream, while hashing the read data. "
| | |-CXXRecordDecl 0x563474654a20 <line:161:1, col:7> col:7 implicit referenced class CHashVerifier
| | |-AccessSpecDecl 0x563474654ab0 <line:163:1, col:8> col:1 private
| | |-FieldDecl 0x563474654b18 <line:164:5, col:13> col:13 referenced source 'Source *'
| | |-AccessSpecDecl 0x563474654b68 <line:166:1, col:7> col:1 public
| | |-CXXConstructorDecl 0x563474654cd8 <line:167:5, col:120> col:14 CHashVerifier<Source> 'void (Source *)'
| | | |-ParmVarDecl 0x563474654ba0 <col:28, col:36> col:36 referenced source_ 'Source *'
| | | |-CXXCtorInitializer 'CHashWriter'
| | | | `-ParenListExpr 0x563474655658 <col:58, col:100> 'NULL TYPE'
| | | |   |-CallExpr 0x563474655580 <col:59, col:76> '<dependent type>'
| | | |   | `-CXXDependentScopeMemberExpr 0x563474655538 <col:59, col:68> '<dependent type>' lvalue ->GetType
| | | |   |   `-DeclRefExpr 0x563474655518 <col:59> 'Source *' lvalue ParmVar 0x563474654ba0 'source_' 'Source *'
| | | |   `-CallExpr 0x563474655638 <col:79, col:99> '<dependent type>'
| | | |     `-CXXDependentScopeMemberExpr 0x5634746555f0 <col:79, col:88> '<dependent type>' lvalue ->GetVersion
| | | |       `-DeclRefExpr 0x5634746555a0 <col:79> 'Source *' lvalue ParmVar 0x563474654ba0 'source_' 'Source *'
| | | |-CXXCtorInitializer Field 0x563474654b18 'source' 'Source *'
| | | | `-ParenListExpr 0x5634746556d8 <col:109, col:117> 'NULL TYPE'
| | | |   `-DeclRefExpr 0x5634746556b8 <col:110> 'Source *' lvalue ParmVar 0x563474654ba0 'source_' 'Source *'
| | | `-CompoundStmt 0x563474655730 <col:119, col:120>
| | |-CXXMethodDecl 0x563474654f08 <line:169:5, line:173:5> line:169:10 invalid read 'void (char *, int)'
| | | |-ParmVarDecl 0x563474654da0 <col:15, col:21> col:21 referenced pch 'char *'
| | | |-ParmVarDecl 0x563474654e30 <col:26, col:33> col:33 invalid nSize 'int'
| | | `-CompoundStmt 0x563474655860 <line:170:5, line:173:5>
| | |-CXXMethodDecl 0x563474655070 <line:175:5, line:183:5> line:175:10 invalid ignore 'void (int)'
| | | |-ParmVarDecl 0x563474654fe0 <col:17, col:24> col:24 invalid nSize 'int'
| | | `-CompoundStmt 0x563474655ab8 <line:176:5, line:183:5>
| | |   `-DeclStmt 0x563474655970 <line:177:9, col:24>
| | |     `-VarDecl 0x563474655908 <col:9, col:23> col:14 referenced data 'char [1024]'
| | `-FunctionTemplateDecl 0x5634746554a0 <line:185:5, line:191:5> line:186:28 operator>>
| |   |-TemplateTypeParmDecl 0x563474655118 <line:185:14, col:23> col:23 referenced typename depth 1 index 0 T
| |   `-CXXMethodDecl 0x563474655400 <line:186:5, line:191:5> line:186:28 operator>> 'CHashVerifier<Source> &(T &&)'
| |     |-ParmVarDecl 0x563474655288 <col:39, col:43> col:43 referenced obj 'T &&'
| |     `-CompoundStmt 0x563474655c90 <line:187:5, line:191:5>
| |       |-CallExpr 0x563474655bd8 <line:189:9, col:33> '<dependent type>'
| |       | |-UnresolvedLookupExpr 0x563474655af0 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Unserialize' 0x5634745937b8 0x5634745ac768 0x5634745b5e88 0x5634745b4e18 0x5634745b40a8 0x5634745b6c48 0x563474599ae8 0x563474599138 0x563474598b38 0x563474595b58 0x563474597fb8 0x563474598558
| |       | |-UnaryOperator 0x563474655ba0 <col:23, col:24> '<dependent type>' prefix '*' cannot overflow
| |       | | `-CXXThisExpr 0x563474655b90 <col:24> 'CHashVerifier<Source> *' this
| |       | `-DeclRefExpr 0x563474655bb8 <col:30> 'T' lvalue ParmVar 0x563474655288 'obj' 'T &&'
| |       `-ReturnStmt 0x563474655c80 <line:190:9, col:22>
| |         `-ParenExpr 0x563474655c60 <col:16, col:22> '<dependent type>'
| |           `-UnaryOperator 0x563474655c48 <col:17, col:18> '<dependent type>' prefix '*' cannot overflow
| |             `-CXXThisExpr 0x563474655c38 <col:18> 'CHashVerifier<Source> *' this
| `-FullComment 0x56347476d820 <line:159:4, col:71>
|   `-ParagraphComment 0x56347476d7f0 <col:4, col:71>
|     `-TextComment 0x56347476d7c0 <col:4, col:71> Text=" Reads data from an underlying stream, while hashing the read data. "
|-FunctionTemplateDecl 0x5634746560e8 <line:195:1, line:201:1> line:196:9 SerializeHash
| |-TemplateTypeParmDecl 0x563474655cd8 <line:195:10, col:19> col:19 referenced typename depth 0 index 0 T
| |-FunctionDecl 0x563474656048 <line:196:1, line:201:1> line:196:9 SerializeHash 'uint256 (const T &, int, int)'
| | |-ParmVarDecl 0x563474655d98 <col:23, col:32> col:32 referenced obj 'const T &'
| | |-ParmVarDecl 0x563474655e18 <col:37, col:47> col:41 referenced nType 'int' cinit
| | | `-ImplicitCastExpr 0x563474655ea0 <col:47> 'int' <IntegralCast>
| | |   `-DeclRefExpr 0x563474655e80 <col:47> '(anonymous enum at bitcoin/src/serialize.h:172:1)' EnumConstant 0x56347458e9b0 'SER_GETHASH' '(anonymous enum at bitcoin/src/serialize.h:172:1)'
| | |-ParmVarDecl 0x563474655ed0 <col:60, col:73> col:64 referenced nVersion 'int' cinit
| | | `-ImplicitCastExpr 0x563474655f78 <col:73> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x563474655f58 <col:73> 'const int' lvalue Var 0x5634745dc6f0 'PROTOCOL_VERSION' 'const int' non_odr_use_constant
| | |-CompoundStmt 0x563474656758 <line:197:1, line:201:1>
| | | |-DeclStmt 0x563474656600 <line:198:5, col:36>
| | | | `-VarDecl 0x563474656188 <col:5, col:35> col:17 referenced ss 'CHashWriter' callinit
| | | |   `-CXXConstructExpr 0x5634746565c8 <col:17, col:35> 'CHashWriter' 'void (int, int)'
| | | |     |-ImplicitCastExpr 0x563474656598 <col:20> 'int' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x563474656158 <col:20> 'int' lvalue ParmVar 0x563474655e18 'nType' 'int'
| | | |     `-ImplicitCastExpr 0x5634746565b0 <col:27> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0x5634746561f0 <col:27> 'int' lvalue ParmVar 0x563474655ed0 'nVersion' 'int'
| | | |-BinaryOperator 0x563474656658 <line:199:5, col:11> '<dependent type>' '<<'
| | | | |-DeclRefExpr 0x563474656618 <col:5> 'CHashWriter' lvalue Var 0x563474656188 'ss' 'CHashWriter'
| | | | `-DeclRefExpr 0x563474656638 <col:11> 'const T' lvalue ParmVar 0x563474655d98 'obj' 'const T &'
| | | `-ReturnStmt 0x563474656748 <line:200:5, col:23>
| | |   `-ExprWithCleanups 0x563474656730 <col:12, col:23> 'uint256'
| | |     `-CXXConstructExpr 0x563474656700 <col:12, col:23> 'uint256' 'void (uint256 &&) noexcept' elidable
| | |       `-MaterializeTemporaryExpr 0x5634746566e8 <col:12, col:23> 'uint256' xvalue
| | |         `-CXXMemberCallExpr 0x5634746566c8 <col:12, col:23> 'uint256'
| | |           `-MemberExpr 0x563474656698 <col:12, col:15> '<bound member function type>' .GetHash 0x563474653a68
| | |             `-DeclRefExpr 0x563474656678 <col:12> 'CHashWriter' lvalue Var 0x563474656188 'ss' 'CHashWriter'
| | `-FullComment 0x56347476db90 <line:194:4, col:59>
| |   `-ParagraphComment 0x56347476db60 <col:4, col:59>
| |     `-TextComment 0x56347476db30 <col:4, col:59> Text=" Compute the 256-bit hash of an object's serialization. "
| `-FullComment 0x56347476dac0 <col:4, col:59>
|   `-ParagraphComment 0x56347476da90 <col:4, col:59>
|     `-TextComment 0x56347476da60 <col:4, col:59> Text=" Compute the 256-bit hash of an object's serialization. "
|-FunctionDecl 0x563474656960 <line:203:1, col:95> col:14 invalid MurmurHash3 'unsigned int (unsigned int, const int)'
| |-ParmVarDecl 0x563474656798 <col:26, col:39> col:39 nHashSeed 'unsigned int'
| `-ParmVarDecl 0x563474656840 <col:50, <invalid sloc>> col:82 invalid 'const int'
|-FunctionDecl 0x563474656f38 <line:205:1, col:141> col:6 BIP32Hash 'void (const ChainCode &, unsigned int, unsigned char, const unsigned char *, unsigned char *)'
| |-ParmVarDecl 0x563474656a68 <col:16, col:33> col:33 chainCode 'const ChainCode &'
| |-ParmVarDecl 0x563474656ae8 <col:44, col:57> col:57 nChild 'unsigned int'
| |-ParmVarDecl 0x563474656b68 <col:65, col:79> col:79 header 'unsigned char'
| |-ParmVarDecl 0x563474656ce0 <col:87, col:114> col:107 data 'const unsigned char *':'const unsigned char *'
| `-ParmVarDecl 0x563474656de0 <col:117, col:140> col:131 output 'unsigned char *':'unsigned char *'
|-ClassTemplateDecl 0x5634746571b8 <bitcoin/src/limitedmap.h:12:1, line:98:1> line:13:7 limitedmap
| |-TemplateTypeParmDecl 0x563474657028 <line:12:11, col:20> col:20 referenced typename depth 0 index 0 K
| |-TemplateTypeParmDecl 0x563474657098 <col:23, col:32> col:32 referenced typename depth 0 index 1 V
| |-CXXRecordDecl 0x563474657128 <line:13:1, line:98:1> line:13:7 class limitedmap definition
| | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FullComment 0x56347476dd30 <line:11:4, col:82>
| | | `-ParagraphComment 0x56347476dd00 <col:4, col:82>
| | |   `-TextComment 0x56347476dcd0 <col:4, col:82> Text=" STL-like map container that only keeps the N elements with the highest value. "
| | |-CXXRecordDecl 0x563474657450 <line:13:1, col:7> col:7 implicit referenced class limitedmap
| | |-AccessSpecDecl 0x5634746574e0 <line:15:1, col:7> col:1 public
| | |-TypedefDecl 0x563474657518 <line:16:5, col:15> col:15 referenced key_type 'K'
| | | `-TemplateTypeParmType 0x563474657070 'K' dependent depth 0 index 0
| | |   `-TemplateTypeParm 0x563474657028 'K'
| | |-TypedefDecl 0x563474657580 <line:17:5, col:15> col:15 referenced mapped_type 'V'
| | | `-TemplateTypeParmType 0x5634746570e0 'V' dependent depth 0 index 1
| | |   `-TemplateTypeParm 0x563474657098 'V'
| | |-TypedefDecl 0x5634746576a8 <line:19:5, col:38> col:38 referenced invalid const_iterator 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-TypedefDecl 0x563474657748 <line:20:5, col:38> col:38 referenced invalid size_type 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-AccessSpecDecl 0x5634746577a0 <line:22:1, col:10> col:1 protected
| | |-TypedefDecl 0x563474657840 <line:24:5, col:38> col:38 referenced invalid iterator 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-TypedefDecl 0x563474657930 <line:26:5, col:59> col:59 referenced rmap_iterator 'limitedmap::iterator':'int'
| | | `-TypedefType 0x5634746578c0 'limitedmap::iterator' sugar
| | |   |-Typedef 0x563474657840 'iterator'
| | |   `-BuiltinType 0x5634744cb780 'int'
| | |-FieldDecl 0x5634746579c0 <line:27:5, col:15> col:15 referenced nMaxSize 'limitedmap::size_type':'int'
| | |-AccessSpecDecl 0x563474657a10 <line:29:1, col:7> col:1 public
| | |-CXXConstructorDecl 0x563474657b48 <line:30:5, line:34:5> line:30:14 limitedmap<K, V> 'void (limitedmap::size_type)'
| | | |-ParmVarDecl 0x563474657a48 <col:25, col:35> col:35 referenced nMaxSizeIn 'limitedmap::size_type':'int'
| | | `-CompoundStmt 0x563474658c10 <line:31:5, line:34:5>
| | |   `-BinaryOperator 0x563474658bf0 <line:33:9, col:20> '<dependent type>' '='
| | |     |-MemberExpr 0x563474658ba0 <col:9> 'limitedmap::size_type':'int' lvalue ->nMaxSize 0x5634746579c0
| | |     | `-CXXThisExpr 0x563474658b90 <col:9> 'limitedmap<K, V> *' implicit this
| | |     `-DeclRefExpr 0x563474658bd0 <col:20> 'limitedmap::size_type':'int' lvalue ParmVar 0x563474657a48 'nMaxSizeIn' 'limitedmap::size_type':'int'
| | |-CXXMethodDecl 0x563474657c98 <line:35:5, col:56> col:20 begin 'limitedmap::const_iterator () const'
| | | `-CompoundStmt 0x563474658c28 <col:34, col:56>
| | |-CXXMethodDecl 0x563474657d58 <line:36:5, col:52> col:20 end 'limitedmap::const_iterator () const'
| | | `-CompoundStmt 0x563474658c38 <col:32, col:52>
| | |-CXXMethodDecl 0x563474657e48 <line:37:5, col:49> col:15 size 'limitedmap::size_type () const'
| | | `-CompoundStmt 0x563474658c48 <col:28, col:49>
| | |-CXXMethodDecl 0x563474657f08 <line:38:5, col:46> col:10 empty 'bool () const'
| | | `-CompoundStmt 0x563474658c58 <col:24, col:46>
| | |-CXXMethodDecl 0x5634746580d8 <line:39:5, col:72> col:20 find 'limitedmap::const_iterator (const limitedmap::key_type &) const'
| | | |-ParmVarDecl 0x563474657fe8 <col:25, col:41> col:41 referenced k 'const limitedmap::key_type &'
| | | `-CompoundStmt 0x563474658c88 <col:50, col:72>
| | |-CXXMethodDecl 0x563474658258 <line:40:5, col:69> col:15 count 'limitedmap::size_type (const limitedmap::key_type &) const'
| | | |-ParmVarDecl 0x563474658190 <col:21, col:37> col:37 referenced k 'const limitedmap::key_type &'
| | | `-CompoundStmt 0x563474658cb8 <col:46, col:69>
| | |-CXXMethodDecl 0x5634746583b8 <line:41:5, line:51:5> line:41:10 invalid insert 'void (const int &)'
| | | |-ParmVarDecl 0x563474658328 <col:17, col:35> col:35 invalid x 'const int &'
| | | `-CompoundStmt 0x563474658e00 <line:42:5, line:51:5>
| | |   `-IfStmt 0x563474658de8 <line:44:9, line:50:9>
| | |     |-OpaqueValueExpr 0x563474658dd0 <<invalid sloc>> 'bool'
| | |     `-CompoundStmt 0x563474658db8 <line:44:25, line:50:9>
| | |       `-IfStmt 0x563474658d60 <line:45:13, line:48:13>
| | |         |-OpaqueValueExpr 0x563474658d48 <<invalid sloc>> 'bool'
| | |         `-CompoundStmt 0x563474658d38 <line:45:40, line:48:13>
| | |-CXXMethodDecl 0x563474658568 <line:52:5, line:66:5> line:52:10 erase 'void (const limitedmap::key_type &)'
| | | |-ParmVarDecl 0x563474658470 <col:16, col:32> col:32 referenced k 'const limitedmap::key_type &'
| | | `-CompoundStmt 0x5634746591b8 <line:53:5, line:66:5>
| | |   |-DeclStmt 0x563474658eb0 <line:54:9, col:40>
| | |   | `-VarDecl 0x563474658e28 <col:9, col:18> col:18 referenced itTarget 'limitedmap::iterator':'int'
| | |   `-IfStmt 0x563474658f10 <line:55:9, line:56:13>
| | |     |-OpaqueValueExpr 0x563474658ef8 <<invalid sloc>> 'bool'
| | |     `-ReturnStmt 0x563474658ee8 <col:13>
| | |-CXXMethodDecl 0x5634746587d8 <line:67:5, line:86:5> line:67:10 update 'void (limitedmap::const_iterator, const limitedmap::mapped_type &)'
| | | |-ParmVarDecl 0x563474658620 <col:17, col:32> col:32 referenced itIn 'limitedmap::const_iterator':'int'
| | | |-ParmVarDecl 0x5634746586c8 <col:38, col:57> col:57 referenced v 'const limitedmap::mapped_type &'
| | | `-CompoundStmt 0x56347465c8b0 <line:68:5, line:86:5>
| | |   |-DeclStmt 0x563474659290 <line:72:9, col:50>
| | |   | `-VarDecl 0x5634746591e8 <col:9, col:18> col:18 referenced itTarget 'limitedmap::iterator':'int'
| | |   `-IfStmt 0x5634746592f0 <line:74:9, line:75:13>
| | |     |-OpaqueValueExpr 0x5634746592d8 <<invalid sloc>> 'bool'
| | |     `-ReturnStmt 0x5634746592c8 <col:13>
| | |-CXXMethodDecl 0x5634746588a8 <line:87:5, col:51> col:15 max_size 'limitedmap::size_type () const'
| | | `-CompoundStmt 0x56347465c920 <col:32, col:51>
| | |   `-ReturnStmt 0x56347465c910 <col:34, col:41>
| | |     `-MemberExpr 0x56347465c8e0 <col:41> 'const limitedmap::size_type':'const int' lvalue ->nMaxSize 0x5634746579c0
| | |       `-CXXThisExpr 0x56347465c8d0 <col:41> 'const limitedmap<K, V> *' implicit this
| | `-CXXMethodDecl 0x563474658a18 <line:88:5, line:97:5> line:88:15 max_size 'limitedmap::size_type (limitedmap::size_type)'
| |   |-ParmVarDecl 0x563474658958 <col:24, col:34> col:34 referenced s 'limitedmap::size_type':'int'
| |   `-CompoundStmt 0x56347465caf0 <line:89:5, line:97:5>
| |     |-BinaryOperator 0x56347465ca80 <line:95:9, col:20> '<dependent type>' '='
| |     | |-MemberExpr 0x56347465ca30 <col:9> 'limitedmap::size_type':'int' lvalue ->nMaxSize 0x5634746579c0
| |     | | `-CXXThisExpr 0x56347465ca20 <col:9> 'limitedmap<K, V> *' implicit this
| |     | `-DeclRefExpr 0x56347465ca60 <col:20> 'limitedmap::size_type':'int' lvalue ParmVar 0x563474658958 's' 'limitedmap::size_type':'int'
| |     `-ReturnStmt 0x56347465cae0 <line:96:9, col:16>
| |       `-MemberExpr 0x56347465cab0 <col:16> 'limitedmap::size_type':'int' lvalue ->nMaxSize 0x5634746579c0
| |         `-CXXThisExpr 0x56347465caa0 <col:16> 'limitedmap<K, V> *' implicit this
| `-FullComment 0x56347476dc60 <line:11:4, col:82>
|   `-ParagraphComment 0x56347476dc30 <col:4, col:82>
|     `-TextComment 0x56347476dc00 <col:4, col:82> Text=" STL-like map container that only keeps the N elements with the highest value. "
|-EnumDecl 0x56347465cb10 <bitcoin/src/net_permissions.h:11:1, line:29:1> line:11:6 referenced NetPermissionFlags
| |-EnumConstantDecl 0x56347465cc10 <line:13:5, col:15> col:5 referenced PF_NONE 'NetPermissionFlags'
| | `-ImplicitCastExpr 0x56347465d3d0 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56347465cbf0 <col:15> 'int' 0
| |     `-IntegerLiteral 0x56347465cbd0 <col:15> 'int' 0
| |-EnumConstantDecl 0x56347465cd00 <line:15:5, col:30> col:5 referenced PF_BLOOMFILTER 'NetPermissionFlags'
| | `-ConstantExpr 0x56347465cce0 <col:22, col:30> 'unsigned int' 2
| |   `-ParenExpr 0x56347465ccc0 <col:22, col:30> 'unsigned int'
| |     `-BinaryOperator 0x56347465cca0 <col:23, col:29> 'unsigned int' '<<'
| |       |-IntegerLiteral 0x56347465cc60 <col:23> 'unsigned int' 1
| |       `-IntegerLiteral 0x56347465cc80 <col:29> 'int' 1
| |-EnumConstantDecl 0x56347465cdf0 <line:17:5, col:24> col:5 referenced PF_RELAY 'NetPermissionFlags'
| | `-ConstantExpr 0x56347465cdd0 <col:16, col:24> 'unsigned int' 8
| |   `-ParenExpr 0x56347465cdb0 <col:16, col:24> 'unsigned int'
| |     `-BinaryOperator 0x56347465cd90 <col:17, col:23> 'unsigned int' '<<'
| |       |-IntegerLiteral 0x56347465cd50 <col:17> 'unsigned int' 1
| |       `-IntegerLiteral 0x56347465cd70 <col:23> 'int' 3
| |-EnumConstantDecl 0x56347465cf20 <line:20:5, col:33> col:5 referenced PF_FORCERELAY 'NetPermissionFlags'
| | `-ConstantExpr 0x56347465cf00 <col:21, col:33> 'unsigned int' 12
| |   `-BinaryOperator 0x56347465cee0 <col:21, col:33> 'unsigned int' '|'
| |     |-ParenExpr 0x56347465cea0 <col:21, col:29> 'unsigned int'
| |     | `-BinaryOperator 0x56347465ce80 <col:22, col:28> 'unsigned int' '<<'
| |     |   |-IntegerLiteral 0x56347465ce40 <col:22> 'unsigned int' 1
| |     |   `-IntegerLiteral 0x56347465ce60 <col:28> 'int' 2
| |     `-DeclRefExpr 0x56347465cec0 <col:33> 'unsigned int' EnumConstant 0x56347465cdf0 'PF_RELAY' 'NetPermissionFlags'
| |-EnumConstantDecl 0x56347465d010 <line:22:5, col:24> col:5 referenced PF_NOBAN 'NetPermissionFlags'
| | `-ConstantExpr 0x56347465cff0 <col:16, col:24> 'unsigned int' 16
| |   `-ParenExpr 0x56347465cfd0 <col:16, col:24> 'unsigned int'
| |     `-BinaryOperator 0x56347465cfb0 <col:17, col:23> 'unsigned int' '<<'
| |       |-IntegerLiteral 0x56347465cf70 <col:17> 'unsigned int' 1
| |       `-IntegerLiteral 0x56347465cf90 <col:23> 'int' 4
| |-EnumConstantDecl 0x56347465d100 <line:24:5, col:26> col:5 referenced PF_MEMPOOL 'NetPermissionFlags'
| | `-ConstantExpr 0x56347465d0e0 <col:18, col:26> 'unsigned int' 32
| |   `-ParenExpr 0x56347465d0c0 <col:18, col:26> 'unsigned int'
| |     `-BinaryOperator 0x56347465d0a0 <col:19, col:25> 'unsigned int' '<<'
| |       |-IntegerLiteral 0x56347465d060 <col:19> 'unsigned int' 1
| |       `-IntegerLiteral 0x56347465d080 <col:25> 'int' 5
| |-EnumConstantDecl 0x56347465d1f0 <line:27:5, col:30> col:5 referenced PF_ISIMPLICIT 'NetPermissionFlags'
| | `-ConstantExpr 0x56347465d1d0 <col:21, col:30> 'unsigned int' 2147483648
| |   `-ParenExpr 0x56347465d1b0 <col:21, col:30> 'unsigned int'
| |     `-BinaryOperator 0x56347465d190 <col:22, col:28> 'unsigned int' '<<'
| |       |-IntegerLiteral 0x56347465d150 <col:22> 'unsigned int' 1
| |       `-IntegerLiteral 0x56347465d170 <col:28> 'int' 31
| `-EnumConstantDecl 0x56347465d380 <line:28:5, col:69> col:5 PF_ALL 'NetPermissionFlags'
|   `-ConstantExpr 0x56347465d360 <col:14, col:69> 'unsigned int' 62
|     `-BinaryOperator 0x56347465d340 <col:14, col:69> 'unsigned int' '|'
|       |-BinaryOperator 0x56347465d300 <col:14, col:58> 'unsigned int' '|'
|       | |-BinaryOperator 0x56347465d2c0 <col:14, col:47> 'unsigned int' '|'
|       | | |-BinaryOperator 0x56347465d280 <col:14, col:31> 'unsigned int' '|'
|       | | | |-DeclRefExpr 0x56347465d240 <col:14> 'unsigned int' EnumConstant 0x56347465cd00 'PF_BLOOMFILTER' 'NetPermissionFlags'
|       | | | `-DeclRefExpr 0x56347465d260 <col:31> 'unsigned int' EnumConstant 0x56347465cf20 'PF_FORCERELAY' 'NetPermissionFlags'
|       | | `-DeclRefExpr 0x56347465d2a0 <col:47> 'unsigned int' EnumConstant 0x56347465cdf0 'PF_RELAY' 'NetPermissionFlags'
|       | `-DeclRefExpr 0x56347465d2e0 <col:58> 'unsigned int' EnumConstant 0x56347465d010 'PF_NOBAN' 'NetPermissionFlags'
|       `-DeclRefExpr 0x56347465d320 <col:69> 'unsigned int' EnumConstant 0x56347465d100 'PF_MEMPOOL' 'NetPermissionFlags'
|-CXXRecordDecl 0x56347465d3e8 <line:30:1, line:47:1> line:30:7 referenced class NetPermissions definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56347465d508 <col:1, col:7> col:7 implicit class NetPermissions
| |-AccessSpecDecl 0x56347465d598 <line:32:1, col:7> col:1 public
| |-FieldDecl 0x56347465d5d0 <line:33:5, col:24> col:24 m_flags 'NetPermissionFlags'
| |-CXXMethodDecl 0x56347465d750 <line:34:5, col:71> col:37 invalid ToStrings 'int (NetPermissionFlags)' static
| | `-ParmVarDecl 0x56347465d650 <col:47, col:66> col:66 flags 'NetPermissionFlags'
| |-CXXMethodDecl 0x56347465d988 <line:35:5, line:38:5> line:35:24 used HasFlag 'bool (const NetPermissionFlags &, NetPermissionFlags)' static inline
| | |-ParmVarDecl 0x56347465d838 <col:32, col:58> col:58 used flags 'const NetPermissionFlags &'
| | |-ParmVarDecl 0x56347465d8b0 <col:65, col:84> col:84 used f 'NetPermissionFlags'
| | `-CompoundStmt 0x56347465dfc0 <line:36:5, line:38:5>
| |   `-ReturnStmt 0x56347465dfb0 <line:37:9, col:31>
| |     `-BinaryOperator 0x56347465df90 <col:16, col:31> 'bool' '=='
| |       |-ParenExpr 0x56347465df20 <col:16, col:26> 'unsigned int'
| |       | `-BinaryOperator 0x56347465df00 <col:17, col:25> 'unsigned int' '&'
| |       |   |-ImplicitCastExpr 0x56347465deb8 <col:17> 'unsigned int' <IntegralCast>
| |       |   | `-ImplicitCastExpr 0x56347465dea0 <col:17> 'NetPermissionFlags' <LValueToRValue>
| |       |   |   `-DeclRefExpr 0x56347465de60 <col:17> 'const NetPermissionFlags' lvalue ParmVar 0x56347465d838 'flags' 'const NetPermissionFlags &'
| |       |   `-ImplicitCastExpr 0x56347465dee8 <col:25> 'unsigned int' <IntegralCast>
| |       |     `-ImplicitCastExpr 0x56347465ded0 <col:25> 'NetPermissionFlags' <LValueToRValue>
| |       |       `-DeclRefExpr 0x56347465de80 <col:25> 'NetPermissionFlags' lvalue ParmVar 0x56347465d8b0 'f' 'NetPermissionFlags'
| |       `-ImplicitCastExpr 0x56347465df78 <col:31> 'unsigned int' <IntegralCast>
| |         `-ImplicitCastExpr 0x56347465df60 <col:31> 'NetPermissionFlags' <LValueToRValue>
| |           `-DeclRefExpr 0x56347465df40 <col:31> 'NetPermissionFlags' lvalue ParmVar 0x56347465d8b0 'f' 'NetPermissionFlags'
| |-CXXMethodDecl 0x56347465dbc8 <line:39:5, line:42:5> line:39:24 used AddFlag 'void (NetPermissionFlags &, NetPermissionFlags)' static inline
| | |-ParmVarDecl 0x56347465da78 <col:32, col:52> col:52 used flags 'NetPermissionFlags &'
| | |-ParmVarDecl 0x56347465daf0 <col:59, col:78> col:78 used f 'NetPermissionFlags'
| | `-CompoundStmt 0x56347465e838 <line:40:5, line:42:5>
| |   `-BinaryOperator 0x56347465e818 <line:41:9, col:58> 'NetPermissionFlags' lvalue '='
| |     |-DeclRefExpr 0x56347465dfd8 <col:9> 'NetPermissionFlags' lvalue ParmVar 0x56347465da78 'flags' 'NetPermissionFlags &'
| |     `-CXXStaticCastExpr 0x56347465e0c8 <col:17, col:58> 'NetPermissionFlags' static_cast<enum NetPermissionFlags> <IntegralCast>
| |       `-BinaryOperator 0x56347465e098 <col:49, col:57> 'unsigned int' '|'
| |         |-ImplicitCastExpr 0x56347465e050 <col:49> 'unsigned int' <IntegralCast>
| |         | `-ImplicitCastExpr 0x56347465e038 <col:49> 'NetPermissionFlags' <LValueToRValue>
| |         |   `-DeclRefExpr 0x56347465dff8 <col:49> 'NetPermissionFlags' lvalue ParmVar 0x56347465da78 'flags' 'NetPermissionFlags &'
| |         `-ImplicitCastExpr 0x56347465e080 <col:57> 'unsigned int' <IntegralCast>
| |           `-ImplicitCastExpr 0x56347465e068 <col:57> 'NetPermissionFlags' <LValueToRValue>
| |             `-DeclRefExpr 0x56347465e018 <col:57> 'NetPermissionFlags' lvalue ParmVar 0x56347465daf0 'f' 'NetPermissionFlags'
| `-CXXMethodDecl 0x56347465dd98 <line:43:5, line:46:5> line:43:24 used ClearFlag 'void (NetPermissionFlags &, NetPermissionFlags)' static inline
|   |-ParmVarDecl 0x56347465dc88 <col:34, col:54> col:54 used flags 'NetPermissionFlags &'
|   |-ParmVarDecl 0x56347465dd00 <col:61, col:80> col:80 used f 'NetPermissionFlags'
|   `-CompoundStmt 0x56347465fbe8 <line:44:5, line:46:5>
|     `-BinaryOperator 0x56347465fbc8 <line:45:9, col:59> 'NetPermissionFlags' lvalue '='
|       |-DeclRefExpr 0x56347465fa90 <col:9> 'NetPermissionFlags' lvalue ParmVar 0x56347465dc88 'flags' 'NetPermissionFlags &'
|       `-CXXStaticCastExpr 0x56347465fb98 <col:17, col:59> 'NetPermissionFlags' static_cast<enum NetPermissionFlags> <IntegralCast>
|         `-BinaryOperator 0x56347465fb68 <col:49, col:58> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x56347465fb50 <col:49> 'unsigned int' <IntegralCast>
|           | `-ImplicitCastExpr 0x56347465fb38 <col:49> 'NetPermissionFlags' <LValueToRValue>
|           |   `-DeclRefExpr 0x56347465fab0 <col:49> 'NetPermissionFlags' lvalue ParmVar 0x56347465dc88 'flags' 'NetPermissionFlags &'
|           `-UnaryOperator 0x56347465fb20 <col:57, col:58> 'unsigned int' prefix '~' cannot overflow
|             `-ImplicitCastExpr 0x56347465fb08 <col:58> 'unsigned int' <IntegralCast>
|               `-ImplicitCastExpr 0x56347465faf0 <col:58> 'NetPermissionFlags' <LValueToRValue>
|                 `-DeclRefExpr 0x56347465fad0 <col:58> 'NetPermissionFlags' lvalue ParmVar 0x56347465dd00 'f' 'NetPermissionFlags'
|-CXXRecordDecl 0x56347465fc00 <line:48:1, line:53:1> line:48:7 referenced invalid class NetWhitebindPermissions definition
| |-DefinitionData standard_layout trivially_copyable trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'NetPermissions'
| |-CXXRecordDecl 0x56347465fd58 <col:1, col:7> col:7 implicit referenced class NetWhitebindPermissions
| |-AccessSpecDecl 0x56347465fde8 <line:50:1, col:7> col:1 public
| |-CXXMethodDecl 0x5634746600b8 <line:51:5, col:100> col:17 invalid TryParse 'bool (const int, NetWhitebindPermissions &, int &)' static
| | |-ParmVarDecl 0x56347465fe38 <col:26, col:44> col:44 invalid str 'const int'
| | |-ParmVarDecl 0x56347465fed8 <col:49, col:74> col:74 output 'NetWhitebindPermissions &'
| | `-ParmVarDecl 0x56347465ff68 <col:82, col:95> col:95 invalid error 'int &'
| `-FieldDecl 0x563474660180 <line:52:5, col:14> col:14 invalid m_service 'CService'
|-CXXRecordDecl 0x5634746601e8 <line:55:1, line:60:1> line:55:7 referenced invalid class NetWhitelistPermissions definition
| |-DefinitionData standard_layout trivially_copyable trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'NetPermissions'
| |-CXXRecordDecl 0x563474660348 <col:1, col:7> col:7 implicit referenced class NetWhitelistPermissions
| |-AccessSpecDecl 0x5634746603d8 <line:57:1, col:7> col:1 public
| |-CXXMethodDecl 0x5634746606a8 <line:58:5, col:100> col:17 invalid TryParse 'bool (const int, NetWhitelistPermissions &, int &)' static
| | |-ParmVarDecl 0x563474660428 <col:26, col:44> col:44 invalid str 'const int'
| | |-ParmVarDecl 0x5634746604c8 <col:49, col:74> col:74 output 'NetWhitelistPermissions &'
| | `-ParmVarDecl 0x563474660558 <col:82, col:95> col:95 invalid error 'int &'
| `-FieldDecl 0x563474660770 <line:59:5, col:13> col:13 invalid m_subnet 'CSubNet'
|-VarDecl 0x563474660800 <bitcoin/src/policy/feerate.h:14:1, col:26> col:26 invalid CURRENCY_UNIT 'const int' extern
|-CXXRecordDecl 0x563474660898 <line:19:1, line:57:1> line:19:7 class CFeeRate definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476de00 <line:17:3, col:50>
| | `-ParagraphComment 0x56347476ddd0 <col:3, col:50>
| |   `-TextComment 0x56347476dda0 <col:3, col:50> Text=" Fee rate in satoshis per kilobyte: CAmount / kB"
| |-CXXRecordDecl 0x5634746609b8 <line:19:1, col:7> col:7 implicit referenced class CFeeRate
| |-AccessSpecDecl 0x563474660a48 <line:21:1, col:8> col:1 private
| |-FieldDecl 0x563474660a80 <line:22:5, col:13> col:13 referenced nSatoshisPerK 'CAmount':'int'
| |-AccessSpecDecl 0x563474660af8 <line:24:1, col:7> col:1 public
| |-CXXConstructorDecl 0x563474660b80 <line:26:5, col:37> col:5 CFeeRate 'void ()'
| | |-CXXCtorInitializer Field 0x563474660a80 'nSatoshisPerK' 'CAmount':'int'
| | | `-IntegerLiteral 0x563474662d38 <col:32> 'int' 0
| | |-CompoundStmt 0x563474662da8 <col:35, col:37>
| | `-FullComment 0x56347476ded0 <line:25:8, col:38>
| |   `-ParagraphComment 0x56347476dea0 <col:8, col:38>
| |     `-TextComment 0x56347476de70 <col:8, col:38> Text=" Fee rate of 0 satoshis per kB "
| |-FunctionTemplateDecl 0x563474660e30 <line:27:5, line:31:5> line:28:14 CFeeRate
| | |-TemplateTypeParmDecl 0x563474660c28 <line:27:14, col:23> col:23 referenced typename depth 0 index 0 I
| | `-CXXConstructorDecl 0x563474660d88 <line:28:5, line:31:5> line:28:14 CFeeRate 'void (const I)'
| |   |-ParmVarDecl 0x563474660cc0 <col:23, col:31> col:31 referenced _nSatoshisPerK 'const I'
| |   |-CXXCtorInitializer Field 0x563474660a80 'nSatoshisPerK' 'CAmount':'int'
| |   | `-ParenListExpr 0x563474662dd8 <col:61, col:76> 'NULL TYPE'
| |   |   `-DeclRefExpr 0x563474662db8 <col:62> 'const I' lvalue ParmVar 0x563474660cc0 '_nSatoshisPerK' 'const I'
| |   `-CompoundStmt 0x563474662e48 <col:78, line:31:5>
| |-CXXConstructorDecl 0x563474661068 <line:33:5, col:52> col:5 invalid CFeeRate 'void (const CAmount &, int)'
| | |-ParmVarDecl 0x563474660ec8 <col:14, col:29> col:29 nFeePaid 'const CAmount &'
| | |-ParmVarDecl 0x563474660f58 <col:39, col:46> col:46 invalid nBytes 'int'
| | `-FullComment 0x56347476e020 <line:32:8, col:99>
| |   `-ParagraphComment 0x56347476dff0 <col:8, col:99>
| |     `-TextComment 0x56347476dfc0 <col:8, col:99> Text=" Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)"
| |-CXXMethodDecl 0x563474661268 <line:37:5, col:35> col:13 invalid GetFee 'CAmount (int) const'
| | |-ParmVarDecl 0x563474661170 <col:20, col:27> col:27 invalid nBytes 'int'
| | `-FullComment 0x56347476e0f0 <line:35:7, col:62>
| |   `-ParagraphComment 0x56347476e0c0 <col:7, col:62>
| |     `-TextComment 0x56347476e090 <col:7, col:62> Text=" Return the fee in satoshis for the given size in bytes."
| |-CXXMethodDecl 0x563474661388 <line:41:5, col:55> col:13 GetFeePerK 'CAmount () const'
| | |-CompoundStmt 0x563474662e88 <col:32, col:55>
| | `-FullComment 0x56347476e1c0 <line:39:7, col:58>
| |   `-ParagraphComment 0x56347476e190 <col:7, col:58>
| |     `-TextComment 0x56347476e160 <col:7, col:58> Text=" Return the fee in satoshis for a size of 1000 bytes"
| |-FriendDecl 0x563474661678 <line:42:5, col:109> col:17
| | `-FunctionDecl 0x5634746615b8 parent 0x5634744cb688 <col:5, col:109> col:17 operator< 'bool (const CFeeRate &, const CFeeRate &)'
| |   |-ParmVarDecl 0x563474661468 <col:27, col:43> col:43 used a 'const CFeeRate &'
| |   |-ParmVarDecl 0x5634746614e0 <col:46, col:62> col:62 used b 'const CFeeRate &'
| |   `-CompoundStmt 0x563474662f98 <col:65, col:109>
| |     `-ReturnStmt 0x563474662f88 <col:67, col:94>
| |       `-BinaryOperator 0x563474662f68 <col:74, col:94> 'bool' '<'
| |         |-ImplicitCastExpr 0x563474662f38 <col:74, col:76> 'CAmount':'int' <LValueToRValue>
| |         | `-MemberExpr 0x563474662eb8 <col:74, col:76> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |         |   `-DeclRefExpr 0x563474662e98 <col:74> 'const CFeeRate' lvalue ParmVar 0x563474661468 'a' 'const CFeeRate &'
| |         `-ImplicitCastExpr 0x563474662f50 <col:92, col:94> 'CAmount':'int' <LValueToRValue>
| |           `-MemberExpr 0x563474662f08 <col:92, col:94> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |             `-DeclRefExpr 0x563474662ee8 <col:92> 'const CFeeRate' lvalue ParmVar 0x5634746614e0 'b' 'const CFeeRate &'
| |-FriendDecl 0x563474661898 <line:43:5, col:109> col:17
| | `-FunctionDecl 0x5634746617d8 parent 0x5634744cb688 <col:5, col:109> col:17 operator> 'bool (const CFeeRate &, const CFeeRate &)'
| |   |-ParmVarDecl 0x5634746616c8 <col:27, col:43> col:43 used a 'const CFeeRate &'
| |   |-ParmVarDecl 0x563474661740 <col:46, col:62> col:62 used b 'const CFeeRate &'
| |   `-CompoundStmt 0x5634746630b0 <col:65, col:109>
| |     `-ReturnStmt 0x5634746630a0 <col:67, col:94>
| |       `-BinaryOperator 0x563474663080 <col:74, col:94> 'bool' '>'
| |         |-ImplicitCastExpr 0x563474663050 <col:74, col:76> 'CAmount':'int' <LValueToRValue>
| |         | `-MemberExpr 0x563474662fd0 <col:74, col:76> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |         |   `-DeclRefExpr 0x563474662fb0 <col:74> 'const CFeeRate' lvalue ParmVar 0x5634746616c8 'a' 'const CFeeRate &'
| |         `-ImplicitCastExpr 0x563474663068 <col:92, col:94> 'CAmount':'int' <LValueToRValue>
| |           `-MemberExpr 0x563474663020 <col:92, col:94> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |             `-DeclRefExpr 0x563474663000 <col:92> 'const CFeeRate' lvalue ParmVar 0x563474661740 'b' 'const CFeeRate &'
| |-FriendDecl 0x563474661b60 <line:44:5, col:111> col:17
| | `-FunctionDecl 0x563474661aa0 parent 0x5634744cb688 <col:5, col:111> col:17 operator== 'bool (const CFeeRate &, const CFeeRate &)'
| |   |-ParmVarDecl 0x5634746618e8 <col:28, col:44> col:44 used a 'const CFeeRate &'
| |   |-ParmVarDecl 0x563474661960 <col:47, col:63> col:63 used b 'const CFeeRate &'
| |   `-CompoundStmt 0x5634746631c8 <col:66, col:111>
| |     `-ReturnStmt 0x5634746631b8 <col:68, col:96>
| |       `-BinaryOperator 0x563474663198 <col:75, col:96> 'bool' '=='
| |         |-ImplicitCastExpr 0x563474663168 <col:75, col:77> 'CAmount':'int' <LValueToRValue>
| |         | `-MemberExpr 0x5634746630e8 <col:75, col:77> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |         |   `-DeclRefExpr 0x5634746630c8 <col:75> 'const CFeeRate' lvalue ParmVar 0x5634746618e8 'a' 'const CFeeRate &'
| |         `-ImplicitCastExpr 0x563474663180 <col:94, col:96> 'CAmount':'int' <LValueToRValue>
| |           `-MemberExpr 0x563474663138 <col:94, col:96> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |             `-DeclRefExpr 0x563474663118 <col:94> 'const CFeeRate' lvalue ParmVar 0x563474661960 'b' 'const CFeeRate &'
| |-FriendDecl 0x563474661d80 <line:45:5, col:111> col:17
| | `-FunctionDecl 0x563474661cc0 parent 0x5634744cb688 <col:5, col:111> col:17 operator<= 'bool (const CFeeRate &, const CFeeRate &)'
| |   |-ParmVarDecl 0x563474661bb0 <col:28, col:44> col:44 used a 'const CFeeRate &'
| |   |-ParmVarDecl 0x563474661c28 <col:47, col:63> col:63 used b 'const CFeeRate &'
| |   `-CompoundStmt 0x5634746632e0 <col:66, col:111>
| |     `-ReturnStmt 0x5634746632d0 <col:68, col:96>
| |       `-BinaryOperator 0x5634746632b0 <col:75, col:96> 'bool' '<='
| |         |-ImplicitCastExpr 0x563474663280 <col:75, col:77> 'CAmount':'int' <LValueToRValue>
| |         | `-MemberExpr 0x563474663200 <col:75, col:77> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |         |   `-DeclRefExpr 0x5634746631e0 <col:75> 'const CFeeRate' lvalue ParmVar 0x563474661bb0 'a' 'const CFeeRate &'
| |         `-ImplicitCastExpr 0x563474663298 <col:94, col:96> 'CAmount':'int' <LValueToRValue>
| |           `-MemberExpr 0x563474663250 <col:94, col:96> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |             `-DeclRefExpr 0x563474663230 <col:94> 'const CFeeRate' lvalue ParmVar 0x563474661c28 'b' 'const CFeeRate &'
| |-FriendDecl 0x563474661fa0 <line:46:5, col:111> col:17
| | `-FunctionDecl 0x563474661ee0 parent 0x5634744cb688 <col:5, col:111> col:17 operator>= 'bool (const CFeeRate &, const CFeeRate &)'
| |   |-ParmVarDecl 0x563474661dd0 <col:28, col:44> col:44 used a 'const CFeeRate &'
| |   |-ParmVarDecl 0x563474661e48 <col:47, col:63> col:63 used b 'const CFeeRate &'
| |   `-CompoundStmt 0x5634746633f8 <col:66, col:111>
| |     `-ReturnStmt 0x5634746633e8 <col:68, col:96>
| |       `-BinaryOperator 0x5634746633c8 <col:75, col:96> 'bool' '>='
| |         |-ImplicitCastExpr 0x563474663398 <col:75, col:77> 'CAmount':'int' <LValueToRValue>
| |         | `-MemberExpr 0x563474663318 <col:75, col:77> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |         |   `-DeclRefExpr 0x5634746632f8 <col:75> 'const CFeeRate' lvalue ParmVar 0x563474661dd0 'a' 'const CFeeRate &'
| |         `-ImplicitCastExpr 0x5634746633b0 <col:94, col:96> 'CAmount':'int' <LValueToRValue>
| |           `-MemberExpr 0x563474663368 <col:94, col:96> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |             `-DeclRefExpr 0x563474663348 <col:94> 'const CFeeRate' lvalue ParmVar 0x563474661e48 'b' 'const CFeeRate &'
| |-FriendDecl 0x5634746621c0 <line:47:5, col:111> col:17
| | `-FunctionDecl 0x563474662100 parent 0x5634744cb688 <col:5, col:111> col:17 operator!= 'bool (const CFeeRate &, const CFeeRate &)'
| |   |-ParmVarDecl 0x563474661ff0 <col:28, col:44> col:44 used a 'const CFeeRate &'
| |   |-ParmVarDecl 0x563474662068 <col:47, col:63> col:63 used b 'const CFeeRate &'
| |   `-CompoundStmt 0x563474663510 <col:66, col:111>
| |     `-ReturnStmt 0x563474663500 <col:68, col:96>
| |       `-BinaryOperator 0x5634746634e0 <col:75, col:96> 'bool' '!='
| |         |-ImplicitCastExpr 0x5634746634b0 <col:75, col:77> 'CAmount':'int' <LValueToRValue>
| |         | `-MemberExpr 0x563474663430 <col:75, col:77> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |         |   `-DeclRefExpr 0x563474663410 <col:75> 'const CFeeRate' lvalue ParmVar 0x563474661ff0 'a' 'const CFeeRate &'
| |         `-ImplicitCastExpr 0x5634746634c8 <col:94, col:96> 'CAmount':'int' <LValueToRValue>
| |           `-MemberExpr 0x563474663480 <col:94, col:96> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |             `-DeclRefExpr 0x563474663460 <col:94> 'const CFeeRate' lvalue ParmVar 0x563474662068 'b' 'const CFeeRate &'
| |-CXXMethodDecl 0x563474662308 <line:48:5, col:95> col:15 operator+= 'CFeeRate &(const CFeeRate &)'
| | |-ParmVarDecl 0x563474662210 <col:26, col:42> col:42 used a 'const CFeeRate &'
| | `-CompoundStmt 0x563474663638 <col:45, col:95>
| |   |-CompoundAssignOperator 0x5634746635d0 <col:47, col:66> 'CAmount':'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
| |   | |-MemberExpr 0x563474663538 <col:47> 'CAmount':'int' lvalue ->nSatoshisPerK 0x563474660a80
| |   | | `-CXXThisExpr 0x563474663528 <col:47> 'CFeeRate *' implicit this
| |   | `-ImplicitCastExpr 0x5634746635b8 <col:64, col:66> 'CAmount':'int' <LValueToRValue>
| |   |   `-MemberExpr 0x563474663588 <col:64, col:66> 'const CAmount':'const int' lvalue .nSatoshisPerK 0x563474660a80
| |   |     `-DeclRefExpr 0x563474663568 <col:64> 'const CFeeRate' lvalue ParmVar 0x563474662210 'a' 'const CFeeRate &'
| |   `-ReturnStmt 0x563474663628 <col:81, col:89>
| |     `-UnaryOperator 0x563474663610 <col:88, col:89> 'CFeeRate' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x563474663600 <col:89> 'CFeeRate *' this
| |-CXXMethodDecl 0x5634746623e8 <line:49:5, col:28> col:17 invalid ToString 'int () const'
| |-FunctionTemplateDecl 0x5634746626a8 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x563474662488 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x563474662608 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x563474662548 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x563474663710 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x563474662928 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x563474662708 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x563474662888 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634746627c8 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x563474663818 <col:33, line:201:5>
| |     `-CallExpr 0x5634746637e8 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563474663730 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563474663788 <col:25> 'Stream' lvalue ParmVar 0x5634746627c8 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634746637b8 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| `-FunctionTemplateDecl 0x563474662cb8 <bitcoin/src/policy/feerate.h:53:5, line:56:5> line:54:17 SerializationOp
|   |-TemplateTypeParmDecl 0x563474662988 <line:53:15, col:24> col:24 referenced typename depth 0 index 0 Stream
|   |-TemplateTypeParmDecl 0x5634746629f8 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
|   `-CXXMethodDecl 0x563474662c18 <line:54:5, line:56:5> line:54:17 SerializationOp 'void (Stream &, Operation)' inline
|     |-ParmVarDecl 0x563474662ac8 <col:33, col:41> col:41 referenced s 'Stream &'
|     |-ParmVarDecl 0x563474662b40 <col:44, col:54> col:54 referenced ser_action 'Operation'
|     `-CompoundStmt 0x563474663978 <col:66, line:56:5>
|       `-ParenExpr 0x563474663958 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
|         `-CallExpr 0x563474663920 <col:25, col:70> '<dependent type>'
|           |-UnresolvedLookupExpr 0x563474663850 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
|           |-DeclRefExpr 0x5634746638a0 <col:44> 'Stream' lvalue ParmVar 0x563474662ac8 's' 'Stream &'
|           |-DeclRefExpr 0x5634746638c0 <col:47> 'Operation' lvalue ParmVar 0x563474662b40 'ser_action' 'Operation'
|           `-MemberExpr 0x5634746638f0 <bitcoin/src/policy/feerate.h:55:19> 'CAmount':'int' lvalue ->nSatoshisPerK 0x563474660a80
|             `-CXXThisExpr 0x5634746638e0 <col:19> 'CFeeRate *' implicit this
|-ClassTemplateDecl 0x563474664de0 <bitcoin/src/support/allocators/zeroafterfree.h:14:1, line:43:1> line:15:8 zero_after_free_allocator
| |-TemplateTypeParmDecl 0x563474663990 <line:14:11, col:20> col:20 referenced typename depth 0 index 0 T
| |-CXXRecordDecl 0x563474664d50 <line:15:1, line:43:1> line:15:8 struct zero_after_free_allocator definition
| | |-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | | |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| | | |-MoveConstructor
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment
| | | `-Destructor non_trivial user_declared
| | |-CXXRecordDecl 0x563474665050 <col:1, col:8> col:8 implicit referenced struct zero_after_free_allocator
| | |-TypedefDecl 0x563474665118 <line:18:5, col:28> col:28 invalid size_type 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-TypedefDecl 0x563474665188 <line:19:5, col:28> col:28 invalid difference_type 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-TypedefDecl 0x5634746651f8 <line:20:5, col:28> col:28 invalid pointer 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-TypedefDecl 0x563474665268 <line:21:5, col:28> col:28 invalid const_pointer 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-TypedefDecl 0x5634746652d8 <line:22:5, col:28> col:28 invalid reference 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-TypedefDecl 0x563474665348 <line:23:5, col:28> col:28 invalid const_reference 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-TypedefDecl 0x5634746653b8 <line:24:5, col:28> col:28 invalid value_type 'int'
| | | `-BuiltinType 0x5634744cb780 'int'
| | |-CXXConstructorDecl 0x563474665478 <line:25:5, col:43> col:5 zero_after_free_allocator<T> 'void () noexcept'
| | | `-CompoundStmt 0x563474666348 <col:42, col:43>
| | |-CXXConstructorDecl 0x563474665650 <line:26:5, col:87> col:5 invalid zero_after_free_allocator<T> 'void (const zero_after_free_allocator<T> &) noexcept'
| | | |-ParmVarDecl 0x563474665558 <col:31, col:64> col:64 referenced a 'const zero_after_free_allocator<T> &'
| | | `-CompoundStmt 0x563474666398 <col:86, col:87>
| | |-FunctionTemplateDecl 0x563474665a88 <line:27:5, line:30:5> line:28:5 zero_after_free_allocator<T>
| | | |-TemplateTypeParmDecl 0x563474665700 <line:27:15, col:24> col:24 referenced typename depth 1 index 0 U
| | | `-CXXConstructorDecl 0x5634746659e0 <line:28:5, line:30:5> line:28:5 invalid zero_after_free_allocator<T> 'void (const zero_after_free_allocator<U> &) noexcept'
| | |   |-ParmVarDecl 0x5634746658e0 <col:31, col:67> col:67 referenced a 'const zero_after_free_allocator<U> &'
| | |   `-CompoundStmt 0x5634746663e8 <line:29:5, line:30:5>
| | |-CXXDestructorDecl 0x563474665b38 <line:31:5, col:44> col:5 ~zero_after_free_allocator<T> 'void () noexcept'
| | | `-CompoundStmt 0x5634746663f8 <col:43, col:44>
| | |-ClassTemplateDecl 0x563474665d00 <line:32:5, line:35:5> line:33:12 rebind
| | | |-TemplateTypeParmDecl 0x563474665be8 <line:32:15, col:24> col:24 referenced typename depth 1 index 0 _Other
| | | `-CXXRecordDecl 0x563474665c70 <line:33:5, line:35:5> line:33:12 struct rebind definition
| | |   |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveConstructor exists simple trivial needs_implicit
| | |   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |   | |-MoveAssignment exists simple trivial needs_implicit
| | |   | `-Destructor simple irrelevant trivial needs_implicit
| | |   |-CXXRecordDecl 0x563474665f50 <col:5, col:12> col:12 implicit struct rebind
| | |   `-TypedefDecl 0x563474666090 <line:34:9, col:51> col:51 other 'zero_after_free_allocator<_Other>'
| | |     `-TemplateSpecializationType 0x563474665ff0 'zero_after_free_allocator<_Other>' dependent zero_after_free_allocator
| | |       `-TemplateArgument type '_Other'
| | `-CXXMethodDecl 0x563474666298 <line:37:5, line:42:5> line:37:10 invalid deallocate 'void (T *, int)'
| |   |-ParmVarDecl 0x563474666138 <col:21, col:24> col:24 referenced p 'T *'
| |   |-ParmVarDecl 0x5634746661c8 <col:27, col:39> col:39 invalid n 'int'
| |   `-CompoundStmt 0x563474666528 <line:38:5, line:42:5>
| `-ClassTemplateSpecializationDecl 0x563474666568 <line:14:1, line:43:1> line:15:8 struct zero_after_free_allocator
|   `-TemplateArgument type 'char'
|-ClassTemplateDecl 0x563474666830 <bitcoin/src/streams.h:25:1, line:65:1> line:26:7 OverrideStream
| |-TemplateTypeParmDecl 0x563474666710 <line:25:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| `-CXXRecordDecl 0x5634746667a0 <line:26:1, line:65:1> line:26:7 class OverrideStream definition
|   |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-CXXRecordDecl 0x563474666a80 <col:1, col:7> col:7 implicit referenced class OverrideStream
|   |-FieldDecl 0x563474666b48 <line:28:5, col:13> col:13 referenced stream 'Stream *'
|   |-FieldDecl 0x563474666bb0 <line:30:5, col:15> col:15 referenced nType 'const int'
|   |-FieldDecl 0x563474666c18 <line:31:5, col:15> col:15 referenced nVersion 'const int'
|   |-AccessSpecDecl 0x563474666c68 <line:33:1, col:7> col:1 public
|   |-CXXConstructorDecl 0x563474667578 <line:34:5, col:119> col:5 OverrideStream<Stream> 'void (Stream *, int, int)'
|   | |-ParmVarDecl 0x563474666ca0 <col:20, col:28> col:28 referenced stream_ 'Stream *'
|   | |-ParmVarDecl 0x563474667390 <col:37, col:41> col:41 referenced nType_ 'int'
|   | |-ParmVarDecl 0x563474667410 <col:49, col:53> col:53 referenced nVersion_ 'int'
|   | |-CXXCtorInitializer Field 0x563474666b48 'stream' 'Stream *'
|   | | `-ParenListExpr 0x563474668458 <col:72, col:80> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x563474668438 <col:73> 'Stream *' lvalue ParmVar 0x563474666ca0 'stream_' 'Stream *'
|   | |-CXXCtorInitializer Field 0x563474666bb0 'nType' 'const int'
|   | | `-ImplicitCastExpr 0x5634746684e0 <col:89> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5634746684a0 <col:89> 'int' lvalue ParmVar 0x563474667390 'nType_' 'int'
|   | |-CXXCtorInitializer Field 0x563474666c18 'nVersion' 'const int'
|   | | `-ImplicitCastExpr 0x563474668560 <col:107> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x563474668520 <col:107> 'int' lvalue ParmVar 0x563474667410 'nVersion_' 'int'
|   | `-CompoundStmt 0x5634746685b8 <col:118, col:119>
|   |-FunctionTemplateDecl 0x5634746679c0 <line:36:5, line:42:5> line:37:29 operator<<
|   | |-TemplateTypeParmDecl 0x563474667638 <line:36:14, col:23> col:23 referenced typename depth 1 index 0 T
|   | `-CXXMethodDecl 0x563474667920 <line:37:5, line:42:5> line:37:29 operator<< 'OverrideStream<Stream> &(const T &)'
|   |   |-ParmVarDecl 0x5634746677a8 <col:40, col:49> col:49 referenced obj 'const T &'
|   |   `-CompoundStmt 0x563474668770 <line:38:5, line:42:5>
|   |     |-CallExpr 0x5634746686b8 <line:40:9, col:31> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5634746685e8 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Serialize' 0x56347458f418 0x5634745ac278 0x5634745995a8 0x563474593318 0x563474592c88 0x5634745925a8 0x563474591f88 0x5634745919a8 0x5634745915b8
|   |     | |-UnaryOperator 0x563474668680 <col:21, col:22> '<dependent type>' prefix '*' cannot overflow
|   |     | | `-CXXThisExpr 0x563474668670 <col:22> 'OverrideStream<Stream> *' this
|   |     | `-DeclRefExpr 0x563474668698 <col:28> 'const T' lvalue ParmVar 0x5634746677a8 'obj' 'const T &'
|   |     `-ReturnStmt 0x563474668760 <line:41:9, col:22>
|   |       `-ParenExpr 0x563474668740 <col:16, col:22> '<dependent type>'
|   |         `-UnaryOperator 0x563474668728 <col:17, col:18> '<dependent type>' prefix '*' cannot overflow
|   |           `-CXXThisExpr 0x563474668718 <col:18> 'OverrideStream<Stream> *' this
|   |-FunctionTemplateDecl 0x563474667d50 <line:44:5, line:50:5> line:45:29 operator>>
|   | |-TemplateTypeParmDecl 0x563474667a20 <line:44:14, col:23> col:23 referenced typename depth 1 index 0 T
|   | `-CXXMethodDecl 0x563474667cb0 <line:45:5, line:50:5> line:45:29 operator>> 'OverrideStream<Stream> &(T &&)'
|   |   |-ParmVarDecl 0x563474667b68 <col:40, col:44> col:44 referenced obj 'T &&'
|   |   `-CompoundStmt 0x563474668950 <line:46:5, line:50:5>
|   |     |-CallExpr 0x563474668898 <line:48:9, col:33> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5634746687b0 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Unserialize' 0x5634745937b8 0x5634745ac768 0x5634745b5e88 0x5634745b4e18 0x5634745b40a8 0x5634745b6c48 0x563474599ae8 0x563474599138 0x563474598b38 0x563474595b58 0x563474597fb8 0x563474598558
|   |     | |-UnaryOperator 0x563474668860 <col:23, col:24> '<dependent type>' prefix '*' cannot overflow
|   |     | | `-CXXThisExpr 0x563474668850 <col:24> 'OverrideStream<Stream> *' this
|   |     | `-DeclRefExpr 0x563474668878 <col:30> 'T' lvalue ParmVar 0x563474667b68 'obj' 'T &&'
|   |     `-ReturnStmt 0x563474668940 <line:49:9, col:22>
|   |       `-ParenExpr 0x563474668920 <col:16, col:22> '<dependent type>'
|   |         `-UnaryOperator 0x563474668908 <col:17, col:18> '<dependent type>' prefix '*' cannot overflow
|   |           `-CXXThisExpr 0x5634746688f8 <col:18> 'OverrideStream<Stream> *' this
|   |-CXXMethodDecl 0x563474667ef0 <line:52:5, line:55:5> line:52:10 invalid write 'void (const char *, int)'
|   | |-ParmVarDecl 0x563474667dc8 <col:16, col:28> col:28 referenced pch 'const char *'
|   | |-ParmVarDecl 0x563474667e58 <col:33, col:40> col:40 invalid nSize 'int'
|   | `-CompoundStmt 0x563474668a18 <line:53:5, line:55:5>
|   |-CXXMethodDecl 0x5634746680e0 <line:57:5, line:60:5> line:57:10 invalid read 'void (char *, int)'
|   | |-ParmVarDecl 0x563474667fb8 <col:15, col:21> col:21 referenced pch 'char *'
|   | |-ParmVarDecl 0x563474668048 <col:26, col:33> col:33 invalid nSize 'int'
|   | `-CompoundStmt 0x563474668ad0 <line:58:5, line:60:5>
|   |-CXXMethodDecl 0x5634746681e0 <line:62:5, col:47> col:9 GetVersion 'int () const'
|   | `-CompoundStmt 0x563474668b30 <col:28, col:47>
|   |   `-ReturnStmt 0x563474668b20 <col:30, col:37>
|   |     `-MemberExpr 0x563474668af0 <col:37> 'const int' lvalue ->nVersion 0x563474666c18
|   |       `-CXXThisExpr 0x563474668ae0 <col:37> 'const OverrideStream<Stream> *' implicit this
|   |-CXXMethodDecl 0x5634746682a8 <line:63:5, col:41> col:9 GetType 'int () const'
|   | `-CompoundStmt 0x563474668b98 <col:25, col:41>
|   |   `-ReturnStmt 0x563474668b88 <col:27, col:34>
|   |     `-MemberExpr 0x563474668b58 <col:34> 'const int' lvalue ->nType 0x563474666bb0
|   |       `-CXXThisExpr 0x563474668b48 <col:34> 'const OverrideStream<Stream> *' implicit this
|   `-CXXMethodDecl 0x563474668380 <line:64:5, col:50> col:12 invalid size 'int () const'
|     `-CompoundStmt 0x563474668c68 <col:25, col:50>
|       `-ReturnStmt 0x563474668c58 <col:27, col:47>
|         `-CallExpr 0x563474668c38 <col:34, col:47> '<dependent type>'
|           `-CXXDependentScopeMemberExpr 0x563474668bf0 <col:34, col:42> '<dependent type>' lvalue ->size
|             `-MemberExpr 0x563474668bc0 <col:34> 'Stream *const' lvalue ->stream 0x563474666b48
|               `-CXXThisExpr 0x563474668bb0 <col:34> 'const OverrideStream<Stream> *' implicit this
|-CXXRecordDecl 0x563474668c80 <line:71:1, line:128:1> line:71:7 invalid class CVectorWriter definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563474668d98 <col:1, col:7> col:7 implicit referenced class CVectorWriter
| |-AccessSpecDecl 0x563474668e28 <line:73:2, col:8> col:2 public
| |-CXXConstructorDecl 0x563474668ff0 <line:82:5, line:86:5> line:82:5 CVectorWriter 'void (int, int)'
| | |-ParmVarDecl 0x563474668e68 <col:19, col:23> col:23 used nTypeIn 'int'
| | |-ParmVarDecl 0x563474668ee8 <col:32, col:36> col:36 used nVersionIn 'int'
| | |-CXXCtorInitializer Field 0x563474669e38 'nType' 'const int'
| | | `-ImplicitCastExpr 0x563474669fe8 <col:110> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x563474669fa8 <col:110> 'int' lvalue ParmVar 0x563474668e68 'nTypeIn' 'int'
| | |-CXXCtorInitializer Field 0x563474669ea0 'nVersion' 'const int'
| | | `-ImplicitCastExpr 0x56347466a068 <col:129> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x56347466a028 <col:129> 'int' lvalue ParmVar 0x563474668ee8 'nVersionIn' 'int'
| | `-CompoundStmt 0x56347466a0d8 <line:83:5, line:86:5>
| |-FunctionTemplateDecl 0x563474669330 <line:91:5, line:95:5> line:92:5 CVectorWriter
| | |-TemplateTypeParmDecl 0x5634746690a8 <line:91:15, col:27> col:27 referenced typename depth 0 index 0 ... Args
| | `-CXXConstructorDecl 0x563474669288 <line:92:5, line:95:5> line:92:5 invalid CVectorWriter 'void (int, int)'
| |   |-ParmVarDecl 0x563474669148 <col:19, col:23> col:23 referenced nTypeIn 'int'
| |   |-ParmVarDecl 0x5634746691c8 <col:32, col:36> col:36 referenced nVersionIn 'int'
| |   `-CompoundStmt 0x56347466a1e0 <line:93:5, line:95:5>
| |-CXXMethodDecl 0x5634746698a0 <line:96:5, line:107:5> line:96:10 invalid write 'void (const char *, int)'
| | |-ParmVarDecl 0x563474669778 <col:16, col:28> col:28 used pch 'const char *'
| | |-ParmVarDecl 0x563474669808 <col:33, col:40> col:40 invalid nSize 'int'
| | `-CompoundStmt 0x56347466a558 <line:97:5, line:107:5>
| |   |-DeclStmt 0x56347466a2e0 <line:99:9, col:67>
| |   | `-VarDecl 0x56347466a268 <col:9, col:16> col:16 invalid nOverwrite 'int'
| |   |-IfStmt 0x56347466a3f0 <line:100:9, line:102:9>
| |   | |-OpaqueValueExpr 0x56347466a3d8 <<invalid sloc>> 'bool'
| |   | `-CompoundStmt 0x56347466a3c8 <line:100:25, line:102:9>
| |   `-IfStmt 0x56347466a530 <line:103:9, line:105:9>
| |     |-OpaqueValueExpr 0x56347466a518 <<invalid sloc>> 'bool'
| |     `-CompoundStmt 0x56347466a508 <line:103:33, line:105:9>
| |-FunctionTemplateDecl 0x563474669bd8 <line:108:5, line:114:5> line:109:20 operator<<
| | |-TemplateTypeParmDecl 0x563474669950 <line:108:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x563474669b38 <line:109:5, line:114:5> line:109:20 operator<< 'CVectorWriter &(const T &)'
| |   |-ParmVarDecl 0x563474669a18 <col:31, col:40> col:40 referenced obj 'const T &'
| |   `-CompoundStmt 0x56347466a6f8 <line:110:5, line:114:5>
| |     |-CallExpr 0x56347466a670 <line:112:9, col:31> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x56347466a5a0 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Serialize' 0x56347458f418 0x5634745ac278 0x5634745995a8 0x563474593318 0x563474592c88 0x5634745925a8 0x563474591f88 0x5634745919a8 0x5634745915b8
| |     | |-UnaryOperator 0x56347466a638 <col:21, col:22> 'CVectorWriter' lvalue prefix '*' cannot overflow
| |     | | `-CXXThisExpr 0x56347466a628 <col:22> 'CVectorWriter *' this
| |     | `-DeclRefExpr 0x56347466a650 <col:28> 'const T' lvalue ParmVar 0x563474669a18 'obj' 'const T &'
| |     `-ReturnStmt 0x56347466a6e8 <line:113:9, col:22>
| |       `-ParenExpr 0x56347466a6c8 <col:16, col:22> 'CVectorWriter' lvalue
| |         `-UnaryOperator 0x56347466a6b0 <col:17, col:18> 'CVectorWriter' lvalue prefix '*' cannot overflow
| |           `-CXXThisExpr 0x56347466a6a0 <col:18> 'CVectorWriter *' this
| |-CXXMethodDecl 0x563474669c90 <line:115:5, line:118:5> line:115:9 GetVersion 'int () const'
| | `-CompoundStmt 0x56347466a780 <line:116:5, line:118:5>
| |   `-ReturnStmt 0x56347466a770 <line:117:9, col:16>
| |     `-ImplicitCastExpr 0x56347466a758 <col:16> 'int' <LValueToRValue>
| |       `-MemberExpr 0x56347466a728 <col:16> 'const int' lvalue ->nVersion 0x563474669ea0
| |         `-CXXThisExpr 0x56347466a718 <col:16> 'const CVectorWriter *' implicit this
| |-CXXMethodDecl 0x563474669d58 <line:119:5, line:122:5> line:119:9 GetType 'int () const'
| | `-CompoundStmt 0x56347466a800 <line:120:5, line:122:5>
| |   `-ReturnStmt 0x56347466a7f0 <line:121:9, col:16>
| |     `-ImplicitCastExpr 0x56347466a7d8 <col:16> 'int' <LValueToRValue>
| |       `-MemberExpr 0x56347466a7a8 <col:16> 'const int' lvalue ->nType 0x563474669e38
| |         `-CXXThisExpr 0x56347466a798 <col:16> 'const CVectorWriter *' implicit this
| |-AccessSpecDecl 0x563474669df8 <line:123:1, col:8> col:1 private
| |-FieldDecl 0x563474669e38 <line:124:5, col:15> col:15 referenced nType 'const int'
| |-FieldDecl 0x563474669ea0 <line:125:5, col:15> col:15 referenced nVersion 'const int'
| `-FieldDecl 0x563474669f40 <line:127:5, col:12> col:12 invalid nPos 'int'
|-CXXRecordDecl 0x56347466a848 <line:132:1, line:196:1> line:132:7 invalid class VectorReader definition
| |-DefinitionData standard_layout trivially_copyable trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476e690 <line:130:4, col:67>
| | `-ParagraphComment 0x56347476e660 <col:4, col:67>
| |   `-TextComment 0x56347476e630 <col:4, col:67> Text=" Minimal stream for reading from an existing vector by reference"
| |-CXXRecordDecl 0x56347466a968 <line:132:1, col:7> col:7 implicit referenced class VectorReader
| |-AccessSpecDecl 0x56347466a9f8 <line:134:1, col:8> col:1 private
| |-FieldDecl 0x56347466aa38 <line:135:5, col:15> col:15 referenced m_type 'const int'
| |-FieldDecl 0x56347466aaa0 <line:136:5, col:15> col:15 referenced m_version 'const int'
| |-FieldDecl 0x56347466ab40 <line:138:5, col:12> col:12 invalid m_pos 'int'
| |-AccessSpecDecl 0x56347466abb8 <line:140:1, col:7> col:1 public
| |-CXXConstructorDecl 0x56347466ae88 <line:148:5, line:154:5> line:148:5 invalid VectorReader 'void (int, int, const int)'
| | |-ParmVarDecl 0x56347466abf8 <col:18, col:22> col:22 used type 'int'
| | |-ParmVarDecl 0x56347466ac78 <col:28, col:32> col:32 used version 'int'
| | |-ParmVarDecl 0x56347466ad20 <col:41, <invalid sloc>> col:73 invalid 'const int'
| | |-CXXCtorInitializer Field 0x56347466aa38 'm_type' 'const int'
| | | `-ImplicitCastExpr 0x56347466de10 <line:149:18> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x56347466ddd0 <col:18> 'int' lvalue ParmVar 0x56347466abf8 'type' 'int'
| | |-CXXCtorInitializer Field 0x56347466aaa0 'm_version' 'const int'
| | | `-ImplicitCastExpr 0x56347466de90 <col:35> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x56347466de50 <col:35> 'int' lvalue ParmVar 0x56347466ac78 'version' 'int'
| | |-CompoundStmt 0x56347466dff8 <line:150:5, line:154:5>
| | | `-IfStmt 0x56347466dfe0 <line:151:9, line:153:9>
| | |   |-OpaqueValueExpr 0x56347466dfc8 <<invalid sloc>> 'bool'
| | |   `-CompoundStmt 0x56347466dfb8 <line:151:36, line:153:9>
| | `-FullComment 0x56347476eaa0 <line:143:7, line:146:80>
| |   |-ParagraphComment 0x56347476e730 <line:143:7>
| |   | `-TextComment 0x56347476e700 <col:7> Text=" "
| |   |-ParamCommandComment 0x56347476e750 <col:8, line:144:7> [in] explicitly Param="type" ParamIndex=0
| |   | `-ParagraphComment 0x56347476e800 <line:143:24, line:144:7>
| |   |   |-TextComment 0x56347476e7b0 <line:143:24, col:42> Text=" Serialization Type"
| |   |   `-TextComment 0x56347476e7d0 <line:144:7> Text=" "
| |   |-ParamCommandComment 0x56347476e820 <col:8, line:145:7> [in] explicitly Param="version" ParamIndex=1
| |   | `-ParagraphComment 0x56347476e8d0 <line:144:27, line:145:7>
| |   |   |-TextComment 0x56347476e880 <line:144:27, col:70> Text=" Serialization Version (including any flags)"
| |   |   `-TextComment 0x56347476e8a0 <line:145:7> Text=" "
| |   |-ParamCommandComment 0x56347476e8f0 <col:8, line:146:7> [in] explicitly Param="data"
| |   | `-ParagraphComment 0x56347476e9a0 <line:145:24, line:146:7>
| |   |   |-TextComment 0x56347476e950 <line:145:24, col:66> Text=" Referenced byte vector to overwrite/append"
| |   |   `-TextComment 0x56347476e970 <line:146:7> Text=" "
| |   `-ParamCommandComment 0x56347476e9c0 <col:8, col:80> [in] explicitly Param="pos"
| |     `-ParagraphComment 0x56347476ea50 <col:23, col:80>
| |       `-TextComment 0x56347476ea20 <col:23, col:80> Text=" Starting position. Vector index where reads should start."
| |-FunctionTemplateDecl 0x56347466b288 <line:160:5, line:166:5> line:161:5 invalid VectorReader
| | |-TemplateTypeParmDecl 0x56347466af78 <line:160:15, col:27> col:27 referenced typename depth 0 index 0 ... Args
| | |-CXXConstructorDecl 0x56347466b1e0 <line:161:5, line:166:5> line:161:5 invalid VectorReader 'void (int, int, const int)'
| | | |-ParmVarDecl 0x56347466b018 <col:18, col:22> col:22 referenced type 'int'
| | | |-ParmVarDecl 0x56347466b098 <col:28, col:32> col:32 referenced version 'int'
| | | |-ParmVarDecl 0x56347466b140 <col:41, <invalid sloc>> col:73 invalid 'const int'
| | | |-CompoundStmt 0x56347466e108 <line:164:5, line:166:5>
| | | `-FullComment 0x56347476ee60 <line:157:7, line:158:72>
| | |   |-ParagraphComment 0x56347476ed80 <line:157:7, line:158:7>
| | |   | |-TextComment 0x56347476ed30 <line:157:7, col:35> Text=" (other params same as above)"
| | |   | `-TextComment 0x56347476ed50 <line:158:7> Text=" "
| | |   `-ParamCommandComment 0x56347476eda0 <col:8, col:72> [in] explicitly Param="args"
| | |     `-ParagraphComment 0x56347476ee30 <col:24, col:72>
| | |       `-TextComment 0x56347476ee00 <col:24, col:72> Text="  A list of items to deserialize starting at pos."
| | `-FullComment 0x56347476ecc0 <line:157:7, line:158:72>
| |   |-ParagraphComment 0x56347476ebe0 <line:157:7, line:158:7>
| |   | |-TextComment 0x56347476eb90 <line:157:7, col:35> Text=" (other params same as above)"
| |   | `-TextComment 0x56347476ebb0 <line:158:7> Text=" "
| |   `-ParamCommandComment 0x56347476ec00 <col:8, col:72> [in] explicitly Param="args"
| |     `-ParagraphComment 0x56347476ec90 <col:24, col:72>
| |       `-TextComment 0x56347476ec60 <col:24, col:72> Text="  A list of items to deserialize starting at pos."
| |-FunctionTemplateDecl 0x56347466b578 <line:168:5, line:174:5> line:169:19 operator>>
| | |-TemplateTypeParmDecl 0x56347466b2f8 <line:168:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x56347466b4d8 <line:169:5, line:174:5> line:169:19 operator>> 'VectorReader &(T &)'
| |   |-ParmVarDecl 0x56347466b3b8 <col:30, col:33> col:33 referenced obj 'T &'
| |   `-CompoundStmt 0x56347466e2a8 <line:170:5, line:174:5>
| |     |-CallExpr 0x56347466e220 <line:172:9, col:33> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x56347466e138 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Unserialize' 0x5634745937b8 0x5634745ac768 0x5634745b5e88 0x5634745b4e18 0x5634745b40a8 0x5634745b6c48 0x563474599ae8 0x563474599138 0x563474598b38 0x563474595b58 0x563474597fb8 0x563474598558
| |     | |-UnaryOperator 0x56347466e1e8 <col:23, col:24> 'VectorReader' lvalue prefix '*' cannot overflow
| |     | | `-CXXThisExpr 0x56347466e1d8 <col:24> 'VectorReader *' this
| |     | `-DeclRefExpr 0x56347466e200 <col:30> 'T' lvalue ParmVar 0x56347466b3b8 'obj' 'T &'
| |     `-ReturnStmt 0x56347466e298 <line:173:9, col:22>
| |       `-ParenExpr 0x56347466e278 <col:16, col:22> 'VectorReader' lvalue
| |         `-UnaryOperator 0x56347466e260 <col:17, col:18> 'VectorReader' lvalue prefix '*' cannot overflow
| |           `-CXXThisExpr 0x56347466e250 <col:18> 'VectorReader *' this
| |-CXXMethodDecl 0x56347466b630 <line:176:5, col:48> col:9 GetVersion 'int () const'
| | `-CompoundStmt 0x56347466e330 <col:28, col:48>
| |   `-ReturnStmt 0x56347466e320 <col:30, col:37>
| |     `-ImplicitCastExpr 0x56347466e308 <col:37> 'int' <LValueToRValue>
| |       `-MemberExpr 0x56347466e2d8 <col:37> 'const int' lvalue ->m_version 0x56347466aaa0
| |         `-CXXThisExpr 0x56347466e2c8 <col:37> 'const VectorReader *' implicit this
| |-CXXMethodDecl 0x56347466d990 <line:177:5, col:42> col:9 GetType 'int () const'
| | `-CompoundStmt 0x56347466e3b0 <col:25, col:42>
| |   `-ReturnStmt 0x56347466e3a0 <col:27, col:34>
| |     `-ImplicitCastExpr 0x56347466e388 <col:34> 'int' <LValueToRValue>
| |       `-MemberExpr 0x56347466e358 <col:34> 'const int' lvalue ->m_type 0x56347466aa38
| |         `-CXXThisExpr 0x56347466e348 <col:34> 'const VectorReader *' implicit this
| |-CXXMethodDecl 0x56347466da68 <line:179:5, col:57> col:12 invalid size 'int () const'
| | `-CompoundStmt 0x56347466e3d8 <col:25, col:57>
| |-CXXMethodDecl 0x56347466db28 <line:180:5, col:57> col:10 empty 'bool () const'
| | `-CompoundStmt 0x56347466e3f8 <col:24, col:57>
| `-CXXMethodDecl 0x56347466dd08 <line:182:5, line:195:5> line:182:10 invalid read 'void (char *, int)'
|   |-ParmVarDecl 0x56347466dbe0 <col:15, col:21> col:21 used dst 'char *'
|   |-ParmVarDecl 0x56347466dc70 <col:26, col:33> col:33 invalid n 'int'
|   `-CompoundStmt 0x56347466e638 <line:183:5, line:195:5>
|     |-IfStmt 0x56347466e468 <line:184:9, line:186:9>
|     | |-OpaqueValueExpr 0x56347466e450 <<invalid sloc>> 'bool'
|     | `-CompoundStmt 0x56347466e438 <line:184:21, line:186:9>
|     |   `-ReturnStmt 0x56347466e428 <line:185:13>
|     |-DeclStmt 0x56347466e520 <line:189:9, col:36>
|     | `-VarDecl 0x56347466e4a8 <col:9, col:16> col:16 invalid pos_next 'int'
|     `-IfStmt 0x56347466e5a0 <line:190:9, line:192:9>
|       |-OpaqueValueExpr 0x56347466e588 <<invalid sloc>> 'bool'
|       `-CompoundStmt 0x56347466e578 <line:190:39, line:192:9>
|-CXXRecordDecl 0x56347466e688 prev 0x5634745bd670 <line:203:1, line:493:1> line:203:7 referenced class CDataStream definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347476f0a0 <line:198:4, line:201:83>
| | |-ParagraphComment 0x56347476ef80 <line:198:4, col:68>
| | | `-TextComment 0x56347476ef50 <col:4, col:68> Text=" Double ended buffer combining vector and stream-like interfaces."
| | `-ParagraphComment 0x56347476f070 <line:200:3, line:201:83>
| |   |-TextComment 0x56347476efa0 <line:200:3, col:10> Text=" >> and "
| |   |-TextComment 0x56347476efc0 <col:11> Text="<"
| |   |-TextComment 0x56347476efe0 <col:12> Text="<"
| |   |-TextComment 0x56347476f000 <col:13, col:85> Text=" read and write unformatted data using the above serialization templates."
| |   `-TextComment 0x56347476f020 <line:201:3, col:83> Text=" Fills with data in linear time; some stringstream implementations take N^2 time."
| |-CXXRecordDecl 0x56347466e780 <line:203:1, col:7> col:7 implicit referenced class CDataStream
| |-AccessSpecDecl 0x56347466e810 <line:205:1, col:10> col:1 protected
| |-TypedefDecl 0x56347466e860 <line:206:5, col:28> col:28 referenced invalid vector_type 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-FieldDecl 0x56347466e8f0 <line:207:5, col:17> col:17 referenced vch 'CDataStream::vector_type':'int'
| |-FieldDecl 0x56347466e958 <line:208:5, col:18> col:18 referenced nReadPos 'unsigned int'
| |-FieldDecl 0x56347466e9c0 <line:210:5, col:9> col:9 referenced nType 'int'
| |-FieldDecl 0x56347466ea28 <line:211:5, col:9> col:9 referenced nVersion 'int'
| |-AccessSpecDecl 0x56347466ea78 <line:212:1, col:7> col:1 public
| |-TypedefDecl 0x56347466eac8 <line:214:5, col:43> col:43 invalid allocator_type 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-TypedefDecl 0x56347466eb48 <line:215:5, col:43> col:43 referenced invalid size_type 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-TypedefDecl 0x56347466ebc8 <line:216:5, col:43> col:43 invalid difference_type 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-TypedefDecl 0x56347466ec48 <line:217:5, col:43> col:43 referenced invalid reference 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-TypedefDecl 0x56347466ecc8 <line:218:5, col:43> col:43 referenced invalid const_reference 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-TypedefDecl 0x56347466ed48 <line:219:5, col:43> col:43 referenced invalid value_type 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-TypedefDecl 0x56347466edc8 <line:220:5, col:43> col:43 referenced invalid iterator 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-TypedefDecl 0x56347466ee48 <line:221:5, col:43> col:43 referenced invalid const_iterator 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-TypedefDecl 0x56347466eec8 <line:222:5, col:43> col:43 invalid reverse_iterator 'int'
| | `-BuiltinType 0x5634744cb780 'int'
| |-CXXConstructorDecl 0x56347466f090 <line:224:5, line:227:5> line:224:14 used CDataStream 'void (int, int)'
| | |-ParmVarDecl 0x56347466ef38 <col:26, col:30> col:30 used nTypeIn 'int'
| | |-ParmVarDecl 0x56347466efb8 <col:39, col:43> col:43 used nVersionIn 'int'
| | `-CompoundStmt 0x56347467c4a0 <line:225:5, line:227:5>
| |   `-CXXMemberCallExpr 0x56347467c440 <line:226:9, col:33> 'void'
| |     |-MemberExpr 0x56347467c3d0 <col:9> '<bound member function type>' ->Init 0x563474670450
| |     | `-CXXThisExpr 0x56347467c3c0 <col:9> 'CDataStream *' implicit this
| |     |-ImplicitCastExpr 0x56347467c470 <col:14> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x56347467c400 <col:14> 'int' lvalue ParmVar 0x56347466ef38 'nTypeIn' 'int'
| |     `-ImplicitCastExpr 0x56347467c488 <col:23> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x56347467c420 <col:23> 'int' lvalue ParmVar 0x56347466efb8 'nVersionIn' 'int'
| |-CXXConstructorDecl 0x56347466f438 <line:229:5, line:232:5> line:229:5 CDataStream 'void (CDataStream::const_iterator, CDataStream::const_iterator, int, int)'
| | |-ParmVarDecl 0x56347466f180 <col:17, col:32> col:32 used pbegin 'CDataStream::const_iterator':'int'
| | |-ParmVarDecl 0x56347466f1f8 <col:40, col:55> col:55 used pend 'CDataStream::const_iterator':'int'
| | |-ParmVarDecl 0x56347466f278 <col:61, col:65> col:65 used nTypeIn 'int'
| | |-ParmVarDecl 0x56347466f2f8 <col:74, col:78> col:78 used nVersionIn 'int'
| | `-CompoundStmt 0x56347467c600 <line:230:5, line:232:5>
| |   `-CXXMemberCallExpr 0x56347467c5a0 <line:231:9, col:33> 'void'
| |     |-MemberExpr 0x56347467c530 <col:9> '<bound member function type>' ->Init 0x563474670450
| |     | `-CXXThisExpr 0x56347467c520 <col:9> 'CDataStream *' implicit this
| |     |-ImplicitCastExpr 0x56347467c5d0 <col:14> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x56347467c560 <col:14> 'int' lvalue ParmVar 0x56347466f278 'nTypeIn' 'int'
| |     `-ImplicitCastExpr 0x56347467c5e8 <col:23> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x56347467c580 <col:23> 'int' lvalue ParmVar 0x56347466f2f8 'nVersionIn' 'int'
| |-CXXConstructorDecl 0x56347466f788 <line:234:5, line:237:5> line:234:5 CDataStream 'void (const char *, const char *, int, int)'
| | |-ParmVarDecl 0x56347466f518 <col:17, col:29> col:29 used pbegin 'const char *'
| | |-ParmVarDecl 0x56347466f598 <col:37, col:49> col:49 used pend 'const char *'
| | |-ParmVarDecl 0x56347466f618 <col:55, col:59> col:59 used nTypeIn 'int'
| | |-ParmVarDecl 0x56347466f698 <col:68, col:72> col:72 used nVersionIn 'int'
| | `-CompoundStmt 0x56347467c760 <line:235:5, line:237:5>
| |   `-CXXMemberCallExpr 0x56347467c700 <line:236:9, col:33> 'void'
| |     |-MemberExpr 0x56347467c690 <col:9> '<bound member function type>' ->Init 0x563474670450
| |     | `-CXXThisExpr 0x56347467c680 <col:9> 'CDataStream *' implicit this
| |     |-ImplicitCastExpr 0x56347467c730 <col:14> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x56347467c6c0 <col:14> 'int' lvalue ParmVar 0x56347466f618 'nTypeIn' 'int'
| |     `-ImplicitCastExpr 0x56347467c748 <col:23> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x56347467c6e0 <col:23> 'int' lvalue ParmVar 0x56347466f698 'nVersionIn' 'int'
| |-CXXConstructorDecl 0x56347466fac8 <line:239:5, line:242:5> line:239:5 CDataStream 'void (const CDataStream::vector_type &, int, int)'
| | |-ParmVarDecl 0x56347466f888 <col:17, col:36> col:36 used vchIn 'const CDataStream::vector_type &'
| | |-ParmVarDecl 0x56347466f908 <col:43, col:47> col:47 used nTypeIn 'int'
| | |-ParmVarDecl 0x56347466f9a0 <col:56, col:60> col:60 used nVersionIn 'int'
| | `-CompoundStmt 0x56347467c898 <line:240:5, line:242:5>
| |   `-CXXMemberCallExpr 0x56347467c838 <line:241:9, col:33> 'void'
| |     |-MemberExpr 0x56347467c7c8 <col:9> '<bound member function type>' ->Init 0x563474670450
| |     | `-CXXThisExpr 0x56347467c7b8 <col:9> 'CDataStream *' implicit this
| |     |-ImplicitCastExpr 0x56347467c868 <col:14> 'int' <LValueToRValue>
| |     | `-DeclRefExpr 0x56347467c7f8 <col:14> 'int' lvalue ParmVar 0x56347466f908 'nTypeIn' 'int'
| |     `-ImplicitCastExpr 0x56347467c880 <col:23> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x56347467c818 <col:23> 'int' lvalue ParmVar 0x56347466f9a0 'nVersionIn' 'int'
| |-CXXConstructorDecl 0x56347466fc50 <line:244:5, line:247:5> line:244:5 invalid CDataStream 'void (const int)'
| | |-ParmVarDecl 0x56347466fbc0 <col:17, <invalid sloc>> col:40 invalid 'const int'
| | `-CompoundStmt 0x56347467c8f0 <line:245:5, line:247:5>
| |-CXXConstructorDecl 0x56347466fdd0 <line:249:5, line:252:5> line:249:5 invalid CDataStream 'void (const int)'
| | |-ParmVarDecl 0x56347466fd40 <col:17, <invalid sloc>> col:49 invalid 'const int'
| | `-CompoundStmt 0x56347467c940 <line:250:5, line:252:5>
| |-FunctionTemplateDecl 0x5634746702b0 <line:254:5, line:259:5> line:255:5 CDataStream
| | |-TemplateTypeParmDecl 0x56347466fe80 <line:254:15, col:27> col:27 referenced typename depth 0 index 0 ... Args
| | `-CXXConstructorDecl 0x563474670208 <line:255:5, line:259:5> line:255:5 CDataStream 'void (int, int, Args &&...)'
| |   |-ParmVarDecl 0x56347466ff28 <col:17, col:21> col:21 referenced nTypeIn 'int'
| |   |-ParmVarDecl 0x56347466ffa8 <col:30, col:34> col:34 referenced nVersionIn 'int'
| |   |-ParmVarDecl 0x5634746700e0 <col:46, col:56> col:56 referenced args 'Args &&...' pack
| |   `-CompoundStmt 0x56347467cb08 <line:256:5, line:259:5>
| |     `-CXXMemberCallExpr 0x56347467c9d0 <line:257:9, col:33> 'void'
| |       |-MemberExpr 0x56347467c960 <col:9> '<bound member function type>' ->Init 0x563474670450
| |       | `-CXXThisExpr 0x56347467c950 <col:9> 'CDataStream *' implicit this
| |       |-ImplicitCastExpr 0x56347467ca00 <col:14> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x56347467c990 <col:14> 'int' lvalue ParmVar 0x56347466ff28 'nTypeIn' 'int'
| |       `-ImplicitCastExpr 0x56347467ca18 <col:23> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x56347467c9b0 <col:23> 'int' lvalue ParmVar 0x56347466ffa8 'nVersionIn' 'int'
| |-CXXMethodDecl 0x563474670450 <line:261:5, line:266:5> line:261:10 used Init 'void (int, int)'
| | |-ParmVarDecl 0x563474670338 <col:15, col:19> col:19 used nTypeIn 'int'
| | |-ParmVarDecl 0x5634746703b8 <col:28, col:32> col:32 used nVersionIn 'int'
| | `-CompoundStmt 0x56347467cce8 <line:262:5, line:266:5>
| |   |-BinaryOperator 0x56347467cb98 <line:263:9, col:20> 'unsigned int' lvalue '='
| |   | |-MemberExpr 0x56347467cb30 <col:9> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |   | | `-CXXThisExpr 0x56347467cb20 <col:9> 'CDataStream *' implicit this
| |   | `-ImplicitCastExpr 0x56347467cb80 <col:20> 'unsigned int' <IntegralCast>
| |   |   `-IntegerLiteral 0x56347467cb60 <col:20> 'int' 0
| |   |-BinaryOperator 0x56347467cc30 <line:264:9, col:17> 'int' lvalue '='
| |   | |-MemberExpr 0x56347467cbc8 <col:9> 'int' lvalue ->nType 0x56347466e9c0
| |   | | `-CXXThisExpr 0x56347467cbb8 <col:9> 'CDataStream *' implicit this
| |   | `-ImplicitCastExpr 0x56347467cc18 <col:17> 'int' <LValueToRValue>
| |   |   `-DeclRefExpr 0x56347467cbf8 <col:17> 'int' lvalue ParmVar 0x563474670338 'nTypeIn' 'int'
| |   `-BinaryOperator 0x56347467ccc8 <line:265:9, col:20> 'int' lvalue '='
| |     |-MemberExpr 0x56347467cc60 <col:9> 'int' lvalue ->nVersion 0x56347466ea28
| |     | `-CXXThisExpr 0x56347467cc50 <col:9> 'CDataStream *' implicit this
| |     `-ImplicitCastExpr 0x56347467ccb0 <col:20> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x56347467cc90 <col:20> 'int' lvalue ParmVar 0x5634746703b8 'nVersionIn' 'int'
| |-CXXMethodDecl 0x5634746705f8 <line:268:5, line:272:5> line:268:18 used operator+= 'CDataStream &(const CDataStream &)'
| | |-ParmVarDecl 0x563474670538 <col:29, col:48> col:48 used b 'const CDataStream &'
| | `-CompoundStmt 0x56347467cf68 <line:269:5, line:272:5>
| |   `-ReturnStmt 0x56347467cf58 <line:271:9, col:17>
| |     `-UnaryOperator 0x56347467cf40 <col:16, col:17> 'CDataStream' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56347467cf30 <col:17> 'CDataStream *' this
| |-FriendDecl 0x5634746708b8 <line:274:5, line:279:5> line:274:24
| | `-FunctionDecl 0x5634746707f8 parent 0x5634744cb688 <col:5, line:279:5> line:274:24 operator+ 'CDataStream (const CDataStream &, const CDataStream &)'
| |   |-ParmVarDecl 0x5634746706b0 <col:34, col:53> col:53 used a 'const CDataStream &'
| |   |-ParmVarDecl 0x563474670728 <col:56, col:75> col:75 used b 'const CDataStream &'
| |   `-CompoundStmt 0x5634746804b0 <line:275:5, line:279:5>
| |     |-DeclStmt 0x56347467d680 <line:276:9, col:28>
| |     | `-VarDecl 0x56347467cf90 <col:9, col:27> col:21 used ret 'CDataStream' nrvo cinit
| |     |   `-CXXConstructExpr 0x56347467d650 <col:27> 'CDataStream' 'void (const CDataStream &) noexcept'
| |     |     `-DeclRefExpr 0x56347467cff8 <col:27> 'const CDataStream' lvalue ParmVar 0x5634746706b0 'a' 'const CDataStream &'
| |     |-CXXOperatorCallExpr 0x56347467d740 <line:277:9, col:16> 'CDataStream' lvalue
| |     | |-ImplicitCastExpr 0x56347467d728 <col:13> 'CDataStream &(*)(const CDataStream &)' <FunctionToPointerDecay>
| |     | | `-DeclRefExpr 0x56347467d6d8 <col:13> 'CDataStream &(const CDataStream &)' lvalue CXXMethod 0x5634746705f8 'operator+=' 'CDataStream &(const CDataStream &)'
| |     | |-DeclRefExpr 0x56347467d698 <col:9> 'CDataStream' lvalue Var 0x56347467cf90 'ret' 'CDataStream'
| |     | `-DeclRefExpr 0x56347467d6b8 <col:16> 'const CDataStream' lvalue ParmVar 0x563474670728 'b' 'const CDataStream &'
| |     `-ReturnStmt 0x563474680498 <line:278:9, col:20>
| |       `-CXXConstructExpr 0x563474680468 <col:16, col:20> 'CDataStream' 'void (CDataStream &&) noexcept' elidable
| |         `-ImplicitCastExpr 0x56347467d7b8 <col:16, col:20> 'CDataStream' xvalue <NoOp>
| |           `-ParenExpr 0x56347467d798 <col:16, col:20> 'CDataStream' lvalue
| |             `-DeclRefExpr 0x56347467d778 <col:17> 'CDataStream' lvalue Var 0x56347467cf90 'ret' 'CDataStream'
| |-CXXMethodDecl 0x563474670960 <line:281:5, line:284:5> line:281:17 invalid str 'int () const'
| | `-CompoundStmt 0x563474680678 <line:282:5, line:284:5>
| |-CXXMethodDecl 0x563474670a48 <line:290:5, col:87> col:20 used begin 'CDataStream::const_iterator () const'
| | `-CompoundStmt 0x563474680708 <col:54, col:87>
| |-CXXMethodDecl 0x563474670b58 <line:291:5, col:87> col:14 used begin 'CDataStream::iterator ()'
| | `-CompoundStmt 0x563474680798 <col:54, col:87>
| |-CXXMethodDecl 0x563474670c18 <line:292:5, col:74> col:20 used end 'CDataStream::const_iterator () const'
| | `-CompoundStmt 0x5634746807e8 <col:54, col:74>
| |-CXXMethodDecl 0x563474670cd8 <line:293:5, col:74> col:14 used end 'CDataStream::iterator ()'
| | `-CompoundStmt 0x563474680838 <col:54, col:74>
| |-CXXMethodDecl 0x563474670de8 <line:294:5, col:86> col:15 used size 'CDataStream::size_type () const'
| | `-CompoundStmt 0x5634746808c8 <col:54, col:86>
| |-CXXMethodDecl 0x563474670ea8 <line:295:5, col:87> col:10 empty 'bool () const'
| | `-CompoundStmt 0x563474680958 <col:54, col:87>
| |-CXXMethodDecl 0x5634746710c8 <line:296:5, col:85> col:10 used resize 'void (CDataStream::size_type, CDataStream::value_type)'
| | |-ParmVarDecl 0x563474670f58 <col:17, col:27> col:27 used n 'CDataStream::size_type':'int'
| | |-ParmVarDecl 0x563474670ff0 <col:30, col:43> col:41 used c 'CDataStream::value_type':'int' cinit
| | | `-IntegerLiteral 0x56347467c378 <col:43> 'int' 0
| | `-CompoundStmt 0x563474680a90 <col:54, col:85>
| |-CXXMethodDecl 0x563474671248 <line:297:5, col:83> col:10 reserve 'void (CDataStream::size_type)'
| | |-ParmVarDecl 0x563474671188 <col:18, col:28> col:28 used n 'CDataStream::size_type':'int'
| | `-CompoundStmt 0x563474680ba8 <col:54, col:83>
| |-CXXMethodDecl 0x5634746713e8 <line:298:5, col:84> col:21 operator[] 'CDataStream::const_reference (CDataStream::size_type) const'
| | |-ParmVarDecl 0x563474671320 <col:32, col:42> col:42 used pos 'CDataStream::size_type':'int'
| | `-CompoundStmt 0x563474680cd8 <col:54, col:84>
| |-CXXMethodDecl 0x563474671588 <line:299:5, col:84> col:15 used operator[] 'CDataStream::reference (CDataStream::size_type)'
| | |-ParmVarDecl 0x5634746714c0 <col:26, col:36> col:36 used pos 'CDataStream::size_type':'int'
| | `-CompoundStmt 0x563474680e08 <col:54, col:84>
| |-CXXMethodDecl 0x563474671650 <line:300:5, col:83> col:10 used clear 'void ()'
| | `-CompoundStmt 0x563474680ef0 <col:54, col:83>
| |   `-BinaryOperator 0x563474680ed0 <col:69, col:80> 'unsigned int' lvalue '='
| |     |-MemberExpr 0x563474680e68 <col:69> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |     | `-CXXThisExpr 0x563474680e58 <col:69> 'CDataStream *' implicit this
| |     `-ImplicitCastExpr 0x563474680eb8 <col:80> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x563474680e98 <col:80> 'int' 0
| |-CXXMethodDecl 0x563474671888 <line:301:5, col:83> col:14 insert 'CDataStream::iterator (CDataStream::iterator, const char)'
| | |-ParmVarDecl 0x563474671700 <col:21, col:30> col:30 used it 'CDataStream::iterator':'int'
| | |-ParmVarDecl 0x563474671778 <col:34, col:52> col:45 used x 'const char' cinit
| | | `-CXXScalarValueInitExpr 0x56347467c3a8 <col:47, col:52> 'char'
| | `-CompoundStmt 0x563474680f88 <col:55, col:83>
| |-CXXMethodDecl 0x563474673468 <line:302:5, col:81> col:10 insert 'void (CDataStream::iterator, CDataStream::size_type, const char)'
| | |-ParmVarDecl 0x563474673250 <col:17, col:26> col:26 used it 'CDataStream::iterator':'int'
| | |-ParmVarDecl 0x5634746732c8 <col:30, col:40> col:40 used n 'CDataStream::size_type':'int'
| | |-ParmVarDecl 0x563474673340 <col:43, col:54> col:54 used x 'const char'
| | `-CompoundStmt 0x563474681038 <col:57, col:81>
| |-CXXMethodDecl 0x5634746735c8 <line:303:5, col:86> col:17 data 'CDataStream::value_type *()'
| | `-CompoundStmt 0x5634746810c8 <col:54, col:86>
| |-CXXMethodDecl 0x563474673718 <line:304:5, col:86> col:23 data 'const CDataStream::value_type *() const'
| | `-CompoundStmt 0x563474681158 <col:54, col:86>
| |-CXXMethodDecl 0x5634746739e8 <line:306:5, line:318:5> line:306:10 invalid insert 'void (CDataStream::iterator, int, int)'
| | |-ParmVarDecl 0x5634746737c8 <col:17, col:26> col:26 used it 'CDataStream::iterator':'int'
| | |-ParmVarDecl 0x563474673868 <col:30, col:64> col:64 invalid first 'int'
| | |-ParmVarDecl 0x563474673908 <col:71, col:105> col:105 invalid last 'int'
| | `-CompoundStmt 0x5634746814f0 <line:307:5, line:318:5>
| |   |-IfStmt 0x563474681190 <line:308:9, col:28>
| |   | |-OpaqueValueExpr 0x563474681178 <<invalid sloc>> 'bool'
| |   | `-ReturnStmt 0x563474681168 <col:28>
| |   `-IfStmt 0x5634746814c8 <line:310:9, line:317:13> has_else
| |     |-OpaqueValueExpr 0x5634746814b0 <<invalid sloc>> 'bool'
| |     |-CompoundStmt 0x563474681438 <line:311:9, line:315:9>
| |     `-NullStmt 0x5634746814a8 <line:317:13>
| |-CXXMethodDecl 0x563474673cd8 <line:320:5, line:332:5> line:320:10 insert 'void (CDataStream::iterator, const char *, const char *)'
| | |-ParmVarDecl 0x563474673ab0 <col:17, col:26> col:26 used it 'CDataStream::iterator':'int'
| | |-ParmVarDecl 0x563474673b30 <col:30, col:42> col:42 used first 'const char *'
| | |-ParmVarDecl 0x563474673bb0 <col:49, col:61> col:61 used last 'const char *'
| | `-CompoundStmt 0x563474681d60 <line:321:5, line:332:5>
| |   |-IfStmt 0x5634746815b0 <line:322:9, col:28>
| |   | |-BinaryOperator 0x563474681580 <col:13, col:21> 'bool' '=='
| |   | | |-ImplicitCastExpr 0x563474681550 <col:13> 'const char *' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x563474681510 <col:13> 'const char *' lvalue ParmVar 0x563474673bb0 'last' 'const char *'
| |   | | `-ImplicitCastExpr 0x563474681568 <col:21> 'const char *' <LValueToRValue>
| |   | |   `-DeclRefExpr 0x563474681530 <col:21> 'const char *' lvalue ParmVar 0x563474673b30 'first' 'const char *'
| |   | `-ReturnStmt 0x5634746815a0 <col:28>
| |   `-IfStmt 0x563474681d38 <line:324:9, line:331:13> has_else
| |     |-OpaqueValueExpr 0x563474681d20 <<invalid sloc>> 'bool'
| |     |-CompoundStmt 0x563474681c60 <line:325:9, line:329:9>
| |     | `-CompoundAssignOperator 0x563474681a20 <line:327:13, col:38> 'unsigned int' lvalue '-=' ComputeLHSTy='long' ComputeResultTy='long'
| |     |   |-MemberExpr 0x563474681940 <col:13> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |     |   | `-CXXThisExpr 0x563474681930 <col:13> 'CDataStream *' implicit this
| |     |   `-ParenExpr 0x563474681a00 <col:25, col:38> 'long'
| |     |     `-BinaryOperator 0x5634746819e0 <col:26, col:33> 'long' '-'
| |     |       |-ImplicitCastExpr 0x5634746819b0 <col:26> 'const char *' <LValueToRValue>
| |     |       | `-DeclRefExpr 0x563474681970 <col:26> 'const char *' lvalue ParmVar 0x563474673bb0 'last' 'const char *'
| |     |       `-ImplicitCastExpr 0x5634746819c8 <col:33> 'const char *' <LValueToRValue>
| |     |         `-DeclRefExpr 0x563474681990 <col:33> 'const char *' lvalue ParmVar 0x563474673b30 'first' 'const char *'
| |     `-NullStmt 0x563474681d18 <line:331:13>
| |-CXXMethodDecl 0x563474673e68 <line:334:5, line:349:5> line:334:14 erase 'CDataStream::iterator (CDataStream::iterator)'
| | |-ParmVarDecl 0x563474673da0 <col:20, col:29> col:29 used it 'CDataStream::iterator':'int'
| | `-CompoundStmt 0x563474682198 <line:335:5, line:349:5>
| |   `-IfStmt 0x563474682170 <line:336:9, line:348:13> has_else
| |     |-OpaqueValueExpr 0x563474682158 <<invalid sloc>> 'bool'
| |     |-CompoundStmt 0x5634746820d8 <line:337:9, line:346:9>
| |     | `-IfStmt 0x563474682040 <line:339:13, line:344:13>
| |     |   |-OpaqueValueExpr 0x563474682028 <<invalid sloc>> 'bool'
| |     |   `-CompoundStmt 0x563474682010 <line:340:13, line:344:13>
| |     |     `-BinaryOperator 0x563474681f30 <line:342:17, col:28> 'unsigned int' lvalue '='
| |     |       |-MemberExpr 0x563474681ec8 <col:17> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |     |       | `-CXXThisExpr 0x563474681eb8 <col:17> 'CDataStream *' implicit this
| |     |       `-ImplicitCastExpr 0x563474681f18 <col:28> 'unsigned int' <IntegralCast>
| |     |         `-IntegerLiteral 0x563474681ef8 <col:28> 'int' 0
| |     `-NullStmt 0x563474682150 <line:348:13>
| |-CXXMethodDecl 0x5634746740a8 <line:351:5, line:369:5> line:351:14 erase 'CDataStream::iterator (CDataStream::iterator, CDataStream::iterator)'
| | |-ParmVarDecl 0x563474673f20 <col:20, col:29> col:29 used first 'CDataStream::iterator':'int'
| | |-ParmVarDecl 0x563474673f98 <col:36, col:45> col:45 used last 'CDataStream::iterator':'int'
| | `-CompoundStmt 0x563474683838 <line:352:5, line:369:5>
| |   `-IfStmt 0x563474683810 <line:353:9, line:368:13> has_else
| |     |-OpaqueValueExpr 0x5634746837f8 <<invalid sloc>> 'bool'
| |     |-CompoundStmt 0x563474683758 <line:354:9, line:366:9>
| |     | `-IfStmt 0x563474683730 <line:356:13, line:365:13> has_else
| |     |   |-OpaqueValueExpr 0x563474683718 <<invalid sloc>> 'bool'
| |     |   |-CompoundStmt 0x563474683600 <line:357:13, line:360:13>
| |     |   | `-BinaryOperator 0x563474682328 <line:358:17, col:28> 'unsigned int' lvalue '='
| |     |   |   |-MemberExpr 0x5634746822c0 <col:17> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |     |   |   | `-CXXThisExpr 0x5634746822b0 <col:17> 'CDataStream *' implicit this
| |     |   |   `-ImplicitCastExpr 0x563474682310 <col:28> 'unsigned int' <IntegralCast>
| |     |   |     `-IntegerLiteral 0x5634746822f0 <col:28> 'int' 0
| |     |   `-CompoundStmt 0x563474683700 <line:362:13, line:365:13>
| |     |     `-ReturnStmt 0x5634746836f0 <line:364:17, col:24>
| |     |       `-ImplicitCastExpr 0x5634746836d8 <col:24> 'CDataStream::iterator':'int' <LValueToRValue>
| |     |         `-DeclRefExpr 0x5634746836b8 <col:24> 'CDataStream::iterator':'int' lvalue ParmVar 0x563474673f98 'last' 'CDataStream::iterator':'int'
| |     `-NullStmt 0x5634746837f0 <line:368:13>
| |-CXXMethodDecl 0x563474674178 <line:371:5, line:375:5> line:371:17 Compact 'void ()' inline
| | `-CompoundStmt 0x5634746839e8 <line:372:5, line:375:5>
| |   `-BinaryOperator 0x5634746839c8 <line:374:9, col:20> 'unsigned int' lvalue '='
| |     |-MemberExpr 0x563474683960 <col:9> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |     | `-CXXThisExpr 0x563474683950 <col:9> 'CDataStream *' implicit this
| |     `-ImplicitCastExpr 0x5634746839b0 <col:20> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x563474683990 <col:20> 'int' 0
| |-CXXMethodDecl 0x5634746742e8 <line:377:5, line:384:5> line:377:10 Rewind 'bool (CDataStream::size_type)'
| | |-ParmVarDecl 0x563474674228 <col:17, col:27> col:27 used n 'CDataStream::size_type':'int'
| | `-CompoundStmt 0x563474683be0 <line:378:5, line:384:5>
| |   |-IfStmt 0x563474683ae8 <line:380:9, line:381:20>
| |   | |-BinaryOperator 0x563474683aa8 <line:380:13, col:17> 'bool' '>'
| |   | | |-ImplicitCastExpr 0x563474683a90 <col:13> 'unsigned int' <IntegralCast>
| |   | | | `-ImplicitCastExpr 0x563474683a60 <col:13> 'CDataStream::size_type':'int' <LValueToRValue>
| |   | | |   `-DeclRefExpr 0x563474683a00 <col:13> 'CDataStream::size_type':'int' lvalue ParmVar 0x563474674228 'n' 'CDataStream::size_type':'int'
| |   | | `-ImplicitCastExpr 0x563474683a78 <col:17> 'unsigned int' <LValueToRValue>
| |   | |   `-MemberExpr 0x563474683a30 <col:17> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |   | |     `-CXXThisExpr 0x563474683a20 <col:17> 'CDataStream *' implicit this
| |   | `-ReturnStmt 0x563474683ad8 <line:381:13, col:20>
| |   |   `-CXXBoolLiteralExpr 0x563474683ac8 <col:20> 'bool' false
| |   |-CompoundAssignOperator 0x563474683b90 <line:382:9, col:21> 'unsigned int' lvalue '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
| |   | |-MemberExpr 0x563474683b10 <col:9> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |   | | `-CXXThisExpr 0x563474683b00 <col:9> 'CDataStream *' implicit this
| |   | `-ImplicitCastExpr 0x563474683b78 <col:21> 'unsigned int' <IntegralCast>
| |   |   `-ImplicitCastExpr 0x563474683b60 <col:21> 'CDataStream::size_type':'int' <LValueToRValue>
| |   |     `-DeclRefExpr 0x563474683b40 <col:21> 'CDataStream::size_type':'int' lvalue ParmVar 0x563474674228 'n' 'CDataStream::size_type':'int'
| |   `-ReturnStmt 0x563474683bd0 <line:383:9, col:16>
| |     `-CXXBoolLiteralExpr 0x563474683bc0 <col:16> 'bool' true
| |-CXXMethodDecl 0x5634746743b0 <line:390:5, col:56> col:10 eof 'bool () const'
| | `-CompoundStmt 0x563474683cb8 <col:34, col:56>
| |   `-ReturnStmt 0x563474683ca8 <col:36, col:53>
| |     `-BinaryOperator 0x563474683c88 <col:43, col:53> 'bool' '=='
| |       |-CXXMemberCallExpr 0x563474683c48 <col:43, col:48> 'CDataStream::size_type':'int'
| |       | `-MemberExpr 0x563474683c18 <col:43> '<bound member function type>' ->size 0x563474670de8
| |       |   `-CXXThisExpr 0x563474683c08 <col:43> 'const CDataStream *' implicit this
| |       `-IntegerLiteral 0x563474683c68 <col:53> 'int' 0
| |-CXXMethodDecl 0x563474674498 <line:391:5, col:49> col:18 rdbuf 'CDataStream *()'
| | `-CompoundStmt 0x563474683cf0 <col:34, col:49>
| |   `-ReturnStmt 0x563474683ce0 <col:36, col:43>
| |     `-CXXThisExpr 0x563474683cd0 <col:43> 'CDataStream *' this
| |-CXXMethodDecl 0x563474674560 <line:392:5, col:51> col:9 in_avail 'int () const'
| | `-CompoundStmt 0x563474683d78 <col:34, col:51>
| |   `-ReturnStmt 0x563474683d68 <col:36, col:48>
| |     `-CXXMemberCallExpr 0x563474683d48 <col:43, col:48> 'CDataStream::size_type':'int'
| |       `-MemberExpr 0x563474683d18 <col:43> '<bound member function type>' ->size 0x563474670de8
| |         `-CXXThisExpr 0x563474683d08 <col:43> 'const CDataStream *' implicit this
| |-CXXMethodDecl 0x5634746746a8 <line:394:5, col:47> col:10 SetType 'void (int)'
| | |-ParmVarDecl 0x563474674618 <col:18, col:22> col:22 used n 'int'
| | `-CompoundStmt 0x563474683e28 <col:34, col:47>
| |   `-BinaryOperator 0x563474683e08 <col:36, col:44> 'int' lvalue '='
| |     |-MemberExpr 0x563474683da0 <col:36> 'int' lvalue ->nType 0x56347466e9c0
| |     | `-CXXThisExpr 0x563474683d90 <col:36> 'CDataStream *' implicit this
| |     `-ImplicitCastExpr 0x563474683df0 <col:44> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x563474683dd0 <col:44> 'int' lvalue ParmVar 0x563474674618 'n' 'int'
| |-CXXMethodDecl 0x563474674778 <line:395:5, col:50> col:9 GetType 'int () const'
| | `-CompoundStmt 0x563474683ea8 <col:34, col:50>
| |   `-ReturnStmt 0x563474683e98 <col:36, col:43>
| |     `-ImplicitCastExpr 0x563474683e80 <col:43> 'int' <LValueToRValue>
| |       `-MemberExpr 0x563474683e50 <col:43> 'const int' lvalue ->nType 0x56347466e9c0
| |         `-CXXThisExpr 0x563474683e40 <col:43> 'const CDataStream *' implicit this
| |-CXXMethodDecl 0x5634746748c0 <line:396:5, col:50> col:10 used SetVersion 'void (int)'
| | |-ParmVarDecl 0x563474674830 <col:21, col:25> col:25 used n 'int'
| | `-CompoundStmt 0x563474683f58 <col:34, col:50>
| |   `-BinaryOperator 0x563474683f38 <col:36, col:47> 'int' lvalue '='
| |     |-MemberExpr 0x563474683ed0 <col:36> 'int' lvalue ->nVersion 0x56347466ea28
| |     | `-CXXThisExpr 0x563474683ec0 <col:36> 'CDataStream *' implicit this
| |     `-ImplicitCastExpr 0x563474683f20 <col:47> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x563474683f00 <col:47> 'int' lvalue ParmVar 0x563474674830 'n' 'int'
| |-CXXMethodDecl 0x563474674990 <line:397:5, col:53> col:9 GetVersion 'int () const'
| | `-CompoundStmt 0x563474683fd8 <col:34, col:53>
| |   `-ReturnStmt 0x563474683fc8 <col:36, col:43>
| |     `-ImplicitCastExpr 0x563474683fb0 <col:43> 'int' <LValueToRValue>
| |       `-MemberExpr 0x563474683f80 <col:43> 'const int' lvalue ->nVersion 0x56347466ea28
| |         `-CXXThisExpr 0x563474683f70 <col:43> 'const CDataStream *' implicit this
| |-CXXMethodDecl 0x563474674b70 <line:399:5, line:416:5> line:399:10 invalid read 'void (char *, int)'
| | |-ParmVarDecl 0x563474674a48 <col:15, col:21> col:21 used pch 'char *'
| | |-ParmVarDecl 0x563474674ad8 <col:26, col:33> col:33 invalid nSize 'int'
| | `-CompoundStmt 0x5634746845c0 <line:400:5, line:416:5>
| |   |-IfStmt 0x563474684038 <line:401:9, col:25>
| |   | |-OpaqueValueExpr 0x563474684020 <<invalid sloc>> 'bool'
| |   | `-ReturnStmt 0x563474684010 <col:25>
| |   |-DeclStmt 0x563474684110 <line:404:9, col:53>
| |   | `-VarDecl 0x563474684068 <col:9, col:22> col:22 used nReadPosNext 'unsigned int'
| |   |-IfStmt 0x563474684268 <line:405:9, line:407:9>
| |   | |-OpaqueValueExpr 0x563474684250 <<invalid sloc>> 'bool'
| |   | `-CompoundStmt 0x563474684240 <line:405:40, line:407:9>
| |   |-IfStmt 0x563474684510 <line:409:9, line:414:9>
| |   | |-OpaqueValueExpr 0x5634746844f8 <<invalid sloc>> 'bool'
| |   | `-CompoundStmt 0x5634746844d8 <line:410:9, line:414:9>
| |   |   |-BinaryOperator 0x563474684468 <line:411:13, col:24> 'unsigned int' lvalue '='
| |   |   | |-MemberExpr 0x563474684400 <col:13> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |   |   | | `-CXXThisExpr 0x5634746843f0 <col:13> 'CDataStream *' implicit this
| |   |   | `-ImplicitCastExpr 0x563474684450 <col:24> 'unsigned int' <IntegralCast>
| |   |   |   `-IntegerLiteral 0x563474684430 <col:24> 'int' 0
| |   |   `-ReturnStmt 0x5634746844c8 <line:413:13>
| |   `-BinaryOperator 0x5634746845a0 <line:415:9, col:20> 'unsigned int' lvalue '='
| |     |-MemberExpr 0x563474684538 <col:9> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |     | `-CXXThisExpr 0x563474684528 <col:9> 'CDataStream *' implicit this
| |     `-ImplicitCastExpr 0x563474684588 <col:20> 'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x563474684568 <col:20> 'unsigned int' lvalue Var 0x563474684068 'nReadPosNext' 'unsigned int'
| |-CXXMethodDecl 0x563474674cc8 <line:418:5, line:434:5> line:418:10 ignore 'void (int)'
| | |-ParmVarDecl 0x563474674c38 <col:17, col:21> col:21 used nSize 'int'
| | `-CompoundStmt 0x563474684bf8 <line:419:5, line:434:5>
| |   |-IfStmt 0x563474684738 <line:421:9, line:423:9>
| |   | |-BinaryOperator 0x563474684650 <line:421:13, col:21> 'bool' '<'
| |   | | |-ImplicitCastExpr 0x563474684638 <col:13> 'int' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x5634746845f8 <col:13> 'int' lvalue ParmVar 0x563474674c38 'nSize' 'int'
| |   | | `-IntegerLiteral 0x563474684618 <col:21> 'int' 0
| |   | `-CompoundStmt 0x563474684728 <col:24, line:423:9>
| |   |-DeclStmt 0x563474684898 <line:424:9, col:53>
| |   | `-VarDecl 0x563474684768 <col:9, col:48> col:22 used nReadPosNext 'unsigned int' cinit
| |   |   `-BinaryOperator 0x563474684878 <col:37, col:48> 'unsigned int' '+'
| |   |     |-ImplicitCastExpr 0x563474684830 <col:37> 'unsigned int' <LValueToRValue>
| |   |     | `-MemberExpr 0x5634746847e0 <col:37> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |   |     |   `-CXXThisExpr 0x5634746847d0 <col:37> 'CDataStream *' implicit this
| |   |     `-ImplicitCastExpr 0x563474684860 <col:48> 'unsigned int' <IntegralCast>
| |   |       `-ImplicitCastExpr 0x563474684848 <col:48> 'int' <LValueToRValue>
| |   |         `-DeclRefExpr 0x563474684810 <col:48> 'int' lvalue ParmVar 0x563474674c38 'nSize' 'int'
| |   |-IfStmt 0x563474684b48 <line:425:9, line:432:9>
| |   | |-OpaqueValueExpr 0x563474684b30 <<invalid sloc>> 'bool'
| |   | `-CompoundStmt 0x563474684b10 <line:426:9, line:432:9>
| |   |   |-BinaryOperator 0x563474684aa0 <line:429:13, col:24> 'unsigned int' lvalue '='
| |   |   | |-MemberExpr 0x563474684a38 <col:13> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |   |   | | `-CXXThisExpr 0x563474684a28 <col:13> 'CDataStream *' implicit this
| |   |   | `-ImplicitCastExpr 0x563474684a88 <col:24> 'unsigned int' <IntegralCast>
| |   |   |   `-IntegerLiteral 0x563474684a68 <col:24> 'int' 0
| |   |   `-ReturnStmt 0x563474684b00 <line:431:13>
| |   `-BinaryOperator 0x563474684bd8 <line:433:9, col:20> 'unsigned int' lvalue '='
| |     |-MemberExpr 0x563474684b70 <col:9> 'unsigned int' lvalue ->nReadPos 0x56347466e958
| |     | `-CXXThisExpr 0x563474684b60 <col:9> 'CDataStream *' implicit this
| |     `-ImplicitCastExpr 0x563474684bc0 <col:20> 'unsigned int' <LValueToRValue>
| |       `-DeclRefExpr 0x563474684ba0 <col:20> 'unsigned int' lvalue Var 0x563474684768 'nReadPosNext' 'unsigned int'
| |-CXXMethodDecl 0x563474674eb0 <line:436:5, line:440:5> line:436:10 invalid write 'void (const char *, int)'
| | |-ParmVarDecl 0x563474674d88 <col:16, col:28> col:28 used pch 'const char *'
| | |-ParmVarDecl 0x563474674e18 <col:33, col:40> col:40 invalid nSize 'int'
| | `-CompoundStmt 0x563474684ce8 <line:437:5, line:440:5>
| |-FunctionTemplateDecl 0x563474675188 <line:442:5, line:448:5> line:443:10 Serialize
| | |-TemplateTypeParmDecl 0x563474674f60 <line:442:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746750e8 <line:443:5, line:448:5> line:443:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x563474675028 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x563474684e50 <line:444:5, line:448:5>
| |-FunctionTemplateDecl 0x56347467bd18 <line:450:5, line:456:5> line:451:18 operator<<
| | |-TemplateTypeParmDecl 0x5634746751e8 <line:450:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x56347467bc78 <line:451:5, line:456:5> line:451:18 operator<< 'CDataStream &(const T &)'
| |   |-ParmVarDecl 0x56347467bb88 <col:29, col:38> col:38 referenced obj 'const T &'
| |   `-CompoundStmt 0x563474684fd8 <line:452:5, line:456:5>
| |     |-CallExpr 0x563474684f50 <line:454:9, col:31> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x563474684e80 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Serialize' 0x56347458f418 0x5634745ac278 0x5634745995a8 0x563474593318 0x563474592c88 0x5634745925a8 0x563474591f88 0x5634745919a8 0x5634745915b8
| |     | |-UnaryOperator 0x563474684f18 <col:21, col:22> 'CDataStream' lvalue prefix '*' cannot overflow
| |     | | `-CXXThisExpr 0x563474684f08 <col:22> 'CDataStream *' this
| |     | `-DeclRefExpr 0x563474684f30 <col:28> 'const T' lvalue ParmVar 0x56347467bb88 'obj' 'const T &'
| |     `-ReturnStmt 0x563474684fc8 <line:455:9, col:22>
| |       `-ParenExpr 0x563474684fa8 <col:16, col:22> 'CDataStream' lvalue
| |         `-UnaryOperator 0x563474684f90 <col:17, col:18> 'CDataStream' lvalue prefix '*' cannot overflow
| |           `-CXXThisExpr 0x563474684f80 <col:18> 'CDataStream *' this
| |-FunctionTemplateDecl 0x56347467bff8 <line:458:5, line:464:5> line:459:18 operator>>
| | |-TemplateTypeParmDecl 0x56347467bd78 <line:458:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x56347467bf58 <line:459:5, line:464:5> line:459:18 operator>> 'CDataStream &(T &&)'
| |   |-ParmVarDecl 0x56347467be68 <col:29, col:33> col:33 referenced obj 'T &&'
| |   `-CompoundStmt 0x563474685188 <line:460:5, line:464:5>
| |     |-CallExpr 0x563474685100 <line:462:9, col:33> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x563474685018 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Unserialize' 0x5634745937b8 0x5634745ac768 0x5634745b5e88 0x5634745b4e18 0x5634745b40a8 0x5634745b6c48 0x563474599ae8 0x563474599138 0x563474598b38 0x563474595b58 0x563474597fb8 0x563474598558
| |     | |-UnaryOperator 0x5634746850c8 <col:23, col:24> 'CDataStream' lvalue prefix '*' cannot overflow
| |     | | `-CXXThisExpr 0x5634746850b8 <col:24> 'CDataStream *' this
| |     | `-DeclRefExpr 0x5634746850e0 <col:30> 'T' lvalue ParmVar 0x56347467be68 'obj' 'T &&'
| |     `-ReturnStmt 0x563474685178 <line:463:9, col:22>
| |       `-ParenExpr 0x563474685158 <col:16, col:22> 'CDataStream' lvalue
| |         `-UnaryOperator 0x563474685140 <col:17, col:18> 'CDataStream' lvalue prefix '*' cannot overflow
| |           `-CXXThisExpr 0x563474685130 <col:18> 'CDataStream *' this
| |-CXXMethodDecl 0x56347467c110 <line:466:5, line:469:5> line:466:10 invalid GetAndClear 'void (int &)'
| | |-ParmVarDecl 0x56347467c080 <col:22, col:38> col:38 invalid d 'int &'
| | `-CompoundStmt 0x5634746853a8 <col:41, line:469:5>
| |   `-CXXMemberCallExpr 0x563474685388 <line:468:9, col:15> 'void'
| |     `-MemberExpr 0x563474685358 <col:9> '<bound member function type>' ->clear 0x563474671650
| |       `-CXXThisExpr 0x563474685348 <col:9> 'CDataStream *' implicit this
| |-CXXMethodDecl 0x56347467c2b8 <line:476:5, line:492:5> line:476:10 invalid Xor 'void (const int)'
| | |-ParmVarDecl 0x56347467c228 <col:14, <invalid sloc>> col:46 invalid 'const int'
| | |-CompoundStmt 0x563474685cd0 <line:477:5, line:492:5>
| | | |-IfStmt 0x563474685420 <line:478:9, line:480:9>
| | | | |-OpaqueValueExpr 0x563474685408 <<invalid sloc>> 'bool'
| | | | `-CompoundStmt 0x5634746853f0 <line:478:30, line:480:9>
| | | |   `-ReturnStmt 0x5634746853e0 <line:479:13>
| | | `-ForStmt 0x563474685c98 <line:482:9, line:491:9>
| | |   |-DeclStmt 0x5634746859e8 <line:482:14, col:36>
| | |   | |-VarDecl 0x563474685448 <col:14, col:28> col:24 used i 'CDataStream::size_type':'int' cinit
| | |   | | `-IntegerLiteral 0x5634746854b0 <col:28> 'int' 0
| | |   | `-VarDecl 0x5634746854e0 <col:14, col:35> col:31 used j 'CDataStream::size_type':'int' cinit
| | |   |   `-IntegerLiteral 0x5634746859b0 <col:35> 'int' 0
| | |   |-<<<NULL>>>
| | |   |-BinaryOperator 0x563474685ab0 <col:38, col:48> 'bool' '!='
| | |   | |-ImplicitCastExpr 0x563474685a98 <col:38> 'CDataStream::size_type':'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x563474685a00 <col:38> 'CDataStream::size_type':'int' lvalue Var 0x563474685448 'i' 'CDataStream::size_type':'int'
| | |   | `-CXXMemberCallExpr 0x563474685a60 <col:43, col:48> 'CDataStream::size_type':'int'
| | |   |   `-MemberExpr 0x563474685a30 <col:43> '<bound member function type>' ->size 0x563474670de8
| | |   |     `-ImplicitCastExpr 0x563474685a80 <col:43> 'const CDataStream *' <NoOp>
| | |   |       `-CXXThisExpr 0x563474685a20 <col:43> 'CDataStream *' implicit this
| | |   |-UnaryOperator 0x563474685af0 <col:51, col:52> 'CDataStream::size_type':'int' postfix '++'
| | |   | `-DeclRefExpr 0x563474685ad0 <col:51> 'CDataStream::size_type':'int' lvalue Var 0x563474685448 'i' 'CDataStream::size_type':'int'
| | |   `-CompoundStmt 0x563474685c80 <col:56, line:491:9>
| | |     `-IfStmt 0x563474685c68 <line:489:13, line:490:21>
| | |       |-OpaqueValueExpr 0x563474685c50 <<invalid sloc>> 'bool'
| | |       `-BinaryOperator 0x563474685c30 <col:17, col:21> 'CDataStream::size_type':'int' lvalue '='
| | |         |-DeclRefExpr 0x563474685bf0 <col:17> 'CDataStream::size_type':'int' lvalue Var 0x5634746854e0 'j' 'CDataStream::size_type':'int'
| | |         `-IntegerLiteral 0x563474685c10 <col:21> 'int' 0
| | `-FullComment 0x56347476f480 <line:472:7, line:474:69>
| |   |-ParagraphComment 0x56347476f340 <line:472:7, col:58>
| |   | `-TextComment 0x56347476f310 <col:7, col:58> Text=" XOR the contents of this stream with a certain key."
| |   |-ParagraphComment 0x56347476f390 <line:474:7>
| |   | `-TextComment 0x56347476f360 <col:7> Text=" "
| |   `-ParamCommandComment 0x56347476f3b0 <col:8, col:69> [in] explicitly Param="key"
| |     `-ParagraphComment 0x56347476f440 <col:22, col:69>
| |       `-TextComment 0x56347476f410 <col:22, col:69> Text="    The key used to XOR the data in this stream."
| |-CXXConstructorDecl 0x56347467d018 <line:203:7> col:7 implicit used constexpr CDataStream 'void (const CDataStream &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56347467d128 <col:7> col:7 used 'const CDataStream &'
| | |-CXXCtorInitializer Field 0x56347466e8f0 'vch' 'CDataStream::vector_type':'int'
| | | `-ImplicitCastExpr 0x56347467d3e8 <col:7> 'CDataStream::vector_type':'int' <LValueToRValue>
| | |   `-MemberExpr 0x56347467d3a0 <col:7> 'const CDataStream::vector_type':'const int' lvalue .vch 0x56347466e8f0
| | |     `-DeclRefExpr 0x56347467d380 <col:7> 'const CDataStream' lvalue ParmVar 0x56347467d128 '' 'const CDataStream &'
| | |-CXXCtorInitializer Field 0x56347466e958 'nReadPos' 'unsigned int'
| | | `-ImplicitCastExpr 0x56347467d490 <col:7> 'unsigned int' <LValueToRValue>
| | |   `-MemberExpr 0x56347467d448 <col:7> 'const unsigned int' lvalue .nReadPos 0x56347466e958
| | |     `-DeclRefExpr 0x56347467d428 <col:7> 'const CDataStream' lvalue ParmVar 0x56347467d128 '' 'const CDataStream &'
| | |-CXXCtorInitializer Field 0x56347466e9c0 'nType' 'int'
| | | `-ImplicitCastExpr 0x56347467d538 <col:7> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56347467d4f0 <col:7> 'const int' lvalue .nType 0x56347466e9c0
| | |     `-DeclRefExpr 0x56347467d4d0 <col:7> 'const CDataStream' lvalue ParmVar 0x56347467d128 '' 'const CDataStream &'
| | |-CXXCtorInitializer Field 0x56347466ea28 'nVersion' 'int'
| | | `-ImplicitCastExpr 0x56347467d5e0 <col:7> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56347467d598 <col:7> 'const int' lvalue .nVersion 0x56347466ea28
| | |     `-DeclRefExpr 0x56347467d578 <col:7> 'const CDataStream' lvalue ParmVar 0x56347467d128 '' 'const CDataStream &'
| | `-CompoundStmt 0x56347467d640 <col:7>
| `-CXXConstructorDecl 0x56347467d1c8 <col:7> col:7 implicit used constexpr CDataStream 'void (CDataStream &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x56347467d2d8 <col:7> col:7 used 'CDataStream &&'
|   |-CXXCtorInitializer Field 0x56347466e8f0 'vch' 'CDataStream::vector_type':'int'
|   | `-ImplicitCastExpr 0x56347467d8a8 <col:7> 'CDataStream::vector_type':'int' <LValueToRValue>
|   |   `-MemberExpr 0x56347467d860 <col:7> 'CDataStream::vector_type':'int' xvalue .vch 0x56347466e8f0
|   |     `-CXXStaticCastExpr 0x56347467d830 <col:7> 'CDataStream' xvalue static_cast<class CDataStream &&> <NoOp>
|   |       `-DeclRefExpr 0x56347467d800 <col:7> 'CDataStream' lvalue ParmVar 0x56347467d2d8 '' 'CDataStream &&'
|   |-CXXCtorInitializer Field 0x56347466e958 'nReadPos' 'unsigned int'
|   | `-ImplicitCastExpr 0x56347467d990 <col:7> 'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x56347467d948 <col:7> 'unsigned int' xvalue .nReadPos 0x56347466e958
|   |     `-CXXStaticCastExpr 0x56347467d918 <col:7> 'CDataStream' xvalue static_cast<class CDataStream &&> <NoOp>
|   |       `-DeclRefExpr 0x56347467d8e8 <col:7> 'CDataStream' lvalue ParmVar 0x56347467d2d8 '' 'CDataStream &&'
|   |-CXXCtorInitializer Field 0x56347466e9c0 'nType' 'int'
|   | `-ImplicitCastExpr 0x56347467da78 <col:7> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56347467da30 <col:7> 'int' xvalue .nType 0x56347466e9c0
|   |     `-CXXStaticCastExpr 0x56347467da00 <col:7> 'CDataStream' xvalue static_cast<class CDataStream &&> <NoOp>
|   |       `-DeclRefExpr 0x56347467d9d0 <col:7> 'CDataStream' lvalue ParmVar 0x56347467d2d8 '' 'CDataStream &&'
|   |-CXXCtorInitializer Field 0x56347466ea28 'nVersion' 'int'
|   | `-ImplicitCastExpr 0x5634746803f8 <col:7> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5634746803b0 <col:7> 'int' xvalue .nVersion 0x56347466ea28
|   |     `-CXXStaticCastExpr 0x563474680380 <col:7> 'CDataStream' xvalue static_cast<class CDataStream &&> <NoOp>
|   |       `-DeclRefExpr 0x56347467dab8 <col:7> 'CDataStream' lvalue ParmVar 0x56347467d2d8 '' 'CDataStream &&'
|   `-CompoundStmt 0x563474680458 <col:7>
|-ClassTemplateDecl 0x563474685e10 <line:495:1, line:536:1> line:496:7 BitStreamReader
| |-TemplateTypeParmDecl 0x563474685cf0 <line:495:11, col:20> col:20 referenced typename depth 0 index 0 IStream
| `-CXXRecordDecl 0x563474685d80 <line:496:1, line:536:1> line:496:7 invalid class BitStreamReader definition
|   |-DefinitionData trivially_copyable has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-CXXRecordDecl 0x563474686060 <col:1, col:7> col:7 implicit referenced class BitStreamReader
|   |-AccessSpecDecl 0x5634746860f0 <line:498:1, col:8> col:1 private
|   |-FieldDecl 0x563474686158 <line:499:5, col:14> col:14 referenced m_istream 'IStream &'
|   |-FieldDecl 0x563474686200 <line:503:5, col:13> col:13 invalid m_buffer 'int'
|   | `-FullComment 0x56347476f570 <line:501:8, line:502:39>
|   |   `-ParagraphComment 0x56347476f540 <line:501:8, line:502:39>
|   |     |-TextComment 0x56347476f4f0 <line:501:8, col:80> Text=" Buffered byte read in from the input stream. A new byte is read into the"
|   |     `-TextComment 0x56347476f510 <line:502:8, col:39> Text=" buffer when m_offset reaches 8."
|   |-FieldDecl 0x563474686290 <line:508:5, col:19> col:9 referenced m_offset 'int'
|   | |-InitListExpr 0x5634746866e0 <col:17, col:19> 'int'
|   | | `-IntegerLiteral 0x563474686678 <col:18> 'int' 8
|   | `-FullComment 0x563474774d10 <line:505:8, line:507:38>
|   |   `-ParagraphComment 0x563474774ce0 <line:505:8, line:507:38>
|   |     |-TextComment 0x563474774c60 <line:505:8, col:74> Text=" Number of high order bits in m_buffer already returned by previous"
|   |     |-TextComment 0x563474774c80 <line:506:8, col:76> Text=" Read() calls. The next bit to be returned is at this offset from the"
|   |     `-TextComment 0x563474774ca0 <line:507:8, col:38> Text=" most significant bit position."
|   |-AccessSpecDecl 0x5634746862e0 <line:510:1, col:7> col:1 public
|   |-CXXConstructorDecl 0x563474686418 <line:511:5, col:70> col:14 BitStreamReader<IStream> 'void (IStream &)'
|   | |-ParmVarDecl 0x563474686318 <col:30, col:39> col:39 referenced istream 'IStream &'
|   | |-CXXCtorInitializer Field 0x563474686158 'm_istream' 'IStream &'
|   | | `-ParenListExpr 0x563474686748 <col:59, col:67> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x563474686728 <col:60> 'IStream' lvalue ParmVar 0x563474686318 'istream' 'IStream &'
|   | `-CompoundStmt 0x563474686798 <col:69, col:70>
|   `-CXXMethodDecl 0x5634746865b8 <line:516:5, line:535:5> line:516:14 invalid Read 'int (int)'
|     |-ParmVarDecl 0x563474686520 <col:19, col:23> col:23 referenced nbits 'int'
|     |-CompoundStmt 0x563474687008 <col:30, line:535:5>
|     | |-IfStmt 0x563474686980 <line:517:9, line:519:9>
|     | | |-BinaryOperator 0x563474686898 <line:517:13, col:34> 'bool' '||'
|     | | | |-BinaryOperator 0x563474686800 <col:13, col:21> 'bool' '<'
|     | | | | |-ImplicitCastExpr 0x5634746867e8 <col:13> 'int' <LValueToRValue>
|     | | | | | `-DeclRefExpr 0x5634746867a8 <col:13> 'int' lvalue ParmVar 0x563474686520 'nbits' 'int'
|     | | | | `-IntegerLiteral 0x5634746867c8 <col:21> 'int' 0
|     | | | `-BinaryOperator 0x563474686878 <col:26, col:34> 'bool' '>'
|     | | |   |-ImplicitCastExpr 0x563474686860 <col:26> 'int' <LValueToRValue>
|     | | |   | `-DeclRefExpr 0x563474686820 <col:26> 'int' lvalue ParmVar 0x563474686520 'nbits' 'int'
|     | | |   `-IntegerLiteral 0x563474686840 <col:34> 'int' 64
|     | | `-CompoundStmt 0x563474686970 <col:38, line:519:9>
|     | |-DeclStmt 0x563474686a48 <line:521:9, col:26>
|     | | `-VarDecl 0x5634746869c0 <col:9, col:18> col:18 invalid data 'int'
|     | `-WhileStmt 0x563474686ff0 <line:522:9, line:533:9>
|     |   |-BinaryOperator 0x563474686ab8 <line:522:16, col:24> 'bool' '>'
|     |   | |-ImplicitCastExpr 0x563474686aa0 <col:16> 'int' <LValueToRValue>
|     |   | | `-DeclRefExpr 0x563474686a60 <col:16> 'int' lvalue ParmVar 0x563474686520 'nbits' 'int'
|     |   | `-IntegerLiteral 0x563474686a80 <col:24> 'int' 0
|     |   `-CompoundStmt 0x563474686fc0 <col:27, line:533:9>
|     |     |-IfStmt 0x563474686c40 <line:523:13, line:526:13>
|     |     | |-BinaryOperator 0x563474686b38 <line:523:17, col:29> '<dependent type>' '=='
|     |     | | |-MemberExpr 0x563474686ae8 <col:17> 'int' lvalue ->m_offset 0x563474686290
|     |     | | | `-CXXThisExpr 0x563474686ad8 <col:17> 'BitStreamReader<IStream> *' implicit this
|     |     | | `-IntegerLiteral 0x563474686b18 <col:29> 'int' 8
|     |     | `-CompoundStmt 0x563474686c28 <col:32, line:526:13>
|     |     |   `-BinaryOperator 0x563474686c08 <line:525:17, col:28> '<dependent type>' '='
|     |     |     |-MemberExpr 0x563474686bb8 <col:17> 'int' lvalue ->m_offset 0x563474686290
|     |     |     | `-CXXThisExpr 0x563474686ba8 <col:17> 'BitStreamReader<IStream> *' implicit this
|     |     |     `-IntegerLiteral 0x563474686be8 <col:28> 'int' 0
|     |     |-DeclStmt 0x563474686d78 <line:528:13, col:53>
|     |     | `-VarDecl 0x563474686c70 <col:13, col:17> col:17 referenced bits 'int'
|     |     |-CompoundAssignOperator 0x563474686f08 <line:531:13, col:25> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
|     |     | |-MemberExpr 0x563474686eb8 <col:13> 'int' lvalue ->m_offset 0x563474686290
|     |     | | `-CXXThisExpr 0x563474686ea8 <col:13> 'BitStreamReader<IStream> *' implicit this
|     |     | `-DeclRefExpr 0x563474686ee8 <col:25> 'int' lvalue Var 0x563474686c70 'bits' 'int'
|     |     `-CompoundAssignOperator 0x563474686f90 <line:532:13, col:22> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
|     |       |-DeclRefExpr 0x563474686f38 <col:13> 'int' lvalue ParmVar 0x563474686520 'nbits' 'int'
|     |       `-ImplicitCastExpr 0x563474686f78 <col:22> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x563474686f58 <col:22> 'int' lvalue Var 0x563474686c70 'bits' 'int'
|     `-FullComment 0x563474774e00 <line:513:8, line:514:60>
|       `-ParagraphComment 0x563474774dd0 <line:513:8, line:514:60>
|         |-TextComment 0x563474774d80 <line:513:8, col:79> Text=" Read the specified number of bits from the stream. The data is returned"
|         `-TextComment 0x563474774da0 <line:514:7, col:60> Text=" in the nbits least significant bits of a 64-bit uint."
|-ClassTemplateDecl 0x563474687150 <line:538:1, line:593:1> line:539:7 BitStreamWriter
| |-TemplateTypeParmDecl 0x563474687030 <line:538:11, col:20> col:20 referenced typename depth 0 index 0 OStream
| `-CXXRecordDecl 0x5634746870c0 <line:539:1, line:593:1> line:539:7 invalid class BitStreamWriter definition
|   |-DefinitionData has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor non_trivial user_declared
|   |-CXXRecordDecl 0x5634746873a0 <col:1, col:7> col:7 implicit referenced class BitStreamWriter
|   |-AccessSpecDecl 0x563474687430 <line:541:1, col:8> col:1 private
|   |-FieldDecl 0x563474687498 <line:542:5, col:14> col:14 referenced m_ostream 'OStream &'
|   |-FieldDecl 0x563474687540 <line:546:5, col:13> col:13 invalid m_buffer 'int'
|   | `-FullComment 0x563474774ef0 <line:544:8, line:545:68>
|   |   `-ParagraphComment 0x563474774ec0 <line:544:8, line:545:68>
|   |     |-TextComment 0x563474774e70 <line:544:8, col:77> Text=" Buffered byte waiting to be written to the output stream. The byte is"
|   |     `-TextComment 0x563474774e90 <line:545:8, col:68> Text=" written buffer when m_offset reaches 8 or Flush() is called."
|   |-FieldDecl 0x5634746875d0 <line:551:5, col:19> col:9 referenced m_offset 'int'
|   | |-InitListExpr 0x563474675f80 <col:17, col:19> 'int'
|   | | `-IntegerLiteral 0x563474675f18 <col:18> 'int' 0
|   | `-FullComment 0x563474775010 <line:548:8, line:550:76>
|   |   `-ParagraphComment 0x563474774fe0 <line:548:8, line:550:76>
|   |     |-TextComment 0x563474774f60 <line:548:8, col:73> Text=" Number of high order bits in m_buffer already written by previous"
|   |     |-TextComment 0x563474774f80 <line:549:8, col:75> Text=" Write() calls and not yet flushed to the stream. The next bit to be"
|   |     `-TextComment 0x563474774fa0 <line:550:8, col:76> Text=" written to is at this offset from the most significant bit position."
|   |-AccessSpecDecl 0x563474687620 <line:553:1, col:7> col:1 public
|   |-CXXConstructorDecl 0x563474687758 <line:554:5, col:70> col:14 BitStreamWriter<OStream> 'void (OStream &)'
|   | |-ParmVarDecl 0x563474687658 <col:30, col:39> col:39 referenced ostream 'OStream &'
|   | |-CXXCtorInitializer Field 0x563474687498 'm_ostream' 'OStream &'
|   | | `-ParenListExpr 0x563474675fe8 <col:59, col:67> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x563474675fc8 <col:60> 'OStream' lvalue ParmVar 0x563474687658 'ostream' 'OStream &'
|   | `-CompoundStmt 0x563474676038 <col:69, col:70>
|   |-CXXDestructorDecl 0x563474687850 <line:556:5, line:559:5> line:556:5 ~BitStreamWriter<OStream> 'void ()'
|   | `-CompoundStmt 0x5634746760a8 <line:557:5, line:559:5>
|   |   `-CallExpr 0x563474676088 <line:558:9, col:15> '<dependent type>'
|   |     `-MemberExpr 0x563474676058 <col:9> '<bound member function type>' ->Flush 0x563474675e78
|   |       `-CXXThisExpr 0x563474676048 <col:9> 'BitStreamWriter<OStream> *' implicit this
|   |-CXXMethodDecl 0x563474675d78 <line:564:5, line:579:5> line:564:10 invalid Write 'void (int, int)'
|   | |-ParmVarDecl 0x563474675c60 <col:16, col:25> col:25 invalid data 'int'
|   | |-ParmVarDecl 0x563474675ce0 <col:31, col:35> col:35 referenced nbits 'int'
|   | |-CompoundStmt 0x5634746767d8 <col:42, line:579:5>
|   | | |-IfStmt 0x563474676218 <line:565:9, line:567:9>
|   | | | |-BinaryOperator 0x5634746761b0 <line:565:13, col:34> 'bool' '||'
|   | | | | |-BinaryOperator 0x563474676118 <col:13, col:21> 'bool' '<'
|   | | | | | |-ImplicitCastExpr 0x563474676100 <col:13> 'int' <LValueToRValue>
|   | | | | | | `-DeclRefExpr 0x5634746760c0 <col:13> 'int' lvalue ParmVar 0x563474675ce0 'nbits' 'int'
|   | | | | | `-IntegerLiteral 0x5634746760e0 <col:21> 'int' 0
|   | | | | `-BinaryOperator 0x563474676190 <col:26, col:34> 'bool' '>'
|   | | | |   |-ImplicitCastExpr 0x563474676178 <col:26> 'int' <LValueToRValue>
|   | | | |   | `-DeclRefExpr 0x563474676138 <col:26> 'int' lvalue ParmVar 0x563474675ce0 'nbits' 'int'
|   | | | |   `-IntegerLiteral 0x563474676158 <col:34> 'int' 64
|   | | | `-CompoundStmt 0x563474676208 <col:38, line:567:9>
|   | | `-WhileStmt 0x5634746767c0 <line:569:9, line:578:9>
|   | |   |-BinaryOperator 0x563474676288 <line:569:16, col:24> 'bool' '>'
|   | |   | |-ImplicitCastExpr 0x563474676270 <col:16> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x563474676230 <col:16> 'int' lvalue ParmVar 0x563474675ce0 'nbits' 'int'
|   | |   | `-IntegerLiteral 0x563474676250 <col:24> 'int' 0
|   | |   `-CompoundStmt 0x563474676790 <col:27, line:578:9>
|   | |     |-DeclStmt 0x5634746763c8 <line:570:13, col:53>
|   | |     | `-VarDecl 0x5634746762c0 <col:13, col:17> col:17 referenced bits 'int'
|   | |     |-CompoundAssignOperator 0x5634746765c8 <line:572:13, col:25> '<dependent type>' lvalue '+=' ComputeLHSTy='<dependent type>' ComputeResultTy='<dependent type>'
|   | |     | |-MemberExpr 0x563474676578 <col:13> 'int' lvalue ->m_offset 0x5634746875d0
|   | |     | | `-CXXThisExpr 0x563474676568 <col:13> 'BitStreamWriter<OStream> *' implicit this
|   | |     | `-DeclRefExpr 0x5634746765a8 <col:25> 'int' lvalue Var 0x5634746762c0 'bits' 'int'
|   | |     |-CompoundAssignOperator 0x563474676650 <line:573:13, col:22> 'int' lvalue '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |     | |-DeclRefExpr 0x5634746765f8 <col:13> 'int' lvalue ParmVar 0x563474675ce0 'nbits' 'int'
|   | |     | `-ImplicitCastExpr 0x563474676638 <col:22> 'int' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x563474676618 <col:22> 'int' lvalue Var 0x5634746762c0 'bits' 'int'
|   | |     `-IfStmt 0x563474676778 <line:575:13, line:577:13>
|   | |       |-BinaryOperator 0x5634746766e0 <line:575:17, col:29> '<dependent type>' '=='
|   | |       | |-MemberExpr 0x563474676690 <col:17> 'int' lvalue ->m_offset 0x5634746875d0
|   | |       | | `-CXXThisExpr 0x563474676680 <col:17> 'BitStreamWriter<OStream> *' implicit this
|   | |       | `-IntegerLiteral 0x5634746766c0 <col:29> 'int' 8
|   | |       `-CompoundStmt 0x563474676760 <col:32, line:577:13>
|   | |         `-CallExpr 0x563474676740 <line:576:17, col:23> '<dependent type>'
|   | |           `-MemberExpr 0x563474676710 <col:17> '<bound member function type>' ->Flush 0x563474675e78
|   | |             `-CXXThisExpr 0x563474676700 <col:17> 'BitStreamWriter<OStream> *' implicit this
|   | `-FullComment 0x563474775100 <line:561:8, line:562:60>
|   |   `-ParagraphComment 0x5634747750d0 <line:561:8, line:562:60>
|   |     |-TextComment 0x563474775080 <line:561:8, col:76> Text=" Write the nbits least significant bits of a 64-bit int to the output"
|   |     `-TextComment 0x5634747750a0 <line:562:7, col:60> Text=" stream. Data is buffered until it completes an octet."
|   `-CXXMethodDecl 0x563474675e78 <line:584:5, line:592:5> line:584:10 referenced Flush 'void ()'
|     |-CompoundStmt 0x5634746769b8 <col:18, line:592:5>
|     | |-IfStmt 0x5634746768a0 <line:585:9, line:587:9>
|     | | |-BinaryOperator 0x563474676858 <line:585:13, col:25> '<dependent type>' '=='
|     | | | |-MemberExpr 0x563474676808 <col:13> 'int' lvalue ->m_offset 0x5634746875d0
|     | | | | `-CXXThisExpr 0x5634746767f8 <col:13> 'BitStreamWriter<OStream> *' implicit this
|     | | | `-IntegerLiteral 0x563474676838 <col:25> 'int' 0
|     | | `-CompoundStmt 0x563474676888 <col:28, line:587:9>
|     | |   `-ReturnStmt 0x563474676878 <line:586:13>
|     | `-BinaryOperator 0x563474676998 <line:591:9, col:20> '<dependent type>' '='
|     |   |-MemberExpr 0x563474676948 <col:9> 'int' lvalue ->m_offset 0x5634746875d0
|     |   | `-CXXThisExpr 0x563474676938 <col:9> 'BitStreamWriter<OStream> *' implicit this
|     |   `-IntegerLiteral 0x563474676978 <col:20> 'int' 0
|     `-FullComment 0x5634747751f0 <line:581:8, line:582:26>
|       `-ParagraphComment 0x5634747751c0 <line:581:8, line:582:26>
|         |-TextComment 0x563474775170 <line:581:8, col:78> Text=" Flush any unwritten bits to the output stream, padding with 0's to the"
|         `-TextComment 0x563474775190 <line:582:7, col:26> Text=" next byte boundary."
|-CXXRecordDecl 0x563474676a08 <line:603:1, line:704:1> line:603:7 invalid class CAutoFile definition
| |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-FullComment 0x563474775360 <line:597:4, line:601:82>
| | |-ParagraphComment 0x563474775290 <line:597:4, col:41>
| | | `-TextComment 0x563474775260 <col:4, col:41> Text=" Non-refcounted RAII wrapper for FILE*"
| | `-ParagraphComment 0x563474775330 <line:599:3, line:601:82>
| |   |-TextComment 0x5634747752b0 <line:599:3, col:75> Text=" Will automatically close the file when it goes out of scope if not null."
| |   |-TextComment 0x5634747752d0 <line:600:3, col:63> Text=" If you're returning the file pointer, return file.release()."
| |   `-TextComment 0x5634747752f0 <line:601:3, col:82> Text=" If you need to close the file early, use file.fclose() instead of fclose(file)."
| |-CXXRecordDecl 0x563474676b28 <line:603:1, col:7> col:7 implicit referenced class CAutoFile
| |-AccessSpecDecl 0x563474676bb8 <line:605:1, col:8> col:1 private
| |-FieldDecl 0x563474676bf8 <line:606:5, col:15> col:15 referenced nType 'const int'
| |-FieldDecl 0x563474676c60 <line:607:5, col:15> col:15 referenced nVersion 'const int'
| |-FieldDecl 0x563474676cd8 <line:609:5, col:11> col:11 invalid file 'int *'
| |-AccessSpecDecl 0x563474676d28 <line:611:1, col:7> col:1 public
| |-CXXConstructorDecl 0x563474676f98 <line:612:5, line:615:5> line:612:5 invalid CAutoFile 'void (int *, int, int)'
| | |-ParmVarDecl 0x563474676d78 <col:15, col:21> col:21 invalid filenew 'int *'
| | |-ParmVarDecl 0x563474676df8 <col:30, col:34> col:34 used nTypeIn 'int'
| | |-ParmVarDecl 0x563474676e78 <col:43, col:47> col:47 used nVersionIn 'int'
| | |-CXXCtorInitializer Field 0x563474676bf8 'nType' 'const int'
| | | `-ImplicitCastExpr 0x5634746882b8 <col:67> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x563474688278 <col:67> 'int' lvalue ParmVar 0x563474676df8 'nTypeIn' 'int'
| | |-CXXCtorInitializer Field 0x563474676c60 'nVersion' 'const int'
| | | `-ImplicitCastExpr 0x563474688338 <col:86> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5634746882f8 <col:86> 'int' lvalue ParmVar 0x563474676e78 'nVersionIn' 'int'
| | `-CompoundStmt 0x563474688398 <line:613:5, line:615:5>
| |-CXXDestructorDecl 0x5634746770a0 <line:617:5, line:620:5> line:617:5 ~CAutoFile 'void () noexcept'
| | `-CompoundStmt 0x563474688408 <line:618:5, line:620:5>
| |   `-CXXMemberCallExpr 0x5634746883e8 <line:619:9, col:16> 'void'
| |     `-MemberExpr 0x5634746883b8 <col:9> '<bound member function type>' ->fclose 0x5634746774f0
| |       `-CXXThisExpr 0x5634746883a8 <col:9> 'CAutoFile *' implicit this
| |-CXXConstructorDecl 0x563474677278 <line:623:5, col:40> col:5 CAutoFile 'void (const CAutoFile &)' delete trivial
| | `-ParmVarDecl 0x5634746771b8 <col:15, col:30> col:31 'const CAutoFile &'
| |-CXXMethodDecl 0x563474677428 <line:624:5, col:51> col:16 operator= 'CAutoFile &(const CAutoFile &)' delete trivial
| | `-ParmVarDecl 0x563474677338 <col:26, col:41> col:42 'const CAutoFile &'
| |-CXXMethodDecl 0x5634746774f0 <line:626:5, line:632:5> line:626:10 used fclose 'void ()'
| | `-CompoundStmt 0x563474688558 <line:627:5, line:632:5>
| |   `-IfStmt 0x563474688540 <line:628:9, line:631:9>
| |     |-OpaqueValueExpr 0x563474688528 <<invalid sloc>> 'bool'
| |     `-CompoundStmt 0x563474688510 <line:628:19, line:631:9>
| |       `-DeclStmt 0x5634746884e8 <line:629:13, col:27>
| |         `-VarDecl 0x563474688480 <col:13, <invalid sloc>> col:22 invalid file 'int':'int'
| |-CXXMethodDecl 0x5634746775f0 <line:638:5, col:81> col:11 invalid release 'int *()'
| | |-CompoundStmt 0x563474688648 <col:33, col:81>
| | | `-DeclStmt 0x563474688610 <col:35, col:51>
| | |   `-VarDecl 0x563474688598 <col:35, col:41> col:41 invalid ret 'int *'
| | `-FullComment 0x5634747754f0 <line:634:8, line:636:55>
| |   |-ParagraphComment 0x563474775420 <line:634:8, line:635:7>
| |   | |-TextComment 0x5634747753d0 <line:634:8, col:53> Text=" Get wrapped FILE* with transfer of ownership."
| |   | `-TextComment 0x5634747753f0 <line:635:7> Text=" "
| |   `-BlockCommandComment 0x563474775440 <col:8, line:636:55> Name="note"
| |     `-ParagraphComment 0x5634747754c0 <line:635:13, line:636:55>
| |       |-TextComment 0x563474775470 <line:635:13, col:101> Text=" This will invalidate the CAutoFile object, and makes it the responsibility of the caller"
| |       `-TextComment 0x563474775490 <line:636:7, col:55> Text=" of this function to clean up the returned FILE*."
| |-CXXMethodDecl 0x563474677750 <line:644:5, col:48> col:11 invalid Get 'int *() const'
| | |-CompoundStmt 0x563474688670 <col:33, col:48>
| | `-FullComment 0x563474775680 <line:640:8, line:642:52>
| |   |-ParagraphComment 0x5634747755b0 <line:640:8, line:641:7>
| |   | |-TextComment 0x563474775560 <line:640:8, col:56> Text=" Get wrapped FILE* without transfer of ownership."
| |   | `-TextComment 0x563474775580 <line:641:7> Text=" "
| |   `-BlockCommandComment 0x5634747755d0 <col:8, line:642:52> Name="note"
| |     `-ParagraphComment 0x563474775650 <line:641:13, line:642:52>
| |       |-TextComment 0x563474775600 <line:641:13, col:98> Text=" Ownership of the FILE* will remain with this class. Use this only if the scope of the"
| |       `-TextComment 0x563474775620 <line:642:7, col:52> Text=" CAutoFile outlives use of the passed pointer."
| |-CXXMethodDecl 0x563474677838 <line:648:5, col:61> col:10 IsNull 'bool () const'
| | |-CompoundStmt 0x5634746886a0 <col:33, col:61>
| | `-FullComment 0x563474775750 <line:646:8, col:69>
| |   `-ParagraphComment 0x563474775720 <col:8, col:69>
| |     `-TextComment 0x5634747756f0 <col:8, col:69> Text=" Return true if the wrapped FILE* is nullptr, false otherwise."
| |-CXXMethodDecl 0x563474677900 <line:653:5, col:50> col:9 GetType 'int () const'
| | `-CompoundStmt 0x563474688718 <col:34, col:50>
| |   `-ReturnStmt 0x563474688708 <col:36, col:43>
| |     `-ImplicitCastExpr 0x5634746886f0 <col:43> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5634746886c0 <col:43> 'const int' lvalue ->nType 0x563474676bf8
| |         `-CXXThisExpr 0x5634746886b0 <col:43> 'const CAutoFile *' implicit this
| |-CXXMethodDecl 0x5634746779c8 <line:654:5, col:53> col:9 GetVersion 'int () const'
| | `-CompoundStmt 0x563474688798 <col:34, col:53>
| |   `-ReturnStmt 0x563474688788 <col:36, col:43>
| |     `-ImplicitCastExpr 0x563474688770 <col:43> 'int' <LValueToRValue>
| |       `-MemberExpr 0x563474688740 <col:43> 'const int' lvalue ->nVersion 0x563474676c60
| |         `-CXXThisExpr 0x563474688730 <col:43> 'const CAutoFile *' implicit this
| |-CXXMethodDecl 0x563474677ba8 <line:656:5, line:662:5> line:656:10 invalid read 'void (char *, int)'
| | |-ParmVarDecl 0x563474677a80 <col:15, col:21> col:21 used pch 'char *'
| | |-ParmVarDecl 0x563474677b10 <col:26, col:33> col:33 invalid nSize 'int'
| | `-CompoundStmt 0x563474688a40 <line:657:5, line:662:5>
| |-CXXMethodDecl 0x563474687a78 <line:664:5, line:675:5> line:664:10 invalid ignore 'void (int)'
| | |-ParmVarDecl 0x5634746879e8 <col:17, col:24> col:24 invalid nSize 'int'
| | `-CompoundStmt 0x563474688e90 <line:665:5, line:675:5>
| |   `-DeclStmt 0x563474688c28 <line:668:9, col:33>
| |     `-VarDecl 0x563474688bc0 <col:9, col:32> col:23 used data 'unsigned char [4096]'
| |-CXXMethodDecl 0x563474687c60 <line:677:5, line:683:5> line:677:10 invalid write 'void (const char *, int)'
| | |-ParmVarDecl 0x563474687b38 <col:16, col:28> col:28 used pch 'const char *'
| | |-ParmVarDecl 0x563474687bc8 <col:33, col:40> col:40 invalid nSize 'int'
| | `-CompoundStmt 0x563474689040 <line:678:5, line:683:5>
| |-FunctionTemplateDecl 0x563474687f68 <line:685:5, line:693:5> line:686:16 operator<<
| | |-TemplateTypeParmDecl 0x563474687d10 <line:685:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x563474687ec8 <line:686:5, line:693:5> line:686:16 operator<< 'CAutoFile &(const T &)'
| |   |-ParmVarDecl 0x563474687dd8 <col:27, col:36> col:36 referenced obj 'const T &'
| |   `-CompoundStmt 0x563474689220 <line:687:5, line:693:5>
| |     |-CallExpr 0x563474689198 <line:691:9, col:31> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x5634746890c8 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Serialize' 0x56347458f418 0x5634745ac278 0x5634745995a8 0x563474593318 0x563474592c88 0x5634745925a8 0x563474591f88 0x5634745919a8 0x5634745915b8
| |     | |-UnaryOperator 0x563474689160 <col:21, col:22> 'CAutoFile' lvalue prefix '*' cannot overflow
| |     | | `-CXXThisExpr 0x563474689150 <col:22> 'CAutoFile *' this
| |     | `-DeclRefExpr 0x563474689178 <col:28> 'const T' lvalue ParmVar 0x563474687dd8 'obj' 'const T &'
| |     `-ReturnStmt 0x563474689210 <line:692:9, col:22>
| |       `-ParenExpr 0x5634746891f0 <col:16, col:22> 'CAutoFile' lvalue
| |         `-UnaryOperator 0x5634746891d8 <col:17, col:18> 'CAutoFile' lvalue prefix '*' cannot overflow
| |           `-CXXThisExpr 0x5634746891c8 <col:18> 'CAutoFile *' this
| `-FunctionTemplateDecl 0x563474688218 <line:695:5, line:703:5> line:696:16 operator>>
|   |-TemplateTypeParmDecl 0x563474687fc8 <line:695:14, col:23> col:23 referenced typename depth 0 index 0 T
|   `-CXXMethodDecl 0x563474688178 <line:696:5, line:703:5> line:696:16 operator>> 'CAutoFile &(T &&)'
|     |-ParmVarDecl 0x563474688088 <col:27, col:31> col:31 referenced obj 'T &&'
|     `-CompoundStmt 0x563474689428 <line:697:5, line:703:5>
|       |-CallExpr 0x5634746893a0 <line:701:9, col:33> '<dependent type>'
|       | |-UnresolvedLookupExpr 0x5634746892b8 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Unserialize' 0x5634745937b8 0x5634745ac768 0x5634745b5e88 0x5634745b4e18 0x5634745b40a8 0x5634745b6c48 0x563474599ae8 0x563474599138 0x563474598b38 0x563474595b58 0x563474597fb8 0x563474598558
|       | |-UnaryOperator 0x563474689368 <col:23, col:24> 'CAutoFile' lvalue prefix '*' cannot overflow
|       | | `-CXXThisExpr 0x563474689358 <col:24> 'CAutoFile *' this
|       | `-DeclRefExpr 0x563474689380 <col:30> 'T' lvalue ParmVar 0x563474688088 'obj' 'T &&'
|       `-ReturnStmt 0x563474689418 <line:702:9, col:22>
|         `-ParenExpr 0x5634746893f8 <col:16, col:22> 'CAutoFile' lvalue
|           `-UnaryOperator 0x5634746893e0 <col:17, col:18> 'CAutoFile' lvalue prefix '*' cannot overflow
|             `-CXXThisExpr 0x5634746893d0 <col:18> 'CAutoFile *' this
|-CXXRecordDecl 0x563474689478 <line:712:1, line:857:1> line:712:7 invalid class CBufferedFile definition
| |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor trivial user_declared has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-FullComment 0x5634747759b0 <line:706:4, line:710:83>
| | |-ParagraphComment 0x563474775910 <line:706:4, line:707:82>
| | | |-TextComment 0x5634747758c0 <line:706:4, col:79> Text=" Non-refcounted RAII wrapper around a FILE* that implements a ring buffer to"
| | | `-TextComment 0x5634747758e0 <line:707:3, col:82> Text="  deserialize from. It guarantees the ability to rewind a given number of bytes."
| | `-ParagraphComment 0x563474775980 <line:709:3, line:710:83>
| |   |-TextComment 0x563474775930 <line:709:3, col:76> Text="  Will automatically close the file when it goes out of scope if not null."
| |   `-TextComment 0x563474775950 <line:710:3, col:83> Text="  If you need to close the file early, use file.fclose() instead of fclose(file)."
| |-CXXRecordDecl 0x563474689598 <line:712:1, col:7> col:7 implicit referenced class CBufferedFile
| |-AccessSpecDecl 0x563474689628 <line:714:1, col:8> col:1 private
| |-FieldDecl 0x563474689668 <line:715:5, col:15> col:15 referenced nType 'const int'
| |-FieldDecl 0x5634746896d0 <line:716:5, col:15> col:15 referenced nVersion 'const int'
| |-FieldDecl 0x563474689748 <line:718:5, col:11> col:11 invalid src 'int *'
| | `-FullComment 0x563474775a80 <col:31, col:42>
| |   `-ParagraphComment 0x563474775a50 <col:31, col:42>
| |     `-TextComment 0x563474775a20 <col:31, col:42> Text=" source file"
| |-FieldDecl 0x5634746897f0 <line:719:5, col:14> col:14 invalid nSrcPos 'int'
| | `-FullComment 0x563474775b50 <col:31, col:72>
| |   `-ParagraphComment 0x563474775b20 <col:31, col:72>
| |     `-TextComment 0x563474775af0 <col:31, col:72> Text=" how many bytes have been read from source"
| |-FieldDecl 0x563474689890 <line:720:5, col:14> col:14 invalid nReadPos 'int'
| | `-FullComment 0x563474775c20 <col:31, col:70>
| |   `-ParagraphComment 0x563474775bf0 <col:31, col:70>
| |     `-TextComment 0x563474775bc0 <col:31, col:70> Text=" how many bytes have been read from this"
| |-FieldDecl 0x563474689930 <line:721:5, col:14> col:14 invalid nReadLimit 'int'
| | `-FullComment 0x563474775cf0 <col:31, col:73>
| |   `-ParagraphComment 0x563474775cc0 <col:31, col:73>
| |     `-TextComment 0x563474775c90 <col:31, col:73> Text=" up to which position we're allowed to read"
| |-FieldDecl 0x5634746899e8 <line:722:5, col:14> col:14 invalid nRewind 'int'
| | `-FullComment 0x563474775dc0 <col:31, col:68>
| |   `-ParagraphComment 0x563474775d90 <col:31, col:68>
| |     `-TextComment 0x563474775d60 <col:31, col:68> Text=" how many bytes we guarantee to rewind"
| |-AccessSpecDecl 0x563474689ae8 <line:725:1, col:10> col:1 protected
| |-CXXMethodDecl 0x563474689b58 <line:727:5, line:741:5> line:727:10 used Fill 'bool ()'
| | |-CompoundStmt 0x5634745be0d8 <col:17, line:741:5>
| | | |-DeclStmt 0x56347468b4f8 <line:728:9, col:51>
| | | | `-VarDecl 0x56347468b480 <col:9, col:22> col:22 used pos 'unsigned int'
| | | |-DeclStmt 0x56347468b5b0 <line:729:9, col:51>
| | | | `-VarDecl 0x56347468b528 <col:9, col:22> col:22 used readNow 'unsigned int'
| | | |-DeclStmt 0x56347468b678 <line:730:9, col:77>
| | | | `-VarDecl 0x56347468b5e0 <col:9, col:22> col:22 used nAvail 'unsigned int'
| | | |-IfStmt 0x56347468b798 <line:731:9, line:732:23>
| | | | |-BinaryOperator 0x56347468b700 <line:731:13, col:22> 'bool' '<'
| | | | | |-ImplicitCastExpr 0x56347468b6d0 <col:13> 'unsigned int' <LValueToRValue>
| | | | | | `-DeclRefExpr 0x56347468b690 <col:13> 'unsigned int' lvalue Var 0x56347468b5e0 'nAvail' 'unsigned int'
| | | | | `-ImplicitCastExpr 0x56347468b6e8 <col:22> 'unsigned int' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x56347468b6b0 <col:22> 'unsigned int' lvalue Var 0x56347468b528 'readNow' 'unsigned int'
| | | | `-BinaryOperator 0x56347468b778 <line:732:13, col:23> 'unsigned int' lvalue '='
| | | |   |-DeclRefExpr 0x56347468b720 <col:13> 'unsigned int' lvalue Var 0x56347468b528 'readNow' 'unsigned int'
| | | |   `-ImplicitCastExpr 0x56347468b760 <col:23> 'unsigned int' <LValueToRValue>
| | | |     `-DeclRefExpr 0x56347468b740 <col:23> 'unsigned int' lvalue Var 0x56347468b5e0 'nAvail' 'unsigned int'
| | | |-IfStmt 0x56347468b860 <line:733:9, line:734:20>
| | | | |-BinaryOperator 0x56347468b820 <line:733:13, col:24> 'bool' '=='
| | | | | |-ImplicitCastExpr 0x56347468b7f0 <col:13> 'unsigned int' <LValueToRValue>
| | | | | | `-DeclRefExpr 0x56347468b7b0 <col:13> 'unsigned int' lvalue Var 0x56347468b528 'readNow' 'unsigned int'
| | | | | `-ImplicitCastExpr 0x56347468b808 <col:24> 'unsigned int' <IntegralCast>
| | | | |   `-IntegerLiteral 0x56347468b7d0 <col:24> 'int' 0
| | | | `-ReturnStmt 0x56347468b850 <line:734:13, col:20>
| | | |   `-CXXBoolLiteralExpr 0x56347468b840 <col:20> 'bool' false
| | | |-DeclStmt 0x56347468b9b8 <line:735:9, col:68>
| | | | `-VarDecl 0x56347468b8a0 <col:9, col:16> col:16 invalid nBytes 'int'
| | | |-IfStmt 0x5634745be090 <line:736:9, line:738:9>
| | | | |-OpaqueValueExpr 0x5634745be078 <<invalid sloc>> 'bool'
| | | | `-CompoundStmt 0x5634745be068 <line:736:26, line:738:9>
| | | `-ReturnStmt 0x5634745be0c8 <line:740:9, col:16>
| | |   `-CXXBoolLiteralExpr 0x5634745be0b8 <col:16> 'bool' true
| | `-FullComment 0x563474775e90 <line:726:8, col:52>
| |   `-ParagraphComment 0x563474775e60 <col:8, col:52>
| |     `-TextComment 0x563474775e30 <col:8, col:52> Text=" read data from the source to fill the buffer"
| |-AccessSpecDecl 0x563474689bf8 <line:743:1, col:7> col:1 public
| |-CXXConstructorDecl 0x563474689f88 <line:744:5, line:750:5> line:744:5 invalid CBufferedFile 'void (int *, int, int, int, int)'
| | |-ParmVarDecl 0x563474689c48 <col:19, col:25> col:25 invalid fileIn 'int *'
| | |-ParmVarDecl 0x563474689cd8 <col:33, col:42> col:42 invalid nBufSize 'int'
| | |-ParmVarDecl 0x563474689d68 <col:52, col:61> col:61 invalid nRewindIn 'int'
| | |-ParmVarDecl 0x563474689de8 <col:72, col:76> col:76 used nTypeIn 'int'
| | |-ParmVarDecl 0x563474689e68 <col:85, col:89> col:89 used nVersionIn 'int'
| | |-CXXCtorInitializer Field 0x563474689668 'nType' 'const int'
| | | `-ImplicitCastExpr 0x5634745be168 <line:745:15> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5634745be128 <col:15> 'int' lvalue ParmVar 0x563474689de8 'nTypeIn' 'int'
| | |-CXXCtorInitializer Field 0x5634746896d0 'nVersion' 'const int'
| | | `-ImplicitCastExpr 0x5634745be1e8 <col:34> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5634745be1a8 <col:34> 'int' lvalue ParmVar 0x563474689e68 'nVersionIn' 'int'
| | `-CompoundStmt 0x5634745be3d0 <line:746:5, line:750:5>
| |-CXXDestructorDecl 0x56347468a0a0 <line:752:5, line:755:5> line:752:5 ~CBufferedFile 'void () noexcept'
| | `-CompoundStmt 0x5634745be440 <line:753:5, line:755:5>
| |   `-CXXMemberCallExpr 0x5634745be420 <line:754:9, col:16> 'void'
| |     `-MemberExpr 0x5634745be3f0 <col:9> '<bound member function type>' ->fclose 0x56347468a6a8
| |       `-CXXThisExpr 0x5634745be3e0 <col:9> 'CBufferedFile *' implicit this
| |-CXXConstructorDecl 0x56347468a278 <line:758:5, col:48> col:5 CBufferedFile 'void (const CBufferedFile &)' delete trivial
| | `-ParmVarDecl 0x56347468a1b8 <col:19, col:38> col:39 'const CBufferedFile &'
| |-CXXMethodDecl 0x56347468a428 <line:759:5, col:59> col:20 operator= 'CBufferedFile &(const CBufferedFile &)' delete trivial
| | `-ParmVarDecl 0x56347468a338 <col:30, col:49> col:50 'const CBufferedFile &'
| |-CXXMethodDecl 0x56347468a520 <line:761:5, col:47> col:9 GetVersion 'int () const'
| | `-CompoundStmt 0x5634745be4c0 <col:28, col:47>
| |   `-ReturnStmt 0x5634745be4b0 <col:30, col:37>
| |     `-ImplicitCastExpr 0x5634745be498 <col:37> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5634745be468 <col:37> 'const int' lvalue ->nVersion 0x5634746896d0
| |         `-CXXThisExpr 0x5634745be458 <col:37> 'const CBufferedFile *' implicit this
| |-CXXMethodDecl 0x56347468a5e8 <line:762:5, col:41> col:9 GetType 'int () const'
| | `-CompoundStmt 0x5634745be540 <col:25, col:41>
| |   `-ReturnStmt 0x5634745be530 <col:27, col:34>
| |     `-ImplicitCastExpr 0x5634745be518 <col:34> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5634745be4e8 <col:34> 'const int' lvalue ->nType 0x563474689668
| |         `-CXXThisExpr 0x5634745be4d8 <col:34> 'const CBufferedFile *' implicit this
| |-CXXMethodDecl 0x56347468a6a8 <line:764:5, line:770:5> line:764:10 used fclose 'void ()'
| | `-CompoundStmt 0x5634745be690 <line:765:5, line:770:5>
| |   `-IfStmt 0x5634745be678 <line:766:9, line:769:9>
| |     |-OpaqueValueExpr 0x5634745be660 <<invalid sloc>> 'bool'
| |     `-CompoundStmt 0x5634745be648 <line:766:18, line:769:9>
| |       `-DeclStmt 0x5634745be620 <line:767:13, col:26>
| |         `-VarDecl 0x5634745be5b8 <col:13, <invalid sloc>> col:22 invalid src 'int':'int'
| |-CXXMethodDecl 0x56347468a798 <line:773:5, line:775:5> line:773:10 eof 'bool () const'
| | |-CompoundStmt 0x5634745be718 <col:22, line:775:5>
| | `-FullComment 0x563474775f60 <line:772:8, col:57>
| |   `-ParagraphComment 0x563474775f30 <col:8, col:57>
| |     `-TextComment 0x563474775f00 <col:8, col:57> Text=" check whether we're at the end of the source file"
| |-CXXMethodDecl 0x56347468a9a8 <line:778:5, line:795:5> line:778:10 invalid read 'void (char *, int)'
| | |-ParmVarDecl 0x56347468a880 <col:15, col:21> col:21 used pch 'char *'
| | |-ParmVarDecl 0x56347468a910 <col:26, col:33> col:33 invalid nSize 'int'
| | |-CompoundStmt 0x5634745beaf8 <col:40, line:795:5>
| | `-FullComment 0x563474776030 <line:777:8, col:30>
| |   `-ParagraphComment 0x563474776000 <col:8, col:30>
| |     `-TextComment 0x563474775fd0 <col:8, col:30> Text=" read a number of bytes"
| |-CXXMethodDecl 0x56347468aac0 <line:798:5, line:800:5> line:798:14 invalid GetPos 'int () const'
| | |-CompoundStmt 0x5634745beb18 <col:29, line:800:5>
| | `-FullComment 0x563474776100 <line:797:8, col:43>
| |   `-ParagraphComment 0x5634747760d0 <col:8, col:43>
| |     `-TextComment 0x5634747760a0 <col:8, col:43> Text=" return the current reading position"
| |-CXXMethodDecl 0x56347468ac40 <line:803:5, line:817:5> line:803:10 invalid SetPos 'bool (int)'
| | |-ParmVarDecl 0x56347468abb0 <col:17, col:26> col:26 invalid nPos 'int'
| | |-CompoundStmt 0x5634745bed30 <col:32, line:817:5>
| | | |-DeclStmt 0x5634745bebb8 <line:804:9, col:39>
| | | | `-VarDecl 0x5634745beb50 <col:9, col:16> col:16 invalid bufsize 'int'
| | | |-IfStmt 0x5634745bec50 <line:805:9, line:809:9>
| | | | |-OpaqueValueExpr 0x5634745bec38 <<invalid sloc>> 'bool'
| | | | `-CompoundStmt 0x5634745bec20 <line:805:39, line:809:9>
| | | |   `-ReturnStmt 0x5634745bec10 <line:808:13, col:20>
| | | |     `-CXXBoolLiteralExpr 0x5634745bec00 <col:20> 'bool' false
| | | |-IfStmt 0x5634745bece8 <line:810:9, line:814:9>
| | | | |-OpaqueValueExpr 0x5634745becd0 <<invalid sloc>> 'bool'
| | | | `-CompoundStmt 0x5634745becb8 <line:810:29, line:814:9>
| | | |   `-ReturnStmt 0x5634745beca8 <line:813:13, col:20>
| | | |     `-CXXBoolLiteralExpr 0x5634745bec98 <col:20> 'bool' false
| | | `-ReturnStmt 0x5634745bed20 <line:816:9, col:16>
| | |   `-CXXBoolLiteralExpr 0x5634745bed10 <col:16> 'bool' true
| | `-FullComment 0x5634747761d0 <line:802:8, col:42>
| |   `-ParagraphComment 0x5634747761a0 <col:8, col:42>
| |     `-TextComment 0x563474776170 <col:8, col:42> Text=" rewind to a given reading position"
| |-CXXMethodDecl 0x56347468ada0 <line:819:5, line:829:5> line:819:10 invalid Seek 'bool (int)'
| | |-ParmVarDecl 0x56347468ad10 <col:15, col:24> col:24 invalid nPos 'int'
| | `-CompoundStmt 0x5634745beff8 <col:30, line:829:5>
| |   |-DeclStmt 0x5634745bede0 <line:820:9, col:29>
| |   | `-VarDecl 0x5634745bed78 <col:9, col:14> col:14 used nLongPos 'long'
| |   |-IfStmt 0x5634745bee30 <line:821:9, line:822:20>
| |   | |-OpaqueValueExpr 0x5634745bee18 <<invalid sloc>> 'bool'
| |   | `-ReturnStmt 0x5634745bee08 <col:13, col:20>
| |   |   `-CXXBoolLiteralExpr 0x5634745bedf8 <col:20> 'bool' false
| |   |-IfStmt 0x5634745beef0 <line:823:9, line:824:20>
| |   | |-OpaqueValueExpr 0x5634745beed8 <<invalid sloc>> 'bool'
| |   | `-ReturnStmt 0x5634745beec8 <col:13, col:20>
| |   |   `-CXXBoolLiteralExpr 0x5634745beeb8 <col:20> 'bool' false
| |   `-ReturnStmt 0x5634745befe8 <line:828:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5634745befd8 <col:16> 'bool' true
| |-CXXMethodDecl 0x56347468af30 <line:833:5, line:838:5> line:833:10 invalid SetLimit 'bool (int)'
| | |-ParmVarDecl 0x56347468aea0 <col:19, col:33> col:28 invalid nPos 'int' cinit
| | | `-OpaqueValueExpr 0x56347468b450 <col:33> 'int'
| | |-CompoundStmt 0x5634745bf0b8 <col:73, line:838:5>
| | | |-IfStmt 0x5634745bf070 <line:834:9, line:835:20>
| | | | |-OpaqueValueExpr 0x5634745bf058 <<invalid sloc>> 'bool'
| | | | `-ReturnStmt 0x5634745bf048 <col:13, col:20>
| | | |   `-CXXBoolLiteralExpr 0x5634745bf038 <col:20> 'bool' false
| | | `-ReturnStmt 0x5634745bf0a8 <line:837:9, col:16>
| | |   `-CXXBoolLiteralExpr 0x5634745bf098 <col:16> 'bool' true
| | `-FullComment 0x5634747762c0 <line:831:8, line:832:37>
| |   `-ParagraphComment 0x563474776290 <line:831:8, line:832:37>
| |     |-TextComment 0x563474776240 <line:831:8, col:49> Text=" prevent reading beyond a certain position"
| |     `-TextComment 0x563474776260 <line:832:8, col:37> Text=" no argument removes the limit"
| |-FunctionTemplateDecl 0x56347468b228 <line:840:5, line:845:5> line:841:20 operator>>
| | |-TemplateTypeParmDecl 0x56347468afd8 <line:840:14, col:23> col:23 referenced typename depth 0 index 0 T
| | `-CXXMethodDecl 0x56347468b188 <line:841:5, line:845:5> line:841:20 operator>> 'CBufferedFile &(T &&)'
| |   |-ParmVarDecl 0x56347468b098 <col:31, col:35> col:35 referenced obj 'T &&'
| |   `-CompoundStmt 0x5634745bf268 <col:40, line:845:5>
| |     |-CallExpr 0x5634745bf1e0 <line:843:9, col:33> '<dependent type>'
| |     | |-UnresolvedLookupExpr 0x5634745bf0f8 <col:9, col:11> '<overloaded function type>' lvalue (no ADL) = 'Unserialize' 0x5634745937b8 0x5634745ac768 0x5634745b5e88 0x5634745b4e18 0x5634745b40a8 0x5634745b6c48 0x563474599ae8 0x563474599138 0x563474598b38 0x563474595b58 0x563474597fb8 0x563474598558
| |     | |-UnaryOperator 0x5634745bf1a8 <col:23, col:24> 'CBufferedFile' lvalue prefix '*' cannot overflow
| |     | | `-CXXThisExpr 0x5634745bf198 <col:24> 'CBufferedFile *' this
| |     | `-DeclRefExpr 0x5634745bf1c0 <col:30> 'T' lvalue ParmVar 0x56347468b098 'obj' 'T &&'
| |     `-ReturnStmt 0x5634745bf258 <line:844:9, col:22>
| |       `-ParenExpr 0x5634745bf238 <col:16, col:22> 'CBufferedFile' lvalue
| |         `-UnaryOperator 0x5634745bf220 <col:17, col:18> 'CBufferedFile' lvalue prefix '*' cannot overflow
| |           `-CXXThisExpr 0x5634745bf210 <col:18> 'CBufferedFile *' this
| `-CXXMethodDecl 0x56347468b388 <line:848:5, line:856:5> line:848:10 FindByte 'void (char)'
|   |-ParmVarDecl 0x56347468b2c8 <col:19, col:24> col:24 used ch 'char'
|   |-CompoundStmt 0x5634745bf3f8 <col:28, line:856:5>
|   | `-WhileStmt 0x5634745bf3e0 <line:849:9, line:855:9>
|   |   |-CXXBoolLiteralExpr 0x5634745bf288 <line:849:16> 'bool' true
|   |   `-CompoundStmt 0x5634745bf3c0 <col:22, line:855:9>
|   |     |-IfStmt 0x5634745bf330 <line:850:13, line:851:22>
|   |     | |-OpaqueValueExpr 0x5634745bf318 <<invalid sloc>> 'bool'
|   |     | `-CXXMemberCallExpr 0x5634745bf2f8 <col:17, col:22> 'bool'
|   |     |   `-MemberExpr 0x5634745bf2c8 <col:17> '<bound member function type>' ->Fill 0x563474689b58
|   |     |     `-CXXThisExpr 0x5634745bf2b8 <col:17> 'CBufferedFile *' implicit this
|   |     `-IfStmt 0x5634745bf398 <line:852:13, line:853:17>
|   |       |-OpaqueValueExpr 0x5634745bf380 <<invalid sloc>> 'bool'
|   |       `-BreakStmt 0x5634745bf378 <col:17>
|   `-FullComment 0x563474776410 <line:847:8, col:74>
|     `-ParagraphComment 0x5634747763e0 <col:8, col:74>
|       `-TextComment 0x5634747763b0 <col:8, col:74> Text=" search for a given byte in the stream, and remain positioned on it"
|-CXXRecordDecl 0x5634745bf410 <bitcoin/src/threadinterrupt.h:20:1, line:35:1> line:20:7 referenced invalid class CThreadInterrupt definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634745bf528 <col:1, col:7> col:7 implicit referenced class CThreadInterrupt
| |-AccessSpecDecl 0x5634745bf5b8 <line:22:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634745bf640 <line:23:5, col:22> col:5 CThreadInterrupt 'void ()'
| |-CXXConversionDecl 0x5634745bf748 <line:24:5, col:30> col:14 operator bool 'bool () const'
| |-CXXMethodDecl 0x5634745bf818 <line:25:5, col:21> col:10 operator() 'void ()'
| |-CXXMethodDecl 0x5634745bf8d8 <line:26:5, col:16> col:10 reset 'void ()'
| |-CXXMethodDecl 0x5634745bfa30 <line:27:5, col:54> col:10 invalid sleep_for 'bool (int)'
| | `-ParmVarDecl 0x5634745bf9a0 <col:20, col:46> col:46 invalid rel_time 'int'
| |-CXXMethodDecl 0x5634745bfb90 <line:28:5, col:49> col:10 invalid sleep_for 'bool (int)'
| | `-ParmVarDecl 0x5634745bfb00 <col:20, col:41> col:41 invalid rel_time 'int'
| |-CXXMethodDecl 0x5634745bfcf0 <line:29:5, col:49> col:10 invalid sleep_for 'bool (int)'
| | `-ParmVarDecl 0x5634745bfc60 <col:20, col:41> col:41 invalid rel_time 'int'
| |-AccessSpecDecl 0x5634745bfd98 <line:31:1, col:8> col:1 private
| |-FieldDecl 0x5634745bfde8 <line:32:5, col:29> col:29 invalid cond 'int'
| `-FieldDecl 0x5634745bfe48 <line:33:5, col:11> col:11 mut 'Mutex':'int'
|-CXXRecordDecl 0x5634745bfed0 <bitcoin/src/net.h:39:1, col:7> col:7 referenced class CScheduler
|-CXXRecordDecl 0x5634746939e0 <line:40:1, col:7> col:7 referenced class CNode
|-CXXRecordDecl 0x563474693a90 <line:41:1, col:7> col:7 referenced class BanMan
|-VarDecl 0x563474693b78 <line:44:1, col:44> col:19 used DEFAULT_WHITELISTRELAY 'const bool' static cinit
| |-CXXBoolLiteralExpr 0x563474693be0 <col:44> 'bool' true
| `-FullComment 0x5634747764e0 <line:43:4, col:33>
|   `-ParagraphComment 0x5634747764b0 <col:4, col:33>
|     `-TextComment 0x563474776480 <col:4, col:33> Text=" Default for -whitelistrelay. "
|-VarDecl 0x563474693c88 <line:46:1, col:49> col:19 used DEFAULT_WHITELISTFORCERELAY 'const bool' static cinit
| |-CXXBoolLiteralExpr 0x563474693cf0 <col:49> 'bool' false
| `-FullComment 0x5634747765b0 <line:45:4, col:38>
|   `-ParagraphComment 0x563474776580 <col:4, col:38>
|     `-TextComment 0x563474776550 <col:4, col:38> Text=" Default for -whitelistforcerelay. "
|-VarDecl 0x563474693da0 <line:49:1, col:38> col:18 PING_INTERVAL 'const int' static cinit
| |-BinaryOperator 0x563474693e48 <col:34, col:38> 'int' '*'
| | |-IntegerLiteral 0x563474693e08 <col:34> 'int' 2
| | `-IntegerLiteral 0x563474693e28 <col:38> 'int' 60
| `-FullComment 0x563474776680 <line:48:4, col:94>
|   `-ParagraphComment 0x563474776650 <col:4, col:94>
|     `-TextComment 0x563474776620 <col:4, col:94> Text=" Time between pings automatically sent out for latency probing and keepalive (in seconds). "
|-VarDecl 0x563474693f00 <line:51:1, col:42> col:18 referenced TIMEOUT_INTERVAL 'const int' static cinit
| |-BinaryOperator 0x563474693fa8 <col:37, col:42> 'int' '*'
| | |-IntegerLiteral 0x563474693f68 <col:37> 'int' 20
| | `-IntegerLiteral 0x563474693f88 <col:42> 'int' 60
| `-FullComment 0x563474776750 <line:50:4, col:87>
|   `-ParagraphComment 0x563474776720 <col:4, col:87>
|     `-TextComment 0x5634747766f0 <col:4, col:87> Text=" Time after which to disconnect, after waiting for a ping response (or inactivity). "
|-VarDecl 0x563474694060 <line:53:1, col:36> col:18 FEELER_INTERVAL 'const int' static cinit
| |-IntegerLiteral 0x5634746940c8 <col:36> 'int' 120
| `-FullComment 0x563474776820 <line:52:4, col:73>
|   `-ParagraphComment 0x5634747767f0 <col:4, col:73>
|     `-TextComment 0x5634747767c0 <col:4, col:73> Text=" Run the feeler connection loop once every 2 minutes or 120 seconds. *"
|-VarDecl 0x563474694180 <line:55:1, col:40> col:27 MAX_INV_SZ 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x563474694208 <col:40> 'const unsigned int' <IntegralCast>
| | `-IntegerLiteral 0x5634746941e8 <col:40> 'int' 50000
| `-FullComment 0x5634747768f0 <line:54:4, col:63>
|   `-ParagraphComment 0x5634747768c0 <col:4, col:63>
|     `-TextComment 0x563474776890 <col:4, col:63> Text=" The maximum number of entries in an 'inv' protocol message "
|-VarDecl 0x5634746942c0 <line:57:1, col:44> col:27 MAX_LOCATOR_SZ 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x563474694348 <col:44> 'const unsigned int' <IntegralCast>
| | `-IntegerLiteral 0x563474694328 <col:44> 'int' 101
| `-FullComment 0x5634747769c0 <line:56:4, col:47>
|   `-ParagraphComment 0x563474776990 <col:4, col:47>
|     `-TextComment 0x563474776960 <col:4, col:47> Text=" The maximum number of entries in a locator "
|-VarDecl 0x563474694400 <line:59:1, col:46> col:27 referenced MAX_ADDR_TO_SEND 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x563474694488 <col:46> 'const unsigned int' <IntegralCast>
| | `-IntegerLiteral 0x563474694468 <col:46> 'int' 1000
| `-FullComment 0x563474776a90 <line:58:4, col:73>
|   `-ParagraphComment 0x563474776a60 <col:4, col:73>
|     `-TextComment 0x563474776a30 <col:4, col:73> Text=" The maximum number of new addresses to accumulate before announcing. "
|-VarDecl 0x563474694540 <line:61:1, col:68> col:27 referenced MAX_PROTOCOL_MESSAGE_LENGTH 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x563474694648 <col:57, col:68> 'const unsigned int' <IntegralCast>
| | `-BinaryOperator 0x563474694628 <col:57, col:68> 'int' '*'
| |   |-BinaryOperator 0x5634746945e8 <col:57, col:61> 'int' '*'
| |   | |-IntegerLiteral 0x5634746945a8 <col:57> 'int' 4
| |   | `-IntegerLiteral 0x5634746945c8 <col:61> 'int' 1000
| |   `-IntegerLiteral 0x563474694608 <col:68> 'int' 1000
| `-FullComment 0x563474776b60 <line:60:4, col:97>
|   `-ParagraphComment 0x563474776b30 <col:4, col:97>
|     `-TextComment 0x563474776b00 <col:4, col:97> Text=" Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). "
|-VarDecl 0x563474694700 <line:63:1, col:51> col:27 MAX_SUBVERSION_LENGTH 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x563474694788 <col:51> 'const unsigned int' <IntegralCast>
| | `-IntegerLiteral 0x563474694768 <col:51> 'int' 256
| `-FullComment 0x563474777270 <line:62:4, col:65>
|   `-ParagraphComment 0x563474776c00 <col:4, col:65>
|     `-TextComment 0x563474776bd0 <col:4, col:65> Text=" Maximum length of the user agent string in `version` message "
|-VarDecl 0x563474694840 <line:65:1, col:56> col:18 MAX_OUTBOUND_FULL_RELAY_CONNECTIONS 'const int' static cinit
| |-IntegerLiteral 0x5634746948a8 <col:56> 'int' 8
| `-FullComment 0x563474777340 <line:64:4, col:106>
|   `-ParagraphComment 0x563474777310 <col:4, col:106>
|     `-TextComment 0x5634747772e0 <col:4, col:106> Text=" Maximum number of automatic outgoing nodes over which we'll relay everything (blocks, tx, addrs, etc) "
|-VarDecl 0x563474694960 <line:67:1, col:44> col:18 MAX_ADDNODE_CONNECTIONS 'const int' static cinit
| |-IntegerLiteral 0x5634746949c8 <col:44> 'int' 8
| `-FullComment 0x563474777410 <line:66:4, col:45>
|   `-ParagraphComment 0x5634747773e0 <col:4, col:45>
|     `-TextComment 0x5634747773b0 <col:4, col:45> Text=" Maximum number of addnode outgoing nodes "
|-VarDecl 0x563474694a80 <line:69:1, col:48> col:18 MAX_BLOCKS_ONLY_CONNECTIONS 'const int' static cinit
| |-IntegerLiteral 0x563474694ae8 <col:48> 'int' 2
| `-FullComment 0x5634747774e0 <line:68:4, col:60>
|   `-ParagraphComment 0x5634747774b0 <col:4, col:60>
|     `-TextComment 0x563474777480 <col:4, col:60> Text=" Maximum number of block-relay-only outgoing connections "
|-VarDecl 0x563474694b98 <line:71:1, col:36> col:19 DEFAULT_LISTEN 'const bool' static cinit
| |-CXXBoolLiteralExpr 0x563474694c00 <col:36> 'bool' true
| `-FullComment 0x5634747775b0 <line:70:4, col:20>
|   `-ParagraphComment 0x563474777580 <col:4, col:20>
|     `-TextComment 0x563474777550 <col:4, col:20> Text=" -listen default "
|-VarDecl 0x563474694ca8 <line:76:1, col:34> col:19 DEFAULT_UPNP 'const bool' static cinit
| `-CXXBoolLiteralExpr 0x563474694d10 <col:34> 'bool' false
|-VarDecl 0x563474694dc0 <line:79:1, col:58> col:27 DEFAULT_MAX_PEER_CONNECTIONS 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x563474694e48 <col:58> 'const unsigned int' <IntegralCast>
| | `-IntegerLiteral 0x563474694e28 <col:58> 'int' 125
| `-FullComment 0x563474777680 <line:78:4, col:56>
|   `-ParagraphComment 0x563474777650 <col:4, col:56>
|     `-TextComment 0x563474777620 <col:4, col:56> Text=" The maximum number of peer connections to maintain. "
|-VarDecl 0x563474694f10 <line:81:1, col:23> col:23 invalid DEFAULT_MAX_UPLOAD_TARGET 'const int' static
| `-FullComment 0x563474777750 <line:80:4, col:52>
|   `-ParagraphComment 0x563474777720 <col:4, col:52>
|     `-TextComment 0x5634747776f0 <col:4, col:52> Text=" The default for -maxuploadtarget. 0 = Unlimited "
|-VarDecl 0x563474694ff0 <line:83:1, col:23> col:23 invalid MAX_UPLOAD_TIMEFRAME 'const int' static
| `-FullComment 0x563474777820 <line:82:4, col:55>
|   `-ParagraphComment 0x5634747777f0 <col:4, col:55>
|     `-TextComment 0x5634747777c0 <col:4, col:55> Text=" The default timeframe for -maxuploadtarget. 1 day. "
|-VarDecl 0x563474695138 <line:85:1, col:40> col:19 referenced DEFAULT_BLOCKSONLY 'const bool' static cinit
| |-CXXBoolLiteralExpr 0x5634746951a0 <col:40> 'bool' false
| `-FullComment 0x5634747778f0 <line:84:4, col:27>
|   `-ParagraphComment 0x5634747778c0 <col:4, col:27>
|     `-TextComment 0x563474777890 <col:4, col:27> Text=" Default for blocks only"
|-VarDecl 0x563474695260 <line:87:1, col:22> col:22 invalid DEFAULT_PEER_CONNECT_TIMEOUT 'const int' static
| `-FullComment 0x5634747779c0 <line:86:4, col:25>
|   `-ParagraphComment 0x563474777990 <col:4, col:25>
|     `-TextComment 0x563474777960 <col:4, col:25> Text=" -peertimeout default "
|-VarDecl 0x5634746952f8 <line:89:1, col:42> col:19 DEFAULT_FORCEDNSSEED 'const bool' static cinit
| `-CXXBoolLiteralExpr 0x563474695360 <col:42> 'bool' false
|-VarDecl 0x5634746953f0 <line:90:1, col:21> col:21 invalid DEFAULT_MAXRECEIVEBUFFER 'const int' static
|-VarDecl 0x5634746954e0 <line:91:1, col:21> col:21 invalid DEFAULT_MAXSENDBUFFER 'const int' static
|-TypedefDecl 0x5634746955d0 <line:93:1, col:17> col:17 referenced invalid NodeId 'int'
| `-BuiltinType 0x5634744cb780 'int'
|-CXXRecordDecl 0x563474695628 <line:95:1, line:101:1> line:95:8 referenced invalid struct AddedNodeInfo definition
| |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563474695748 <col:1, col:8> col:8 implicit struct AddedNodeInfo
| |-FieldDecl 0x563474695800 <line:97:5, col:17> col:17 invalid strAddedNode 'int'
| |-FieldDecl 0x563474695860 <line:98:5, col:14> col:14 invalid resolvedAddress 'CService'
| |-FieldDecl 0x5634746958c0 <line:99:5, col:10> col:10 fConnected 'bool'
| `-FieldDecl 0x563474695920 <line:100:5, col:10> col:10 fInbound 'bool'
|-CXXRecordDecl 0x563474697a00 <line:103:1, col:7> col:7 referenced class CNodeStats
|-CXXRecordDecl 0x563474697ab0 <line:104:1, col:7> col:7 referenced class CClientUIInterface
|-CXXRecordDecl 0x563474697b60 <line:106:1, line:117:1> line:106:8 referenced invalid struct CSerializedNetMsg definition
| |-DefinitionData empty aggregate standard_layout trivially_copyable trivial literal has_user_declared_ctor has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists trivial user_declared
| | |-CopyAssignment trivial has_const_param user_declared implicit_has_const_param
| | |-MoveAssignment exists trivial user_declared
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563474697c78 <col:1, col:8> col:8 implicit referenced struct CSerializedNetMsg
| |-CXXConstructorDecl 0x563474697d70 <line:108:5, col:33> col:5 constexpr CSerializedNetMsg 'void ()' default trivial noexcept-unevaluated 0x563474697d70
| |-CXXConstructorDecl 0x563474697f18 <line:109:5, col:52> col:5 constexpr CSerializedNetMsg 'void (CSerializedNetMsg &&)' default trivial noexcept-unevaluated 0x563474697f18
| | `-ParmVarDecl 0x563474697e58 <col:23, col:40> col:42 'CSerializedNetMsg &&'
| |-CXXMethodDecl 0x5634746980c8 <line:110:5, col:63> col:24 constexpr operator= 'CSerializedNetMsg &(CSerializedNetMsg &&)' default trivial noexcept-unevaluated 0x5634746980c8
| | `-ParmVarDecl 0x563474697fd8 <col:34, col:51> col:53 'CSerializedNetMsg &&'
| |-CXXConstructorDecl 0x563474698268 <line:112:5, col:60> col:5 CSerializedNetMsg 'void (const CSerializedNetMsg &)' delete trivial
| | `-ParmVarDecl 0x5634746981a8 <col:23, col:48> col:48 msg 'const CSerializedNetMsg &'
| |-CXXMethodDecl 0x5634746983e8 <line:113:5, col:67> col:24 operator= 'CSerializedNetMsg &(const CSerializedNetMsg &)' delete trivial
| | `-ParmVarDecl 0x563474698328 <col:34, col:57> col:58 'const CSerializedNetMsg &'
| `-FieldDecl 0x5634746984e0 <line:116:5, col:17> col:17 invalid command 'int'
|-CXXRecordDecl 0x5634746985f8 <line:120:1, col:7> col:7 referenced class NetEventsInterface
|-CXXRecordDecl 0x5634746986b0 <line:121:1, line:482:1> line:121:7 referenced invalid class CConnman definition
| |-DefinitionData standard_layout has_mutable_fields
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5634746987c8 <col:1, col:7> col:7 implicit referenced class CConnman
| |-AccessSpecDecl 0x563474698858 <line:123:1, col:7> col:1 public
| |-EnumDecl 0x563474698880 <line:125:5, line:130:5> line:125:10 referenced NumConnections
| | |-EnumConstantDecl 0x563474698980 <line:126:9, col:28> col:9 CONNECTIONS_NONE 'CConnman::NumConnections'
| | | `-ImplicitCastExpr 0x563474698ca0 <col:28> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0x563474698960 <col:28> 'int' 0
| | |     `-IntegerLiteral 0x563474698940 <col:28> 'int' 0
| | |-EnumConstantDecl 0x563474698a70 <line:127:9, col:34> col:9 referenced CONNECTIONS_IN 'CConnman::NumConnections'
| | | `-ConstantExpr 0x563474698a50 <col:26, col:34> 'unsigned int' 1
| | |   `-ParenExpr 0x563474698a30 <col:26, col:34> 'unsigned int'
| | |     `-BinaryOperator 0x563474698a10 <col:27, col:33> 'unsigned int' '<<'
| | |       |-IntegerLiteral 0x5634746989d0 <col:27> 'unsigned int' 1
| | |       `-IntegerLiteral 0x5634746989f0 <col:33> 'int' 0
| | |-EnumConstantDecl 0x563474698b60 <line:128:9, col:35> col:9 referenced CONNECTIONS_OUT 'CConnman::NumConnections'
| | | `-ConstantExpr 0x563474698b40 <col:27, col:35> 'unsigned int' 2
| | |   `-ParenExpr 0x563474698b20 <col:27, col:35> 'unsigned int'
| | |     `-BinaryOperator 0x563474698b00 <col:28, col:34> 'unsigned int' '<<'
| | |       |-IntegerLiteral 0x563474698ac0 <col:28> 'unsigned int' 1
| | |       `-IntegerLiteral 0x563474698ae0 <col:34> 'int' 1
| | `-EnumConstantDecl 0x563474698c50 <line:129:9, col:60> col:9 referenced CONNECTIONS_ALL 'CConnman::NumConnections'
| |   `-ConstantExpr 0x563474698c30 <col:27, col:60> 'unsigned int' 3
| |     `-ParenExpr 0x563474698c10 <col:27, col:60> 'unsigned int'
| |       `-BinaryOperator 0x563474698bf0 <col:28, col:45> 'unsigned int' '|'
| |         |-DeclRefExpr 0x563474698bb0 <col:28> 'unsigned int' EnumConstant 0x563474698a70 'CONNECTIONS_IN' 'CConnman::NumConnections'
| |         `-DeclRefExpr 0x563474698bd0 <col:45> 'unsigned int' EnumConstant 0x563474698b60 'CONNECTIONS_OUT' 'CConnman::NumConnections'
| |-CXXRecordDecl 0x563474698cb8 <line:132:5, line:156:5> line:132:12 referenced invalid struct Options definition
| | |-DefinitionData aggregate standard_layout trivially_copyable literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x563474698dd8 <col:5, col:12> col:12 implicit struct Options
| | |-FieldDecl 0x563474698e78 <line:134:9, col:39> col:22 referenced nLocalServices 'ServiceFlags'
| | | `-DeclRefExpr 0x5634746a8008 <col:39> 'ServiceFlags' EnumConstant 0x5634745e26d0 'NODE_NONE' 'ServiceFlags'
| | |-FieldDecl 0x563474698ee0 <line:135:9, col:31> col:13 referenced nMaxConnections 'int'
| | | `-IntegerLiteral 0x5634746a8028 <col:31> 'int' 0
| | |-FieldDecl 0x563474698f48 <line:136:9, col:41> col:13 referenced m_max_outbound_full_relay 'int'
| | | `-IntegerLiteral 0x5634746a8048 <col:41> 'int' 0
| | |-FieldDecl 0x563474698fb0 <line:137:9, col:42> col:13 referenced m_max_outbound_block_relay 'int'
| | | `-IntegerLiteral 0x5634746a8068 <col:42> 'int' 0
| | |-FieldDecl 0x563474699018 <line:138:9, col:27> col:13 referenced nMaxAddnode 'int'
| | | `-IntegerLiteral 0x5634746a8088 <col:27> 'int' 0
| | |-FieldDecl 0x563474699080 <line:139:9, col:26> col:13 referenced nMaxFeeler 'int'
| | | `-IntegerLiteral 0x5634746a80a8 <col:26> 'int' 0
| | |-FieldDecl 0x5634746990e8 <line:140:9, col:27> col:13 referenced nBestHeight 'int'
| | | `-IntegerLiteral 0x5634746a80c8 <col:27> 'int' 0
| | |-FieldDecl 0x563474699178 <line:141:9, col:43> col:29 referenced uiInterface 'CClientUIInterface *'
| | | `-ImplicitCastExpr 0x5634746a80f8 <col:43> 'CClientUIInterface *' <NullToPointer>
| | |   `-CXXNullPtrLiteralExpr 0x5634746a80e8 <col:43> 'nullptr_t'
| | |-FieldDecl 0x563474699208 <line:142:9, col:41> col:29 referenced m_msgproc 'NetEventsInterface *'
| | | `-ImplicitCastExpr 0x5634746a8120 <col:41> 'NetEventsInterface *' <NullToPointer>
| | |   `-CXXNullPtrLiteralExpr 0x5634746a8110 <col:41> 'nullptr_t'
| | |-FieldDecl 0x563474699298 <line:143:9, col:28> col:17 referenced m_banman 'BanMan *'
| | | `-ImplicitCastExpr 0x5634746a8148 <col:28> 'BanMan *' <NullToPointer>
| | |   `-CXXNullPtrLiteralExpr 0x5634746a8138 <col:28> 'nullptr_t'
| | |-FieldDecl 0x563474699300 <line:144:9, col:43> col:22 referenced nSendBufferMaxSize 'unsigned int'
| | | `-ImplicitCastExpr 0x5634746a8180 <col:43> 'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x5634746a8160 <col:43> 'int' 0
| | |-FieldDecl 0x563474699368 <line:145:9, col:42> col:22 referenced nReceiveFloodSize 'unsigned int'
| | | `-ImplicitCastExpr 0x5634746a81b8 <col:42> 'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x5634746a8198 <col:42> 'int' 0
| | |-FieldDecl 0x5634746993e0 <line:146:9, col:18> col:18 invalid nMaxOutboundTimeframe 'int'
| | |-FieldDecl 0x563474699458 <line:147:9, col:18> col:18 invalid nMaxOutboundLimit 'int'
| | |-FieldDecl 0x5634746994d0 <line:148:9, col:17> col:17 invalid m_peer_connect_timeout 'int'
| | |-FieldDecl 0x563474699558 <line:149:34> col:34 invalid vSeedNodes 'int'
| | |-FieldDecl 0x563474699618 <line:153:9, col:39> col:14 referenced m_use_addrman_outgoing 'bool'
| | | `-CXXBoolLiteralExpr 0x5634746a81d0 <col:39> 'bool' true
| | |-FieldDecl 0x5634746996a0 <line:154:34> col:34 invalid m_specified_outgoing 'int'
| | `-FieldDecl 0x563474699728 <line:155:34> col:34 invalid m_added_nodes 'int'
| |-CXXMethodDecl 0x5634746998b8 <line:158:5, line:184:5> line:158:10 Init 'void (const CConnman::Options &)'
| | |-ParmVarDecl 0x5634746997c8 <col:15, col:30> col:30 used connOptions 'const CConnman::Options &'
| | `-CompoundStmt 0x5634746aa368 <col:43, line:184:5>
| |   |-BinaryOperator 0x5634746a85e0 <line:159:9, col:38> 'ServiceFlags' lvalue '='
| |   | |-MemberExpr 0x5634746a84e8 <col:9> 'ServiceFlags' lvalue ->nLocalServices 0x5634746a6f58
| |   | | `-CXXThisExpr 0x5634746a84d8 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a85c8 <col:26, col:38> 'ServiceFlags' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a8538 <col:26, col:38> 'const ServiceFlags' lvalue .nLocalServices 0x563474698e78
| |   |     `-DeclRefExpr 0x5634746a8518 <col:26> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a86a8 <line:160:9, col:39> 'int' lvalue '='
| |   | |-MemberExpr 0x5634746a8610 <col:9> 'int' lvalue ->nMaxConnections 0x5634746a7000
| |   | | `-CXXThisExpr 0x5634746a8600 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a8690 <col:27, col:39> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a8660 <col:27, col:39> 'const int' lvalue .nMaxConnections 0x563474698ee0
| |   |     `-DeclRefExpr 0x5634746a8640 <col:27> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a8850 <line:162:9, col:50> 'int' lvalue '='
| |   | |-MemberExpr 0x5634746a87b8 <col:9> 'int' lvalue ->m_max_outbound_block_relay 0x5634746a70d0
| |   | | `-CXXThisExpr 0x5634746a87a8 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a8838 <col:38, col:50> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a8808 <col:38, col:50> 'const int' lvalue .m_max_outbound_block_relay 0x563474698fb0
| |   |     `-DeclRefExpr 0x5634746a87e8 <col:38> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a8918 <line:163:9, col:46> 'bool' lvalue '='
| |   | |-MemberExpr 0x5634746a8880 <col:9> 'bool' lvalue ->m_use_addrman_outgoing 0x5634746a7268
| |   | | `-CXXThisExpr 0x5634746a8870 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a8900 <col:34, col:46> 'bool' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a88d0 <col:34, col:46> 'const bool' lvalue .m_use_addrman_outgoing 0x563474699618
| |   |     `-DeclRefExpr 0x5634746a88b0 <col:34> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a89e0 <line:164:9, col:35> 'int' lvalue '='
| |   | |-MemberExpr 0x5634746a8948 <col:9> 'int' lvalue ->nMaxAddnode 0x5634746a7138
| |   | | `-CXXThisExpr 0x5634746a8938 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a89c8 <col:23, col:35> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a8998 <col:23, col:35> 'const int' lvalue .nMaxAddnode 0x563474699018
| |   |     `-DeclRefExpr 0x5634746a8978 <col:23> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a9ac8 <line:165:9, col:34> 'int' lvalue '='
| |   | |-MemberExpr 0x5634746a8a10 <col:9> 'int' lvalue ->nMaxFeeler 0x5634746a71a0
| |   | | `-CXXThisExpr 0x5634746a8a00 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a9ab0 <col:22, col:34> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a9a80 <col:22, col:34> 'const int' lvalue .nMaxFeeler 0x563474699080
| |   |     `-DeclRefExpr 0x5634746a9a60 <col:22> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a9c70 <line:166:9, col:83> 'int' lvalue '='
| |   | |-MemberExpr 0x5634746a9af8 <col:9> 'int' lvalue ->m_max_outbound 0x5634746a7208
| |   | | `-CXXThisExpr 0x5634746a9ae8 <col:9> 'CConnman *' implicit this
| |   | `-BinaryOperator 0x5634746a9c50 <col:26, col:83> 'int' '+'
| |   |   |-BinaryOperator 0x5634746a9bd8 <col:26, col:54> 'int' '+'
| |   |   | |-ImplicitCastExpr 0x5634746a9ba8 <col:26> 'int' <LValueToRValue>
| |   |   | | `-MemberExpr 0x5634746a9b38 <col:26> 'int' lvalue ->m_max_outbound_full_relay 0x5634746a7068
| |   |   | |   `-CXXThisExpr 0x5634746a9b28 <col:26> 'CConnman *' implicit this
| |   |   | `-ImplicitCastExpr 0x5634746a9bc0 <col:54> 'int' <LValueToRValue>
| |   |   |   `-MemberExpr 0x5634746a9b78 <col:54> 'int' lvalue ->m_max_outbound_block_relay 0x5634746a70d0
| |   |   |     `-CXXThisExpr 0x5634746a9b68 <col:54> 'CConnman *' implicit this
| |   |   `-ImplicitCastExpr 0x5634746a9c38 <col:83> 'int' <LValueToRValue>
| |   |     `-MemberExpr 0x5634746a9c08 <col:83> 'int' lvalue ->nMaxFeeler 0x5634746a71a0
| |   |       `-CXXThisExpr 0x5634746a9bf8 <col:83> 'CConnman *' implicit this
| |   |-BinaryOperator 0x5634746a9d88 <line:168:9, col:39> 'CClientUIInterface *' lvalue '='
| |   | |-MemberExpr 0x5634746a9cf0 <col:9> 'CClientUIInterface *' lvalue ->clientInterface 0x5634746a72f0
| |   | | `-CXXThisExpr 0x5634746a9ce0 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a9d70 <col:27, col:39> 'CClientUIInterface *' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a9d40 <col:27, col:39> 'CClientUIInterface *const' lvalue .uiInterface 0x563474699178
| |   |     `-DeclRefExpr 0x5634746a9d20 <col:27> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a9e50 <line:169:9, col:32> 'BanMan *' lvalue '='
| |   | |-MemberExpr 0x5634746a9db8 <col:9> 'BanMan *' lvalue ->m_banman 0x5634746a73b0
| |   | | `-CXXThisExpr 0x5634746a9da8 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a9e38 <col:20, col:32> 'BanMan *' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a9e08 <col:20, col:32> 'BanMan *const' lvalue .m_banman 0x563474699298
| |   |     `-DeclRefExpr 0x5634746a9de8 <col:20> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a9f18 <line:170:9, col:33> 'NetEventsInterface *' lvalue '='
| |   | |-MemberExpr 0x5634746a9e80 <col:9> 'NetEventsInterface *' lvalue ->m_msgproc 0x5634746a7350
| |   | | `-CXXThisExpr 0x5634746a9e70 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a9f00 <col:21, col:33> 'NetEventsInterface *' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a9ed0 <col:21, col:33> 'NetEventsInterface *const' lvalue .m_msgproc 0x563474699208
| |   |     `-DeclRefExpr 0x5634746a9eb0 <col:21> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746a9fe0 <line:171:9, col:42> 'unsigned int' lvalue '='
| |   | |-MemberExpr 0x5634746a9f48 <col:9> 'unsigned int' lvalue ->nSendBufferMaxSize 0x5634746a6a68
| |   | | `-CXXThisExpr 0x5634746a9f38 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746a9fc8 <col:30, col:42> 'unsigned int' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746a9f98 <col:30, col:42> 'const unsigned int' lvalue .nSendBufferMaxSize 0x563474699300
| |   |     `-DeclRefExpr 0x5634746a9f78 <col:30> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-BinaryOperator 0x5634746aa0a8 <line:172:9, col:41> 'unsigned int' lvalue '='
| |   | |-MemberExpr 0x5634746aa010 <col:9> 'unsigned int' lvalue ->nReceiveFloodSize 0x5634746a6ad0
| |   | | `-CXXThisExpr 0x5634746aa000 <col:9> 'CConnman *' implicit this
| |   | `-ImplicitCastExpr 0x5634746aa090 <col:29, col:41> 'unsigned int' <LValueToRValue>
| |   |   `-MemberExpr 0x5634746aa060 <col:29, col:41> 'const unsigned int' lvalue .nReceiveFloodSize 0x563474699368
| |   |     `-DeclRefExpr 0x5634746aa040 <col:29> 'const CConnman::Options' lvalue ParmVar 0x5634746997c8 'connOptions' 'const CConnman::Options &'
| |   |-CompoundStmt 0x5634746aa228 <line:174:9, line:178:9>
| |   `-CompoundStmt 0x5634746aa358 <line:180:9, line:183:9>
| |-CXXConstructorDecl 0x563474699ad8 <line:186:5, col:44> col:5 invalid CConnman 'void (int, int)'
| | |-ParmVarDecl 0x563474699988 <col:14, col:23> col:23 invalid seed0 'int'
| | `-ParmVarDecl 0x563474699a28 <col:30, col:39> col:39 invalid seed1 'int'
| |-CXXDestructorDecl 0x563474699bd8 <line:187:5, col:15> col:5 ~CConnman 'void () noexcept'
| |-CXXMethodDecl 0x563474699e48 <line:188:5, col:61> col:10 Start 'bool (CScheduler &, const CConnman::Options &)'
| | |-ParmVarDecl 0x563474699cf8 <col:16, col:28> col:28 scheduler 'CScheduler &'
| | `-ParmVarDecl 0x563474699d70 <col:39, col:54> col:54 options 'const CConnman::Options &'
| |-CXXMethodDecl 0x563474699f18 <line:199:5, bitcoin/src/threadsafety.h:33:76> bitcoin/src/net.h:199:10 used Stop 'void ()'
| | `-NoThreadSafetyAnalysisAttr 0x563474699fb8 <bitcoin/src/threadsafety.h:33:50>
| |-CXXMethodDecl 0x56347469a018 <bitcoin/src/net.h:201:5, col:20> col:10 used Interrupt 'void ()'
| |-CXXMethodDecl 0x56347469a108 <line:202:5, col:60> col:10 GetNetworkActive 'bool () const'
| | `-CompoundStmt 0x5634746aa3e8 <col:35, col:60>
| |-CXXMethodDecl 0x56347469a1c8 <line:203:5, col:73> col:10 GetUseAddrmanOutgoing 'bool () const'
| | `-CompoundStmt 0x5634746aa460 <col:40, col:73>
| |   `-ReturnStmt 0x5634746aa450 <col:42, col:49>
| |     `-ImplicitCastExpr 0x5634746aa438 <col:49> 'bool' <LValueToRValue>
| |       `-MemberExpr 0x5634746aa408 <col:49> 'const bool' lvalue ->m_use_addrman_outgoing 0x5634746a7268
| |         `-CXXThisExpr 0x5634746aa3f8 <col:49> 'const CConnman *' implicit this
| |-CXXMethodDecl 0x56347469a308 <line:204:5, col:38> col:10 SetNetworkActive 'void (bool)'
| | `-ParmVarDecl 0x56347469a278 <col:27, col:32> col:32 active 'bool'
| |-CXXMethodDecl 0x56347469a848 <line:205:5, col:260> col:10 OpenNetworkConnection 'void (const CAddress &, bool, CSemaphoreGrant *, const char *, bool, bool, bool, bool)'
| | |-ParmVarDecl 0x56347469a3c0 <col:32, col:48> col:48 addrConnect 'const CAddress &'
| | |-ParmVarDecl 0x56347469a438 <col:61, col:66> col:66 fCountFailure 'bool'
| | |-ParmVarDecl 0x56347469a4b0 <col:81, col:114> col:98 grantOutbound 'CSemaphoreGrant *' cinit
| | | `-ImplicitCastExpr 0x5634746a7f58 <col:114> 'CSemaphoreGrant *' <NullToPointer>
| | |   `-CXXNullPtrLiteralExpr 0x5634746a7f48 <col:114> 'nullptr_t'
| | |-ParmVarDecl 0x56347469a530 <col:123, col:145> col:135 strDest 'const char *' cinit
| | | `-ImplicitCastExpr 0x5634746a7f80 <col:145> 'const char *' <NullToPointer>
| | |   `-CXXNullPtrLiteralExpr 0x5634746a7f70 <col:145> 'nullptr_t'
| | |-ParmVarDecl 0x56347469a5a8 <col:154, col:170> col:159 fOneShot 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x5634746a7f98 <col:170> 'bool' false
| | |-ParmVarDecl 0x56347469a620 <col:177, col:192> col:182 fFeeler 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x5634746a7fa8 <col:192> 'bool' false
| | |-ParmVarDecl 0x56347469a698 <col:199, col:224> col:204 manual_connection 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x5634746a7fb8 <col:224> 'bool' false
| | `-ParmVarDecl 0x56347469a710 <col:231, col:255> col:236 block_relay_only 'bool' cinit
| |   `-CXXBoolLiteralExpr 0x5634746a7fc8 <col:255> 'bool' false
| |-CXXMethodDecl 0x56347469a9e0 <line:206:5, col:43> col:10 invalid CheckIncomingNonce 'bool (int)'
| | `-ParmVarDecl 0x56347469a950 <col:29, col:38> col:38 invalid nonce 'int'
| |-CXXMethodDecl 0x56347469ac98 <line:208:5, col:67> col:10 ForNode 'bool (NodeId)'
| | `-ParmVarDecl 0x56347469aac0 <col:18, col:25> col:25 id 'NodeId':'int'
| |-CXXMethodDecl 0x56347469ae98 <line:210:5, col:59> col:10 PushMessage 'void (CNode *, CSerializedNetMsg &&)'
| | |-ParmVarDecl 0x56347469ad50 <col:22, col:29> col:29 pnode 'CNode *'
| | `-ParmVarDecl 0x56347469adc8 <col:36, col:56> col:56 msg 'CSerializedNetMsg &&'
| |-FunctionTemplateDecl 0x56347469b198 <line:212:5, line:220:5> line:213:10 ForEachNode
| | |-TemplateTypeParmDecl 0x56347469af48 <line:212:14, col:23> col:23 referenced typename depth 0 index 0 Callable
| | `-CXXMethodDecl 0x56347469b0f8 <line:213:5, line:220:5> line:213:10 ForEachNode 'void (Callable &&)'
| |   |-ParmVarDecl 0x56347469b008 <col:22, col:33> col:33 referenced func 'Callable &&'
| |   `-CompoundStmt 0x5634746aa658 <line:214:5, line:220:5>
| |-FunctionTemplateDecl 0x56347469b448 <line:222:5, line:230:5> line:223:10 ForEachNode
| | |-TemplateTypeParmDecl 0x56347469b1f8 <line:222:14, col:23> col:23 referenced typename depth 0 index 0 Callable
| | `-CXXMethodDecl 0x56347469b3a8 <line:223:5, line:230:5> line:223:10 ForEachNode 'void (Callable &&) const'
| |   |-ParmVarDecl 0x56347469b2b8 <col:22, col:33> col:33 referenced func 'Callable &&'
| |   `-CompoundStmt 0x5634746aa818 <line:224:5, line:230:5>
| |-FunctionTemplateDecl 0x56347469b838 <line:232:5, line:241:5> line:233:10 ForEachNodeThen
| | |-TemplateTypeParmDecl 0x56347469b4a8 <line:232:14, col:23> col:23 referenced typename depth 0 index 0 Callable
| | |-TemplateTypeParmDecl 0x56347469b518 <col:33, col:42> col:42 referenced typename depth 0 index 1 CallableAfter
| | `-CXXMethodDecl 0x56347469b798 <line:233:5, line:241:5> line:233:10 ForEachNodeThen 'void (Callable &&, CallableAfter &&)'
| |   |-ParmVarDecl 0x56347469b5e8 <col:26, col:37> col:37 referenced pre 'Callable &&'
| |   |-ParmVarDecl 0x56347469b688 <col:42, col:58> col:58 referenced post 'CallableAfter &&'
| |   `-CompoundStmt 0x5634746aaa18 <line:234:5, line:241:5>
| |     `-CallExpr 0x5634746aa9f8 <line:240:9, col:14> '<dependent type>'
| |       `-DeclRefExpr 0x5634746aa9d8 <col:9> 'CallableAfter' lvalue ParmVar 0x56347469b688 'post' 'CallableAfter &&'
| |-FunctionTemplateDecl 0x56347469bc78 <line:243:5, line:252:5> line:244:10 ForEachNodeThen
| | |-TemplateTypeParmDecl 0x56347469b8a0 <line:243:14, col:23> col:23 referenced typename depth 0 index 0 Callable
| | |-TemplateTypeParmDecl 0x56347469b918 <col:33, col:42> col:42 referenced typename depth 0 index 1 CallableAfter
| | `-CXXMethodDecl 0x56347469bbd8 <line:244:5, line:252:5> line:244:10 ForEachNodeThen 'void (Callable &&, CallableAfter &&) const'
| |   |-ParmVarDecl 0x56347469ba20 <col:26, col:37> col:37 referenced pre 'Callable &&'
| |   |-ParmVarDecl 0x56347469bac8 <col:42, col:58> col:58 referenced post 'CallableAfter &&'
| |   `-CompoundStmt 0x5634746aac18 <line:245:5, line:252:5>
| |     `-CallExpr 0x5634746aabf8 <line:251:9, col:14> '<dependent type>'
| |       `-DeclRefExpr 0x5634746aabd8 <col:9> 'CallableAfter' lvalue ParmVar 0x56347469bac8 'post' 'CallableAfter &&'
| |-CXXMethodDecl 0x56347469bd18 <line:255:5, col:30> col:12 invalid GetAddressCount 'int () const'
| |-CXXMethodDecl 0x56347469bed8 <line:256:5, col:66> col:10 SetServices 'void (const CService &, ServiceFlags)'
| | |-ParmVarDecl 0x56347469bdc8 <col:22, col:38> col:38 addr 'const CService &'
| | `-ParmVarDecl 0x56347469be40 <col:44, col:57> col:57 nServices 'ServiceFlags'
| |-CXXMethodDecl 0x56347469c028 <line:257:5, col:46> col:10 MarkAddressGood 'void (const CAddress &)'
| | `-ParmVarDecl 0x56347469bf98 <col:26, col:42> col:42 addr 'const CAddress &'
| |-CXXMethodDecl 0x56347469c198 <line:258:5, col:112> col:10 invalid AddNewAddresses 'void (const int)'
| | `-ParmVarDecl 0x56347469c108 <col:26, <invalid sloc>> col:53 invalid 'const int'
| |-CXXMethodDecl 0x56347469c300 <line:263:5, col:41> col:10 SetTryNewOutboundPeer 'void (bool)'
| | `-ParmVarDecl 0x56347469c270 <col:32, col:37> col:37 flag 'bool'
| |-CXXMethodDecl 0x56347469c3c8 <line:264:5, col:32> col:10 GetTryNewOutboundPeer 'bool ()'
| |-CXXMethodDecl 0x56347469c490 <line:272:5, col:31> col:9 GetExtraOutboundCount 'int ()'
| |-CXXMethodDecl 0x56347469c5e8 <line:274:5, col:41> col:10 invalid AddNode 'bool (const int &)'
| | `-ParmVarDecl 0x56347469c558 <col:18, col:37> col:37 invalid node 'const int &'
| |-CXXMethodDecl 0x56347469c748 <line:275:5, col:49> col:10 invalid RemoveAddedNode 'bool (const int &)'
| | `-ParmVarDecl 0x56347469c6b8 <col:26, col:45> col:45 invalid node 'const int &'
| |-CXXMethodDecl 0x56347469c900 <line:278:5, col:43> col:12 invalid GetNodeCount 'int (CConnman::NumConnections)'
| | `-ParmVarDecl 0x56347469c830 <col:25, col:40> col:40 num 'CConnman::NumConnections'
| |-CXXMethodDecl 0x56347469c9e8 <line:279:5, col:54> col:10 GetNodeStats 'void ()'
| |-CXXMethodDecl 0x56347469cb40 <line:280:5, col:48> col:10 invalid DisconnectNode 'bool (const int &)'
| | `-ParmVarDecl 0x56347469cab0 <col:25, col:44> col:44 invalid node 'const int &'
| |-CXXMethodDecl 0x56347469ccb8 <line:281:5, col:46> col:10 DisconnectNode 'bool (const CSubNet &)'
| | `-ParmVarDecl 0x56347469cbf8 <col:25, col:40> col:40 subnet 'const CSubNet &'
| |-CXXMethodDecl 0x56347469ce38 <line:282:5, col:45> col:10 DisconnectNode 'bool (const CNetAddr &)'
| | `-ParmVarDecl 0x56347469cd70 <col:25, col:41> col:41 addr 'const CNetAddr &'
| |-CXXMethodDecl 0x56347469cf80 <line:283:5, col:34> col:10 DisconnectNode 'bool (NodeId)'
| | `-ParmVarDecl 0x56347469cef0 <col:25, col:32> col:32 id 'NodeId':'int'
| |-CXXMethodDecl 0x56347469d0a8 <line:291:5, col:37> col:18 GetLocalServices 'ServiceFlags () const'
| | `-FullComment 0x563474777d50 <line:285:8, line:290:64>
| |   |-ParagraphComment 0x563474777c80 <line:285:8, line:286:19>
| |   | |-TextComment 0x563474777c30 <line:285:8, col:77> Text=" Used to convey which local services we are offering peers during node"
| |   | `-TextComment 0x563474777c50 <line:286:8, col:19> Text=" connection."
| |   `-ParagraphComment 0x563474777d20 <line:288:8, line:290:64>
| |     |-TextComment 0x563474777ca0 <line:288:8, col:64> Text=" The data returned by this is used in CNode construction,"
| |     |-TextComment 0x563474777cc0 <line:289:8, col:65> Text=" which is used to advertise which services we are offering"
| |     `-TextComment 0x563474777ce0 <line:290:8, col:64> Text=" that peer during `net_processing.cpp:PushNodeVersion()`."
| |-CXXMethodDecl 0x56347469d230 <line:294:5, col:45> col:10 invalid SetMaxOutboundTarget 'void (int)'
| | |-ParmVarDecl 0x56347469d1a0 <col:31, col:40> col:40 invalid limit 'int'
| | `-FullComment 0x563474777e20 <line:293:8, col:43>
| |   `-ParagraphComment 0x563474777df0 <col:8, col:43>
| |     `-TextComment 0x563474777dc0 <col:8, col:43> Text="set the max outbound target in bytes"
| |-CXXMethodDecl 0x56347469d310 <line:295:5, col:35> col:14 invalid GetMaxOutboundTarget 'int ()'
| |-CXXMethodDecl 0x56347469d490 <line:298:5, col:52> col:10 invalid SetMaxOutboundTimeframe 'void (int)'
| | |-ParmVarDecl 0x56347469d400 <col:34, col:43> col:43 invalid timeframe 'int'
| | `-FullComment 0x563474777ef0 <line:297:8, col:52>
| |   `-ParagraphComment 0x563474777ec0 <col:8, col:52>
| |     `-TextComment 0x563474777e90 <col:8, col:52> Text="set the timeframe for the max outbound target"
| |-CXXMethodDecl 0x56347469d570 <line:299:5, col:38> col:14 invalid GetMaxOutboundTimeframe 'int ()'
| |-CXXMethodDecl 0x56347469d708 <line:304:5, col:64> col:10 OutboundTargetReached 'bool (bool)'
| | |-ParmVarDecl 0x56347469d648 <col:32, col:37> col:37 historicalBlockServingLimit 'bool'
| | `-FullComment 0x563474778010 <line:301:8, line:303:81>
| |   `-ParagraphComment 0x563474777fe0 <line:301:8, line:303:81>
| |     |-TextComment 0x563474777f60 <line:301:8, col:47> Text=" check if the outbound target is reached"
| |     |-TextComment 0x563474777f80 <line:302:8, col:75> Text=" if param historicalBlockServingLimit is set true, the function will"
| |     `-TextComment 0x563474777fa0 <line:303:8, col:81> Text=" response true if the limit for serving historical blocks has been reached"
| |-CXXMethodDecl 0x56347469d810 <line:308:5, col:41> col:14 invalid GetOutboundTargetBytesLeft 'int ()'
| | `-FullComment 0x563474778100 <line:306:8, line:307:54>
| |   `-ParagraphComment 0x5634747780d0 <line:306:8, line:307:54>
| |     |-TextComment 0x563474778080 <line:306:8, col:65> Text=" response the bytes left in the current max outbound cycle"
| |     `-TextComment 0x5634747780a0 <line:307:8, col:54> Text=" in case of no limit, it will always response 0"
| |-CXXMethodDecl 0x56347469d910 <line:312:5, col:44> col:14 invalid GetMaxOutboundTimeLeftInCycle 'int ()'
| | `-FullComment 0x5634747781f0 <line:310:8, line:311:54>
| |   `-ParagraphComment 0x5634747781c0 <line:310:8, line:311:54>
| |     |-TextComment 0x563474778170 <line:310:8, col:74> Text=" response the time in second left in the current max outbound cycle"
| |     `-TextComment 0x563474778190 <line:311:8, col:54> Text=" in case of no limit, it will always response 0"
| |-CXXMethodDecl 0x563474638b30 <line:314:5, col:32> col:14 invalid GetTotalBytesRecv 'int ()'
| |-CXXMethodDecl 0x563474638c08 <line:315:5, col:32> col:14 invalid GetTotalBytesSent 'int ()'
| |-CXXMethodDecl 0x563474638d50 <line:317:5, col:34> col:10 SetBestHeight 'void (int)'
| | `-ParmVarDecl 0x563474638cc0 <col:24, col:28> col:28 height 'int'
| |-CXXMethodDecl 0x563474638e20 <line:318:5, col:25> col:9 used GetBestHeight 'int () const'
| |-CXXMethodDecl 0x563474638fd8 <line:321:5, col:56> col:16 invalid GetDeterministicRandomizer 'CSipHasher (int) const'
| | |-ParmVarDecl 0x563474638f10 <col:43, col:52> col:52 invalid id 'int'
| | `-FullComment 0x5634747782c0 <line:320:8, col:47>
| |   `-ParagraphComment 0x563474778290 <col:8, col:47>
| |     `-TextComment 0x563474778260 <col:8, col:47> Text=" Get a unique deterministic randomizer. "
| |-CXXMethodDecl 0x5634746390a8 <line:323:5, col:40> col:18 GetReceiveFloodSize 'unsigned int () const'
| |-CXXMethodDecl 0x563474639168 <line:325:5, col:29> col:10 WakeMessageHandler 'void ()'
| |-CXXMethodDecl 0x563474639390 <line:331:5, col:77> col:13 invalid PoissonNextSendInbound 'int (int, int)'
| | |-ParmVarDecl 0x563474639270 <col:36, col:44> col:44 invalid now 'int'
| | |-ParmVarDecl 0x5634746392f0 <col:49, col:53> col:53 average_interval_seconds 'int'
| | `-FullComment 0x5634747783e0 <line:327:8, line:329:59>
| |   `-ParagraphComment 0x5634747783b0 <line:327:8, line:329:59>
| |     |-TextComment 0x563474778330 <line:327:8, col:81> Text=" Attempts to obfuscate tx time through exponentially distributed emitting."
| |     |-TextComment 0x563474778350 <line:328:1, col:54> Text="        Works assuming that a single interval is used."
| |     `-TextComment 0x563474778370 <line:329:1, col:59> Text="        Variable intervals will result in privacy decrease."
| |-AccessSpecDecl 0x563474639440 <line:333:1, col:8> col:1 private
| |-CXXRecordDecl 0x563474639468 <line:334:5, line:341:5> line:334:12 referenced struct ListenSocket definition
| | |-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| | | |-DefaultConstructor
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x563474639588 <col:5, col:12> col:12 implicit referenced struct ListenSocket
| | |-AccessSpecDecl 0x563474639618 <line:335:5, col:11> col:5 public
| | |-FieldDecl 0x563474639650 <line:336:9, col:16> col:16 referenced socket 'SOCKET':'unsigned int'
| | |-CXXMethodDecl 0x5634746397a8 <line:337:9, col:128> col:21 used AddSocketPermissionFlags 'void (NetPermissionFlags &) const' inline
| | | |-ParmVarDecl 0x5634746396b0 <col:46, col:66> col:66 used flags 'NetPermissionFlags &'
| | | `-CompoundStmt 0x5634746aad98 <col:79, col:128>
| | |   `-CallExpr 0x5634746aad50 <col:81, col:125> 'void'
| | |     |-ImplicitCastExpr 0x5634746aad38 <col:81, col:97> 'void (*)(NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
| | |     | `-DeclRefExpr 0x5634746aac80 <col:81, col:97> 'void (NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465dbc8 'AddFlag' 'void (NetPermissionFlags &, NetPermissionFlags)'
| | |     |-DeclRefExpr 0x5634746aacb0 <col:105> 'NetPermissionFlags' lvalue ParmVar 0x5634746396b0 'flags' 'NetPermissionFlags &'
| | |     `-ImplicitCastExpr 0x5634746aad80 <col:112> 'NetPermissionFlags' <LValueToRValue>
| | |       `-MemberExpr 0x5634746aace0 <col:112> 'const NetPermissionFlags' lvalue ->m_permissions 0x563474639b18
| | |         `-CXXThisExpr 0x5634746aacd0 <col:112> 'const CConnman::ListenSocket *' implicit this
| | |-CXXConstructorDecl 0x563474639a28 <line:338:9, col:119> col:9 ListenSocket 'void (SOCKET, NetPermissionFlags)'
| | | |-ParmVarDecl 0x563474639860 <col:22, col:29> col:29 used socket_ 'SOCKET':'unsigned int'
| | | |-ParmVarDecl 0x5634746398d8 <col:38, col:57> col:57 used permissions_ 'NetPermissionFlags'
| | | |-CXXCtorInitializer Field 0x563474639650 'socket' 'SOCKET':'unsigned int'
| | | | `-ImplicitCastExpr 0x5634746aadf0 <col:80> 'SOCKET':'unsigned int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5634746aadb0 <col:80> 'SOCKET':'unsigned int' lvalue ParmVar 0x563474639860 'socket_' 'SOCKET':'unsigned int'
| | | |-CXXCtorInitializer Field 0x563474639b18 'm_permissions' 'NetPermissionFlags'
| | | | `-ImplicitCastExpr 0x5634746aae70 <col:104> 'NetPermissionFlags' <LValueToRValue>
| | | |   `-DeclRefExpr 0x5634746aae30 <col:104> 'NetPermissionFlags' lvalue ParmVar 0x5634746398d8 'permissions_' 'NetPermissionFlags'
| | | `-CompoundStmt 0x5634746aaec0 <col:118, col:119>
| | |-AccessSpecDecl 0x563474639ae0 <line:339:5, col:12> col:5 private
| | `-FieldDecl 0x563474639b18 <line:340:9, col:28> col:28 referenced m_permissions 'NetPermissionFlags'
| |-CXXMethodDecl 0x563474639d78 <line:343:5, col:104> col:10 invalid BindListenPort 'bool (const CService &, int &, NetPermissionFlags)'
| | |-ParmVarDecl 0x563474639b90 <col:25, col:41> col:41 bindAddr 'const CService &'
| | |-ParmVarDecl 0x563474639c20 <col:51, col:64> col:64 invalid strError 'int &'
| | `-ParmVarDecl 0x563474639c98 <col:74, col:93> col:93 permissions 'NetPermissionFlags'
| |-CXXMethodDecl 0x56347463a018 <line:344:5, col:87> col:10 Bind 'bool (const CService &, unsigned int, NetPermissionFlags)'
| | |-ParmVarDecl 0x563474639e40 <col:15, col:31> col:31 addr 'const CService &'
| | |-ParmVarDecl 0x563474639ec0 <col:37, col:50> col:50 flags 'unsigned int'
| | `-ParmVarDecl 0x563474639f38 <col:57, col:76> col:76 permissions 'NetPermissionFlags'
| |-CXXMethodDecl 0x56347463a198 <line:345:5, col:110> col:10 invalid InitBinds 'bool (const int)'
| | `-ParmVarDecl 0x56347463a108 <col:20, <invalid sloc>> col:47 invalid 'const int'
| |-CXXMethodDecl 0x56347463a260 <line:346:5, col:37> col:10 ThreadOpenAddedConnections 'void ()'
| |-CXXMethodDecl 0x56347463a3b8 <line:347:5, col:47> col:10 invalid AddOneShot 'void (const int &)'
| | `-ParmVarDecl 0x56347463a328 <col:21, col:40> col:40 invalid strDest 'const int &'
| |-CXXMethodDecl 0x56347463a480 <line:348:5, col:25> col:10 ProcessOneShot 'void ()'
| |-CXXMethodDecl 0x56347463a5e8 <line:349:5, col:64> col:10 invalid ThreadOpenConnections 'void (int)'
| | `-ParmVarDecl 0x56347463a558 <col:32, col:57> col:57 invalid connect 'int'
| |-CXXMethodDecl 0x56347463a6b0 <line:350:5, col:31> col:10 ThreadMessageHandler 'void ()'
| |-CXXMethodDecl 0x56347463a848 <line:351:5, col:60> col:10 AcceptConnection 'void (const CConnman::ListenSocket &)'
| | `-ParmVarDecl 0x56347463a788 <col:27, col:47> col:47 hListenSocket 'const CConnman::ListenSocket &'
| |-CXXMethodDecl 0x56347463a910 <line:352:5, col:26> col:10 DisconnectNodes 'void ()'
| |-CXXMethodDecl 0x56347463a9d0 <line:353:5, col:38> col:10 NotifyNumConnectionsChanged 'void ()'
| |-CXXMethodDecl 0x5634746a4a58 <line:354:5, col:38> col:10 InactivityCheck 'void (CNode *)'
| | `-ParmVarDecl 0x56347463aa80 <col:26, col:33> col:33 pnode 'CNode *'
| |-CXXMethodDecl 0x5634746a4b40 <line:355:5, col:111> col:10 GenerateSelectSet 'bool ()'
| |-CXXMethodDecl 0x5634746a4c20 <line:356:5, col:106> col:10 SocketEvents 'void ()'
| |-CXXMethodDecl 0x5634746a4ce0 <line:357:5, col:24> col:10 SocketHandler 'void ()'
| |-CXXMethodDecl 0x5634746a4da0 <line:358:5, col:30> col:10 ThreadSocketHandler 'void ()'
| |-CXXMethodDecl 0x5634746a4e60 <line:359:5, col:31> col:10 ThreadDNSAddressSeed 'void ()'
| |-CXXMethodDecl 0x5634746a4ff0 <line:361:5, col:57> col:14 invalid CalculateKeyedNetGroup 'int (const CAddress &) const'
| | `-ParmVarDecl 0x5634746a4f20 <col:37, col:53> col:53 ad 'const CAddress &'
| |-CXXMethodDecl 0x5634746a5168 <line:363:5, col:39> col:12 FindNode 'CNode *(const CNetAddr &)'
| | `-ParmVarDecl 0x5634746a50a8 <col:21, col:37> col:37 ip 'const CNetAddr &'
| |-CXXMethodDecl 0x5634746a52e8 <line:364:5, col:42> col:12 FindNode 'CNode *(const CSubNet &)'
| | `-ParmVarDecl 0x5634746a5220 <col:21, col:36> col:36 subNet 'const CSubNet &'
| |-CXXMethodDecl 0x5634746a5478 <line:365:5, col:48> col:12 invalid FindNode 'CNode *(const int &)'
| | `-ParmVarDecl 0x5634746a53b8 <col:21, col:40> col:40 invalid addrName 'const int &'
| |-CXXMethodDecl 0x5634746a55f8 <line:366:5, col:41> col:12 FindNode 'CNode *(const CService &)'
| | `-ParmVarDecl 0x5634746a5530 <col:21, col:37> col:37 addr 'const CService &'
| |-CXXMethodDecl 0x5634746a56c0 <line:368:5, col:35> col:10 used AttemptToEvictConnection 'bool ()'
| |-CXXMethodDecl 0x5634746a5a58 <line:369:5, col:132> col:12 ConnectNode 'CNode *(CAddress, const char *, bool, bool, bool)'
| | |-ParmVarDecl 0x5634746a5770 <col:24, col:33> col:33 addrConnect 'CAddress'
| | |-ParmVarDecl 0x5634746a57f0 <col:46, col:58> col:58 pszDest 'const char *'
| | |-ParmVarDecl 0x5634746a5868 <col:67, col:72> col:72 fCountFailure 'bool'
| | |-ParmVarDecl 0x5634746a58e0 <col:87, col:92> col:92 manual_connection 'bool'
| | `-ParmVarDecl 0x5634746a5958 <col:111, col:116> col:116 block_relay_only 'bool'
| |-CXXMethodDecl 0x5634746a5c78 <line:370:5, col:87> col:10 used AddWhitelistPermissionFlags 'void (NetPermissionFlags &, const CNetAddr &) const'
| | |-ParmVarDecl 0x5634746a5b30 <col:38, col:58> col:58 flags 'NetPermissionFlags &'
| | `-ParmVarDecl 0x5634746a5ba8 <col:65, col:81> col:81 addr 'const CNetAddr &'
| |-CXXMethodDecl 0x5634746a5dc8 <line:372:5, col:33> col:10 used DeleteNode 'void (CNode *)'
| | `-ParmVarDecl 0x5634746a5d38 <col:21, col:28> col:28 pnode 'CNode *'
| |-CXXMethodDecl 0x5634746a5eb8 <line:374:5, col:25> col:12 used GetNewNodeId 'NodeId ()'
| |-CXXMethodDecl 0x5634746a6040 <line:376:5, col:41> col:12 invalid SocketSendData 'int (CNode *) const'
| | `-ParmVarDecl 0x5634746a5f78 <col:27, col:34> col:34 pnode 'CNode *'
| |-CXXMethodDecl 0x5634746a6108 <line:377:5, col:24> col:10 used DumpAddresses 'void ()'
| |-CXXMethodDecl 0x5634746a6260 <line:380:5, col:40> col:10 invalid RecordBytesRecv 'void (int)'
| | `-ParmVarDecl 0x5634746a61d0 <col:26, col:35> col:35 invalid bytes 'int'
| |-CXXMethodDecl 0x5634746a63c0 <line:381:5, col:40> col:10 invalid RecordBytesSent 'void (int)'
| | `-ParmVarDecl 0x5634746a6330 <col:26, col:35> col:35 invalid bytes 'int'
| |-CXXMethodDecl 0x5634746a6568 <line:384:5, col:54> col:17 referenced NodeFullyConnected 'bool (const CNode *)' static
| | `-ParmVarDecl 0x5634746a64a8 <col:36, col:49> col:49 pnode 'const CNode *'
| |-FieldDecl 0x5634746a6620 <line:387:5, col:22> col:22 cs_totalBytesRecv 'CCriticalSection':'int'
| |-FieldDecl 0x5634746a6680 <line:388:5, col:22> col:22 referenced cs_totalBytesSent 'CCriticalSection':'int'
| |-FieldDecl 0x5634746a66f8 <line:389:5, col:14> col:14 invalid nTotalBytesRecv 'int'
| |-FieldDecl 0x5634746a6770 <line:390:5, col:14> col:14 invalid nTotalBytesSent 'int'
| |-FieldDecl 0x5634746a67e8 <line:393:5, col:14> col:14 invalid nMaxOutboundTotalBytesSentInCycle 'int'
| |-FieldDecl 0x5634746a6860 <line:394:5, col:14> col:14 invalid nMaxOutboundCycleStartTime 'int'
| |-FieldDecl 0x5634746a68d8 <line:395:5, col:14> col:14 invalid nMaxOutboundLimit 'int'
| |-FieldDecl 0x5634746a6950 <line:396:5, col:14> col:14 invalid nMaxOutboundTimeframe 'int'
| |-FieldDecl 0x5634746a69c8 <line:399:5, col:13> col:13 invalid m_peer_connect_timeout 'int'
| |-FieldDecl 0x5634746a6a68 <line:405:5, col:38> col:18 referenced nSendBufferMaxSize 'unsigned int'
| | `-InitListExpr 0x5634746a8248 <col:36, col:38> 'unsigned int'
| |   `-ImplicitCastExpr 0x5634746a8288 <col:37> 'unsigned int' <IntegralCast>
| |     `-IntegerLiteral 0x5634746a81e0 <col:37> 'int' 0
| |-FieldDecl 0x5634746a6ad0 <line:406:5, col:37> col:18 referenced nReceiveFloodSize 'unsigned int'
| | `-InitListExpr 0x5634746a8310 <col:35, col:37> 'unsigned int'
| |   `-ImplicitCastExpr 0x5634746a8350 <col:36> 'unsigned int' <IntegralCast>
| |     `-IntegerLiteral 0x5634746a82a8 <col:36> 'int' 0
| |-FieldDecl 0x5634746a6b70 <line:410:5, col:37> col:10 referenced fAddressesInitialized 'bool'
| | `-InitListExpr 0x5634746a83c8 <col:31, col:37> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746a8370 <col:32> 'bool' false
| |-FieldDecl 0x5634746a6bd0 <line:411:5, col:14> col:14 invalid addrman 'CAddrMan'
| |-FieldDecl 0x5634746a6c58 <line:412:29> col:29 invalid vOneShots 'int'
| |-FieldDecl 0x5634746a6cb8 <line:413:5, col:22> col:22 referenced cs_vOneShots 'CCriticalSection':'int'
| |-FieldDecl 0x5634746a6d40 <line:414:30> col:30 invalid vAddedNodes 'int'
| |-FieldDecl 0x5634746a6da0 <line:415:5, col:22> col:22 referenced cs_vAddedNodes 'CCriticalSection':'int'
| |-FieldDecl 0x5634746a6e40 <line:418:5, col:30> col:30 referenced cs_vNodes 'CCriticalSection':'int' mutable
| |-FieldDecl 0x5634746a6ec8 <line:420:5, col:34> col:18 referenced nPrevNodeCount 'unsigned int'
| | `-InitListExpr 0x5634746a8478 <col:32, col:34> 'unsigned int'
| |   `-ImplicitCastExpr 0x5634746a84b8 <col:33> 'unsigned int' <IntegralCast>
| |     `-IntegerLiteral 0x5634746a8410 <col:33> 'int' 0
| |-FieldDecl 0x5634746a6f58 <line:434:5, col:18> col:18 referenced nLocalServices 'ServiceFlags'
| | `-FullComment 0x5634747786b0 <line:423:7, line:432:32>
| |   |-ParagraphComment 0x563474778480 <line:423:7, col:37>
| |   | `-TextComment 0x563474778450 <col:7, col:37> Text=" Services this instance offers."
| |   |-ParagraphComment 0x563474778520 <line:425:7, line:427:22>
| |   | |-TextComment 0x5634747784a0 <line:425:7, col:75> Text=" This data is replicated in each CNode instance we create during peer"
| |   | |-TextComment 0x5634747784c0 <line:426:7, col:63> Text=" connection (in ConnectNode()) under a member also called"
| |   | `-TextComment 0x5634747784e0 <line:427:7, col:22> Text=" nLocalServices."
| |   |-ParagraphComment 0x563474778590 <line:429:7, line:430:67>
| |   | |-TextComment 0x563474778540 <line:429:7, col:71> Text=" This data is not marked const, but after being set it should not"
| |   | `-TextComment 0x563474778560 <line:430:7, col:67> Text=" change. See the note in CNode::nLocalServices documentation."
| |   |-ParagraphComment 0x5634747785e0 <line:432:7>
| |   | `-TextComment 0x5634747785b0 <col:7> Text=" "
| |   `-BlockCommandComment 0x563474778600 <col:8, col:32> Name="sa"
| |     `-ParagraphComment 0x563474778660 <col:11, col:32>
| |       `-TextComment 0x563474778630 <col:11, col:32> Text=" CNode::nLocalServices"
| |-FieldDecl 0x5634746a7000 <line:438:5, col:9> col:9 referenced nMaxConnections 'int'
| |-FieldDecl 0x5634746a7068 <line:441:5, col:9> col:9 referenced m_max_outbound_full_relay 'int'
| |-FieldDecl 0x5634746a70d0 <line:445:5, col:9> col:9 referenced m_max_outbound_block_relay 'int'
| |-FieldDecl 0x5634746a7138 <line:447:5, col:9> col:9 referenced nMaxAddnode 'int'
| |-FieldDecl 0x5634746a71a0 <line:448:5, col:9> col:9 referenced nMaxFeeler 'int'
| |-FieldDecl 0x5634746a7208 <line:449:5, col:9> col:9 referenced m_max_outbound 'int'
| |-FieldDecl 0x5634746a7268 <line:450:5, col:10> col:10 referenced m_use_addrman_outgoing 'bool'
| |-FieldDecl 0x5634746a72f0 <line:452:5, col:25> col:25 referenced clientInterface 'CClientUIInterface *'
| |-FieldDecl 0x5634746a7350 <line:453:5, col:25> col:25 referenced m_msgproc 'NetEventsInterface *'
| |-FieldDecl 0x5634746a73b0 <line:454:5, col:13> col:13 referenced m_banman 'BanMan *'
| |-FieldDecl 0x5634746a7450 <line:457:5, col:20> col:20 invalid nSeed0 'const int'
| | `-FullComment 0x563474778780 <line:456:8, col:53>
| |   `-ParagraphComment 0x563474778750 <col:8, col:53>
| |     `-TextComment 0x563474778720 <col:8, col:53> Text=" SipHasher seeds for deterministic randomness "
| |-FieldDecl 0x5634746a74b8 <line:457:5, col:28> col:28 invalid nSeed1 'const int'
| | `-FullComment 0x563474778850 <line:456:8, col:53>
| |   `-ParagraphComment 0x563474778820 <col:8, col:53>
| |     `-TextComment 0x5634747787f0 <col:8, col:53> Text=" SipHasher seeds for deterministic randomness "
| |-FieldDecl 0x5634746a7560 <line:460:5, col:10> col:10 fMsgProcWake 'bool'
| | `-FullComment 0x563474778920 <line:459:8, col:47>
| |   `-ParagraphComment 0x5634747788f0 <col:8, col:47>
| |     `-TextComment 0x5634747788c0 <col:8, col:47> Text=" flag for waking the message processor. "
| |-FieldDecl 0x5634746a75d8 <line:462:5, col:29> col:29 invalid condMsgProc 'int'
| |-FieldDecl 0x5634746a7638 <line:463:5, col:11> col:11 mutexMsgProc 'Mutex':'int'
| |-FieldDecl 0x5634746a76b8 <line:466:5, col:22> col:22 invalid interruptNet 'CThreadInterrupt'
| |-FieldDecl 0x5634746a7730 <line:468:5, col:17> col:17 invalid threadDNSAddressSeed 'int'
| |-FieldDecl 0x5634746a77a8 <line:469:5, col:17> col:17 invalid threadSocketHandler 'int'
| |-FieldDecl 0x5634746a7820 <line:470:5, col:17> col:17 invalid threadOpenAddedConnections 'int'
| |-FieldDecl 0x5634746a7898 <line:471:5, col:17> col:17 invalid threadOpenConnections 'int'
| |-FieldDecl 0x5634746a7910 <line:472:5, col:17> col:17 invalid threadMessageHandler 'int'
| |-FieldDecl 0x5634746a79b0 <line:477:5, col:22> col:22 invalid m_try_another_outbound_peer 'int'
| | `-FullComment 0x563474778a40 <line:474:8, line:476:52>
| |   `-ParagraphComment 0x563474778a10 <line:474:8, line:476:52>
| |     |-TextComment 0x563474778990 <line:474:8, col:63> Text=" flag for deciding to connect to an extra outbound peer,"
| |     |-TextComment 0x5634747789b0 <line:475:7, col:46> Text="  in excess of m_max_outbound_full_relay"
| |     `-TextComment 0x5634747789d0 <line:476:7, col:52> Text="  This takes the place of a feeler connection "
| |-FieldDecl 0x5634746a7a38 <line:479:26> col:26 invalid m_next_send_inv_to_incoming 'int'
| |-FriendDecl 0x5634746a7ba8 <line:481:5, col:19> col:12 'struct CConnmanTest':'CConnmanTest'
| |-CXXConstructorDecl 0x5634746a7c18 <line:121:7> col:7 implicit constexpr CConnman 'void (const CConnman &)' inline default trivial noexcept-unevaluated 0x5634746a7c18
| | `-ParmVarDecl 0x5634746a7d28 <col:7> col:7 'const CConnman &'
| `-CXXMethodDecl 0x5634746a7dc8 <col:7> col:7 implicit operator= 'CConnman &(const CConnman &)' inline default trivial noexcept-unevaluated 0x5634746a7dc8
|   `-ParmVarDecl 0x5634746a7ed8 <col:7> col:7 'const CConnman &'
|-FunctionDecl 0x5634746aaf30 <line:485:1, col:15> col:6 Discover 'void ()'
|-FunctionDecl 0x5634746aaff0 <line:486:1, col:19> col:6 StartMapPort 'void ()'
|-FunctionDecl 0x5634746ab0b0 <line:487:1, col:23> col:6 InterruptMapPort 'void ()'
|-FunctionDecl 0x5634746ab170 <line:488:1, col:18> col:6 StopMapPort 'void ()'
|-FunctionDecl 0x5634746ab260 <line:489:1, col:30> col:16 used GetListenPort 'unsigned short ()'
|-CXXRecordDecl 0x5634746ab300 <line:491:1, line:504:1> line:491:8 struct CombinerAll definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634746ab418 <col:1, col:8> col:8 implicit struct CombinerAll
| |-TypedefDecl 0x5634746ab4b8 <line:493:5, col:18> col:18 result_type 'bool'
| | `-BuiltinType 0x5634744cb700 'bool'
| `-FunctionTemplateDecl 0x5634746ab808 <line:495:5, line:503:5> line:496:10 operator()
|   |-TemplateTypeParmDecl 0x5634746ab510 <line:495:14, col:23> col:23 referenced typename depth 0 index 0 I
|   `-CXXMethodDecl 0x5634746ab768 <line:496:5, line:503:5> line:496:10 operator() 'bool (I, I) const'
|     |-ParmVarDecl 0x5634746ab5b0 <col:21, col:23> col:23 referenced first 'I'
|     |-ParmVarDecl 0x5634746ab628 <col:30, col:32> col:32 referenced last 'I'
|     `-CompoundStmt 0x5634746ac390 <line:497:5, line:503:5>
|       |-WhileStmt 0x5634746aba18 <line:498:9, line:501:9>
|       | |-BinaryOperator 0x5634746ab8f8 <line:498:16, col:25> '<dependent type>' '!='
|       | | |-DeclRefExpr 0x5634746ab8b8 <col:16> 'I' lvalue ParmVar 0x5634746ab5b0 'first' 'I'
|       | | `-DeclRefExpr 0x5634746ab8d8 <col:25> 'I' lvalue ParmVar 0x5634746ab628 'last' 'I'
|       | `-CompoundStmt 0x5634746ab9f8 <col:31, line:501:9>
|       |   |-IfStmt 0x5634746ab9a8 <line:499:13, col:35>
|       |   | |-UnaryOperator 0x5634746ab970 <col:17, col:25> '<dependent type>' prefix '!' cannot overflow
|       |   | | `-ParenExpr 0x5634746ab950 <col:18, col:25> '<dependent type>'
|       |   | |   `-UnaryOperator 0x5634746ab938 <col:19, col:20> '<dependent type>' prefix '*' cannot overflow
|       |   | |     `-DeclRefExpr 0x5634746ab918 <col:20> 'I' lvalue ParmVar 0x5634746ab5b0 'first' 'I'
|       |   | `-ReturnStmt 0x5634746ab998 <col:28, col:35>
|       |   |   `-CXXBoolLiteralExpr 0x5634746ab988 <col:35> 'bool' false
|       |   `-UnaryOperator 0x5634746ab9e0 <line:500:13, col:15> '<dependent type>' prefix '++' cannot overflow
|       |     `-DeclRefExpr 0x5634746ab9c0 <col:15> 'I' lvalue ParmVar 0x5634746ab5b0 'first' 'I'
|       `-ReturnStmt 0x5634746aba40 <line:502:9, col:16>
|         `-CXXBoolLiteralExpr 0x5634746aba30 <col:16> 'bool' true
|-CXXRecordDecl 0x5634746ac3d8 prev 0x5634746985f8 <line:509:1, line:523:1> line:509:7 class NetEventsInterface definition
| |-DefinitionData polymorphic abstract literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor trivial user_declared
| |-FullComment 0x563474778b90 <line:507:3, col:33>
| | `-ParagraphComment 0x563474778b60 <col:3, col:33>
| |   `-TextComment 0x563474778b30 <col:3, col:33> Text=" Interface for message handling"
| |-CXXRecordDecl 0x5634746ac4d0 <line:509:1, col:7> col:7 implicit referenced class NetEventsInterface
| |-AccessSpecDecl 0x5634746ac560 <line:511:1, col:7> col:1 public
| |-CXXMethodDecl 0x5634746ac648 <line:512:5, col:80> col:18 ProcessMessages 'bool (CNode *)' virtual pure
| | `-ParmVarDecl 0x5634746ac598 <col:34, col:41> col:41 pnode 'CNode *'
| |-CXXMethodDecl 0x5634746ac790 <line:513:5, col:47> col:18 SendMessages 'bool (CNode *)' virtual pure
| | `-ParmVarDecl 0x5634746ac700 <col:31, col:38> col:38 pnode 'CNode *'
| |-CXXMethodDecl 0x5634746ac8d8 <line:514:5, col:49> col:18 referenced InitializeNode 'void (CNode *)' virtual pure
| | `-ParmVarDecl 0x5634746ac848 <col:33, col:40> col:40 pnode 'CNode *'
| |-CXXMethodDecl 0x5634746acb28 <line:515:5, col:74> col:18 referenced FinalizeNode 'void (NodeId, bool &)' virtual pure
| | |-ParmVarDecl 0x5634746ac990 <col:31, col:38> col:38 id 'NodeId':'int'
| | `-ParmVarDecl 0x5634746aca10 <col:42, col:48> col:48 update_connection_time 'bool &'
| |-AccessSpecDecl 0x5634746acc08 <line:517:1, col:10> col:1 protected
| |-CXXDestructorDecl 0x5634746acc78 <line:522:5, col:35> col:5 ~NetEventsInterface 'void ()' default trivial noexcept-unevaluated 0x5634746acc78
| | `-FullComment 0x563474778c80 <line:519:7, line:520:88>
| |   `-ParagraphComment 0x563474778c50 <line:519:7, line:520:88>
| |     |-TextComment 0x563474778c00 <line:519:7, col:85> Text=" Protected destructor so that instances can only be deleted by derived classes."
| |     `-TextComment 0x563474778c20 <line:520:7, col:88> Text=" If that restriction is no longer desired, this should be made public and virtual."
| `-CXXMethodDecl 0x5634746acdb8 <line:509:7> col:7 implicit operator= 'NetEventsInterface &(const NetEventsInterface &)' inline default noexcept-unevaluated 0x5634746acdb8
|   `-ParmVarDecl 0x5634746acec8 <col:7> col:7 'const NetEventsInterface &'
|-EnumDecl 0x5634746acf38 <line:525:1, line:534:1> line:525:1
| |-EnumConstantDecl 0x5634746ad000 <line:527:5> col:5 referenced LOCAL_NONE '(anonymous enum at bitcoin/src/net.h:525:1)'
| |-EnumConstantDecl 0x5634746ad050 <line:528:5> col:5 LOCAL_IF '(anonymous enum at bitcoin/src/net.h:525:1)'
| |-EnumConstantDecl 0x5634746ad0a0 <line:529:5> col:5 LOCAL_BIND '(anonymous enum at bitcoin/src/net.h:525:1)'
| |-EnumConstantDecl 0x5634746ad0f0 <line:530:5> col:5 LOCAL_UPNP '(anonymous enum at bitcoin/src/net.h:525:1)'
| |-EnumConstantDecl 0x5634746ad140 <line:531:5> col:5 referenced LOCAL_MANUAL '(anonymous enum at bitcoin/src/net.h:525:1)'
| `-EnumConstantDecl 0x5634746ad190 <line:533:5> col:5 LOCAL_MAX '(anonymous enum at bitcoin/src/net.h:525:1)'
|-FunctionDecl 0x5634746ad280 <line:536:1, col:38> col:6 used IsPeerAddrLocalGood 'bool (CNode *)'
| `-ParmVarDecl 0x5634746ad1f0 <col:26, col:33> col:33 pnode 'CNode *'
|-FunctionDecl 0x5634746ad3c8 <line:537:1, col:33> col:6 AdvertiseLocal 'void (CNode *)'
| `-ParmVarDecl 0x5634746ad338 <col:21, col:28> col:28 pnode 'CNode *'
|-FunctionDecl 0x5634746ad648 <line:543:1, col:51> col:6 SetReachable 'void (enum Network, bool)'
| |-ParmVarDecl 0x5634746ad4b8 <col:19, col:32> col:32 net 'enum Network':'Network'
| |-ParmVarDecl 0x5634746ad530 <col:37, col:42> col:42 reachable 'bool'
| `-FullComment 0x563474778df0 <line:540:3, line:541:42>
|   |-ParagraphComment 0x563474778d40 <line:540:3, line:541:3>
|   | |-TextComment 0x563474778cf0 <line:540:3, col:75> Text=" Mark a network as reachable or unreachable (no automatic connects to it)"
|   | `-TextComment 0x563474778d10 <line:541:3> Text=" "
|   `-BlockCommandComment 0x563474778d60 <col:4, col:42> Name="note"
|     `-ParagraphComment 0x563474778dc0 <col:9, col:42>
|       `-TextComment 0x563474778d90 <col:9, col:42> Text=" Networks are reachable by default"
|-FunctionDecl 0x5634746ad838 <line:545:1, col:34> col:6 used IsReachable 'bool (enum Network)'
| |-ParmVarDecl 0x5634746ad748 <col:18, col:31> col:31 net 'enum Network':'Network'
| `-FullComment 0x563474778f40 <line:544:4, col:63>
|   |-ParagraphComment 0x563474778e90 <col:4>
|   | `-TextComment 0x563474778e60 <col:4> Text=" "
|   `-BlockCommandComment 0x563474778eb0 <col:5, col:63> Name="returns"
|     `-ParagraphComment 0x563474778f10 <col:13, col:63>
|       `-TextComment 0x563474778ee0 <col:13, col:63> Text=" true if the network is reachable, false otherwise "
|-FunctionDecl 0x5634746ad9a8 <line:547:1, col:38> col:6 IsReachable 'bool (const CNetAddr &)'
| |-ParmVarDecl 0x5634746ad918 <col:18, col:34> col:34 addr 'const CNetAddr &'
| `-FullComment 0x563474779090 <line:546:4, col:76>
|   |-ParagraphComment 0x563474778fe0 <col:4>
|   | `-TextComment 0x563474778fb0 <col:4> Text=" "
|   `-BlockCommandComment 0x563474779000 <col:5, col:76> Name="returns"
|     `-ParagraphComment 0x563474779060 <col:13, col:76>
|       `-TextComment 0x563474779030 <col:13, col:76> Text=" true if the address is in a reachable network, false otherwise "
|-FunctionDecl 0x5634746adbe8 <line:549:1, col:60> col:6 used AddLocal 'bool (const CService &, int)'
| |-ParmVarDecl 0x5634746ada60 <col:15, col:31> col:31 addr 'const CService &'
| `-ParmVarDecl 0x5634746adae0 <col:37, col:50> col:41 nScore 'int' cinit
|   `-ImplicitCastExpr 0x5634746adb68 <col:50> 'int' <IntegralCast>
|     `-DeclRefExpr 0x5634746adb48 <col:50> '(anonymous enum at bitcoin/src/net.h:525:1)' EnumConstant 0x5634746ad000 'LOCAL_NONE' '(anonymous enum at bitcoin/src/net.h:525:1)'
|-FunctionDecl 0x5634746ade38 <line:550:1, col:60> col:6 AddLocal 'bool (const CNetAddr &, int)'
| |-ParmVarDecl 0x5634746adca8 <col:15, col:31> col:31 addr 'const CNetAddr &'
| `-ParmVarDecl 0x5634746add28 <col:37, col:50> col:41 nScore 'int' cinit
|   `-ImplicitCastExpr 0x5634746addb0 <col:50> 'int' <IntegralCast>
|     `-DeclRefExpr 0x5634746add90 <col:50> '(anonymous enum at bitcoin/src/net.h:525:1)' EnumConstant 0x5634746ad000 'LOCAL_NONE' '(anonymous enum at bitcoin/src/net.h:525:1)'
|-FunctionDecl 0x5634746adf88 <line:551:1, col:38> col:6 RemoveLocal 'void (const CService &)'
| `-ParmVarDecl 0x5634746adef8 <col:18, col:34> col:34 addr 'const CService &'
|-FunctionDecl 0x5634746ae108 <line:552:1, col:36> col:6 SeenLocal 'bool (const CService &)'
| `-ParmVarDecl 0x5634746ae040 <col:16, col:32> col:32 addr 'const CService &'
|-FunctionDecl 0x5634746ae250 <line:553:1, col:34> col:6 IsLocal 'bool (const CService &)'
| `-ParmVarDecl 0x5634746ae1c0 <col:14, col:30> col:30 addr 'const CService &'
|-FunctionDecl 0x5634746ae518 <line:554:1, col:66> col:6 used GetLocal 'bool (CService &, const CNetAddr *)'
| |-ParmVarDecl 0x5634746ae3a0 <col:15, col:25> col:25 addr 'CService &'
| `-ParmVarDecl 0x5634746ae418 <col:31, col:59> col:47 paddrPeer 'const CNetAddr *' cinit
|   `-ImplicitCastExpr 0x5634746ae490 <col:59> 'const CNetAddr *' <NullToPointer>
|     `-CXXNullPtrLiteralExpr 0x5634746ae480 <col:59> 'nullptr_t'
|-FunctionDecl 0x5634746ae728 <line:555:1, col:80> col:10 GetLocalAddress 'CAddress (const CNetAddr *, ServiceFlags)'
| |-ParmVarDecl 0x5634746ae5d8 <col:26, col:42> col:42 paddrPeer 'const CNetAddr *'
| `-ParmVarDecl 0x5634746ae650 <col:53, col:66> col:66 nLocalServices 'ServiceFlags'
|-VarDecl 0x5634746ae7e8 <line:558:1, col:13> col:13 used fDiscover 'bool' extern
|-VarDecl 0x5634746ae860 <line:559:1, col:13> col:13 used fListen 'bool' extern
|-VarDecl 0x5634746ae8d8 <line:560:1, col:13> col:13 g_relay_txes 'bool' extern
|-VarDecl 0x5634746ae990 <line:563:1, col:20> col:20 invalid strSubVersion 'int' extern
| `-FullComment 0x563474779160 <line:562:4, col:64>
|   `-ParagraphComment 0x563474779130 <col:4, col:64>
|     `-TextComment 0x563474779100 <col:4, col:64> Text=" Subversion as sent to the P2P network in `version` messages "
|-CXXRecordDecl 0x5634746ae9f8 <line:565:1, line:568:1> line:565:8 referenced struct LocalServiceInfo definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634746aeb18 <col:1, col:8> col:8 implicit struct LocalServiceInfo
| |-FieldDecl 0x5634746aebc0 <line:566:5, col:9> col:9 referenced nScore 'int'
| `-FieldDecl 0x5634746aec28 <line:567:5, col:9> col:9 referenced nPort 'int'
|-VarDecl 0x5634746aeca0 <line:570:1, col:25> col:25 cs_mapLocalHost 'CCriticalSection':'int' extern
|-VarDecl 0x5634746aed60 <line:573:1, col:26> col:26 invalid NET_MESSAGE_COMMAND_OTHER 'const int' extern
|-TypedefDecl 0x5634746aee00 <line:574:1, col:41> col:41 referenced invalid mapMsgCmdSize 'int'
| `-BuiltinType 0x5634744cb780 'int'
|-CXXRecordDecl 0x5634746aee58 prev 0x563474697a00 <line:576:1, line:608:1> line:576:7 referenced invalid class CNodeStats definition
| |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634746aef50 <col:1, col:7> col:7 implicit class CNodeStats
| |-AccessSpecDecl 0x5634746aefe0 <line:578:1, col:7> col:1 public
| |-FieldDecl 0x5634746af018 <line:579:5, col:12> col:12 referenced nodeid 'NodeId':'int'
| |-FieldDecl 0x5634746af078 <line:580:5, col:18> col:18 referenced nServices 'ServiceFlags'
| |-FieldDecl 0x5634746af0d8 <line:581:5, col:10> col:10 referenced fRelayTxes 'bool'
| |-FieldDecl 0x5634746af150 <line:582:5, col:13> col:13 invalid nLastSend 'int'
| |-FieldDecl 0x5634746af1c8 <line:583:5, col:13> col:13 invalid nLastRecv 'int'
| |-FieldDecl 0x5634746af240 <line:584:5, col:13> col:13 invalid nTimeConnected 'int'
| |-FieldDecl 0x5634746af2b8 <line:585:5, col:13> col:13 invalid nTimeOffset 'int'
| |-FieldDecl 0x5634746af330 <line:586:5, col:17> col:17 invalid addrName 'int'
| |-FieldDecl 0x5634746af398 <line:587:5, col:9> col:9 referenced nVersion 'int'
| |-FieldDecl 0x5634746af410 <line:588:5, col:17> col:17 invalid cleanSubVer 'int'
| |-FieldDecl 0x5634746af470 <line:589:5, col:10> col:10 referenced fInbound 'bool'
| |-FieldDecl 0x5634746af4d0 <line:590:5, col:10> col:10 referenced m_manual_connection 'bool'
| |-FieldDecl 0x5634746af538 <line:591:5, col:9> col:9 referenced nStartingHeight 'int'
| |-FieldDecl 0x5634746af5b0 <line:592:5, col:14> col:14 invalid nSendBytes 'int'
| |-FieldDecl 0x5634746af630 <line:593:5, col:19> col:19 referenced mapSendBytesPerMsgCmd 'mapMsgCmdSize':'int'
| |-FieldDecl 0x5634746af6a8 <line:594:5, col:14> col:14 invalid nRecvBytes 'int'
| |-FieldDecl 0x5634746af708 <line:595:5, col:19> col:19 referenced mapRecvBytesPerMsgCmd 'mapMsgCmdSize':'int'
| |-FieldDecl 0x5634746af768 <line:596:5, col:24> col:24 referenced m_permissionFlags 'NetPermissionFlags'
| |-FieldDecl 0x5634746af7c8 <line:597:5, col:10> col:10 referenced m_legacyWhitelisted 'bool'
| |-FieldDecl 0x5634746af830 <line:598:5, col:12> col:12 referenced dPingTime 'double'
| |-FieldDecl 0x5634746af898 <line:599:5, col:12> col:12 referenced dPingWait 'double'
| |-FieldDecl 0x5634746af900 <line:600:5, col:12> col:12 referenced dMinPing 'double'
| |-FieldDecl 0x5634746af960 <line:601:5, col:13> col:13 referenced minFeeFilter 'CAmount':'int'
| |-FieldDecl 0x5634746af9d8 <line:603:5, col:17> col:17 invalid addrLocal 'int'
| |-FieldDecl 0x5634746afa38 <line:605:5, col:14> col:14 invalid addr 'CAddress'
| `-FieldDecl 0x5634746afa98 <line:607:5, col:14> col:14 invalid addrBind 'CAddress'
|-CXXRecordDecl 0x5634746afb00 <line:613:1, line:654:1> line:613:7 referenced invalid class CNetMessage definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634746afc18 <col:1, col:7> col:7 implicit referenced class CNetMessage
| |-AccessSpecDecl 0x5634746afca8 <line:614:1, col:8> col:1 private
| |-FieldDecl 0x5634746afce0 <line:615:5, col:22> col:22 invalid hasher 'CHash256' mutable
| |-FieldDecl 0x5634746afd40 <line:616:5, col:21> col:21 invalid data_hash 'uint256' mutable
| |-AccessSpecDecl 0x5634746afd90 <line:617:1, col:7> col:1 public
| |-FieldDecl 0x5634746afdc8 <line:618:5, col:10> col:10 referenced in_data 'bool'
| |-FieldDecl 0x5634746afe28 <line:620:5, col:17> col:17 referenced hdrbuf 'CDataStream'
| |-FieldDecl 0x5634746afe88 <line:621:5, col:20> col:20 invalid hdr 'CMessageHeader'
| |-FieldDecl 0x5634746afef0 <line:622:5, col:18> col:18 referenced nHdrPos 'unsigned int'
| |-FieldDecl 0x5634746aff50 <line:624:5, col:17> col:17 referenced vRecv 'CDataStream'
| |-FieldDecl 0x5634746affb8 <line:625:5, col:18> col:18 referenced nDataPos 'unsigned int'
| |-FieldDecl 0x5634746b0030 <line:627:5, col:13> col:13 invalid nTime 'int'
| |-CXXConstructorDecl 0x5634746b03e8 <line:629:5, line:635:5> line:629:5 used CNetMessage 'void (const CMessageHeader::MessageStartChars &, int, int)'
| | |-ParmVarDecl 0x5634746b0160 <col:17, col:58> col:58 used pchMessageStartIn 'const CMessageHeader::MessageStartChars &'
| | |-ParmVarDecl 0x5634746b01e0 <col:77, col:81> col:81 used nTypeIn 'int'
| | |-ParmVarDecl 0x5634746b0260 <col:90, col:94> col:94 used nVersionIn 'int'
| | |-CXXCtorInitializer Field 0x5634746afe28 'hdrbuf' 'CDataStream'
| | | `-CXXConstructExpr 0x5634746b0c98 <col:108, col:134> 'CDataStream' 'void (int, int)'
| | |   |-ImplicitCastExpr 0x5634746b0c68 <col:115> 'int' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5634746b0c00 <col:115> 'int' lvalue ParmVar 0x5634746b01e0 'nTypeIn' 'int'
| | |   `-ImplicitCastExpr 0x5634746b0c80 <col:124> 'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x5634746b0c20 <col:124> 'int' lvalue ParmVar 0x5634746b0260 'nVersionIn' 'int'
| | |-CXXCtorInitializer Field 0x5634746aff50 'vRecv' 'CDataStream'
| | | `-CXXConstructExpr 0x5634746b0dd0 <col:161, col:186> 'CDataStream' 'void (int, int)'
| | |   |-ImplicitCastExpr 0x5634746b0da0 <col:167> 'int' <LValueToRValue>
| | |   | `-DeclRefExpr 0x5634746b0d38 <col:167> 'int' lvalue ParmVar 0x5634746b01e0 'nTypeIn' 'int'
| | |   `-ImplicitCastExpr 0x5634746b0db8 <col:176> 'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x5634746b0d58 <col:176> 'int' lvalue ParmVar 0x5634746b0260 'nVersionIn' 'int'
| | `-CompoundStmt 0x5634746b10f0 <col:188, line:635:5>
| |   |-CXXMemberCallExpr 0x5634746b0ed0 <line:630:9, col:25> 'void'
| |   | |-MemberExpr 0x5634746b0e80 <col:9, col:16> '<bound member function type>' .resize 0x5634746710c8
| |   | | `-MemberExpr 0x5634746b0e50 <col:9> 'CDataStream' lvalue ->hdrbuf 0x5634746afe28
| |   | |   `-CXXThisExpr 0x5634746b0e40 <col:9> 'CNetMessage *' implicit this
| |   | |-IntegerLiteral 0x5634746b0eb0 <col:23> 'int' 24
| |   | `-CXXDefaultArgExpr 0x5634746b0f00 <<invalid sloc>> 'int'
| |   |-BinaryOperator 0x5634746b0f70 <line:631:9, col:19> 'bool' lvalue '='
| |   | |-MemberExpr 0x5634746b0f30 <col:9> 'bool' lvalue ->in_data 0x5634746afdc8
| |   | | `-CXXThisExpr 0x5634746b0f20 <col:9> 'CNetMessage *' implicit this
| |   | `-CXXBoolLiteralExpr 0x5634746b0f60 <col:19> 'bool' false
| |   |-BinaryOperator 0x5634746b1008 <line:632:9, col:19> 'unsigned int' lvalue '='
| |   | |-MemberExpr 0x5634746b0fa0 <col:9> 'unsigned int' lvalue ->nHdrPos 0x5634746afef0
| |   | | `-CXXThisExpr 0x5634746b0f90 <col:9> 'CNetMessage *' implicit this
| |   | `-ImplicitCastExpr 0x5634746b0ff0 <col:19> 'unsigned int' <IntegralCast>
| |   |   `-IntegerLiteral 0x5634746b0fd0 <col:19> 'int' 0
| |   `-BinaryOperator 0x5634746b10a0 <line:633:9, col:20> 'unsigned int' lvalue '='
| |     |-MemberExpr 0x5634746b1038 <col:9> 'unsigned int' lvalue ->nDataPos 0x5634746affb8
| |     | `-CXXThisExpr 0x5634746b1028 <col:9> 'CNetMessage *' implicit this
| |     `-ImplicitCastExpr 0x5634746b1088 <col:20> 'unsigned int' <IntegralCast>
| |       `-IntegerLiteral 0x5634746b1068 <col:20> 'int' 0
| |-CXXMethodDecl 0x5634746b04f8 <line:637:5, line:642:5> line:637:10 used complete 'bool () const'
| | `-CompoundStmt 0x5634746b1218 <line:638:5, line:642:5>
| |   `-IfStmt 0x5634746b11b0 <line:639:9, line:640:20>
| |     |-UnaryOperator 0x5634746b1178 <line:639:13, col:14> 'bool' prefix '!' cannot overflow
| |     | `-ImplicitCastExpr 0x5634746b1160 <col:14> 'bool' <LValueToRValue>
| |     |   `-MemberExpr 0x5634746b1130 <col:14> 'const bool' lvalue ->in_data 0x5634746afdc8
| |     |     `-CXXThisExpr 0x5634746b1120 <col:14> 'const CNetMessage *' implicit this
| |     `-ReturnStmt 0x5634746b11a0 <line:640:13, col:20>
| |       `-CXXBoolLiteralExpr 0x5634746b1190 <col:20> 'bool' false
| |-CXXMethodDecl 0x5634746b05e8 <line:644:5, col:37> col:20 GetMessageHash 'const uint256 &() const'
| |-CXXMethodDecl 0x5634746b0730 <line:646:5, line:650:5> line:646:10 SetVersion 'void (int)'
| | |-ParmVarDecl 0x5634746b06a0 <col:21, col:25> col:25 used nVersionIn 'int'
| | `-CompoundStmt 0x5634746b13d0 <line:647:5, line:650:5>
| |   |-CXXMemberCallExpr 0x5634746b12c0 <line:648:9, col:37> 'void'
| |   | |-MemberExpr 0x5634746b1270 <col:9, col:16> '<bound member function type>' .SetVersion 0x5634746748c0
| |   | | `-MemberExpr 0x5634746b1240 <col:9> 'CDataStream' lvalue ->hdrbuf 0x5634746afe28
| |   | |   `-CXXThisExpr 0x5634746b1230 <col:9> 'CNetMessage *' implicit this
| |   | `-ImplicitCastExpr 0x5634746b12e8 <col:27> 'int' <LValueToRValue>
| |   |   `-DeclRefExpr 0x5634746b12a0 <col:27> 'int' lvalue ParmVar 0x5634746b06a0 'nVersionIn' 'int'
| |   `-CXXMemberCallExpr 0x5634746b1390 <line:649:9, col:36> 'void'
| |     |-MemberExpr 0x5634746b1340 <col:9, col:15> '<bound member function type>' .SetVersion 0x5634746748c0
| |     | `-MemberExpr 0x5634746b1310 <col:9> 'CDataStream' lvalue ->vRecv 0x5634746aff50
| |     |   `-CXXThisExpr 0x5634746b1300 <col:9> 'CNetMessage *' implicit this
| |     `-ImplicitCastExpr 0x5634746b13b8 <col:26> 'int' <LValueToRValue>
| |       `-DeclRefExpr 0x5634746b1370 <col:26> 'int' lvalue ParmVar 0x5634746b06a0 'nVersionIn' 'int'
| |-CXXMethodDecl 0x5634746b0950 <line:652:5, col:56> col:9 used readHeader 'int (const char *, unsigned int)'
| | |-ParmVarDecl 0x5634746b07f0 <col:20, col:32> col:32 pch 'const char *'
| | `-ParmVarDecl 0x5634746b0870 <col:37, col:50> col:50 nBytes 'unsigned int'
| |-CXXMethodDecl 0x5634746b0b38 <line:653:5, col:54> col:9 used readData 'int (const char *, unsigned int)'
| | |-ParmVarDecl 0x5634746b0a18 <col:18, col:30> col:30 pch 'const char *'
| | `-ParmVarDecl 0x5634746b0a98 <col:35, col:48> col:48 nBytes 'unsigned int'
| |-CXXConstructorDecl 0x563474722cb8 <line:613:7> col:7 implicit constexpr CNetMessage 'void (const CNetMessage &)' inline default trivial noexcept-unevaluated 0x563474722cb8
| | `-ParmVarDecl 0x563474722dc8 <col:7> col:7 'const CNetMessage &'
| `-CXXConstructorDecl 0x563474722e68 <col:7> col:7 implicit constexpr CNetMessage 'void (CNetMessage &&)' inline default trivial noexcept-unevaluated 0x563474722e68
|   `-ParmVarDecl 0x563474722f78 <col:7> col:7 'CNetMessage &&'
|-CXXRecordDecl 0x5634746b1418 prev 0x5634746939e0 <line:658:1, line:944:1> line:658:7 referenced invalid class CNode definition
| |-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-FullComment 0x563474779230 <line:657:4, col:29>
| | `-ParagraphComment 0x563474779200 <col:4, col:29>
| |   `-TextComment 0x5634747791d0 <col:4, col:29> Text=" Information about a peer "
| |-CXXRecordDecl 0x5634746b1510 <line:658:1, col:7> col:7 implicit referenced class CNode
| |-AccessSpecDecl 0x5634746b15a0 <line:661:1, col:7> col:1 public
| |-FieldDecl 0x5634746b15f8 <line:664:5, col:12> col:12 referenced hSocket 'SOCKET':'unsigned int'
| | `-GuardedByAttr 0x5634746bb3e8 <bitcoin/src/threadsafety.h:18:38, col:50>
| |   `-MemberExpr 0x5634746bb3b8 <bitcoin/src/net.h:664:31> 'CCriticalSection':'int' lvalue ->cs_hSocket 0x5634746b18c0 non_odr_use_unevaluated
| |     `-CXXThisExpr 0x5634746bb3a8 <col:31> 'CNode *' implicit this
| |-FieldDecl 0x5634746b1670 <line:665:5, col:12> col:12 invalid nSendSize 'int'
| |-FieldDecl 0x5634746b16e8 <line:666:5, col:12> col:12 invalid nSendOffset 'int'
| |-FieldDecl 0x5634746b1760 <line:667:5, col:14> col:14 invalid nSendBytes 'int'
| |-FieldDecl 0x5634746b1800 <line:668:44> col:44 invalid vSendMsg 'int'
| |-FieldDecl 0x5634746b1860 <line:669:5, col:22> col:22 referenced cs_vSend 'CCriticalSection':'int'
| |-FieldDecl 0x5634746b18c0 <line:670:5, col:22> col:22 referenced cs_hSocket 'CCriticalSection':'int'
| |-FieldDecl 0x5634746b1920 <line:671:5, col:22> col:22 referenced cs_vRecv 'CCriticalSection':'int'
| |-FieldDecl 0x5634746b1980 <line:673:5, col:22> col:22 cs_vProcessMsg 'CCriticalSection':'int'
| |-FieldDecl 0x5634746b1a18 <line:675:5, col:12> col:12 invalid nProcessQueueSize 'int'
| |-FieldDecl 0x5634746b1a78 <line:677:5, col:22> col:22 cs_sendProcessing 'CCriticalSection':'int'
| |-FieldDecl 0x5634746b1b10 <line:680:5, col:14> col:14 invalid nRecvBytes 'int'
| |-FieldDecl 0x5634746b1bc0 <line:683:26> col:26 invalid nLastSend 'int'
| |-FieldDecl 0x5634746b1c48 <line:684:26> col:26 invalid nLastRecv 'int'
| |-FieldDecl 0x5634746b1cc0 <line:685:5, col:19> col:19 invalid nTimeConnected 'const int'
| |-FieldDecl 0x5634746b1d48 <line:686:26> col:26 invalid nTimeOffset 'int'
| |-FieldDecl 0x5634746b1da8 <line:688:5, col:20> col:20 invalid addr 'const CAddress'
| |-FieldDecl 0x5634746b1e08 <line:690:5, col:20> col:20 invalid addrBind 'const CAddress'
| |-FieldDecl 0x5634746b1ea8 <line:692:5, col:20> col:20 invalid cs_SubVer 'int'
| |-FieldDecl 0x5634746b1f50 <line:697:5, col:17> col:17 invalid cleanSubVer 'int'
| | `-FullComment 0x563474779d80 <line:694:7, line:695:76>
| |   `-ParagraphComment 0x563474779d50 <line:694:7, line:695:76>
| |     |-TextComment 0x563474779d00 <line:694:7, col:77> Text=" cleanSubVer is a sanitized string of the user agent byte array we read"
| |     `-TextComment 0x563474779d20 <line:695:7, col:76> Text=" from the wire. This cleaned string can safely be logged or displayed."
| |-FieldDecl 0x5634746b1fb0 <line:698:5, col:30> col:10 referenced m_prefer_evict 'bool'
| | `-InitListExpr 0x5634746bb758 <col:24, col:30> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bb700 <col:25> 'bool' false
| |-CXXMethodDecl 0x5634746b20d8 <line:699:5, line:701:5> line:699:10 HasPermission 'bool (NetPermissionFlags) const'
| | |-ParmVarDecl 0x5634746b2010 <col:24, col:43> col:43 used permission 'NetPermissionFlags'
| | `-CompoundStmt 0x5634746bc208 <col:61, line:701:5>
| |   `-ReturnStmt 0x5634746bc1f8 <line:700:9, col:69>
| |     `-CallExpr 0x5634746bc1b0 <col:16, col:69> 'bool'
| |       |-ImplicitCastExpr 0x5634746bc198 <col:16, col:32> 'bool (*)(const NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
| |       | `-DeclRefExpr 0x5634746bc0d8 <col:16, col:32> 'bool (const NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465d988 'HasFlag' 'bool (const NetPermissionFlags &, NetPermissionFlags)'
| |       |-MemberExpr 0x5634746bc118 <col:40> 'const NetPermissionFlags' lvalue ->m_permissionFlags 0x5634746b6a88
| |       | `-CXXThisExpr 0x5634746bc108 <col:40> 'const CNode *' implicit this
| |       `-ImplicitCastExpr 0x5634746bc1e0 <col:59> 'NetPermissionFlags' <LValueToRValue>
| |         `-DeclRefExpr 0x5634746bc148 <col:59> 'NetPermissionFlags' lvalue ParmVar 0x5634746b2010 'permission' 'NetPermissionFlags'
| |-FieldDecl 0x5634746b2190 <line:703:5, col:35> col:10 referenced m_legacyWhitelisted 'bool'
| | `-InitListExpr 0x5634746bb7f8 <col:29, col:35> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bb7a0 <col:30> 'bool' false
| |-FieldDecl 0x5634746b21f0 <line:704:5, col:23> col:10 fFeeler 'bool'
| | `-InitListExpr 0x5634746bb898 <col:17, col:23> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bb840 <col:18> 'bool' false
| |-FieldDecl 0x5634746b2250 <line:705:5, col:24> col:10 fOneShot 'bool'
| | `-InitListExpr 0x5634746bb938 <col:18, col:24> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bb8e0 <col:19> 'bool' false
| |-FieldDecl 0x5634746b22b0 <line:706:5, col:35> col:10 referenced m_manual_connection 'bool'
| | `-InitListExpr 0x5634746bb9d8 <col:29, col:35> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bb980 <col:30> 'bool' false
| |-FieldDecl 0x5634746b2310 <line:707:5, col:23> col:10 fClient 'bool'
| | `-InitListExpr 0x5634746bba78 <col:17, col:23> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bba20 <col:18> 'bool' false
| |-FieldDecl 0x5634746b33d0 <line:708:5, col:30> col:10 m_limited_node 'bool'
| | `-InitListExpr 0x5634746bbb18 <col:24, col:30> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bbac0 <col:25> 'bool' false
| |-FieldDecl 0x5634746b3430 <line:709:5, col:16> col:16 referenced fInbound 'const bool'
| |-FieldDecl 0x5634746b34a8 <line:710:5, col:22> col:22 invalid fSuccessfullyConnected 'int'
| |-FieldDecl 0x5634746b3520 <line:713:5, col:22> col:22 invalid fDisconnect 'int'
| |-FieldDecl 0x5634746b3580 <line:714:5, col:25> col:10 fSentAddr 'bool'
| | `-InitListExpr 0x5634746bbbb8 <col:19, col:25> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bbb60 <col:20> 'bool' false
| |-FieldDecl 0x5634746b35e0 <line:715:5, col:21> col:21 grantOutbound 'CSemaphoreGrant'
| |-FieldDecl 0x5634746b3680 <line:718:5, col:20> col:20 invalid nKeyedNetGroup 'const int'
| |-FieldDecl 0x5634746b36f8 <line:719:5, col:22> col:22 invalid fPauseRecv 'int'
| |-FieldDecl 0x5634746b3770 <line:720:5, col:22> col:22 invalid fPauseSend 'int'
| |-AccessSpecDecl 0x5634746b37c0 <line:722:1, col:10> col:1 protected
| |-FieldDecl 0x5634746b37f8 <line:723:5, col:19> col:19 referenced mapSendBytesPerMsgCmd 'mapMsgCmdSize':'int'
| |-FieldDecl 0x5634746b3858 <line:724:5, col:19> col:19 referenced mapRecvBytesPerMsgCmd 'mapMsgCmdSize':'int'
| | `-GuardedByAttr 0x5634746bb470 <bitcoin/src/threadsafety.h:18:38, col:50>
| |   `-MemberExpr 0x5634746bb440 <bitcoin/src/net.h:724:52> 'CCriticalSection':'int' lvalue ->cs_vRecv 0x5634746b1920 non_odr_use_unevaluated
| |     `-CXXThisExpr 0x5634746bb430 <col:52> 'CNode *' implicit this
| |-AccessSpecDecl 0x5634746b38a8 <line:726:1, col:7> col:1 public
| |-FieldDecl 0x5634746b38e0 <line:727:5, col:13> col:13 invalid hashContinue 'uint256'
| |-FieldDecl 0x5634746b3988 <line:732:5, col:25> col:25 invalid addrKnown 'CRollingBloomFilter'
| |-FieldDecl 0x5634746b39e8 <line:733:5, col:24> col:10 fGetAddr 'bool'
| | `-InitListExpr 0x5634746bbc58 <col:18, col:24> 'bool'
| |   `-CXXBoolLiteralExpr 0x5634746bbc00 <col:19> 'bool' false
| |-FieldDecl 0x5634746b3a60 <line:734:5, col:13> col:13 invalid nNextAddrSend 'int'
| |-FieldDecl 0x5634746b3ad8 <line:735:5, col:13> col:13 invalid nNextLocalAddrSend 'int'
| |-FieldDecl 0x5634746b3b38 <line:737:5, col:16> col:16 referenced m_addr_relay_peer 'const bool'
| |-CXXMethodDecl 0x5634746b3ba8 <line:738:5, col:62> col:10 IsAddrRelayPeer 'bool () const'
| | `-CompoundStmt 0x5634746bc288 <col:34, col:62>
| |   `-ReturnStmt 0x5634746bc278 <col:36, col:43>
| |     `-ImplicitCastExpr 0x5634746bc260 <col:43> 'bool' <LValueToRValue>
| |       `-MemberExpr 0x5634746bc230 <col:43> 'const bool' lvalue ->m_addr_relay_peer 0x5634746b3b38
| |         `-CXXThisExpr 0x5634746bc220 <col:43> 'const CNode *' implicit this
| |-FieldDecl 0x5634746b3c78 <line:744:5, col:22> col:22 referenced cs_inventory 'CCriticalSection':'int'
| |-CXXRecordDecl 0x5634746b3cc8 <line:746:5, line:772:5> line:746:12 referenced invalid struct TxRelay definition
| | |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| | | |-DefaultConstructor exists non_trivial user_provided
| | | |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x5634746b3de8 <col:5, col:12> col:12 implicit referenced struct TxRelay
| | |-CXXConstructorDecl 0x5634746b3ee0 <line:747:9, col:59> col:9 TxRelay 'void ()'
| | | |-CXXCtorInitializer Field 0x5634746b3ff8 'fRelayTxes' 'bool'
| | | | `-CXXDefaultInitExpr 0x5634746bc2a0 <col:9> 'bool'
| | | |-CXXCtorInitializer Field 0x5634746b4158 'fSendMempool' 'bool'
| | | | `-CXXDefaultInitExpr 0x5634746bc2e8 <col:9> 'bool'
| | | |-CXXCtorInitializer Field 0x5634746b4318 'minFeeFilter' 'CAmount':'int'
| | | | `-CXXDefaultInitExpr 0x5634746bc330 <col:9> 'CAmount':'int'
| | | |-CXXCtorInitializer Field 0x5634746b4378 'lastSentFeeFilter' 'CAmount':'int'
| | | | `-CXXDefaultInitExpr 0x5634746bc378 <col:9> 'CAmount':'int'
| | | `-CompoundStmt 0x5634746bc480 <col:19, col:59>
| | |-FieldDecl 0x5634746b3f98 <line:748:9, col:34> col:34 referenced cs_filter 'CCriticalSection':'int' mutable
| | |-FieldDecl 0x5634746b3ff8 <line:753:9, col:52> col:14 fRelayTxes 'bool'
| | | |-InitListExpr 0x5634746bbcf8 <col:46, col:52> 'bool'
| | | | `-CXXBoolLiteralExpr 0x5634746bbca0 <col:47> 'bool' false
| | | `-GuardedByAttr 0x5634746bb4f8 <bitcoin/src/threadsafety.h:18:38, col:50>
| | |   `-MemberExpr 0x5634746bb4c8 <bitcoin/src/net.h:753:36> 'CCriticalSection':'int' lvalue ->cs_filter 0x5634746b3f98 non_odr_use_unevaluated
| | |     `-CXXThisExpr 0x5634746bb4b8 <col:36> 'CNode::TxRelay *' implicit this
| | |-FieldDecl 0x5634746b4078 <line:756:9, col:34> col:34 referenced cs_tx_inventory 'CCriticalSection':'int' mutable
| | |-FieldDecl 0x5634746b40d8 <line:757:9, col:29> col:29 invalid filterInventoryKnown 'CRollingBloomFilter'
| | |-FieldDecl 0x5634746b4158 <line:762:9, col:60> col:14 fSendMempool 'bool'
| | | |-InitListExpr 0x5634746bbd98 <col:54, col:60> 'bool'
| | | | `-CXXBoolLiteralExpr 0x5634746bbd40 <col:55> 'bool' false
| | | `-GuardedByAttr 0x5634746bb580 <bitcoin/src/threadsafety.h:18:38, col:50>
| | |   `-MemberExpr 0x5634746bb550 <bitcoin/src/net.h:762:38> 'CCriticalSection':'int' lvalue ->cs_tx_inventory 0x5634746b4078 non_odr_use_unevaluated
| | |     `-CXXThisExpr 0x5634746bb540 <col:38> 'CNode::TxRelay *' implicit this
| | |-FieldDecl 0x5634746b41e0 <line:764:43> col:43 invalid m_last_mempool_req 'int'
| | |-FieldDecl 0x5634746b4258 <line:765:9, col:17> col:17 invalid nNextInvSend 'int'
| | |-FieldDecl 0x5634746b42b8 <line:767:9, col:26> col:26 referenced cs_feeFilter 'CCriticalSection':'int'
| | |-FieldDecl 0x5634746b4318 <line:769:9, col:56> col:17 minFeeFilter 'CAmount':'int'
| | | |-InitListExpr 0x5634746bbe48 <col:54, col:56> 'CAmount':'int'
| | | | `-IntegerLiteral 0x5634746bbde0 <col:55> 'int' 0
| | | `-GuardedByAttr 0x5634746bb608 <bitcoin/src/threadsafety.h:18:38, col:50>
| | |   `-MemberExpr 0x5634746bb5d8 <bitcoin/src/net.h:769:41> 'CCriticalSection':'int' lvalue ->cs_feeFilter 0x5634746b42b8 non_odr_use_unevaluated
| | |     `-CXXThisExpr 0x5634746bb5c8 <col:41> 'CNode::TxRelay *' implicit this
| | |-FieldDecl 0x5634746b4378 <line:770:9, col:36> col:17 lastSentFeeFilter 'CAmount':'int'
| | | `-InitListExpr 0x5634746bbef8 <col:34, col:36> 'CAmount':'int'
| | |   `-IntegerLiteral 0x5634746bbe90 <col:35> 'int' 0
| | |-FieldDecl 0x5634746b43f0 <line:771:9, col:17> col:17 invalid nextSendTimeFeeFilter 'int'
| | |-CXXConstructorDecl 0x5634746b4468 <line:746:12> col:12 implicit constexpr TxRelay 'void (const CNode::TxRelay &)' inline default trivial noexcept-unevaluated 0x5634746b4468
| | | `-ParmVarDecl 0x5634746b4578 <col:12> col:12 'const CNode::TxRelay &'
| | `-CXXMethodDecl 0x5634746b4618 <col:12> col:12 implicit operator= 'CNode::TxRelay &(const CNode::TxRelay &)' inline default trivial noexcept-unevaluated 0x5634746b4618
| |   `-ParmVarDecl 0x5634746b4728 <col:12> col:12 'const CNode::TxRelay &'
| |-FieldDecl 0x5634746b4828 <line:781:26> col:26 invalid nLastBlockTime 'int'
| |-FieldDecl 0x5634746b48b0 <line:782:26> col:26 invalid nLastTXTime 'int'
| |-FieldDecl 0x5634746b4938 <line:786:27> col:27 invalid nPingNonceSent 'int'
| |-FieldDecl 0x5634746b49c0 <line:788:26> col:26 invalid nPingUsecStart 'int'
| |-FieldDecl 0x5634746b4a48 <line:790:26> col:26 invalid nPingUsecTime 'int'
| |-FieldDecl 0x5634746b4ad0 <line:792:26> col:26 invalid nMinPingUsecTime 'int'
| |-CXXConstructorDecl 0x5634746b5268 <line:798:5, col:293> col:5 invalid CNode 'void (NodeId, ServiceFlags, int, SOCKET, const CAddress &, int, int, const CAddress &, const int &, bool, bool)'
| | |-ParmVarDecl 0x5634746b4b70 <col:11, col:18> col:18 id 'NodeId':'int'
| | |-ParmVarDecl 0x5634746b4be8 <col:22, col:35> col:35 nLocalServicesIn 'ServiceFlags'
| | |-ParmVarDecl 0x5634746b4c68 <col:53, col:57> col:57 nMyStartingHeightIn 'int'
| | |-ParmVarDecl 0x5634746b4ce0 <col:78, col:85> col:85 hSocketIn 'SOCKET':'unsigned int'
| | |-ParmVarDecl 0x5634746b4d58 <col:96, col:112> col:112 addrIn 'const CAddress &'
| | |-ParmVarDecl 0x5634746b4de8 <col:120, col:129> col:129 invalid nKeyedNetGroupIn 'int'
| | |-ParmVarDecl 0x5634746b4e78 <col:147, col:156> col:156 invalid nLocalHostNonceIn 'int'
| | |-ParmVarDecl 0x5634746b4ef0 <col:175, col:191> col:191 addrBindIn 'const CAddress &'
| | |-ParmVarDecl 0x5634746b4f80 <col:203, col:222> col:222 invalid addrNameIn 'const int &'
| | |-ParmVarDecl 0x5634746b4ff8 <col:239, col:257> col:244 fInboundIn 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x5634746bb6e0 <col:257> 'bool' false
| | `-ParmVarDecl 0x5634746b5070 <col:264, col:288> col:269 block_relay_only 'bool' cinit
| |   `-CXXBoolLiteralExpr 0x5634746bb6f0 <col:288> 'bool' false
| |-CXXDestructorDecl 0x5634746b63f0 <line:799:5, col:12> col:5 used ~CNode 'void () noexcept'
| |-CXXConstructorDecl 0x5634746b65c8 <line:800:5, col:32> col:5 CNode 'void (const CNode &)' delete trivial
| | `-ParmVarDecl 0x5634746b6508 <col:11, col:22> col:23 'const CNode &'
| |-CXXMethodDecl 0x5634746b6778 <line:801:5, col:43> col:12 operator= 'CNode &(const CNode &)' delete trivial
| | `-ParmVarDecl 0x5634746b6688 <col:22, col:33> col:34 'const CNode &'
| |-AccessSpecDecl 0x5634746b6820 <line:803:1, col:8> col:1 private
| |-FieldDecl 0x5634746b6858 <line:804:5, col:18> col:18 referenced id 'const NodeId':'const int'
| |-FieldDecl 0x5634746b68d0 <line:805:5, col:20> col:20 invalid nLocalHostNonce 'const int'
| |-FieldDecl 0x5634746b6958 <line:822:5, col:24> col:24 referenced nLocalServices 'const ServiceFlags'
| | `-FullComment 0x56347477a080 <line:807:8, line:821:31>
| |   |-ParagraphComment 0x563474779e20 <line:807:8, col:38>
| |   | `-TextComment 0x563474779df0 <col:8, col:38> Text=" Services offered to this peer."
| |   |-ParagraphComment 0x563474779e90 <line:809:8, line:810:70>
| |   | |-TextComment 0x563474779e40 <line:809:8, col:70> Text=" This is supplied by the parent CConnman during peer connection"
| |   | `-TextComment 0x563474779e60 <line:810:8, col:70> Text=" (CConnman::ConnectNode()) from its attribute of the same name."
| |   |-ParagraphComment 0x563474779f30 <line:812:8, line:814:53>
| |   | |-TextComment 0x563474779eb0 <line:812:8, col:76> Text=" This is const because there is no protocol defined for renegotiating"
| |   | |-TextComment 0x563474779ed0 <line:813:8, col:74> Text=" services initially offered to a peer. The set of local services we"
| |   | `-TextComment 0x563474779ef0 <line:814:8, col:53> Text=" offer should not change after initialization."
| |   `-ParagraphComment 0x56347477a040 <line:816:8, line:821:31>
| |     |-TextComment 0x563474779f50 <line:816:8, col:72> Text=" An interesting example of this is NODE_NETWORK and initial block"
| |     |-TextComment 0x563474779f70 <line:817:8, col:77> Text=" download: a node which starts up from scratch doesn't have any blocks"
| |     |-TextComment 0x563474779f90 <line:818:8, col:78> Text=" to serve, but still advertises NODE_NETWORK because it will eventually"
| |     |-TextComment 0x563474779fb0 <line:819:8, col:76> Text=" fulfill this role after IBD completes. P2P code is written in such a"
| |     |-TextComment 0x563474779fd0 <line:820:8, col:76> Text=" way that it can gracefully handle peers who don't make good on their"
| |     `-TextComment 0x563474779ff0 <line:821:8, col:31> Text=" service advertisements."
| |-FieldDecl 0x5634746b69c0 <line:824:5, col:15> col:15 referenced nMyStartingHeight 'const int'
| |-FieldDecl 0x5634746b6a28 <line:825:5, col:23> col:9 referenced nSendVersion 'int'
| | `-InitListExpr 0x5634746bbfa8 <col:21, col:23> 'int'
| |   `-IntegerLiteral 0x5634746bbf40 <col:22> 'int' 0
| |-FieldDecl 0x5634746b6a88 <line:826:5, col:51> col:24 referenced m_permissionFlags 'NetPermissionFlags'
| | `-InitListExpr 0x5634746bc058 <col:41, col:51> 'NetPermissionFlags'
| |   `-DeclRefExpr 0x5634746bbff0 <col:43> 'NetPermissionFlags' EnumConstant 0x56347465cc10 'PF_NONE' 'NetPermissionFlags'
| |-FieldDecl 0x5634746b6b08 <line:829:5, col:30> col:30 referenced cs_addrName 'CCriticalSection':'int' mutable
| |-FieldDecl 0x5634746b6b80 <line:830:5, col:17> col:17 invalid addrName 'int'
| |-FieldDecl 0x5634746b6be0 <line:833:5, col:14> col:14 invalid addrLocal 'CService'
| |-FieldDecl 0x5634746b6c40 <line:834:5, col:30> col:30 referenced cs_addrLocal 'CCriticalSection':'int' mutable
| |-AccessSpecDecl 0x5634746b6c90 <line:835:1, col:7> col:1 public
| |-CXXMethodDecl 0x5634746b6d08 <line:837:5, line:839:5> line:837:12 used GetId 'NodeId () const'
| | `-CompoundStmt 0x5634746bc4f8 <col:26, line:839:5>
| |   `-ReturnStmt 0x5634746bc4e8 <line:838:9, col:16>
| |     `-ImplicitCastExpr 0x5634746bc4d0 <col:16> 'NodeId':'int' <LValueToRValue>
| |       `-MemberExpr 0x5634746bc4a0 <col:16> 'const NodeId':'const int' lvalue ->id 0x5634746b6858
| |         `-CXXThisExpr 0x5634746bc490 <col:16> 'const CNode *' implicit this
| |-CXXMethodDecl 0x5634746b6de0 <line:841:5, line:843:5> line:841:14 invalid GetLocalNonce 'int () const'
| | `-CompoundStmt 0x5634746bc520 <col:36, line:843:5>
| |-CXXMethodDecl 0x5634746b6ea8 <line:845:5, line:847:5> line:845:9 GetMyStartingHeight 'int () const'
| | `-CompoundStmt 0x5634746bc598 <col:37, line:847:5>
| |   `-ReturnStmt 0x5634746bc588 <line:846:9, col:16>
| |     `-ImplicitCastExpr 0x5634746bc570 <col:16> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5634746bc540 <col:16> 'const int' lvalue ->nMyStartingHeight 0x5634746b69c0
| |         `-CXXThisExpr 0x5634746bc530 <col:16> 'const CNode *' implicit this
| |-CXXMethodDecl 0x5634746b6f70 <line:849:5, line:853:5> line:849:9 GetRefCount 'int () const'
| | `-CompoundStmt 0x5634746bc610 <line:850:5, line:853:5>
| |-CXXMethodDecl 0x5634746b7208 <line:855:5, col:78> col:10 ReceiveMsgBytes 'bool (const char *, unsigned int, bool &)'
| | |-ParmVarDecl 0x5634746b7028 <col:26, col:38> col:38 pch 'const char *'
| | |-ParmVarDecl 0x5634746b70a8 <col:43, col:56> col:56 nBytes 'unsigned int'
| | `-ParmVarDecl 0x5634746b7128 <col:64, col:70> col:70 complete 'bool &'
| |-CXXMethodDecl 0x5634746b7368 <line:857:5, line:860:5> line:857:10 SetRecvVersion 'void (int)'
| | |-ParmVarDecl 0x5634746b72d8 <col:25, col:29> col:29 used nVersionIn 'int'
| | `-CompoundStmt 0x5634746bc640 <line:858:5, line:860:5>
| |-CXXMethodDecl 0x5634746b7438 <line:861:5, line:864:5> line:861:9 GetRecvVersion 'int () const'
| | `-CompoundStmt 0x5634746bc650 <line:862:5, line:864:5>
| |-CXXMethodDecl 0x5634746b7580 <line:865:5, col:39> col:10 SetSendVersion 'void (int)'
| | `-ParmVarDecl 0x5634746b74f0 <col:25, col:29> col:29 nVersionIn 'int'
| |-CXXMethodDecl 0x5634746b7650 <line:866:5, col:26> col:9 GetSendVersion 'int () const'
| |-CXXMethodDecl 0x5634746b7738 <line:868:5, col:29> col:14 used GetAddrLocal 'CService () const'
| |-CXXMethodDecl 0x5634746b78a8 <line:870:5, col:50> col:10 SetAddrLocal 'void (const CService &)'
| | |-ParmVarDecl 0x5634746b7818 <col:23, col:39> col:39 addrLocalIn 'const CService &'
| | `-FullComment 0x56347477a150 <line:869:8, col:40>
| |   `-ParagraphComment 0x56347477a120 <col:8, col:40>
| |     `-TextComment 0x56347477a0f0 <col:8, col:40> Text=" May not be called more than once"
| |-CXXMethodDecl 0x5634746b7998 <line:872:5, line:876:5> line:872:12 used AddRef 'CNode *()'
| | `-CompoundStmt 0x5634746bc680 <line:873:5, line:876:5>
| |   `-ReturnStmt 0x5634746bc670 <line:875:9, col:16>
| |     `-CXXThisExpr 0x5634746bc660 <col:16> 'CNode *' this
| |-CXXMethodDecl 0x5634746b7a58 <line:878:5, line:881:5> line:878:10 Release 'void ()'
| | `-CompoundStmt 0x5634746bc698 <line:879:5, line:881:5>
| |-CXXMethodDecl 0x5634746b7b98 <line:885:5, line:888:5> line:885:10 AddAddressKnown 'void (const CAddress &)'
| | |-ParmVarDecl 0x5634746b7b08 <col:26, col:42> col:42 used _addr 'const CAddress &'
| | `-CompoundStmt 0x5634746bc6d8 <line:886:5, line:888:5>
| |-CXXMethodDecl 0x5634746b7d98 <line:890:5, line:902:5> line:890:10 used PushAddress 'void (const CAddress &, FastRandomContext &)'
| | |-ParmVarDecl 0x5634746b7c50 <col:22, col:38> col:38 used _addr 'const CAddress &'
| | |-ParmVarDecl 0x5634746b7cc8 <col:45, col:64> col:64 used insecure_rand 'FastRandomContext &'
| | `-CompoundStmt 0x5634746bc8b0 <line:891:5, line:902:5>
| |   `-IfStmt 0x5634746bc898 <line:895:9, line:901:9>
| |     |-OpaqueValueExpr 0x5634746bc880 <<invalid sloc>> 'bool'
| |     `-CompoundStmt 0x5634746bc868 <line:895:69, line:901:9>
| |       `-IfStmt 0x5634746bc840 <line:896:13, line:900:13> has_else
| |         |-OpaqueValueExpr 0x5634746bc828 <<invalid sloc>> 'bool'
| |         |-CompoundStmt 0x5634746bc7e8 <line:896:57, line:898:13>
| |         `-CompoundStmt 0x5634746bc818 <col:20, line:900:13>
| |-CXXMethodDecl 0x5634746b7f18 <line:905:5, line:911:5> line:905:10 AddInventoryKnown 'void (const CInv &)'
| | |-ParmVarDecl 0x5634746b7e58 <col:28, col:40> col:40 used inv 'const CInv &'
| | `-CompoundStmt 0x5634746bc948 <line:906:5, line:911:5>
| |   `-IfStmt 0x5634746bc930 <line:907:9, line:910:9>
| |     |-OpaqueValueExpr 0x5634746bc918 <<invalid sloc>> 'bool'
| |     `-CompoundStmt 0x5634746bc908 <line:907:36, line:910:9>
| |-CXXMethodDecl 0x5634746b8060 <line:913:5, line:924:5> line:913:10 PushInventory 'void (const CInv &)'
| | |-ParmVarDecl 0x5634746b7fd0 <col:24, col:36> col:36 used inv 'const CInv &'
| | `-CompoundStmt 0x5634746c1588 <line:914:5, line:924:5>
| |   `-IfStmt 0x5634746c1560 <line:915:9, line:923:9> has_else
| |     |-OpaqueValueExpr 0x5634746c1548 <<invalid sloc>> 'bool'
| |     |-CompoundStmt 0x5634746bcac0 <line:915:58, line:920:9>
| |     | `-IfStmt 0x5634746bcaa8 <line:917:13, line:919:13>
| |     |   |-OpaqueValueExpr 0x5634746bca90 <<invalid sloc>> 'bool'
| |     |   `-CompoundStmt 0x5634746bca80 <line:917:71, line:919:13>
| |     `-IfStmt 0x5634746c1530 <line:920:16, line:923:9>
| |       |-BinaryOperator 0x5634746bcb78 <line:920:20, col:32> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5634746bcb48 <col:20, col:24> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5634746bcaf8 <col:20, col:24> 'const int' lvalue .type 0x5634745e7f98
| |       | |   `-DeclRefExpr 0x5634746bcad8 <col:20> 'const CInv' lvalue ParmVar 0x5634746b7fd0 'inv' 'const CInv &'
| |       | `-ImplicitCastExpr 0x5634746bcb60 <col:32> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5634746bcb28 <col:32> 'GetDataMsg' EnumConstant 0x5634745e5920 'MSG_BLOCK' 'GetDataMsg'
| |       `-CompoundStmt 0x5634746c1520 <col:43, line:923:9>
| |-CXXMethodDecl 0x5634746b81a8 <line:926:5, line:930:5> line:926:10 PushBlockHash 'void (const uint256 &)'
| | |-ParmVarDecl 0x5634746b8118 <col:24, col:39> col:39 used hash 'const uint256 &'
| | `-CompoundStmt 0x5634746c1688 <line:927:5, line:930:5>
| |-CXXMethodDecl 0x5634746b8270 <line:932:5, col:32> col:10 used CloseSocketDisconnect 'void ()'
| |-CXXMethodDecl 0x5634746baca8 <line:934:5, col:37> col:10 copyStats 'void (CNodeStats &)'
| | `-ParmVarDecl 0x5634746b8348 <col:20, col:32> col:32 stats 'CNodeStats &'
| |-CXXMethodDecl 0x5634746bad70 <line:936:5, line:939:5> line:936:18 used GetLocalServices 'ServiceFlags () const'
| | `-CompoundStmt 0x5634746c1700 <line:937:5, line:939:5>
| |   `-ReturnStmt 0x5634746c16f0 <line:938:9, col:16>
| |     `-ImplicitCastExpr 0x5634746c16d8 <col:16> 'ServiceFlags' <LValueToRValue>
| |       `-MemberExpr 0x5634746c16a8 <col:16> 'const ServiceFlags' lvalue ->nLocalServices 0x5634746b6958
| |         `-CXXThisExpr 0x5634746c1698 <col:16> 'const CNode *' implicit this
| |-CXXMethodDecl 0x5634746bae48 <line:941:5, col:31> col:17 invalid GetAddrName 'int () const'
| `-CXXMethodDecl 0x5634746bafd0 <line:943:5, col:56> col:10 invalid MaybeSetAddrName 'void (const int &)'
|   |-ParmVarDecl 0x5634746baf40 <col:27, col:46> col:46 invalid addrNameIn 'const int &'
|   `-FullComment 0x56347477a220 <line:942:8, col:59>
|     `-ParagraphComment 0x56347477a1f0 <col:8, col:59>
|       `-TextComment 0x56347477a1c0 <col:8, col:59> Text=" Sets the addrName only if it was not previously set"
|-FunctionDecl 0x5634746c18a0 <line:951:1, col:66> col:9 invalid PoissonNextSend 'int (int, int)'
| |-ParmVarDecl 0x5634746c1780 <col:25, col:33> col:33 invalid now 'int'
| |-ParmVarDecl 0x5634746c1800 <col:38, col:42> col:42 average_interval_seconds 'int'
| `-FullComment 0x56347477a2f0 <line:950:4, col:93>
|   `-ParagraphComment 0x56347477a2c0 <col:4, col:93>
|     `-TextComment 0x56347477a290 <col:4, col:93> Text=" Return a timestamp in the future (in microseconds) for exponentially distributed events. "
|-VarDecl 0x5634746c1968 <bitcoin/src/banman.h:16:1, col:71> col:31 DEFAULT_MISBEHAVING_BANTIME 'const unsigned int' static constexpr cinit
| `-ImplicitCastExpr 0x5634746c1a70 <col:61, col:71> 'const unsigned int' <IntegralCast>
|   `-BinaryOperator 0x5634746c1a50 <col:61, col:71> 'int' '*'
|     |-BinaryOperator 0x5634746c1a10 <col:61, col:66> 'int' '*'
|     | |-IntegerLiteral 0x5634746c19d0 <col:61> 'int' 60
|     | `-IntegerLiteral 0x5634746c19f0 <col:66> 'int' 60
|     `-IntegerLiteral 0x5634746c1a30 <col:71> 'int' 24
|-CXXRecordDecl 0x5634746c1ae0 prev 0x563474697ab0 <line:18:1, col:7> col:7 referenced class CClientUIInterface
|-CXXRecordDecl 0x5634746c1b70 prev 0x563474609b00 <line:19:1, col:7> col:7 referenced class CNetAddr
|-CXXRecordDecl 0x5634746c1c00 prev 0x5634745cecd0 <line:20:1, col:7> col:7 referenced class CSubNet
|-CXXRecordDecl 0x5634746c1c90 prev 0x563474693a90 <line:37:1, line:67:1> line:37:7 referenced invalid class BanMan definition
| |-DefinitionData standard_layout
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5634746c1d88 <col:1, col:7> col:7 implicit referenced class BanMan
| |-AccessSpecDecl 0x5634746c1e18 <line:39:1, col:7> col:1 public
| |-CXXDestructorDecl 0x5634746c1e88 <line:40:5, col:13> col:5 ~BanMan 'void ()' noexcept-unevaluated 0x5634746c1e88
| |-CXXConstructorDecl 0x5634746c2198 <line:41:5, col:93> col:5 invalid BanMan 'void (int, CClientUIInterface *, int)'
| | |-ParmVarDecl 0x5634746c1f98 <col:12, col:21> col:21 invalid ban_file 'int'
| | |-ParmVarDecl 0x5634746c2010 <col:31, col:51> col:51 client_interface 'CClientUIInterface *'
| | `-ParmVarDecl 0x5634746c20a0 <col:69, col:77> col:77 invalid default_ban_time 'int'
| |-CXXMethodDecl 0x5634746c2588 <line:42:5, col:127> col:10 invalid Ban 'void (const CNetAddr &, const BanReason &, int, bool)'
| | |-ParmVarDecl 0x5634746c2268 <col:14, col:30> col:30 net_addr 'const CNetAddr &'
| | |-ParmVarDecl 0x5634746c2338 <col:40, col:57> col:57 ban_reason 'const BanReason &'
| | |-ParmVarDecl 0x5634746c23c8 <col:69, col:95> col:77 invalid ban_time_offset 'int' cinit
| | | `-IntegerLiteral 0x5634746bfb00 <col:95> 'int' 0
| | `-ParmVarDecl 0x5634746c2440 <col:98, col:122> col:103 since_unix_epoch 'bool' cinit
| |   `-CXXBoolLiteralExpr 0x5634746bfb20 <col:122> 'bool' false
| |-CXXMethodDecl 0x5634746c2918 <line:43:5, col:125> col:10 invalid Ban 'void (const CSubNet &, const BanReason &, int, bool)'
| | |-ParmVarDecl 0x5634746c2658 <col:14, col:29> col:29 sub_net 'const CSubNet &'
| | |-ParmVarDecl 0x5634746c26d0 <col:38, col:55> col:55 ban_reason 'const BanReason &'
| | |-ParmVarDecl 0x5634746c2760 <col:67, col:93> col:75 invalid ban_time_offset 'int' cinit
| | | `-IntegerLiteral 0x5634746bfb30 <col:93> 'int' 0
| | `-ParmVarDecl 0x5634746c27d8 <col:96, col:120> col:101 since_unix_epoch 'bool' cinit
| |   `-CXXBoolLiteralExpr 0x5634746bfb50 <col:120> 'bool' false
| |-CXXMethodDecl 0x5634746c29f8 <line:44:5, col:22> col:10 ClearBanned 'void ()'
| |-CXXMethodDecl 0x5634746c2b70 <line:45:5, col:40> col:9 used IsBannedLevel 'int (CNetAddr)'
| | `-ParmVarDecl 0x5634746c2aa8 <col:23, col:32> col:32 net_addr 'CNetAddr'
| |-CXXMethodDecl 0x5634746c2ce8 <line:46:5, col:36> col:10 IsBanned 'bool (CNetAddr)'
| | `-ParmVarDecl 0x5634746c2c28 <col:19, col:28> col:28 net_addr 'CNetAddr'
| |-CXXMethodDecl 0x5634746c2e68 <line:47:5, col:34> col:10 IsBanned 'bool (CSubNet)'
| | `-ParmVarDecl 0x5634746c2da0 <col:19, col:27> col:27 sub_net 'CSubNet'
| |-CXXMethodDecl 0x5634746c2fb0 <line:48:5, col:40> col:10 Unban 'bool (const CNetAddr &)'
| | `-ParmVarDecl 0x5634746c2f20 <col:16, col:32> col:32 net_addr 'const CNetAddr &'
| |-CXXMethodDecl 0x5634746c30f8 <line:49:5, col:38> col:10 Unban 'bool (const CSubNet &)'
| | `-ParmVarDecl 0x5634746c3068 <col:16, col:31> col:31 sub_net 'const CSubNet &'
| |-CXXMethodDecl 0x5634746c3258 <line:50:5, col:36> col:10 invalid GetBanned 'void (int &)'
| | `-ParmVarDecl 0x5634746c31c8 <col:20, col:30> col:30 invalid banmap 'int &'
| |-CXXMethodDecl 0x5634746c3320 <line:51:5, col:22> col:10 DumpBanlist 'void ()'
| |-AccessSpecDecl 0x5634746c33c0 <line:53:1, col:8> col:1 private
| |-CXXMethodDecl 0x5634746bf440 <line:54:5, col:42> col:10 invalid SetBanned 'void (const int &)'
| | `-ParmVarDecl 0x5634746c3410 <col:20, col:36> col:36 invalid banmap 'const int &'
| |-CXXMethodDecl 0x5634746bf508 <line:55:5, col:27> col:10 BannedSetIsDirty 'bool ()'
| |-CXXMethodDecl 0x5634746bf678 <line:57:5, col:45> col:10 SetBannedSetDirty 'void (bool)'
| | |-ParmVarDecl 0x5634746bf5e8 <col:28, col:41> col:33 dirty 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x5634746bfb60 <col:41> 'bool' true
| | `-FullComment 0x56347477a3c0 <line:56:8, col:43>
| |   `-ParagraphComment 0x56347477a390 <col:8, col:43>
| |     `-TextComment 0x56347477a360 <col:8, col:43> Text="set the "dirty" flag for the banlist"
| |-CXXMethodDecl 0x5634746bf768 <line:59:5, col:22> col:10 SweepBanned 'void ()'
| | `-FullComment 0x56347477a490 <line:58:8, col:52>
| |   `-ParagraphComment 0x56347477a460 <col:8, col:52>
| |     `-TextComment 0x56347477a430 <col:8, col:52> Text="clean unused entries (if bantime has expired)"
| |-FieldDecl 0x5634746bf818 <line:61:5, col:22> col:22 referenced m_cs_banned 'CCriticalSection':'int'
| |-FieldDecl 0x5634746bf890 <line:62:5, col:14> col:14 invalid m_banned 'int'
| |-FieldDecl 0x5634746bf8f0 <line:63:5, col:10> col:10 m_is_dirty 'bool'
| | `-GuardedByAttr 0x5634746bfab8 <bitcoin/src/threadsafety.h:18:38, col:50>
| |   `-MemberExpr 0x5634746bfa88 <bitcoin/src/banman.h:63:32> 'CCriticalSection':'int' lvalue ->m_cs_banned 0x5634746bf818 non_odr_use_unevaluated
| |     `-CXXThisExpr 0x5634746bfa78 <col:32> 'BanMan *' implicit this
| |-FieldDecl 0x5634746bf950 <line:64:5, col:46> col:25 m_client_interface 'CClientUIInterface *'
| | `-ImplicitCastExpr 0x5634746bfb80 <col:46> 'CClientUIInterface *' <NullToPointer>
| |   `-CXXNullPtrLiteralExpr 0x5634746bfb70 <col:46> 'nullptr_t'
| |-FieldDecl 0x5634746bf9b0 <line:65:5, col:12> col:12 invalid m_ban_db 'CBanDB'
| `-FieldDecl 0x5634746bfa28 <line:66:5, col:19> col:19 invalid m_default_ban_time 'const int'
|-CXXRecordDecl 0x5634746bfbe8 <bitcoin/src/chainparamsbase.h:15:1, line:32:1> line:15:7 referenced invalid class CBaseChainParams definition
| |-DefinitionData standard_layout trivially_copyable trivial literal has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347477a580 <line:12:3, line:13:45>
| | `-ParagraphComment 0x56347477a550 <line:12:3, line:13:45>
| |   |-TextComment 0x56347477a500 <line:12:3, col:89> Text=" CBaseChainParams defines the base parameters (shared between bitcoin-cli and bitcoind)"
| |   `-TextComment 0x56347477a520 <line:13:3, col:45> Text=" of a given instance of the Bitcoin system."
| |-CXXRecordDecl 0x5634746bfd08 <line:15:1, col:7> col:7 implicit referenced class CBaseChainParams
| |-AccessSpecDecl 0x5634746bfdc8 <line:17:1, col:7> col:1 public
| |-VarDecl 0x5634746bfe18 <line:19:5, col:30> col:30 invalid MAIN 'const int' static
| | `-FullComment 0x56347477a650 <line:18:8, col:57>
| |   `-ParagraphComment 0x56347477a620 <col:8, col:57>
| |     `-TextComment 0x56347477a5f0 <col:8, col:57> Text=" BIP70 chain name strings (main, test or regtest) "
| |-VarDecl 0x5634746bfea8 <line:20:5, col:30> col:30 invalid TESTNET 'const int' static
| |-VarDecl 0x5634746bff38 <line:21:5, col:30> col:30 invalid REGTEST 'const int' static
| |-CXXMethodDecl 0x5634746c0030 <line:23:5, col:61> col:24 invalid DataDir 'const int &() const'
| | `-CompoundStmt 0x5634746c05d0 <col:40, col:61>
| |-CXXMethodDecl 0x5634746c00f8 <line:24:5, col:44> col:9 RPCPort 'int () const'
| | `-CompoundStmt 0x5634746c0648 <col:25, col:44>
| |   `-ReturnStmt 0x5634746c0638 <col:27, col:34>
| |     `-ImplicitCastExpr 0x5634746c0620 <col:34> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5634746c05f0 <col:34> 'const int' lvalue ->nRPCPort 0x5634746c04e0
| |         `-CXXThisExpr 0x5634746c05e0 <col:34> 'const CBaseChainParams *' implicit this
| |-CXXConstructorDecl 0x5634746c0200 <line:26:5, col:31> col:5 CBaseChainParams 'void ()' delete trivial
| |-CXXConstructorDecl 0x5634746c03e8 <line:27:5, col:109> col:5 invalid CBaseChainParams 'void (const int &, int)'
| | |-ParmVarDecl 0x5634746c02d0 <col:22, col:41> col:41 invalid data_dir 'const int &'
| | |-ParmVarDecl 0x5634746c0350 <col:51, col:55> col:55 used rpc_port 'int'
| | |-CXXCtorInitializer Field 0x5634746c04e0 'nRPCPort' 'int'
| | | `-ImplicitCastExpr 0x5634746c06a0 <col:76> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5634746c0660 <col:76> 'int' lvalue ParmVar 0x5634746c0350 'rpc_port' 'int'
| | `-CompoundStmt 0x5634746c06e8 <col:108, col:109>
| |-AccessSpecDecl 0x5634746c04a0 <line:29:1, col:8> col:1 private
| |-FieldDecl 0x5634746c04e0 <line:30:5, col:9> col:9 referenced nRPCPort 'int'
| `-FieldDecl 0x5634746c0558 <line:31:5, col:17> col:17 invalid strDataDir 'int'
|-FunctionDecl 0x5634746c0798 <line:44:1, col:34> col:6 SetupChainParamsBaseOptions 'void ()'
| `-FullComment 0x56347477a720 <line:42:3, col:35>
|   `-ParagraphComment 0x56347477a6f0 <col:3, col:35>
|     `-TextComment 0x56347477a6c0 <col:3, col:35> Text="Set the arguments for chainparams"
|-FunctionDecl 0x5634746c08e8 <line:50:1, col:36> col:25 BaseParams 'const CBaseChainParams &()'
| `-FullComment 0x56347477a810 <line:47:3, line:48:34>
|   `-ParagraphComment 0x56347477a7e0 <line:47:3, line:48:34>
|     |-TextComment 0x56347477a790 <line:47:3, col:72> Text=" Return the currently selected parameters. This won't change after app"
|     `-TextComment 0x56347477a7b0 <line:48:3, col:34> Text=" startup, except for unit tests."
|-FunctionDecl 0x5634746c0a70 <line:53:1, col:47> col:6 invalid SelectBaseParams 'void (const int &)'
| |-ParmVarDecl 0x5634746c09e0 <col:23, col:42> col:42 invalid chain 'const int &'
| `-FullComment 0x56347477a8e0 <line:52:4, col:73>
|   `-ParagraphComment 0x56347477a8b0 <col:4, col:73>
|     `-TextComment 0x56347477a880 <col:4, col:73> Text=" Sets the params returned by Params() to those for the given network. "
|-NamespaceDecl 0x5634746c0b18 <bitcoin/src/consensus/params.h:14:1, line:86:1> line:14:11 Consensus
| |-EnumDecl 0x5634746c0b88 <line:16:1, line:21:1> line:16:6 DeploymentPos
| | |-EnumConstantDecl 0x5634746c0c50 <line:18:5> col:5 DEPLOYMENT_TESTDUMMY 'Consensus::DeploymentPos'
| | `-EnumConstantDecl 0x5634746c0ca0 <line:20:5> col:5 referenced MAX_VERSION_BITS_DEPLOYMENTS 'Consensus::DeploymentPos'
| |-CXXRecordDecl 0x5634746c0d18 <line:26:1, line:42:1> line:26:8 referenced invalid struct BIP9Deployment definition
| | |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial needs_implicit
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-FullComment 0x56347477a9b0 <line:24:3, col:63>
| | | `-ParagraphComment 0x56347477a980 <col:3, col:63>
| | |   `-TextComment 0x56347477a950 <col:3, col:63> Text=" Struct for each individual consensus rule change using BIP9."
| | |-CXXRecordDecl 0x5634746c0e68 <line:26:1, col:8> col:8 implicit struct BIP9Deployment
| | |-FieldDecl 0x5634746c0f10 <line:28:5, col:9> col:9 bit 'int'
| | | `-FullComment 0x56347477aa80 <line:27:8, col:63>
| | |   `-ParagraphComment 0x56347477aa50 <col:8, col:63>
| | |     `-TextComment 0x56347477aa20 <col:8, col:63> Text=" Bit position to select the particular bit in nVersion. "
| | |-FieldDecl 0x5634746c0fb0 <line:30:5, col:13> col:13 invalid nStartTime 'int'
| | | `-FullComment 0x56347477ab50 <line:29:8, col:88>
| | |   `-ParagraphComment 0x56347477ab20 <col:8, col:88>
| | |     `-TextComment 0x56347477aaf0 <col:8, col:88> Text=" Start MedianTime for version bits miner confirmation. Can be a date in the past "
| | |-FieldDecl 0x5634746c1050 <line:32:5, col:13> col:13 invalid nTimeout 'int'
| | | `-FullComment 0x56347477ac20 <line:31:8, col:62>
| | |   `-ParagraphComment 0x56347477abf0 <col:8, col:62>
| | |     `-TextComment 0x56347477abc0 <col:8, col:62> Text=" Timeout/expiry MedianTime for the deployment attempt. "
| | |-VarDecl 0x5634746c10f0 <line:35:5, col:30> col:30 invalid NO_TIMEOUT 'const int' static constexpr
| | | `-FullComment 0x56347477acf0 <line:34:8, col:54>
| | |   `-ParagraphComment 0x56347477acc0 <col:8, col:54>
| | |     `-TextComment 0x56347477ac90 <col:8, col:54> Text=" Constant for nTimeout very far in the future. "
| | `-VarDecl 0x5634746c11d0 <line:41:5, col:30> col:30 invalid ALWAYS_ACTIVE 'const int' static constexpr
| |   `-FullComment 0x56347477ae30 <line:37:8, line:40:53>
| |     `-ParagraphComment 0x56347477ae00 <line:37:8, line:40:53>
| |       |-TextComment 0x56347477ad60 <line:37:8, col:85> Text=" Special value for nStartTime indicating that the deployment is always active."
| |       |-TextComment 0x56347477ad80 <line:38:7, col:92> Text="  This is useful for testing, as it means tests don't need to deal with the activation"
| |       |-TextComment 0x56347477ada0 <line:39:7, col:94> Text="  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the"
| |       `-TextComment 0x56347477adc0 <line:40:7, col:53> Text="  behaviour during activation cannot use this. "
| `-CXXRecordDecl 0x5634746c12b8 <line:47:1, line:85:1> line:47:8 referenced invalid struct Params definition
|   |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
|   | |-DefaultConstructor exists trivial needs_implicit
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial needs_implicit
|   |-FullComment 0x56347477af00 <line:45:3, col:45>
|   | `-ParagraphComment 0x56347477aed0 <col:3, col:45>
|   |   `-TextComment 0x56347477aea0 <col:3, col:45> Text=" Parameters that influence chain consensus."
|   |-CXXRecordDecl 0x5634746c69a0 <line:47:1, col:8> col:8 implicit struct Params
|   |-FieldDecl 0x5634746c6a40 <line:48:5, col:13> col:13 invalid hashGenesisBlock 'uint256'
|   |-FieldDecl 0x5634746c6aa8 <line:49:5, col:9> col:9 nSubsidyHalvingInterval 'int'
|   |-FieldDecl 0x5634746c6b08 <line:51:5, col:13> col:13 invalid BIP16Exception 'uint256'
|   |-FieldDecl 0x5634746c6ba0 <line:53:5, col:9> col:9 BIP34Height 'int'
|   | `-FullComment 0x56347477afd0 <line:52:8, col:60>
|   |   `-ParagraphComment 0x56347477afa0 <col:8, col:60>
|   |     `-TextComment 0x56347477af70 <col:8, col:60> Text=" Block height and hash at which BIP34 becomes active "
|   |-FieldDecl 0x5634746c6c00 <line:54:5, col:13> col:13 invalid BIP34Hash 'uint256'
|   |-FieldDecl 0x5634746c6c90 <line:56:5, col:9> col:9 BIP65Height 'int'
|   | `-FullComment 0x56347477b0a0 <line:55:8, col:51>
|   |   `-ParagraphComment 0x56347477b070 <col:8, col:51>
|   |     `-TextComment 0x56347477b040 <col:8, col:51> Text=" Block height at which BIP65 becomes active "
|   |-FieldDecl 0x5634746c6d20 <line:58:5, col:9> col:9 BIP66Height 'int'
|   | `-FullComment 0x56347477b170 <line:57:8, col:51>
|   |   `-ParagraphComment 0x56347477b140 <col:8, col:51>
|   |     `-TextComment 0x56347477b110 <col:8, col:51> Text=" Block height at which BIP66 becomes active "
|   |-FieldDecl 0x5634746c6db0 <line:60:5, col:9> col:9 CSVHeight 'int'
|   | `-FullComment 0x56347477b240 <line:59:8, col:76>
|   |   `-ParagraphComment 0x56347477b210 <col:8, col:76>
|   |     `-TextComment 0x56347477b1e0 <col:8, col:76> Text=" Block height at which CSV (BIP68, BIP112 and BIP113) becomes active "
|   |-FieldDecl 0x5634746c6e40 <line:64:5, col:9> col:9 SegwitHeight 'int'
|   | `-FullComment 0x56347477b360 <line:61:8, line:63:32>
|   |   `-ParagraphComment 0x56347477b330 <line:61:8, line:63:32>
|   |     |-TextComment 0x56347477b2b0 <line:61:8, col:80> Text=" Block height at which Segwit (BIP141, BIP143 and BIP147) becomes active."
|   |     |-TextComment 0x56347477b2d0 <line:62:7, col:77> Text=" Note that segwit v0 script rules are enforced on all blocks except the"
|   |     `-TextComment 0x56347477b2f0 <line:63:7, col:32> Text=" BIP 16 exception blocks. "
|   |-FieldDecl 0x5634746c6ed0 <line:67:5, col:9> col:9 MinBIP9WarningHeight 'int'
|   | `-FullComment 0x56347477b450 <line:65:8, line:66:75>
|   |   `-ParagraphComment 0x56347477b420 <line:65:8, line:66:75>
|   |     |-TextComment 0x56347477b3d0 <line:65:8, col:69> Text=" Don't warn about unknown BIP 9 activations below this height."
|   |     `-TextComment 0x56347477b3f0 <line:66:7, col:75> Text=" This prevents us from warning about the CSV and segwit activations. "
|   |-FieldDecl 0x5634746c6f70 <line:73:5, col:14> col:14 invalid nRuleChangeActivationThreshold 'int'
|   | `-FullComment 0x56347477b570 <line:69:7, line:71:51>
|   |   `-ParagraphComment 0x56347477b540 <line:69:7, line:71:51>
|   |     |-TextComment 0x56347477b4c0 <line:69:7, col:103> Text=" Minimum blocks including miner confirmation of the total of 2016 blocks in a retargeting period,"
|   |     |-TextComment 0x56347477b4e0 <line:70:7, col:88> Text=" (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments."
|   |     `-TextComment 0x56347477b500 <line:71:7, col:51> Text=" Examples: 1916 for 95%, 1512 for testchains."
|   |-FieldDecl 0x5634746c6fe8 <line:74:5, col:14> col:14 invalid nMinerConfirmationWindow 'int'
|   |-FieldDecl 0x5634746c70d8 <line:75:5, col:61> col:20 invalid vDeployments 'Consensus::BIP9Deployment [1]'
|   |-FieldDecl 0x5634746c7168 <line:77:5, col:13> col:13 invalid powLimit 'uint256'
|   | `-FullComment 0x56347477b640 <line:76:8, col:33>
|   |   `-ParagraphComment 0x56347477b610 <col:8, col:33>
|   |     `-TextComment 0x56347477b5e0 <col:8, col:33> Text=" Proof of work parameters "
|   |-FieldDecl 0x5634746c71c8 <line:78:5, col:10> col:10 fPowAllowMinDifficultyBlocks 'bool'
|   |-FieldDecl 0x5634746c7228 <line:79:5, col:10> col:10 fPowNoRetargeting 'bool'
|   |-FieldDecl 0x5634746c72a0 <line:80:5, col:13> col:13 invalid nPowTargetSpacing 'int'
|   |-FieldDecl 0x5634746c7318 <line:81:5, col:13> col:13 invalid nPowTargetTimespan 'int'
|   |-CXXMethodDecl 0x5634746c73d0 <line:82:5, col:99> col:13 invalid DifficultyAdjustmentInterval 'int () const'
|   | `-CompoundStmt 0x5634746c7598 <col:50, col:99>
|   |-FieldDecl 0x5634746c7480 <line:83:5, col:13> col:13 invalid nMinimumChainWork 'uint256'
|   `-FieldDecl 0x5634746c74e0 <line:84:5, col:13> col:13 invalid defaultAssumeValid 'uint256'
|-CXXRecordDecl 0x5634746c75d8 <bitcoin/src/primitives/block.h:20:1, line:69:1> line:20:7 referenced invalid class CBlockHeader definition
| |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347477b7d0 <line:13:4, line:18:16>
| | `-ParagraphComment 0x56347477b7a0 <line:13:4, line:18:16>
| |   |-TextComment 0x56347477b6b0 <line:13:4, col:76> Text=" Nodes collect new transactions into a block, hash them into a hash tree,"
| |   |-TextComment 0x56347477b6d0 <line:14:3, col:79> Text=" and scan through nonce values to make the block's hash satisfy proof-of-work"
| |   |-TextComment 0x56347477b6f0 <line:15:3, col:77> Text=" requirements.  When they solve the proof-of-work, they broadcast the block"
| |   |-TextComment 0x56347477b710 <line:16:3, col:80> Text=" to everyone and the block is added to the block chain.  The first transaction"
| |   |-TextComment 0x56347477b730 <line:17:3, col:77> Text=" in the block is a special one that creates a new coin owned by the creator"
| |   `-TextComment 0x56347477b750 <line:18:3, col:16> Text=" of the block."
| |-CXXRecordDecl 0x5634746c76f8 <line:20:1, col:7> col:7 implicit referenced class CBlockHeader
| |-AccessSpecDecl 0x5634746c7788 <line:22:1, col:7> col:1 public
| |-FieldDecl 0x5634746c77d8 <line:24:5, col:13> col:13 invalid nVersion 'int'
| |-FieldDecl 0x5634746c7838 <line:25:5, col:13> col:13 invalid hashPrevBlock 'uint256'
| |-FieldDecl 0x5634746c7898 <line:26:5, col:13> col:13 invalid hashMerkleRoot 'uint256'
| |-FieldDecl 0x5634746c7910 <line:27:5, col:14> col:14 invalid nTime 'int'
| |-FieldDecl 0x5634746c7988 <line:28:5, col:14> col:14 invalid nBits 'int'
| |-FieldDecl 0x5634746c7a00 <line:29:5, col:14> col:14 invalid nNonce 'int'
| |-CXXConstructorDecl 0x5634746c7ab0 <line:31:5, line:34:5> line:31:5 used CBlockHeader 'void ()'
| | `-CompoundStmt 0x5634746c87d8 <line:32:5, line:34:5>
| |   `-CXXMemberCallExpr 0x5634746c87b8 <line:33:9, col:17> 'void'
| |     `-MemberExpr 0x5634746c8788 <col:9> '<bound member function type>' ->SetNull 0x5634746c8440
| |       `-CXXThisExpr 0x5634746c8778 <col:9> 'CBlockHeader *' implicit this
| |-FunctionTemplateDecl 0x5634746c7da8 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634746c7b58 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746c7d08 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634746c7c18 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746c88a8 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634746c8028 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634746c7e08 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746c7f88 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634746c7ec8 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746c9850 <col:33, line:201:5>
| |     `-CallExpr 0x5634746c9820 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634746c88c8 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634746c8920 <col:25> 'Stream' lvalue ParmVar 0x5634746c7ec8 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634746c8950 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634746c83b8 <bitcoin/src/primitives/block.h:38:5, line:46:5> line:39:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634746c8088 <line:38:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634746c80f8 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634746c8318 <line:39:5, line:46:5> line:39:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634746c81c8 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634746c8240 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634746c9ce8 <col:66, line:46:5>
| |-CXXMethodDecl 0x5634746c8440 <line:48:5, line:56:5> line:48:10 used SetNull 'void ()'
| | `-CompoundStmt 0x5634746c9dd8 <line:49:5, line:56:5>
| |-CXXMethodDecl 0x5634746c8500 <line:58:5, line:61:5> line:58:10 IsNull 'bool () const'
| | `-CompoundStmt 0x5634746c9e18 <line:59:5, line:61:5>
| |-CXXMethodDecl 0x5634746c85e8 <line:63:5, col:23> col:13 GetHash 'uint256 () const'
| |-CXXMethodDecl 0x5634746c86c0 <line:65:5, line:68:5> line:65:13 invalid GetBlockTime 'int () const'
| | `-CompoundStmt 0x5634746c9e28 <line:66:5, line:68:5>
| |-CXXConstructorDecl 0x5634746caf68 <line:20:7> col:7 implicit constexpr CBlockHeader 'void (const CBlockHeader &)' inline default trivial noexcept-unevaluated 0x5634746caf68
| | `-ParmVarDecl 0x5634746cb048 <col:7> col:7 'const CBlockHeader &'
| |-CXXConstructorDecl 0x5634746cb0e8 <col:7> col:7 implicit used constexpr CBlockHeader 'void (CBlockHeader &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5634746cb1f8 <col:7> col:7 'CBlockHeader &&'
| | `-CompoundStmt 0x5634746cc2d0 <col:7>
| |-CXXMethodDecl 0x5634746cb5c8 <col:7> col:7 implicit operator= 'CBlockHeader &(const CBlockHeader &)' inline default trivial noexcept-unevaluated 0x5634746cb5c8
| | `-ParmVarDecl 0x5634746cb6d8 <col:7> col:7 'const CBlockHeader &'
| `-CXXMethodDecl 0x5634746cb748 <col:7> col:7 implicit operator= 'CBlockHeader &(CBlockHeader &&)' inline default trivial noexcept-unevaluated 0x5634746cb748
|   `-ParmVarDecl 0x5634746cb868 <col:7> col:7 'CBlockHeader &&'
|-CXXRecordDecl 0x5634746c9e38 <line:72:1, line:120:1> line:72:7 referenced invalid class CBlock definition
| |-DefinitionData trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'CBlockHeader'
| |-CXXRecordDecl 0x5634746c9f98 <col:1, col:7> col:7 implicit referenced class CBlock
| |-AccessSpecDecl 0x5634746ca028 <line:74:1, col:7> col:1 public
| |-FieldDecl 0x5634746ca088 <line:76:34> col:34 invalid vtx 'int'
| |-FieldDecl 0x5634746ca0e8 <line:79:5, col:18> col:18 referenced fChecked 'bool' mutable
| |-CXXConstructorDecl 0x5634746ca1a0 <line:81:5, line:84:5> line:81:5 CBlock 'void ()'
| | |-CXXCtorInitializer 'CBlockHeader'
| | | `-CXXConstructExpr 0x5634746cb8f0 <col:5> 'CBlockHeader' 'void ()'
| | `-CompoundStmt 0x5634746cb9b8 <line:82:5, line:84:5>
| |   `-CXXMemberCallExpr 0x5634746cb998 <line:83:9, col:17> 'void'
| |     `-MemberExpr 0x5634746cb968 <col:9> '<bound member function type>' ->SetNull 0x5634746cace0
| |       `-CXXThisExpr 0x5634746cb958 <col:9> 'CBlock *' implicit this
| |-CXXConstructorDecl 0x5634746ca348 <line:86:5, line:90:5> line:86:5 CBlock 'void (const CBlockHeader &)'
| | |-ParmVarDecl 0x5634746ca288 <col:12, col:32> col:32 used header 'const CBlockHeader &'
| | |-CXXCtorInitializer 'CBlockHeader'
| | | `-CXXConstructExpr 0x5634746cb9d0 <col:5> 'CBlockHeader' 'void ()'
| | `-CompoundStmt 0x5634746cbad8 <line:87:5, line:90:5>
| |   `-CXXMemberCallExpr 0x5634746cba78 <line:88:9, col:17> 'void'
| |     `-MemberExpr 0x5634746cba48 <col:9> '<bound member function type>' ->SetNull 0x5634746cace0
| |       `-CXXThisExpr 0x5634746cba38 <col:9> 'CBlock *' implicit this
| |-FunctionTemplateDecl 0x5634746ca648 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634746ca3f8 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746ca5a8 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634746ca4b8 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746cbba8 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634746ca8c8 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634746ca6a8 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746ca828 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634746ca768 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746cbcb0 <col:33, line:201:5>
| |     `-CallExpr 0x5634746cbc80 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634746cbbc8 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634746cbc20 <col:25> 'Stream' lvalue ParmVar 0x5634746ca768 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634746cbc50 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634746cac58 <bitcoin/src/primitives/block.h:94:5, line:98:5> line:95:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634746ca928 <line:94:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634746ca998 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634746cabb8 <line:95:5, line:98:5> line:95:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634746caa68 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634746caae0 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634746cbf18 <col:66, line:98:5>
| |-CXXMethodDecl 0x5634746cace0 <line:100:5, line:105:5> line:100:10 used SetNull 'void ()'
| | `-CompoundStmt 0x5634746cc070 <line:101:5, line:105:5>
| |   `-BinaryOperator 0x5634746cc050 <line:104:9, col:20> 'bool' lvalue '='
| |     |-MemberExpr 0x5634746cc010 <col:9> 'bool' lvalue ->fChecked 0x5634746ca0e8
| |     | `-CXXThisExpr 0x5634746cc000 <col:9> 'CBlock *' implicit this
| |     `-CXXBoolLiteralExpr 0x5634746cc040 <col:20> 'bool' false
| |-CXXMethodDecl 0x5634746cadc8 <line:107:5, line:117:5> line:107:18 GetBlockHeader 'CBlockHeader () const'
| | `-CompoundStmt 0x5634746cc328 <line:108:5, line:117:5>
| |   |-DeclStmt 0x5634746cc128 <line:109:9, col:27>
| |   | `-VarDecl 0x5634746cc098 <col:9, col:22> col:22 used block 'CBlockHeader' nrvo callinit
| |   |   `-CXXConstructExpr 0x5634746cc100 <col:22> 'CBlockHeader' 'void ()'
| |   `-ReturnStmt 0x5634746cc310 <line:116:9, col:16>
| |     `-CXXConstructExpr 0x5634746cc2e0 <col:16> 'CBlockHeader' 'void (CBlockHeader &&) noexcept' elidable
| |       `-ImplicitCastExpr 0x5634746cc280 <col:16> 'CBlockHeader' xvalue <NoOp>
| |         `-DeclRefExpr 0x5634746cc260 <col:16> 'CBlockHeader' lvalue Var 0x5634746cc098 'block' 'CBlockHeader'
| |-CXXMethodDecl 0x5634746caea0 <line:119:5, col:28> col:17 invalid ToString 'int () const'
| |-CXXConstructorDecl 0x5634746cb268 <line:72:7> col:7 implicit constexpr CBlock 'void (const CBlock &)' inline default trivial noexcept-unevaluated 0x5634746cb268
| | `-ParmVarDecl 0x5634746cb378 <col:7> col:7 'const CBlock &'
| `-CXXMethodDecl 0x5634746cb418 <col:7> col:7 implicit operator= 'CBlock &(const CBlock &)' inline default trivial noexcept-unevaluated 0x5634746cb418
|   `-ParmVarDecl 0x5634746cb528 <col:7> col:7 'const CBlock &'
|-CXXRecordDecl 0x5634746cc378 <line:126:1, line:153:1> line:126:8 struct CBlockLocator definition
| |-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347477bbf0 <line:122:4, line:124:65>
| | `-ParagraphComment 0x56347477bbc0 <line:122:4, line:124:65>
| |   |-TextComment 0x56347477bb40 <line:122:4, col:73> Text=" Describes a place in the block chain to another node such that if the"
| |   |-TextComment 0x56347477bb60 <line:123:3, col:78> Text=" other node doesn't have the same branch, it can find a recent common trunk."
| |   `-TextComment 0x56347477bb80 <line:124:3, col:65> Text=" The further back it is, the further before the fork it may be."
| |-CXXRecordDecl 0x5634746cc498 <line:126:1, col:8> col:8 implicit referenced struct CBlockLocator
| |-CXXConstructorDecl 0x5634746cc5b0 <line:130:5, col:22> col:5 CBlockLocator 'void ()'
| | `-CompoundStmt 0x5634746cd238 <col:21, col:22>
| |-CXXConstructorDecl 0x5634746cc720 <line:132:5, col:83> col:14 invalid CBlockLocator 'void (const int)'
| | |-ParmVarDecl 0x5634746cc690 <col:28, <invalid sloc>> col:54 invalid 'const int'
| | `-CompoundStmt 0x5634746cd248 <col:82, col:83>
| |-FunctionTemplateDecl 0x5634746cca28 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634746cc7d0 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746cc988 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634746cc898 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746cd310 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634746ccca8 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634746cca88 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746ccc08 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634746ccb48 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746cd418 <col:33, line:201:5>
| |     `-CallExpr 0x5634746cd3e8 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634746cd330 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634746cd388 <col:25> 'Stream' lvalue ParmVar 0x5634746ccb48 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634746cd3b8 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634746cd038 <bitcoin/src/primitives/block.h:136:5, line:142:5> line:137:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634746ccd08 <line:136:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634746ccd78 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634746ccf98 <line:137:5, line:142:5> line:137:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634746cce48 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634746ccec0 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634746cdd30 <col:66, line:142:5>
| |     |-DeclStmt 0x5634746cd538 <line:138:9, col:38>
| |     | `-VarDecl 0x5634746cd448 <col:9, col:37> col:13 referenced nVersion 'int' cinit
| |     |   `-CallExpr 0x5634746cd518 <col:24, col:37> '<dependent type>'
| |     |     `-CXXDependentScopeMemberExpr 0x5634746cd4d0 <col:24, col:26> '<dependent type>' lvalue .GetVersion
| |     |       `-DeclRefExpr 0x5634746cd4b0 <col:24> 'Stream' lvalue ParmVar 0x5634746cce48 's' 'Stream &'
| |     `-IfStmt 0x5634746cd778 <line:139:9, bitcoin/src/serialize.h:184:71>
| |       |-UnaryOperator 0x5634746cd638 <bitcoin/src/primitives/block.h:139:13, col:40> '<dependent type>' prefix '!' cannot overflow
| |       | `-ParenExpr 0x5634746cd618 <col:14, col:40> '<dependent type>'
| |       |   `-BinaryOperator 0x5634746cd5f8 <col:15, col:29> '<dependent type>' '&'
| |       |     |-CallExpr 0x5634746cd5b8 <col:15, col:25> '<dependent type>'
| |       |     | `-CXXDependentScopeMemberExpr 0x5634746cd570 <col:15, col:17> '<dependent type>' lvalue .GetType
| |       |     |   `-DeclRefExpr 0x5634746cd550 <col:15> 'Stream' lvalue ParmVar 0x5634746cce48 's' 'Stream &'
| |       |     `-DeclRefExpr 0x5634746cd5d8 <col:29> '(anonymous enum at bitcoin/src/serialize.h:172:1)' EnumConstant 0x56347458e9b0 'SER_GETHASH' '(anonymous enum at bitcoin/src/serialize.h:172:1)'
| |       `-ParenExpr 0x5634746cd758 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |         `-CallExpr 0x5634746cd720 <col:25, col:70> '<dependent type>'
| |           |-UnresolvedLookupExpr 0x5634746cd670 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |           |-DeclRefExpr 0x5634746cd6c0 <col:44> 'Stream' lvalue ParmVar 0x5634746cce48 's' 'Stream &'
| |           |-DeclRefExpr 0x5634746cd6e0 <col:47> 'Operation' lvalue ParmVar 0x5634746ccec0 'ser_action' 'Operation'
| |           `-DeclRefExpr 0x5634746cd700 <bitcoin/src/primitives/block.h:140:23> 'int' lvalue Var 0x5634746cd448 'nVersion' 'int'
| |-CXXMethodDecl 0x5634746cd0c0 <line:144:5, line:147:5> line:144:10 SetNull 'void ()'
| | `-CompoundStmt 0x5634746cdd50 <line:145:5, line:147:5>
| `-CXXMethodDecl 0x5634746cd180 <line:149:5, line:152:5> line:149:10 IsNull 'bool () const'
|   `-CompoundStmt 0x5634746cdd60 <line:150:5, line:152:5>
|-CXXRecordDecl 0x5634746cdd70 <bitcoin/src/chainparams.h:17:1, line:20:1> line:17:8 referenced invalid struct SeedSpec6 definition
| |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634746cde88 <col:1, col:8> col:8 implicit struct SeedSpec6
| |-FieldDecl 0x5634746cdf90 <line:18:5, <invalid sloc>> col:13 invalid addr 'int [16]'
| `-FieldDecl 0x5634746ce008 <line:19:5, col:14> col:14 invalid port 'int'
|-CXXRecordDecl 0x5634746ce0a8 <line:24:1, line:26:1> line:24:8 referenced invalid struct CCheckpointData definition
| |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634746ce1c8 <col:1, col:8> col:8 implicit struct CCheckpointData
| `-FieldDecl 0x5634746ce280 <line:25:5, col:20> col:20 invalid mapCheckpoints 'int'
|-CXXRecordDecl 0x5634746ce318 <line:34:1, line:38:1> line:34:8 referenced invalid struct ChainTxData definition
| |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347477dd60 <line:29:3, line:32:61>
| | |-ParagraphComment 0x56347477dce0 <line:29:3, line:30:43>
| | | |-TextComment 0x56347477dc90 <line:29:3, col:76> Text=" Holds various statistics on transactions within a chain. Used to estimate"
| | | `-TextComment 0x56347477dcb0 <line:30:3, col:43> Text=" verification progress during chain sync."
| | `-ParagraphComment 0x56347477dd30 <line:32:3, col:61>
| |   `-TextComment 0x56347477dd00 <col:3, col:61> Text=" See also: CChainParams::TxData, GuessVerificationProgress."
| |-CXXRecordDecl 0x5634746ce438 <line:34:1, col:8> col:8 implicit struct ChainTxData
| |-FieldDecl 0x5634746ce4f0 <line:35:5, col:13> col:13 invalid nTime 'int'
| | `-FullComment 0x56347477de30 <col:27, col:78>
| |   `-ParagraphComment 0x56347477de00 <col:27, col:78>
| |     `-TextComment 0x56347477ddd0 <col:27, col:78> Text=" UNIX timestamp of last known number of transactions"
| |-FieldDecl 0x5634746ce590 <line:36:5, col:13> col:13 invalid nTxCount 'int'
| | `-FullComment 0x56347477df00 <col:27, col:90>
| |   `-ParagraphComment 0x56347477ded0 <col:27, col:90>
| |     `-TextComment 0x56347477dea0 <col:27, col:90> Text=" total number of transactions between genesis and that timestamp"
| `-FieldDecl 0x5634746ce620 <line:37:5, col:12> col:12 dTxRate 'double'
|   `-FullComment 0x56347477dfd0 <col:27, col:91>
|     `-ParagraphComment 0x56347477dfa0 <col:27, col:91>
|       `-TextComment 0x56347477df70 <col:27, col:91> Text=" estimated number of transactions per second after that timestamp"
|-CXXRecordDecl 0x5634746ce6d8 <line:47:1, line:107:1> line:47:7 referenced invalid class CChainParams definition
| |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347477e140 <line:41:3, line:45:67>
| | `-ParagraphComment 0x56347477e110 <line:41:3, line:45:67>
| |   |-TextComment 0x56347477e040 <line:41:3, col:79> Text=" CChainParams defines various tweakable parameters of a given instance of the"
| |   |-TextComment 0x56347477e060 <line:42:3, col:80> Text=" Bitcoin system. There are three: the main network on which people trade goods"
| |   |-TextComment 0x56347477e080 <line:43:3, col:79> Text=" and services, the public test network which gets reset from time to time and"
| |   |-TextComment 0x56347477e0a0 <line:44:3, col:77> Text=" a regression test mode which is intended for private networks only. It has"
| |   `-TextComment 0x56347477e0c0 <line:45:3, col:67> Text=" minimal difficulty to ensure that blocks can be found instantly."
| |-CXXRecordDecl 0x5634746ce7f8 <line:47:1, col:7> col:7 implicit class CChainParams
| |-AccessSpecDecl 0x5634746ce888 <line:49:1, col:7> col:1 public
| |-EnumDecl 0x5634746ce8b0 <line:50:5, line:58:5> line:50:10 Base58Type
| | |-EnumConstantDecl 0x5634746ce970 <line:51:9> col:9 PUBKEY_ADDRESS 'CChainParams::Base58Type'
| | |-EnumConstantDecl 0x5634746ce9c0 <line:52:9> col:9 SCRIPT_ADDRESS 'CChainParams::Base58Type'
| | |-EnumConstantDecl 0x5634746cea10 <line:53:9> col:9 SECRET_KEY 'CChainParams::Base58Type'
| | |-EnumConstantDecl 0x5634746cea60 <line:54:9> col:9 EXT_PUBLIC_KEY 'CChainParams::Base58Type'
| | |-EnumConstantDecl 0x5634746ceab0 <line:55:9> col:9 EXT_SECRET_KEY 'CChainParams::Base58Type'
| | `-EnumConstantDecl 0x5634746ceb00 <line:57:9> col:9 MAX_BASE58_TYPES 'CChainParams::Base58Type'
| |-CXXMethodDecl 0x5634746cecf0 <line:60:5, col:71> col:30 GetConsensus 'const Consensus::Params &() const'
| | `-CompoundStmt 0x5634746d14a8 <col:51, col:71>
| |-CXXMethodDecl 0x5634746cee60 <line:61:5, col:93> col:46 used MessageStart 'const CMessageHeader::MessageStartChars &() const'
| | `-CompoundStmt 0x5634746d1508 <col:67, col:93>
| |   `-ReturnStmt 0x5634746d14f8 <col:69, col:76>
| |     `-MemberExpr 0x5634746d14c8 <col:76> 'const CMessageHeader::MessageStartChars':'const unsigned char' lvalue ->pchMessageStart 0x5634746cf9e8
| |       `-CXXThisExpr 0x5634746d14b8 <col:76> 'const CChainParams *' implicit this
| |-CXXMethodDecl 0x5634746cef28 <line:62:5, col:55> col:9 used GetDefaultPort 'int () const'
| | `-CompoundStmt 0x5634746d1588 <col:32, col:55>
| |   `-ReturnStmt 0x5634746d1578 <col:34, col:41>
| |     `-ImplicitCastExpr 0x5634746d1560 <col:41> 'int' <LValueToRValue>
| |       `-MemberExpr 0x5634746d1530 <col:41> 'const int' lvalue ->nDefaultPort 0x5634746cfa50
| |         `-CXXThisExpr 0x5634746d1520 <col:41> 'const CChainParams *' implicit this
| |-CXXMethodDecl 0x5634746cf018 <line:64:5, col:58> col:19 GenesisBlock 'const CBlock &() const'
| | `-CompoundStmt 0x5634746d15b0 <col:40, col:58>
| |-CXXMethodDecl 0x5634746cf108 <line:66:5, col:79> col:10 DefaultConsistencyChecks 'bool () const'
| | |-CompoundStmt 0x5634746d1628 <col:43, col:79>
| | | `-ReturnStmt 0x5634746d1618 <col:45, col:52>
| | |   `-ImplicitCastExpr 0x5634746d1600 <col:52> 'bool' <LValueToRValue>
| | |     `-MemberExpr 0x5634746d15d0 <col:52> 'const bool' lvalue ->fDefaultConsistencyChecks 0x5634746d1298
| | |       `-CXXThisExpr 0x5634746d15c0 <col:52> 'const CChainParams *' implicit this
| | `-FullComment 0x56347477e210 <line:65:8, col:70>
| |   `-ParagraphComment 0x56347477e1e0 <col:8, col:70>
| |     `-TextComment 0x56347477e1b0 <col:8, col:70> Text=" Default value for -checkmempool and -checkblockindex argument "
| |-CXXMethodDecl 0x5634746cf1f8 <line:68:5, col:61> col:10 RequireStandard 'bool () const'
| | |-CompoundStmt 0x5634746d16a8 <col:34, col:61>
| | | `-ReturnStmt 0x5634746d1698 <col:36, col:43>
| | |   `-ImplicitCastExpr 0x5634746d1680 <col:43> 'bool' <LValueToRValue>
| | |     `-MemberExpr 0x5634746d1650 <col:43> 'const bool' lvalue ->fRequireStandard 0x5634746d12f8
| | |       `-CXXThisExpr 0x5634746d1640 <col:43> 'const CChainParams *' implicit this
| | `-FullComment 0x56347477e2e0 <line:67:8, col:76>
| |   `-ParagraphComment 0x56347477e2b0 <col:8, col:76>
| |     `-TextComment 0x56347477e280 <col:8, col:76> Text=" Policy: Filter transactions that do not match well-defined patterns "
| |-CXXMethodDecl 0x5634746cf2e8 <line:70:5, col:56> col:10 IsTestChain 'bool () const'
| | |-CompoundStmt 0x5634746d1728 <col:30, col:56>
| | | `-ReturnStmt 0x5634746d1718 <col:32, col:39>
| | |   `-ImplicitCastExpr 0x5634746d1700 <col:39> 'bool' <LValueToRValue>
| | |     `-MemberExpr 0x5634746d16d0 <col:39> 'const bool' lvalue ->m_is_test_chain 0x5634746d1358
| | |       `-CXXThisExpr 0x5634746d16c0 <col:39> 'const CChainParams *' implicit this
| | `-FullComment 0x56347477e3b0 <line:69:8, col:54>
| |   `-ParagraphComment 0x56347477e380 <col:8, col:54>
| |     `-TextComment 0x56347477e350 <col:8, col:54> Text=" If this chain is exclusively used for testing "
| |-CXXMethodDecl 0x5634746cf3c0 <line:71:5, col:67> col:14 invalid PruneAfterHeight 'int () const'
| | `-CompoundStmt 0x5634746d1750 <col:39, col:67>
| |-CXXMethodDecl 0x5634746cf4c0 <line:73:5, col:80> col:14 invalid AssumedBlockchainSize 'int () const'
| | |-CompoundStmt 0x5634746d1770 <col:44, col:80>
| | `-FullComment 0x56347477e480 <line:72:8, col:61>
| |   `-ParagraphComment 0x56347477e450 <col:8, col:61>
| |     `-TextComment 0x56347477e420 <col:8, col:61> Text=" Minimum free space (in GB) needed for data directory "
| |-CXXMethodDecl 0x5634746cf5c0 <line:75:5, col:81> col:14 invalid AssumedChainStateSize 'int () const'
| | |-CompoundStmt 0x5634746d1790 <col:44, col:81>
| | `-FullComment 0x56347477e550 <line:74:8, col:103>
| |   `-ParagraphComment 0x56347477e520 <col:8, col:103>
| |     `-TextComment 0x56347477e4f0 <col:8, col:103> Text=" Minimum free space (in GB) needed for data directory when pruned; Does not include prune target"
| |-CXXMethodDecl 0x5634746cf6a8 <line:77:5, col:75> col:10 MineBlocksOnDemand 'bool () const'
| | |-CompoundStmt 0x5634746d17a0 <col:37, col:75>
| | `-FullComment 0x56347477e620 <line:76:8, col:73>
| |   `-ParagraphComment 0x56347477e5f0 <col:8, col:73>
| |     `-TextComment 0x56347477e5c0 <col:8, col:73> Text=" Whether it is possible to mine blocks on demand (no retargeting) "
| |-CXXMethodDecl 0x5634746cf7b0 <line:79:5, col:64> col:17 invalid NetworkIDString 'int () const'
| | |-CompoundStmt 0x5634746d17c0 <col:41, col:64>
| | `-FullComment 0x56347477e6f0 <line:78:8, col:64>
| |   `-ParagraphComment 0x56347477e6c0 <col:8, col:64>
| |     `-TextComment 0x56347477e690 <col:8, col:64> Text=" Return the BIP70 network string (main, test or regtest) "
| |-CXXMethodDecl 0x5634746cf8c0 <line:81:5, col:71> col:37 invalid DNSSeeds 'const int &() const'
| | |-CompoundStmt 0x5634746d17e0 <col:54, col:71>
| | `-FullComment 0x56347477e7c0 <line:80:8, col:62>
| |   `-ParagraphComment 0x56347477e790 <col:8, col:62>
| |     `-TextComment 0x56347477e760 <col:8, col:62> Text=" Return the list of hostnames to look up for DNS seeds "
| |-FieldDecl 0x5634746cf9e8 <line:91:5, col:39> col:39 referenced pchMessageStart 'CMessageHeader::MessageStartChars':'unsigned char'
| |-FieldDecl 0x5634746cfa50 <line:92:5, col:9> col:9 referenced nDefaultPort 'int'
| |-FieldDecl 0x5634746cfac8 <line:93:5, col:14> col:14 invalid nPruneAfterHeight 'int'
| |-FieldDecl 0x5634746cfb40 <line:94:5, col:14> col:14 invalid m_assumed_blockchain_size 'int'
| |-FieldDecl 0x5634746cfbb8 <line:95:5, col:14> col:14 invalid m_assumed_chain_state_size 'int'
| |-FieldDecl 0x5634746cfc40 <line:96:30> col:30 invalid vSeeds 'int'
| |-FieldDecl 0x5634746d1140 <line:98:5, col:17> col:17 invalid bech32_hrp 'int'
| |-FieldDecl 0x5634746d11b8 <line:99:5, col:17> col:17 invalid strNetworkID 'int'
| |-FieldDecl 0x5634746d1218 <line:100:5, col:12> col:12 invalid genesis 'CBlock'
| |-FieldDecl 0x5634746d1298 <line:102:5, col:10> col:10 referenced fDefaultConsistencyChecks 'bool'
| |-FieldDecl 0x5634746d12f8 <line:103:5, col:10> col:10 referenced fRequireStandard 'bool'
| |-FieldDecl 0x5634746d1358 <line:104:5, col:10> col:10 referenced m_is_test_chain 'bool'
| |-FieldDecl 0x5634746d13b8 <line:105:5, col:21> col:21 invalid checkpointData 'CCheckpointData'
| `-FieldDecl 0x5634746d1418 <line:106:5, col:17> col:17 invalid chainTxData 'ChainTxData'
|-FunctionDecl 0x5634746d18e8 <line:120:1, col:28> col:21 used Params 'const CChainParams &()'
| `-FullComment 0x56347477e8b0 <line:117:3, line:118:34>
|   `-ParagraphComment 0x56347477e880 <line:117:3, line:118:34>
|     |-TextComment 0x56347477e830 <line:117:3, col:72> Text=" Return the currently selected parameters. This won't change after app"
|     `-TextComment 0x56347477e850 <line:118:3, col:34> Text=" startup, except for unit tests."
|-FunctionDecl 0x5634746d1a70 <line:126:1, col:43> col:6 invalid SelectParams 'void (const int &)'
| |-ParmVarDecl 0x5634746d19e0 <col:19, col:38> col:38 invalid chain 'const int &'
| `-FullComment 0x56347477ea20 <line:123:3, line:124:62>
|   |-ParagraphComment 0x56347477e970 <line:123:3, line:124:3>
|   | |-TextComment 0x56347477e920 <line:123:3, col:80> Text=" Sets the params returned by Params() to those for the given BIP70 chain name."
|   | `-TextComment 0x56347477e940 <line:124:3> Text=" "
|   `-BlockCommandComment 0x56347477e990 <col:4, col:62> Name="throws"
|     `-ParagraphComment 0x56347477e9f0 <col:11, col:62>
|       `-TextComment 0x56347477e9c0 <col:11, col:62> Text=" std::runtime_error when the chain is not supported."
|-VarDecl 0x5634746d1bc0 <bitcoin/src/clientversion.h:38:1, col:18> col:18 CLIENT_VERSION 'const int' static
|-VarDecl 0x5634746d1cd0 <line:44:1, col:26> col:26 invalid CLIENT_NAME 'const int' extern
|-VarDecl 0x5634746d1d60 <line:45:1, col:26> col:26 invalid CLIENT_BUILD 'const int' extern
|-FunctionDecl 0x5634746d1e00 <line:48:1, col:31> col:13 invalid FormatFullVersion 'int ()'
|-FunctionDecl 0x5634746d20e0 <line:49:1, col:115> col:13 invalid FormatSubVersion 'int (const int &, int, const int &)'
| |-ParmVarDecl 0x5634746d1ed8 <col:30, col:49> col:49 invalid name 'const int &'
| |-ParmVarDecl 0x5634746d1f58 <col:55, col:59> col:59 nClientVersion 'int'
| `-ParmVarDecl 0x5634746d1ff8 <col:75, col:107> col:107 invalid comments 'const int &'
|-VarDecl 0x5634746d21e0 <bitcoin/src/consensus/consensus.h:13:1, col:55> col:27 MAX_BLOCK_SERIALIZED_SIZE 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x5634746d2268 <col:55> 'const unsigned int' <IntegralCast>
| | `-IntegerLiteral 0x5634746d2248 <col:55> 'int' 4000000
| `-FullComment 0x56347477eaf0 <line:12:4, col:92>
|   `-ParagraphComment 0x56347477eac0 <col:4, col:92>
|     `-TextComment 0x56347477ea90 <col:4, col:92> Text=" The maximum allowed size for a serialized block, in bytes (only for buffer size limits) "
|-VarDecl 0x5634746d2320 <line:15:1, col:46> col:27 MAX_BLOCK_WEIGHT 'const unsigned int' static cinit
| |-ImplicitCastExpr 0x5634746d23a8 <col:46> 'const unsigned int' <IntegralCast>
| | `-IntegerLiteral 0x5634746d2388 <col:46> 'int' 4000000
| `-FullComment 0x56347477ebc0 <line:14:4, col:71>
|   `-ParagraphComment 0x56347477eb90 <col:4, col:71>
|     `-TextComment 0x56347477eb60 <col:4, col:71> Text=" The maximum allowed weight for a block, see BIP 141 (network rule) "
|-VarDecl 0x5634746d2470 <line:17:1, col:22> col:22 invalid MAX_BLOCK_SIGOPS_COST 'const int' static
| `-FullComment 0x56347477ec90 <line:16:4, col:87>
|   `-ParagraphComment 0x56347477ec60 <col:4, col:87>
|     `-TextComment 0x56347477ec30 <col:4, col:87> Text=" The maximum allowed number of signature check operations in a block (network rule) "
|-VarDecl 0x5634746d2540 <line:19:1, col:38> col:18 COINBASE_MATURITY 'const int' static cinit
| |-IntegerLiteral 0x5634746d25a8 <col:38> 'int' 100
| `-FullComment 0x56347477ed60 <line:18:4, col:98>
|   `-ParagraphComment 0x56347477ed30 <col:4, col:98>
|     `-TextComment 0x56347477ed00 <col:4, col:98> Text=" Coinbase transaction outputs can only be spent after this number of new blocks (network rule) "
|-VarDecl 0x5634746d2638 <line:21:1, col:41> col:18 referenced WITNESS_SCALE_FACTOR 'const int' static cinit
| `-IntegerLiteral 0x5634746d26a0 <col:41> 'int' 4
|-VarDecl 0x5634746d2740 <line:23:1, col:21> col:21 invalid MIN_TRANSACTION_WEIGHT 'const int' static
|-VarDecl 0x5634746d2868 <line:24:1, col:21> col:21 invalid MIN_SERIALIZABLE_TRANSACTION_WEIGHT 'const int' static
|-VarDecl 0x5634746d29b0 <line:28:1, col:65> col:31 LOCKTIME_VERIFY_SEQUENCE 'const unsigned int' static constexpr cinit
| |-ImplicitCastExpr 0x5634746d2a98 <col:58, col:65> 'const unsigned int' <IntegralCast>
| | `-ParenExpr 0x5634746d2a78 <col:58, col:65> 'int'
| |   `-BinaryOperator 0x5634746d2a58 <col:59, col:64> 'int' '<<'
| |     |-IntegerLiteral 0x5634746d2a18 <col:59> 'int' 1
| |     `-IntegerLiteral 0x5634746d2a38 <col:64> 'int' 0
| `-FullComment 0x56347477ee80 <line:26:4, line:27:66>
|   |-ParagraphComment 0x56347477ee00 <line:26:4, col:44>
|   | `-TextComment 0x56347477edd0 <col:4, col:44> Text=" Flags for nSequence and nLockTime locks "
|   `-ParagraphComment 0x56347477ee50 <line:27:4, col:66>
|     `-TextComment 0x56347477ee20 <col:4, col:66> Text=" Interpret sequence numbers as relative lock-time constraints. "
|-VarDecl 0x5634746d2b50 <line:30:1, col:66> col:31 LOCKTIME_MEDIAN_TIME_PAST 'const unsigned int' static constexpr cinit
| |-ImplicitCastExpr 0x5634746d2c38 <col:59, col:66> 'const unsigned int' <IntegralCast>
| | `-ParenExpr 0x5634746d2c18 <col:59, col:66> 'int'
| |   `-BinaryOperator 0x5634746d2bf8 <col:60, col:65> 'int' '<<'
| |     |-IntegerLiteral 0x5634746d2bb8 <col:60> 'int' 1
| |     `-IntegerLiteral 0x5634746d2bd8 <col:65> 'int' 1
| `-FullComment 0x56347477ef50 <line:29:4, col:70>
|   `-ParagraphComment 0x56347477ef20 <col:4, col:70>
|     `-TextComment 0x56347477eef0 <col:4, col:70> Text=" Use GetMedianTimePast() instead of nTime for end point timestamp. "
|-VarDecl 0x5634746d2cc0 <bitcoin/src/netbase.h:20:1, col:12> col:12 used nConnectTimeout 'int' extern
|-VarDecl 0x5634746d2d38 <line:21:1, col:13> col:13 used fNameLookup 'bool' extern
|-VarDecl 0x5634746d2de0 <line:24:1, col:44> col:18 DEFAULT_CONNECT_TIMEOUT 'const int' static cinit
| |-IntegerLiteral 0x5634746d2e48 <col:44> 'int' 5000
| `-FullComment 0x56347477f020 <line:23:4, col:20>
|   `-ParagraphComment 0x56347477eff0 <col:4, col:20>
|     `-TextComment 0x56347477efc0 <col:4, col:20> Text=" -timeout default"
|-VarDecl 0x5634746d2f00 <line:26:1, col:40> col:18 DEFAULT_NAME_LOOKUP 'const int' static cinit
| |-ImplicitCastExpr 0x5634746d2f78 <col:40> 'const int' <IntegralCast>
| | `-CXXBoolLiteralExpr 0x5634746d2f68 <col:40> 'bool' true
| `-FullComment 0x56347477f0f0 <line:25:4, col:16>
|   `-ParagraphComment 0x56347477f0c0 <col:4, col:16>
|     `-TextComment 0x56347477f090 <col:4, col:16> Text=" -dns default"
|-CXXRecordDecl 0x5634746d2fe8 <line:28:1, line:38:1> line:28:7 referenced invalid class proxyType definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5634746d8fe0 <col:1, col:7> col:7 implicit referenced class proxyType
| |-AccessSpecDecl 0x5634746d9070 <line:30:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634746d9100 <line:31:5, col:48> col:5 used proxyType 'void ()'
| | |-CXXCtorInitializer Field 0x5634746d9518 'randomize_credentials' 'bool'
| | | `-CXXBoolLiteralExpr 0x5634746d9590 <col:40> 'bool' false
| | `-CompoundStmt 0x5634746d95f0 <col:47, col:48>
| |-CXXConstructorDecl 0x5634746d9308 <line:32:5, col:146> col:14 proxyType 'void (const CService &, bool)'
| | |-ParmVarDecl 0x5634746d91b8 <col:24, col:40> col:40 used _proxy 'const CService &'
| | |-ParmVarDecl 0x5634746d9230 <col:48, col:76> col:53 used _randomize_credentials 'bool' cinit
| | | `-CXXBoolLiteralExpr 0x5634746d9580 <col:76> 'bool' false
| | |-CXXCtorInitializer Field 0x5634746d9518 'randomize_credentials' 'bool'
| | | `-ImplicitCastExpr 0x5634746d9680 <col:121> 'bool' <LValueToRValue>
| | |   `-DeclRefExpr 0x5634746d9640 <col:121> 'bool' lvalue ParmVar 0x5634746d9230 '_randomize_credentials' 'bool'
| | `-CompoundStmt 0x5634746d96c8 <col:145, col:146>
| |-CXXMethodDecl 0x5634746d9408 <line:34:5, col:52> col:10 IsValid 'bool () const'
| | `-CompoundStmt 0x5634746d96e8 <col:26, col:52>
| |-FieldDecl 0x5634746d94b8 <line:36:5, col:14> col:14 invalid proxy 'CService'
| |-FieldDecl 0x5634746d9518 <line:37:5, col:10> col:10 randomize_credentials 'bool'
| |-CXXConstructorDecl 0x56347469edb8 <line:28:7> col:7 implicit constexpr proxyType 'void (const proxyType &)' inline default trivial noexcept-unevaluated 0x56347469edb8
| | `-ParmVarDecl 0x56347469eec8 <col:7> col:7 'const proxyType &'
| `-CXXConstructorDecl 0x56347469ef68 <col:7> col:7 implicit constexpr proxyType 'void (proxyType &&)' inline default trivial noexcept-unevaluated 0x56347469ef68
|   `-ParmVarDecl 0x56347469f078 <col:7> col:7 'proxyType &&'
|-FunctionDecl 0x5634746d9828 <line:40:1, col:49> col:14 invalid ParseNetwork 'enum Network (const int &)'
| `-ParmVarDecl 0x5634746d9720 <col:27, col:46> col:46 invalid net 'const int &'
|-FunctionDecl 0x5634746d9a00 <line:41:1, col:44> col:13 invalid GetNetworkName 'int (enum Network)'
| `-ParmVarDecl 0x5634746d9900 <col:28, col:41> col:41 net 'enum Network':'Network'
|-FunctionDecl 0x5634746d9c78 <line:42:1, col:59> col:6 SetProxy 'bool (enum Network, const proxyType &)'
| |-ParmVarDecl 0x5634746d9ac8 <col:15, col:28> col:28 net 'enum Network':'Network'
| `-ParmVarDecl 0x5634746d9b68 <col:33, col:50> col:50 addrProxy 'const proxyType &'
|-FunctionDecl 0x5634746d9ef8 <line:43:1, col:56> col:6 GetProxy 'bool (enum Network, proxyType &)'
| |-ParmVarDecl 0x5634746d9d48 <col:15, col:28> col:28 net 'enum Network':'Network'
| `-ParmVarDecl 0x5634746d9de8 <col:33, col:44> col:44 proxyInfoOut 'proxyType &'
|-FunctionDecl 0x5634746da048 <line:44:1, col:34> col:6 IsProxy 'bool (const CNetAddr &)'
| `-ParmVarDecl 0x5634746d9fb8 <col:14, col:30> col:30 addr 'const CNetAddr &'
|-FunctionDecl 0x5634746da1c8 <line:45:1, col:45> col:6 SetNameProxy 'bool (const proxyType &)'
| `-ParmVarDecl 0x5634746da100 <col:19, col:36> col:36 addrProxy 'const proxyType &'
|-FunctionDecl 0x5634746da290 <line:46:1, col:20> col:6 used HaveNameProxy 'bool ()'
|-FunctionDecl 0x5634746da408 <line:47:1, col:42> col:6 used GetNameProxy 'bool (proxyType &)'
| `-ParmVarDecl 0x5634746da340 <col:19, col:30> col:30 nameProxyOut 'proxyType &'
|-FunctionDecl 0x5634746da5a8 <line:48:1, col:111> col:6 LookupHost 'bool (const char *)'
| `-ParmVarDecl 0x5634746da4c8 <col:17, col:29> col:29 pszName 'const char *'
|-FunctionDecl 0x5634746da868 <line:49:1, col:71> col:6 LookupHost 'bool (const char *, CNetAddr &, bool)'
| |-ParmVarDecl 0x5634746da668 <col:17, col:29> col:29 pszName 'const char *'
| |-ParmVarDecl 0x5634746da708 <col:38, col:48> col:48 addr 'CNetAddr &'
| `-ParmVarDecl 0x5634746da780 <col:54, col:59> col:59 fAllowLookup 'bool'
|-FunctionDecl 0x5634746dab98 <line:50:1, col:84> col:6 Lookup 'bool (const char *, CService &, int, bool)'
| |-ParmVarDecl 0x5634746da938 <col:13, col:25> col:25 pszName 'const char *'
| |-ParmVarDecl 0x5634746da9b0 <col:34, col:44> col:44 addr 'CService &'
| |-ParmVarDecl 0x5634746daa30 <col:50, col:54> col:54 portDefault 'int'
| `-ParmVarDecl 0x5634746daaa8 <col:67, col:72> col:72 fAllowLookup 'bool'
|-FunctionDecl 0x5634746dad20 <line:51:1, col:126> col:6 Lookup 'bool (const char *)'
| `-ParmVarDecl 0x5634746dac70 <col:13, col:25> col:25 pszName 'const char *'
|-FunctionDecl 0x5634746daff0 <line:52:1, col:64> col:10 used LookupNumeric 'CService (const char *, int)'
| |-ParmVarDecl 0x5634746dade0 <col:24, col:36> col:36 pszName 'const char *'
| `-ParmVarDecl 0x5634746dae60 <col:45, col:63> col:49 portDefault 'int' cinit
|   `-IntegerLiteral 0x5634746daec8 <col:63> 'int' 0
|-FunctionDecl 0x5634746db228 <line:53:1, col:55> col:6 LookupSubNet 'bool (const char *, CSubNet &)'
| |-ParmVarDecl 0x5634746db0b8 <col:19, col:31> col:31 pszName 'const char *'
| `-ParmVarDecl 0x5634746db158 <col:40, col:49> col:49 subnet 'CSubNet &'
|-FunctionDecl 0x5634746db3d8 <line:54:1, col:48> col:8 CreateSocket 'SOCKET (const CService &)'
| `-ParmVarDecl 0x5634746db2e8 <col:21, col:37> col:37 addrConnect 'const CService &'
|-FunctionDecl 0x5634746db748 <line:55:1, col:119> col:6 ConnectSocketDirectly 'bool (const CService &, const SOCKET &, int, bool)'
| |-ParmVarDecl 0x5634746db490 <col:28, col:44> col:44 addrConnect 'const CService &'
| |-ParmVarDecl 0x5634746db508 <col:57, col:71> col:71 hSocketRet 'const SOCKET &'
| |-ParmVarDecl 0x5634746db588 <col:83, col:87> col:87 nTimeout 'int'
| `-ParmVarDecl 0x5634746db600 <col:97, col:102> col:102 manual_connection 'bool'
|-FunctionDecl 0x5634746dbc18 <line:56:1, col:158> col:6 invalid ConnectThroughProxy 'bool (const proxyType &, const int &, int, const SOCKET &, int, bool *)'
| |-ParmVarDecl 0x5634746db818 <col:26, col:43> col:43 proxy 'const proxyType &'
| |-ParmVarDecl 0x5634746db8a8 <col:50, col:69> col:69 invalid strDest 'const int &'
| |-ParmVarDecl 0x5634746db928 <col:78, col:82> col:82 port 'int'
| |-ParmVarDecl 0x5634746db9a0 <col:88, col:102> col:102 hSocketRet 'const SOCKET &'
| |-ParmVarDecl 0x5634746dba20 <col:114, col:118> col:118 nTimeout 'int'
| `-ParmVarDecl 0x5634746dbaa0 <col:128, col:134> col:134 outProxyConnectionFailed 'bool *'
|-FunctionDecl 0x5634746dbdd8 <line:58:1, col:39> col:13 invalid NetworkErrorString 'int (int)'
| |-ParmVarDecl 0x5634746dbd40 <col:32, col:36> col:36 err 'int'
| `-FullComment 0x56347477f1c0 <line:57:4, col:58>
|   `-ParagraphComment 0x56347477f190 <col:4, col:58>
|     `-TextComment 0x56347477f160 <col:4, col:58> Text=" Return readable error string for a network error code "
|-FunctionDecl 0x5634746dbfd8 <line:60:1, col:33> col:6 used CloseSocket 'bool (SOCKET &)'
| |-ParmVarDecl 0x5634746dbee8 <col:18, col:26> col:26 hSocket 'SOCKET &'
| `-FullComment 0x56347477f290 <line:59:4, col:51>
|   `-ParagraphComment 0x56347477f260 <col:4, col:51>
|     `-TextComment 0x56347477f230 <col:4, col:51> Text=" Close socket and set hSocket to INVALID_SOCKET "
|-FunctionDecl 0x5634746dc248 <line:62:1, col:67> col:6 SetSocketNonBlocking 'bool (const SOCKET &, bool)'
| |-ParmVarDecl 0x5634746dc0b8 <col:27, col:41> col:41 hSocket 'const SOCKET &'
| |-ParmVarDecl 0x5634746dc130 <col:50, col:55> col:55 fNonBlocking 'bool'
| `-FullComment 0x56347477f360 <line:61:4, col:49>
|   `-ParagraphComment 0x56347477f330 <col:4, col:49>
|     `-TextComment 0x56347477f300 <col:4, col:49> Text=" Disable or enable blocking-mode for a socket "
|-FunctionDecl 0x5634746dc3c8 <line:64:1, col:44> col:6 used SetSocketNoDelay 'bool (const SOCKET &)'
| |-ParmVarDecl 0x5634746dc338 <col:23, col:37> col:37 hSocket 'const SOCKET &'
| `-FullComment 0x56347477f430 <line:63:4, col:41>
|   `-ParagraphComment 0x56347477f400 <col:4, col:41>
|     `-TextComment 0x56347477f3d0 <col:4, col:41> Text=" Set the TCP_NODELAY flag on a socket "
|-CXXRecordDecl 0x5634746dc498 <line:68:1, col:8> col:8 struct timeval
|-FunctionDecl 0x5634746dc6b8 <col:1, col:48> col:16 invalid MillisToTimeval 'struct timeval (int)'
| |-ParmVarDecl 0x5634746dc578 <col:32, col:40> col:40 invalid nTimeout 'int'
| `-FullComment 0x56347477f500 <line:66:3, col:60>
|   `-ParagraphComment 0x56347477f4d0 <col:3, col:60>
|     `-TextComment 0x56347477f4a0 <col:3, col:60> Text=" Convert milliseconds to a struct timeval for e.g. select."
|-FunctionDecl 0x5634746dc818 <line:69:1, col:36> col:6 used InterruptSocks5 'void (bool)'
| `-ParmVarDecl 0x5634746dc788 <col:22, col:27> col:27 interrupt 'bool'
|-VarDecl 0x5634746dc8d8 <bitcoin/src/primitives/transaction.h:15:1, col:53> col:18 referenced SERIALIZE_TRANSACTION_NO_WITNESS 'const int' static cinit
| `-IntegerLiteral 0x5634746dc940 <col:53> 'int' 1073741824
|-CXXRecordDecl 0x5634746dc9e8 prev 0x56347464b0b0 <line:18:1, line:57:1> line:18:7 referenced invalid class COutPoint definition
| |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347477f5d0 <line:17:4, col:83>
| | `-ParagraphComment 0x56347477f5a0 <col:4, col:83>
| |   `-TextComment 0x56347477f570 <col:4, col:83> Text=" An outpoint - a combination of a transaction hash and an index n into its vout "
| |-CXXRecordDecl 0x5634746dcae0 <line:18:1, col:7> col:7 implicit referenced class COutPoint
| |-AccessSpecDecl 0x5634746dcb70 <line:20:1, col:7> col:1 public
| |-FieldDecl 0x5634746dcba8 <line:21:5, col:13> col:13 invalid hash 'uint256'
| |-FieldDecl 0x5634746dcc20 <line:22:5, col:14> col:14 invalid n 'int'
| |-VarDecl 0x5634746dcc98 <line:24:5, col:31> col:31 invalid NULL_INDEX 'const int' static constexpr
| |-CXXConstructorDecl 0x5634746dcd80 <line:26:5, col:34> col:5 COutPoint 'void ()'
| | `-CompoundStmt 0x5634746e1288 <col:32, col:34>
| |-CXXConstructorDecl 0x5634746e0000 <line:27:5, col:76> col:5 invalid COutPoint 'void (const uint256 &, int)'
| | |-ParmVarDecl 0x5634746dce38 <col:15, col:30> col:30 used hashIn 'const uint256 &'
| | |-ParmVarDecl 0x5634746dcec8 <col:38, col:47> col:47 invalid nIn 'int'
| | `-CompoundStmt 0x5634746e12d8 <col:74, col:76>
| |-FunctionTemplateDecl 0x5634746e0308 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634746e00b8 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746e0268 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634746e0178 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746e13a0 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634746e0588 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634746e0368 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746e04e8 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634746e0428 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746e14a8 <col:33, line:201:5>
| |     `-CallExpr 0x5634746e1478 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634746e13c0 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634746e1418 <col:25> 'Stream' lvalue ParmVar 0x5634746e0428 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634746e1448 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634746e0918 <bitcoin/src/primitives/transaction.h:31:5, line:35:5> line:32:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634746e05e8 <line:31:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634746e0658 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634746e0878 <line:32:5, line:35:5> line:32:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634746e0728 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634746e07a0 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634746e1640 <col:66, line:35:5>
| |-CXXMethodDecl 0x5634746e09a0 <line:37:5, col:54> col:10 SetNull 'void ()'
| | `-CompoundStmt 0x5634746e1670 <col:20, col:54>
| |-CXXMethodDecl 0x5634746e0a60 <line:38:5, col:70> col:10 IsNull 'bool () const'
| | `-CompoundStmt 0x5634746e16a0 <col:25, col:70>
| |-FriendDecl 0x5634746e0d18 <line:40:5, line:44:5> line:40:17
| | `-FunctionDecl 0x5634746e0c58 parent 0x5634744cb688 <col:5, line:44:5> line:40:17 operator< 'bool (const COutPoint &, const COutPoint &)'
| |   |-ParmVarDecl 0x5634746e0b10 <col:27, col:44> col:44 used a 'const COutPoint &'
| |   |-ParmVarDecl 0x5634746e0b88 <col:47, col:64> col:64 used b 'const COutPoint &'
| |   `-CompoundStmt 0x5634746e18b8 <line:41:5, line:44:5>
| |     `-DeclStmt 0x5634746e1770 <line:42:9, col:41>
| |       `-VarDecl 0x5634746e16c8 <col:9, col:13> col:13 used cmp 'int'
| |-FriendDecl 0x5634746e0f38 <line:46:5, line:49:5> line:46:17
| | `-FunctionDecl 0x5634746e0e78 parent 0x5634744cb688 <col:5, line:49:5> line:46:17 used operator== 'bool (const COutPoint &, const COutPoint &)'
| |   |-ParmVarDecl 0x5634746e0d68 <col:28, col:45> col:45 used a 'const COutPoint &'
| |   |-ParmVarDecl 0x5634746e0de0 <col:48, col:65> col:65 used b 'const COutPoint &'
| |   `-CompoundStmt 0x5634746e1950 <line:47:5, line:49:5>
| |-FriendDecl 0x5634746e1158 <line:51:5, line:54:5> line:51:17
| | `-FunctionDecl 0x5634746e1098 parent 0x5634744cb688 <col:5, line:54:5> line:51:17 operator!= 'bool (const COutPoint &, const COutPoint &)'
| |   |-ParmVarDecl 0x5634746e0f88 <col:28, col:45> col:45 used a 'const COutPoint &'
| |   |-ParmVarDecl 0x5634746e1000 <col:48, col:65> col:65 used b 'const COutPoint &'
| |   `-CompoundStmt 0x5634746e1a80 <line:52:5, line:54:5>
| |     `-ReturnStmt 0x5634746e1a70 <line:53:9, col:24>
| |       `-UnaryOperator 0x5634746e1a58 <col:16, col:24> 'bool' prefix '!' cannot overflow
| |         `-ParenExpr 0x5634746e1a38 <col:17, col:24> 'bool'
| |           `-CXXOperatorCallExpr 0x5634746e1a00 <col:18, col:23> 'bool' adl
| |             |-ImplicitCastExpr 0x5634746e19e8 <col:20> 'bool (*)(const COutPoint &, const COutPoint &)' <FunctionToPointerDecay>
| |             | `-DeclRefExpr 0x5634746e19a0 <col:20> 'bool (const COutPoint &, const COutPoint &)' lvalue Function 0x5634746e0e78 'operator==' 'bool (const COutPoint &, const COutPoint &)'
| |             |-DeclRefExpr 0x5634746e1960 <col:18> 'const COutPoint' lvalue ParmVar 0x5634746e0f88 'a' 'const COutPoint &'
| |             `-DeclRefExpr 0x5634746e1980 <col:23> 'const COutPoint' lvalue ParmVar 0x5634746e1000 'b' 'const COutPoint &'
| `-CXXMethodDecl 0x5634746e11d0 <line:56:5, col:28> col:17 invalid ToString 'int () const'
|-CXXRecordDecl 0x5634746e1ac8 <line:63:1, line:128:1> line:63:7 referenced invalid class CTxIn definition
| |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x56347477f870 <line:59:4, line:61:23>
| | `-ParagraphComment 0x56347477f840 <line:59:4, line:61:23>
| |   |-TextComment 0x56347477f7c0 <line:59:4, col:72> Text=" An input of a transaction.  It contains the location of the previous"
| |   |-TextComment 0x56347477f7e0 <line:60:3, col:71> Text=" transaction's output that it claims and a signature that matches the"
| |   `-TextComment 0x56347477f800 <line:61:3, col:23> Text=" output's public key."
| |-CXXRecordDecl 0x5634746e1be8 <line:63:1, col:7> col:7 implicit referenced class CTxIn
| |-AccessSpecDecl 0x5634746e1c78 <line:65:1, col:7> col:1 public
| |-FieldDecl 0x5634746e1cb0 <line:66:5, col:15> col:15 invalid prevout 'COutPoint'
| |-FieldDecl 0x5634746e1d28 <line:67:5, col:13> col:13 invalid scriptSig 'int'
| |-FieldDecl 0x5634746e1da0 <line:68:5, col:14> col:14 invalid nSequence 'int'
| |-FieldDecl 0x5634746e1e18 <line:69:5, col:20> col:20 invalid scriptWitness 'int'
| | `-FullComment 0x56347477f940 <col:39, col:75>
| |   `-ParagraphComment 0x56347477f910 <col:39, col:75>
| |     `-TextComment 0x56347477f8e0 <col:39, col:75> Text=" Only serialized through CTransaction"
| |-VarDecl 0x5634746e1ec0 <line:73:5, col:27> col:27 invalid SEQUENCE_FINAL 'const int' static
| |-VarDecl 0x5634746e1f70 <line:78:5, col:27> col:27 invalid SEQUENCE_LOCKTIME_DISABLE_FLAG 'const int' static
| |-VarDecl 0x5634746e2098 <line:83:5, col:27> col:27 invalid SEQUENCE_LOCKTIME_TYPE_FLAG 'const int' static
| |-VarDecl 0x5634746e21a8 <line:87:5, col:27> col:27 invalid SEQUENCE_LOCKTIME_MASK 'const int' static
| |-VarDecl 0x5634746e2248 <line:96:5, col:54> col:22 SEQUENCE_LOCKTIME_GRANULARITY 'const int' static cinit
| | `-IntegerLiteral 0x5634746e22b0 <col:54> 'int' 9
| |-CXXConstructorDecl 0x5634746e2390 <line:98:5, line:101:5> line:98:5 CTxIn 'void ()'
| | `-CompoundStmt 0x5634746e39d8 <line:99:5, line:101:5>
| |-CXXConstructorDecl 0x5634746e2648 <line:103:5, col:107> col:14 invalid CTxIn 'void (COutPoint, int, int)'
| | |-ParmVarDecl 0x5634746e2448 <col:20, col:30> col:30 prevoutIn 'COutPoint'
| | |-ParmVarDecl 0x5634746e24d8 <col:41, col:60> col:49 invalid scriptSigIn 'int' cinit
| | | `-OpaqueValueExpr 0x5634746e3928 <col:60> 'int'
| | `-ParmVarDecl 0x5634746e2568 <col:72, col:92> col:81 invalid nSequenceIn 'int' cinit
| |   `-OpaqueValueExpr 0x5634746e3940 <col:92> 'int'
| |-CXXConstructorDecl 0x5634746e29b8 <line:104:5, col:112> col:5 invalid CTxIn 'void (uint256, int, int, int)'
| | |-ParmVarDecl 0x5634746e2718 <col:11, col:19> col:19 hashPrevTx 'uint256'
| | |-ParmVarDecl 0x5634746e27a8 <col:31, col:40> col:40 invalid nOut 'int'
| | |-ParmVarDecl 0x5634746e2838 <col:46, col:65> col:54 invalid scriptSigIn 'int' cinit
| | | `-OpaqueValueExpr 0x5634746e3998 <col:65> 'int'
| | `-ParmVarDecl 0x5634746e28c8 <col:77, col:97> col:86 invalid nSequenceIn 'int' cinit
| |   `-OpaqueValueExpr 0x5634746e39b0 <col:97> 'int'
| |-FunctionTemplateDecl 0x5634746e2cd8 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634746e2a80 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746e2c38 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634746e2b48 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746e3aa0 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634746e2f58 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634746e2d38 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746e2eb8 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634746e2df8 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746e3ba8 <col:33, line:201:5>
| |     `-CallExpr 0x5634746e3b78 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634746e3ac0 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634746e3b18 <col:25> 'Stream' lvalue ParmVar 0x5634746e2df8 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634746e3b48 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634746e32e8 <bitcoin/src/primitives/transaction.h:108:5, line:113:5> line:109:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634746e2fb8 <line:108:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634746e3028 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634746e3248 <line:109:5, line:113:5> line:109:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634746e30f8 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634746e3170 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634746e3e00 <col:66, line:113:5>
| |-FriendDecl 0x5634746e3598 <line:115:5, line:120:5> line:115:17
| | `-FunctionDecl 0x5634746e34d8 parent 0x5634744cb688 <col:5, line:120:5> line:115:17 used operator== 'bool (const CTxIn &, const CTxIn &)'
| |   |-ParmVarDecl 0x5634746e3388 <col:28, col:41> col:41 used a 'const CTxIn &'
| |   |-ParmVarDecl 0x5634746e3400 <col:44, col:57> col:57 used b 'const CTxIn &'
| |   `-CompoundStmt 0x5634746e3ed0 <line:116:5, line:120:5>
| |-FriendDecl 0x5634746e37b8 <line:122:5, line:125:5> line:122:17
| | `-FunctionDecl 0x5634746e36f8 parent 0x5634744cb688 <col:5, line:125:5> line:122:17 operator!= 'bool (const CTxIn &, const CTxIn &)'
| |   |-ParmVarDecl 0x5634746e35e8 <col:28, col:41> col:41 used a 'const CTxIn &'
| |   |-ParmVarDecl 0x5634746e3660 <col:44, col:57> col:57 used b 'const CTxIn &'
| |   `-CompoundStmt 0x5634746e4ba0 <line:123:5, line:125:5>
| |     `-ReturnStmt 0x5634746e3ff0 <line:124:9, col:24>
| |       `-UnaryOperator 0x5634746e3fd8 <col:16, col:24> 'bool' prefix '!' cannot overflow
| |         `-ParenExpr 0x5634746e3fb8 <col:17, col:24> 'bool'
| |           `-CXXOperatorCallExpr 0x5634746e3f80 <col:18, col:23> 'bool' adl
| |             |-ImplicitCastExpr 0x5634746e3f68 <col:20> 'bool (*)(const CTxIn &, const CTxIn &)' <FunctionToPointerDecay>
| |             | `-DeclRefExpr 0x5634746e3f20 <col:20> 'bool (const CTxIn &, const CTxIn &)' lvalue Function 0x5634746e34d8 'operator==' 'bool (const CTxIn &, const CTxIn &)'
| |             |-DeclRefExpr 0x5634746e3ee0 <col:18> 'const CTxIn' lvalue ParmVar 0x5634746e35e8 'a' 'const CTxIn &'
| |             `-DeclRefExpr 0x5634746e3f00 <col:23> 'const CTxIn' lvalue ParmVar 0x5634746e3660 'b' 'const CTxIn &'
| `-CXXMethodDecl 0x5634746e3830 <line:127:5, col:28> col:17 invalid ToString 'int () const'
|-CXXRecordDecl 0x5634746e4be8 <line:133:1, line:177:1> line:133:7 referenced invalid class CTxOut definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474780c40 <line:130:4, line:131:41>
| | `-ParagraphComment 0x563474780c10 <line:130:4, line:131:41>
| |   |-TextComment 0x56347477fb30 <line:130:4, col:79> Text=" An output of a transaction.  It contains the public key that the next input"
| |   `-TextComment 0x563474780be0 <line:131:3, col:41> Text=" must be able to sign with to claim it."
| |-CXXRecordDecl 0x5634746e4d08 <line:133:1, col:7> col:7 implicit referenced class CTxOut
| |-AccessSpecDecl 0x5634746e4d98 <line:135:1, col:7> col:1 public
| |-FieldDecl 0x5634746e4dd0 <line:136:5, col:13> col:13 referenced nValue 'CAmount':'int'
| |-FieldDecl 0x5634746e4e48 <line:137:5, col:13> col:13 invalid scriptPubKey 'int'
| |-CXXConstructorDecl 0x5634746e4f00 <line:139:5, line:142:5> line:139:5 CTxOut 'void ()'
| | `-CompoundStmt 0x5634746e61d8 <line:140:5, line:142:5>
| |   `-CXXMemberCallExpr 0x5634746e61b8 <line:141:9, col:17> 'void'
| |     `-MemberExpr 0x5634746e6188 <col:9> '<bound member function type>' ->SetNull 0x5634746e5a80
| |       `-CXXThisExpr 0x5634746e6178 <col:9> 'CTxOut *' implicit this
| |-CXXConstructorDecl 0x5634746e50e0 <line:144:5, col:59> col:5 invalid CTxOut 'void (const CAmount &, int)'
| | |-ParmVarDecl 0x5634746e4fb8 <col:12, col:27> col:27 nValueIn 'const CAmount &'
| | `-ParmVarDecl 0x5634746e5048 <col:37, col:45> col:45 invalid scriptPubKeyIn 'int'
| |-FunctionTemplateDecl 0x5634746e53e8 <bitcoin/src/serialize.h:194:5, line:197:5> line:195:10 Serialize
| | |-TemplateTypeParmDecl 0x5634746e5198 <line:194:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746e5348 <line:195:5, line:197:5> line:195:10 Serialize 'void (Stream &) const'
| |   |-ParmVarDecl 0x5634746e5258 <col:20, col:28> col:28 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746e62a8 <col:37, line:197:5>
| |-FunctionTemplateDecl 0x5634746e5668 <line:198:5, line:201:5> line:199:10 Unserialize
| | |-TemplateTypeParmDecl 0x5634746e5448 <line:198:14, col:23> col:23 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746e55c8 <line:199:5, line:201:5> line:199:10 Unserialize 'void (Stream &)'
| |   |-ParmVarDecl 0x5634746e5508 <col:22, col:30> col:30 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746e63b0 <col:33, line:201:5>
| |     `-CallExpr 0x5634746e6380 <line:200:9, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634746e62c8 <col:9> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5634746e6320 <col:25> 'Stream' lvalue ParmVar 0x5634746e5508 's' 'Stream &'
| |       `-CXXTemporaryObjectExpr 0x5634746e6350 <col:28, col:50> 'CSerActionUnserialize' 'void () noexcept' zeroing
| |-FunctionTemplateDecl 0x5634746e59f8 <bitcoin/src/primitives/transaction.h:148:5, line:152:5> line:149:17 SerializationOp
| | |-TemplateTypeParmDecl 0x5634746e56c8 <line:148:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-TemplateTypeParmDecl 0x5634746e5738 <col:32, col:41> col:41 referenced typename depth 0 index 1 Operation
| | `-CXXMethodDecl 0x5634746e5958 <line:149:5, line:152:5> line:149:17 SerializationOp 'void (Stream &, Operation)' inline
| |   |-ParmVarDecl 0x5634746e5808 <col:33, col:41> col:41 referenced s 'Stream &'
| |   |-ParmVarDecl 0x5634746e5880 <col:44, col:54> col:54 referenced ser_action 'Operation'
| |   `-CompoundStmt 0x5634746e65d0 <col:66, line:152:5>
| |     `-ParenExpr 0x5634746e64f0 <bitcoin/src/serialize.h:184:24, col:71> '<dependent type>'
| |       `-CallExpr 0x5634746e64b8 <col:25, col:70> '<dependent type>'
| |         |-UnresolvedLookupExpr 0x5634746e63e8 <col:25, col:27> '<overloaded function type>' lvalue (no ADL) = 'SerReadWriteMany' 0x5634745ba798 0x5634745bade8
| |         |-DeclRefExpr 0x5634746e6438 <col:44> 'Stream' lvalue ParmVar 0x5634746e5808 's' 'Stream &'
| |         |-DeclRefExpr 0x5634746e6458 <col:47> 'Operation' lvalue ParmVar 0x5634746e5880 'ser_action' 'Operation'
| |         `-MemberExpr 0x5634746e6488 <bitcoin/src/primitives/transaction.h:150:19> 'CAmount':'int' lvalue ->nValue 0x5634746e4dd0
| |           `-CXXThisExpr 0x5634746e6478 <col:19> 'CTxOut *' implicit this
| |-CXXMethodDecl 0x5634746e5a80 <line:154:5, line:158:5> line:154:10 used SetNull 'void ()'
| | `-CompoundStmt 0x5634746e6690 <line:155:5, line:158:5>
| |   `-BinaryOperator 0x5634746e6660 <line:156:9, col:19> 'CAmount':'int' lvalue '='
| |     |-MemberExpr 0x5634746e65f8 <col:9> 'CAmount':'int' lvalue ->nValue 0x5634746e4dd0
| |     | `-CXXThisExpr 0x5634746e65e8 <col:9> 'CTxOut *' implicit this
| |     `-UnaryOperator 0x5634746e6648 <col:18, col:19> 'int' prefix '-'
| |       `-IntegerLiteral 0x5634746e6628 <col:19> 'int' 1
| |-CXXMethodDecl 0x5634746e5b40 <line:160:5, line:163:5> line:160:10 IsNull 'bool () const'
| | `-CompoundStmt 0x5634746e6788 <line:161:5, line:163:5>
| |   `-ReturnStmt 0x5634746e6778 <line:162:9, col:29>
| |     `-ParenExpr 0x5634746e6758 <col:16, col:29> 'bool'
| |       `-BinaryOperator 0x5634746e6738 <col:17, col:28> 'bool' '=='
| |         |-ImplicitCastExpr 0x5634746e6720 <col:17> 'CAmount':'int' <LValueToRValue>
| |         | `-MemberExpr 0x5634746e66b8 <col:17> 'const CAmount':'const int' lvalue ->nValue 0x5634746e4dd0
| |         |   `-CXXThisExpr 0x5634746e66a8 <col:17> 'const CTxOut *' implicit this
| |         `-UnaryOperator 0x5634746e6708 <col:27, col:28> 'int' prefix '-'
| |           `-IntegerLiteral 0x5634746e66e8 <col:28> 'int' 1
| |-FriendDecl 0x5634746e5e28 <line:165:5, line:169:5> line:165:17
| | `-FunctionDecl 0x5634746e5d68 parent 0x5634744cb688 <col:5, line:169:5> line:165:17 used operator== 'bool (const CTxOut &, const CTxOut &)'
| |   |-ParmVarDecl 0x5634746e5c18 <col:28, col:42> col:42 used a 'const CTxOut &'
| |   |-ParmVarDecl 0x5634746e5c90 <col:45, col:59> col:59 used b 'const CTxOut &'
| |   `-CompoundStmt 0x5634746e68d0 <line:166:5, line:169:5>
| |-FriendDecl 0x5634746e6048 <line:171:5, line:174:5> line:171:17
| | `-FunctionDecl 0x5634746e5f88 parent 0x5634744cb688 <col:5, line:174:5> line:171:17 operator!= 'bool (const CTxOut &, const CTxOut &)'
| |   |-ParmVarDecl 0x5634746e5e78 <col:28, col:42> col:42 used a 'const CTxOut &'
| |   |-ParmVarDecl 0x5634746e5ef0 <col:45, col:59> col:59 used b 'const CTxOut &'
| |   `-CompoundStmt 0x5634746e6a00 <line:172:5, line:174:5>
| |     `-ReturnStmt 0x5634746e69f0 <line:173:9, col:24>
| |       `-UnaryOperator 0x5634746e69d8 <col:16, col:24> 'bool' prefix '!' cannot overflow
| |         `-ParenExpr 0x5634746e69b8 <col:17, col:24> 'bool'
| |           `-CXXOperatorCallExpr 0x5634746e6980 <col:18, col:23> 'bool' adl
| |             |-ImplicitCastExpr 0x5634746e6968 <col:20> 'bool (*)(const CTxOut &, const CTxOut &)' <FunctionToPointerDecay>
| |             | `-DeclRefExpr 0x5634746e6920 <col:20> 'bool (const CTxOut &, const CTxOut &)' lvalue Function 0x5634746e5d68 'operator==' 'bool (const CTxOut &, const CTxOut &)'
| |             |-DeclRefExpr 0x5634746e68e0 <col:18> 'const CTxOut' lvalue ParmVar 0x5634746e5e78 'a' 'const CTxOut &'
| |             `-DeclRefExpr 0x5634746e6900 <col:23> 'const CTxOut' lvalue ParmVar 0x5634746e5ef0 'b' 'const CTxOut &'
| `-CXXMethodDecl 0x5634746e60c0 <line:176:5, col:28> col:17 invalid ToString 'int () const'
|-CXXRecordDecl 0x5634746e6a18 <line:179:1, col:8> col:8 referenced struct CMutableTransaction
|-FunctionTemplateDecl 0x5634746e7ee8 <line:198:1, line:235:1> line:199:13 UnserializeTransaction
| |-TemplateTypeParmDecl 0x5634746e6af8 <line:198:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634746e7bc0 <col:27, col:36> col:36 referenced typename depth 0 index 1 TxType
| |-FunctionDecl 0x5634746e7e48 <line:199:1, line:235:1> line:199:13 UnserializeTransaction 'void (TxType &, Stream &)' inline
| | |-ParmVarDecl 0x5634746e7c98 <col:36, col:44> col:44 referenced tx 'TxType &'
| | |-ParmVarDecl 0x5634746e7d38 <col:48, col:56> col:56 referenced s 'Stream &'
| | |-CompoundStmt 0x5634746e9040 <col:59, line:235:1>
| | | |-DeclStmt 0x5634746e80c8 <line:200:5, col:84>
| | | | `-VarDecl 0x5634746e7f60 <col:5, col:83> col:16 referenced fAllowWitness 'const bool' cinit
| | | |   `-UnaryOperator 0x5634746e80b0 <col:32, col:83> '<dependent type>' prefix '!' cannot overflow
| | | |     `-ParenExpr 0x5634746e8090 <col:33, col:83> '<dependent type>'
| | | |       `-BinaryOperator 0x5634746e8070 <col:34, col:51> '<dependent type>' '&'
| | | |         |-CallExpr 0x5634746e8030 <col:34, col:47> '<dependent type>'
| | | |         | `-CXXDependentScopeMemberExpr 0x5634746e7fe8 <col:34, col:36> '<dependent type>' lvalue .GetVersion
| | | |         |   `-DeclRefExpr 0x5634746e7fc8 <col:34> 'Stream' lvalue ParmVar 0x5634746e7d38 's' 'Stream &'
| | | |         `-DeclRefExpr 0x5634746e8050 <col:51> 'const int' lvalue Var 0x5634746dc8d8 'SERIALIZE_TRANSACTION_NO_WITNESS' 'const int'
| | | |-BinaryOperator 0x5634746e8168 <line:202:5, col:13> '<dependent type>' '>>'
| | | | |-DeclRefExpr 0x5634746e80e0 <col:5> 'Stream' lvalue ParmVar 0x5634746e7d38 's' 'Stream &'
| | | | `-CXXDependentScopeMemberExpr 0x5634746e8120 <col:10, col:13> '<dependent type>' lvalue .nVersion
| | | |   `-DeclRefExpr 0x5634746e8100 <col:10> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | |-DeclStmt 0x5634746e8240 <line:203:5, col:28>
| | | | `-VarDecl 0x5634746e81a0 <col:5, col:27> col:19 referenced flags 'unsigned char' cinit
| | | |   `-ImplicitCastExpr 0x5634746e8228 <col:27> 'unsigned char' <IntegralCast>
| | | |     `-IntegerLiteral 0x5634746e8208 <col:27> 'int' 0
| | | |-CallExpr 0x5634746e8308 <line:204:5, col:18> '<dependent type>'
| | | | `-CXXDependentScopeMemberExpr 0x5634746e82c0 <col:5, col:12> '<dependent type>' lvalue .clear
| | | |   `-CXXDependentScopeMemberExpr 0x5634746e8278 <col:5, col:8> '<dependent type>' lvalue .vin
| | | |     `-DeclRefExpr 0x5634746e8258 <col:5> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | |-CallExpr 0x5634746e83d8 <line:205:5, col:19> '<dependent type>'
| | | | `-CXXDependentScopeMemberExpr 0x5634746e8390 <col:5, col:13> '<dependent type>' lvalue .clear
| | | |   `-CXXDependentScopeMemberExpr 0x5634746e8348 <col:5, col:8> '<dependent type>' lvalue .vout
| | | |     `-DeclRefExpr 0x5634746e8328 <col:5> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | |-BinaryOperator 0x5634746e8480 <line:207:5, col:13> '<dependent type>' '>>'
| | | | |-DeclRefExpr 0x5634746e83f8 <col:5> 'Stream' lvalue ParmVar 0x5634746e7d38 's' 'Stream &'
| | | | `-CXXDependentScopeMemberExpr 0x5634746e8438 <col:10, col:13> '<dependent type>' lvalue .vin
| | | |   `-DeclRefExpr 0x5634746e8418 <col:10> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | |-IfStmt 0x5634746e8948 <line:208:5, line:218:5> has_else
| | | | |-BinaryOperator 0x5634746e85d0 <line:208:9, col:31> '<dependent type>' '&&'
| | | | | |-BinaryOperator 0x5634746e8590 <col:9, col:26> '<dependent type>' '=='
| | | | | | |-CallExpr 0x5634746e8550 <col:9, col:21> '<dependent type>'
| | | | | | | `-CXXDependentScopeMemberExpr 0x5634746e8508 <col:9, col:16> '<dependent type>' lvalue .size
| | | | | | |   `-CXXDependentScopeMemberExpr 0x5634746e84c0 <col:9, col:12> '<dependent type>' lvalue .vin
| | | | | | |     `-DeclRefExpr 0x5634746e84a0 <col:9> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | | | | `-IntegerLiteral 0x5634746e8570 <col:26> 'int' 0
| | | | | `-DeclRefExpr 0x5634746e85b0 <col:31> 'const bool' lvalue Var 0x5634746e7f60 'fAllowWitness' 'const bool'
| | | | |-CompoundStmt 0x5634746e8868 <col:46, line:215:5>
| | | | | |-BinaryOperator 0x5634746e8630 <line:210:9, col:14> '<dependent type>' '>>'
| | | | | | |-DeclRefExpr 0x5634746e85f0 <col:9> 'Stream' lvalue ParmVar 0x5634746e7d38 's' 'Stream &'
| | | | | | `-DeclRefExpr 0x5634746e8610 <col:14> 'unsigned char' lvalue Var 0x5634746e81a0 'flags' 'unsigned char'
| | | | | `-IfStmt 0x5634746e8850 <line:211:9, line:214:9>
| | | | |   |-BinaryOperator 0x5634746e86c0 <line:211:13, col:22> 'bool' '!='
| | | | |   | |-ImplicitCastExpr 0x5634746e86a8 <col:13> 'int' <IntegralCast>
| | | | |   | | `-ImplicitCastExpr 0x5634746e8690 <col:13> 'unsigned char' <LValueToRValue>
| | | | |   | |   `-DeclRefExpr 0x5634746e8650 <col:13> 'unsigned char' lvalue Var 0x5634746e81a0 'flags' 'unsigned char'
| | | | |   | `-IntegerLiteral 0x5634746e8670 <col:22> 'int' 0
| | | | |   `-CompoundStmt 0x5634746e8830 <col:25, line:214:9>
| | | | |     |-BinaryOperator 0x5634746e8768 <line:212:13, col:21> '<dependent type>' '>>'
| | | | |     | |-DeclRefExpr 0x5634746e86e0 <col:13> 'Stream' lvalue ParmVar 0x5634746e7d38 's' 'Stream &'
| | | | |     | `-CXXDependentScopeMemberExpr 0x5634746e8720 <col:18, col:21> '<dependent type>' lvalue .vin
| | | | |     |   `-DeclRefExpr 0x5634746e8700 <col:18> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | | |     `-BinaryOperator 0x5634746e8810 <line:213:13, col:21> '<dependent type>' '>>'
| | | | |       |-DeclRefExpr 0x5634746e8788 <col:13> 'Stream' lvalue ParmVar 0x5634746e7d38 's' 'Stream &'
| | | | |       `-CXXDependentScopeMemberExpr 0x5634746e87c8 <col:18, col:21> '<dependent type>' lvalue .vout
| | | | |         `-DeclRefExpr 0x5634746e87a8 <col:18> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | | `-CompoundStmt 0x5634746e8930 <line:215:12, line:218:5>
| | | |   `-BinaryOperator 0x5634746e8910 <line:217:9, col:17> '<dependent type>' '>>'
| | | |     |-DeclRefExpr 0x5634746e8888 <col:9> 'Stream' lvalue ParmVar 0x5634746e7d38 's' 'Stream &'
| | | |     `-CXXDependentScopeMemberExpr 0x5634746e88c8 <col:14, col:17> '<dependent type>' lvalue .vout
| | | |       `-DeclRefExpr 0x5634746e88a8 <col:14> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | |-IfStmt 0x5634746e8ec8 <line:219:5, line:229:5>
| | | | |-BinaryOperator 0x5634746e8a70 <line:219:9, col:24> 'bool' '&&'
| | | | | |-ImplicitCastExpr 0x5634746e8a40 <col:9, col:19> 'bool' <IntegralToBoolean>
| | | | | | `-ParenExpr 0x5634746e8a00 <col:9, col:19> 'int'
| | | | | |   `-BinaryOperator 0x5634746e89e0 <col:10, col:18> 'int' '&'
| | | | | |     |-ImplicitCastExpr 0x5634746e89c8 <col:10> 'int' <IntegralCast>
| | | | | |     | `-ImplicitCastExpr 0x5634746e89b0 <col:10> 'unsigned char' <LValueToRValue>
| | | | | |     |   `-DeclRefExpr 0x5634746e8970 <col:10> 'unsigned char' lvalue Var 0x5634746e81a0 'flags' 'unsigned char'
| | | | | |     `-IntegerLiteral 0x5634746e8990 <col:18> 'int' 1
| | | | | `-ImplicitCastExpr 0x5634746e8a58 <col:24> 'bool' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x5634746e8a20 <col:24> 'const bool' lvalue Var 0x5634746e7f60 'fAllowWitness' 'const bool'
| | | | `-CompoundStmt 0x5634746e8ea8 <col:39, line:229:5>
| | | |   |-CompoundAssignOperator 0x5634746e8ad0 <line:221:9, col:18> 'unsigned char' lvalue '^=' ComputeLHSTy='int' ComputeResultTy='int'
| | | |   | |-DeclRefExpr 0x5634746e8a90 <col:9> 'unsigned char' lvalue Var 0x5634746e81a0 'flags' 'unsigned char'
| | | |   | `-IntegerLiteral 0x5634746e8ab0 <col:18> 'int' 1
| | | |   `-IfStmt 0x5634746e8e90 <line:225:9, line:228:9>
| | | |     |-UnaryOperator 0x5634746e8db8 <line:225:13, col:28> '<dependent type>' prefix '!' cannot overflow
| | | |     | `-CallExpr 0x5634746e8d98 <col:14, col:28> '<dependent type>'
| | | |     |   `-CXXDependentScopeMemberExpr 0x5634746e8d50 <col:14, col:17> '<dependent type>' lvalue .HasWitness
| | | |     |     `-DeclRefExpr 0x5634746e8d30 <col:14> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | | |     `-CompoundStmt 0x5634746e8e80 <col:31, line:228:9>
| | | |-IfStmt 0x5634746e8f80 <line:230:5, line:233:5>
| | | | |-ImplicitCastExpr 0x5634746e8f18 <line:230:9> 'bool' <IntegralToBoolean>
| | | | | `-ImplicitCastExpr 0x5634746e8f00 <col:9> 'unsigned char' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x5634746e8ee0 <col:9> 'unsigned char' lvalue Var 0x5634746e81a0 'flags' 'unsigned char'
| | | | `-CompoundStmt 0x5634746e8f70 <col:16, line:233:5>
| | | `-BinaryOperator 0x5634746e9020 <line:234:5, col:13> '<dependent type>' '>>'
| | |   |-DeclRefExpr 0x5634746e8f98 <col:5> 'Stream' lvalue ParmVar 0x5634746e7d38 's' 'Stream &'
| | |   `-CXXDependentScopeMemberExpr 0x5634746e8fd8 <col:10, col:13> '<dependent type>' lvalue .nLockTime
| | |     `-DeclRefExpr 0x5634746e8fb8 <col:10> 'TxType' lvalue ParmVar 0x5634746e7c98 'tx' 'TxType &'
| | `-FullComment 0x563474781760 <line:182:3, line:196:23>
| |   |-ParagraphComment 0x5634747814b0 <line:182:3, line:186:23>
| |   | |-TextComment 0x563474781340 <line:182:3, col:42> Text=" Basic transaction serialization format:"
| |   | |-TextComment 0x563474781360 <line:183:3, col:21> Text=" - int32_t nVersion"
| |   | |-TextComment 0x563474781380 <line:184:3, col:16> Text=" - std::vector"
| |   | |-TextComment 0x5634747813a0 <col:17, col:22> Text="<CTxIn"
| |   | |-TextComment 0x5634747813c0 <col:23, col:27> Text="> vin"
| |   | |-TextComment 0x5634747813e0 <line:185:3, col:16> Text=" - std::vector"
| |   | |-TextComment 0x563474781400 <col:17, col:23> Text="<CTxOut"
| |   | |-TextComment 0x563474781420 <col:24, col:29> Text="> vout"
| |   | `-TextComment 0x563474781440 <line:186:3, col:23> Text=" - uint32_t nLockTime"
| |   `-ParagraphComment 0x563474781730 <line:188:3, line:196:23>
| |     |-TextComment 0x5634747814d0 <line:188:3, col:45> Text=" Extended transaction serialization format:"
| |     |-TextComment 0x5634747814f0 <line:189:3, col:21> Text=" - int32_t nVersion"
| |     |-TextComment 0x563474781510 <line:190:3, col:31> Text=" - unsigned char dummy = 0x00"
| |     |-TextComment 0x563474781530 <line:191:3, col:31> Text=" - unsigned char flags (!= 0)"
| |     |-TextComment 0x563474781550 <line:192:3, col:16> Text=" - std::vector"
| |     |-TextComment 0x563474781570 <col:17, col:22> Text="<CTxIn"
| |     |-TextComment 0x563474781590 <col:23, col:27> Text="> vin"
| |     |-TextComment 0x5634747815b0 <line:193:3, col:16> Text=" - std::vector"
| |     |-TextComment 0x5634747815d0 <col:17, col:23> Text="<CTxOut"
| |     |-TextComment 0x5634747815f0 <col:24, col:29> Text="> vout"
| |     |-TextComment 0x563474781610 <line:194:3, col:15> Text=" - if (flags "
| |     |-TextComment 0x563474781630 <col:16> Text="&"
| |     |-TextComment 0x563474781650 <col:17, col:20> Text=" 1):"
| |     |-TextComment 0x563474781670 <line:195:3, col:22> Text="   - CTxWitness wit;"
| |     `-TextComment 0x563474781690 <line:196:3, col:23> Text=" - uint32_t nLockTime"
| `-FullComment 0x5634747812d0 <line:182:3, line:196:23>
|   |-ParagraphComment 0x563474781020 <line:182:3, line:186:23>
|   | |-TextComment 0x563474780eb0 <line:182:3, col:42> Text=" Basic transaction serialization format:"
|   | |-TextComment 0x563474780ed0 <line:183:3, col:21> Text=" - int32_t nVersion"
|   | |-TextComment 0x563474780ef0 <line:184:3, col:16> Text=" - std::vector"
|   | |-TextComment 0x563474780f10 <col:17, col:22> Text="<CTxIn"
|   | |-TextComment 0x563474780f30 <col:23, col:27> Text="> vin"
|   | |-TextComment 0x563474780f50 <line:185:3, col:16> Text=" - std::vector"
|   | |-TextComment 0x563474780f70 <col:17, col:23> Text="<CTxOut"
|   | |-TextComment 0x563474780f90 <col:24, col:29> Text="> vout"
|   | `-TextComment 0x563474780fb0 <line:186:3, col:23> Text=" - uint32_t nLockTime"
|   `-ParagraphComment 0x5634747812a0 <line:188:3, line:196:23>
|     |-TextComment 0x563474781040 <line:188:3, col:45> Text=" Extended transaction serialization format:"
|     |-TextComment 0x563474781060 <line:189:3, col:21> Text=" - int32_t nVersion"
|     |-TextComment 0x563474781080 <line:190:3, col:31> Text=" - unsigned char dummy = 0x00"
|     |-TextComment 0x5634747810a0 <line:191:3, col:31> Text=" - unsigned char flags (!= 0)"
|     |-TextComment 0x5634747810c0 <line:192:3, col:16> Text=" - std::vector"
|     |-TextComment 0x5634747810e0 <col:17, col:22> Text="<CTxIn"
|     |-TextComment 0x563474781100 <col:23, col:27> Text="> vin"
|     |-TextComment 0x563474781120 <line:193:3, col:16> Text=" - std::vector"
|     |-TextComment 0x563474781140 <col:17, col:23> Text="<CTxOut"
|     |-TextComment 0x563474781160 <col:24, col:29> Text="> vout"
|     |-TextComment 0x563474781180 <line:194:3, col:15> Text=" - if (flags "
|     |-TextComment 0x5634747811a0 <col:16> Text="&"
|     |-TextComment 0x5634747811c0 <col:17, col:20> Text=" 1):"
|     |-TextComment 0x5634747811e0 <line:195:3, col:22> Text="   - CTxWitness wit;"
|     `-TextComment 0x563474781200 <line:196:3, col:23> Text=" - uint32_t nLockTime"
|-FunctionTemplateDecl 0x5634746e9438 <line:237:1, line:264:1> line:238:13 SerializeTransaction
| |-TemplateTypeParmDecl 0x5634746e90a0 <line:237:10, col:19> col:19 referenced typename depth 0 index 0 Stream
| |-TemplateTypeParmDecl 0x5634746e9118 <col:27, col:36> col:36 referenced typename depth 0 index 1 TxType
| `-FunctionDecl 0x5634746e9398 <line:238:1, line:264:1> line:238:13 SerializeTransaction 'void (const TxType &, Stream &)' inline
|   |-ParmVarDecl 0x5634746e91e8 <col:34, col:48> col:48 referenced tx 'const TxType &'
|   |-ParmVarDecl 0x5634746e9288 <col:52, col:60> col:60 referenced s 'Stream &'
|   `-CompoundStmt 0x5634746e9fa8 <col:63, line:264:1>
|     |-DeclStmt 0x5634746e9618 <line:239:5, col:84>
|     | `-VarDecl 0x5634746e94b0 <col:5, col:83> col:16 referenced fAllowWitness 'const bool' cinit
|     |   `-UnaryOperator 0x5634746e9600 <col:32, col:83> '<dependent type>' prefix '!' cannot overflow
|     |     `-ParenExpr 0x5634746e95e0 <col:33, col:83> '<dependent type>'
|     |       `-BinaryOperator 0x5634746e95c0 <col:34, col:51> '<dependent type>' '&'
|     |         |-CallExpr 0x5634746e9580 <col:34, col:47> '<dependent type>'
|     |         | `-CXXDependentScopeMemberExpr 0x5634746e9538 <col:34, col:36> '<dependent type>' lvalue .GetVersion
|     |         |   `-DeclRefExpr 0x5634746e9518 <col:34> 'Stream' lvalue ParmVar 0x5634746e9288 's' 'Stream &'
|     |         `-DeclRefExpr 0x5634746e95a0 <col:51> 'const int' lvalue Var 0x5634746dc8d8 'SERIALIZE_TRANSACTION_NO_WITNESS' 'const int'
|     |-BinaryOperator 0x5634746e96b8 <line:241:5, col:13> '<dependent type>' '<<'
|     | |-DeclRefExpr 0x5634746e9630 <col:5> 'Stream' lvalue ParmVar 0x5634746e9288 's' 'Stream &'
|     | `-CXXDependentScopeMemberExpr 0x5634746e9670 <col:10, col:13> '<dependent type>' lvalue .nVersion
|     |   `-DeclRefExpr 0x5634746e9650 <col:10> 'const TxType' lvalue ParmVar 0x5634746e91e8 'tx' 'const TxType &'
|     |-DeclStmt 0x5634746e9790 <line:242:5, col:28>
|     | `-VarDecl 0x5634746e96f0 <col:5, col:27> col:19 referenced flags 'unsigned char' cinit
|     |   `-ImplicitCastExpr 0x5634746e9778 <col:27> 'unsigned char' <IntegralCast>
|     |     `-IntegerLiteral 0x5634746e9758 <col:27> 'int' 0
|     |-IfStmt 0x5634746e9920 <line:244:5, line:249:5>
|     | |-ImplicitCastExpr 0x5634746e97c8 <line:244:9> 'bool' <LValueToRValue>
|     | | `-DeclRefExpr 0x5634746e97a8 <col:9> 'const bool' lvalue Var 0x5634746e94b0 'fAllowWitness' 'const bool'
|     | `-CompoundStmt 0x5634746e9908 <col:24, line:249:5>
|     |   `-IfStmt 0x5634746e98f0 <line:246:9, line:248:9>
|     |     |-CallExpr 0x5634746e9848 <line:246:13, col:27> '<dependent type>'
|     |     | `-CXXDependentScopeMemberExpr 0x5634746e9800 <col:13, col:16> '<dependent type>' lvalue .HasWitness
|     |     |   `-DeclRefExpr 0x5634746e97e0 <col:13> 'const TxType' lvalue ParmVar 0x5634746e91e8 'tx' 'const TxType &'
|     |     `-CompoundStmt 0x5634746e98d8 <col:30, line:248:9>
|     |       `-CompoundAssignOperator 0x5634746e98a8 <line:247:13, col:22> 'unsigned char' lvalue '|=' ComputeLHSTy='int' ComputeResultTy='int'
|     |         |-DeclRefExpr 0x5634746e9868 <col:13> 'unsigned char' lvalue Var 0x5634746e96f0 'flags' 'unsigned char'
|     |         `-IntegerLiteral 0x5634746e9888 <col:22> 'int' 1
|     |-IfStmt 0x5634746e9a40 <line:250:5, line:255:5>
|     | |-ImplicitCastExpr 0x5634746e9970 <line:250:9> 'bool' <IntegralToBoolean>
|     | | `-ImplicitCastExpr 0x5634746e9958 <col:9> 'unsigned char' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5634746e9938 <col:9> 'unsigned char' lvalue Var 0x5634746e96f0 'flags' 'unsigned char'
|     | `-CompoundStmt 0x5634746e9a28 <col:16, line:255:5>
|     |   `-BinaryOperator 0x5634746e9a08 <line:254:9, col:14> '<dependent type>' '<<'
|     |     |-DeclRefExpr 0x5634746e99c8 <col:9> 'Stream' lvalue ParmVar 0x5634746e9288 's' 'Stream &'
|     |     `-DeclRefExpr 0x5634746e99e8 <col:14> 'unsigned char' lvalue Var 0x5634746e96f0 'flags' 'unsigned char'
|     |-BinaryOperator 0x5634746e9ae0 <line:256:5, col:13> '<dependent type>' '<<'
|     | |-DeclRefExpr 0x5634746e9a58 <col:5> 'Stream' lvalue ParmVar 0x5634746e9288 's' 'Stream &'
|     | `-CXXDependentScopeMemberExpr 0x5634746e9a98 <col:10, col:13> '<dependent type>' lvalue .vin
|     |   `-DeclRefExpr 0x5634746e9a78 <col:10> 'const TxType' lvalue ParmVar 0x5634746e91e8 'tx' 'const TxType &'
|     |-BinaryOperator 0x5634746e9b88 <line:257:5, col:13> '<dependent type>' '<<'
|     | |-DeclRefExpr 0x5634746e9b00 <col:5> 'Stream' lvalue ParmVar 0x5634746e9288 's' 'Stream &'
|     | `-CXXDependentScopeMemberExpr 0x5634746e9b40 <col:10, col:13> '<dependent type>' lvalue .vout
|     |   `-DeclRefExpr 0x5634746e9b20 <col:10> 'const TxType' lvalue ParmVar 0x5634746e91e8 'tx' 'const TxType &'
|     |-IfStmt 0x5634746e9eb8 <line:258:5, line:262:5>
|     | |-ImplicitCastExpr 0x5634746e9c60 <line:258:9, col:17> 'bool' <IntegralToBoolean>
|     | | `-BinaryOperator 0x5634746e9c40 <col:9, col:17> 'int' '&'
|     | |   |-ImplicitCastExpr 0x5634746e9c28 <col:9> 'int' <IntegralCast>
|     | |   | `-ImplicitCastExpr 0x5634746e9c10 <col:9> 'unsigned char' <LValueToRValue>
|     | |   |   `-DeclRefExpr 0x5634746e9bd0 <col:9> 'unsigned char' lvalue Var 0x5634746e96f0 'flags' 'unsigned char'
|     | |   `-IntegerLiteral 0x5634746e9bf0 <col:17> 'int' 1
|     | `-CompoundStmt 0x5634746e9ea8 <col:20, line:262:5>
|     `-BinaryOperator 0x5634746e9f58 <line:263:5, col:13> '<dependent type>' '<<'
|       |-DeclRefExpr 0x5634746e9ed0 <col:5> 'Stream' lvalue ParmVar 0x5634746e9288 's' 'Stream &'
|       `-CXXDependentScopeMemberExpr 0x5634746e9f10 <col:10, col:13> '<dependent type>' lvalue .nLockTime
|         `-DeclRefExpr 0x5634746e9ef0 <col:10> 'const TxType' lvalue ParmVar 0x5634746e91e8 'tx' 'const TxType &'
|-CXXRecordDecl 0x5634746ea000 prev 0x56347464b160 <line:270:1, line:363:1> line:270:7 referenced invalid class CTransaction definition
| |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FullComment 0x5634747818d0 <line:267:4, line:268:66>
| | `-ParagraphComment 0x5634747818a0 <line:267:4, line:268:66>
| |   |-TextComment 0x563474781850 <line:267:4, col:77> Text=" The basic transaction that is broadcasted on the network and contained in"
| |   `-TextComment 0x563474781870 <line:268:3, col:66> Text=" blocks.  A transaction can contain multiple inputs and outputs."
| |-CXXRecordDecl 0x5634746ea0f8 <line:270:1, col:7> col:7 implicit referenced class CTransaction
| |-AccessSpecDecl 0x5634746ea188 <line:272:1, col:7> col:1 public
| |-VarDecl 0x5634746ea1d8 <line:274:5, col:26> col:26 invalid CURRENT_VERSION 'const int' static
| |-VarDecl 0x5634746ea288 <line:280:5, col:26> col:26 invalid MAX_STANDARD_VERSION 'const int' static
| |-FieldDecl 0x5634746ea378 <line:289:5, col:19> col:19 invalid nVersion 'const int'
| |-FieldDecl 0x5634746ea3f0 <line:290:5, col:20> col:20 invalid nLockTime 'const int'
| |-AccessSpecDecl 0x5634746ea468 <line:292:1, col:8> col:1 private
| |-FieldDecl 0x5634746ea4a0 <line:294:5, col:19> col:19 invalid hash 'const uint256'
| | `-FullComment 0x5634747819a0 <line:293:8, col:21>
| |   `-ParagraphComment 0x563474781970 <col:8, col:21>
| |     `-TextComment 0x563474781940 <col:8, col:21> Text=" Memory only. "
| |-FieldDecl 0x5634746ea500 <line:295:5, col:19> col:19 invalid m_witness_hash 'const uint256'
| |-CXXMethodDecl 0x5634746ea598 <line:297:5, col:27> col:13 ComputeHash 'uint256 () const'
| |-CXXMethodDecl 0x5634746ea658 <line:298:5, col:34> col:13 ComputeWitnessHash 'uint256 () const'
| |-AccessSpecDecl 0x5634746ea728 <line:300:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634746ea7b0 <line:302:5, col:18> col:5 CTransaction 'void ()'
| | `-FullComment 0x563474781a70 <line:301:8, col:60>
| |   `-ParagraphComment 0x563474781a40 <col:8, col:60>
| |     `-TextComment 0x563474781a10 <col:8, col:60> Text=" Construct a CTransaction that qualifies as IsNull() "
| |-CXXConstructorDecl 0x5634746ea988 <line:305:5, col:56> col:14 CTransaction 'void (const CMutableTransaction &)'
| | |-ParmVarDecl 0x5634746ea8c8 <col:27, col:54> col:54 tx 'const CMutableTransaction &'
| | `-FullComment 0x563474781b40 <line:304:8, col:59>
| |   `-ParagraphComment 0x563474781b10 <col:8, col:59>
| |     `-TextComment 0x563474781ae0 <col:8, col:59> Text=" Convert a CMutableTransaction into a CTransaction. "
| |-CXXConstructorDecl 0x5634746eab38 <line:306:5, col:42> col:5 referenced CTransaction 'void (CMutableTransaction &&)'
| | `-ParmVarDecl 0x5634746eaa78 <col:18, col:40> col:40 tx 'CMutableTransaction &&'
| |-FunctionTemplateDecl 0x5634746eae08 <line:308:5, line:311:5> line:309:17 Serialize
| | |-TemplateTypeParmDecl 0x5634746eabe8 <line:308:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746ead68 <line:309:5, line:311:5> line:309:17 Serialize 'void (Stream &) const' inline
| |   |-ParmVarDecl 0x5634746eaca8 <col:27, col:35> col:35 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746ebe18 <col:44, line:311:5>
| |     `-CallExpr 0x5634746ebde8 <line:310:9, col:38> '<dependent type>'
| |       |-UnresolvedLookupExpr 0x5634746ebd58 <col:9> '<overloaded function type>' lvalue (ADL) = 'SerializeTransaction' 0x5634746e9438
| |       |-UnaryOperator 0x5634746ebdb0 <col:30, col:31> 'const CTransaction' lvalue prefix '*' cannot overflow
| |       | `-CXXThisExpr 0x5634746ebda0 <col:31> 'const CTransaction *' this
| |       `-DeclRefExpr 0x5634746ebdc8 <col:37> 'Stream' lvalue ParmVar 0x5634746eaca8 's' 'Stream &'
| |-FunctionTemplateDecl 0x5634746eb190 <line:315:5, line:316:100> col:5 CTransaction
| | |-TemplateTypeParmDecl 0x5634746eae98 <line:315:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | |-CXXConstructorDecl 0x5634746eb0e8 <line:316:5, col:100> col:5 CTransaction 'void (deserialize_type, Stream &)'
| | | |-ParmVarDecl 0x5634746eaf30 <col:18> col:34 'deserialize_type'
| | | |-ParmVarDecl 0x5634746eafd8 <col:36, col:44> col:44 referenced s 'Stream &'
| | | |-CXXCtorInitializer 'CTransaction'
| | | | `-ParenListExpr 0x5634746ebeb0 <col:61, col:97> 'NULL TYPE'
| | | |   `-CXXUnresolvedConstructExpr 0x5634746ebe80 <col:62, col:96> 'CMutableTransaction' 'CMutableTransaction'
| | | |     |-DeclRefExpr 0x5634746ebe40 <col:82> 'const deserialize_type' lvalue Var 0x563474559460 'deserialize' 'const deserialize_type'
| | | |     `-DeclRefExpr 0x5634746ebe60 <col:95> 'Stream' lvalue ParmVar 0x5634746eafd8 's' 'Stream &'
| | | |-CompoundStmt 0x5634746ec390 <col:99, col:100>
| | | `-FullComment 0x563474781e20 <line:313:8, line:314:86>
| | |   `-ParagraphComment 0x563474781df0 <line:313:8, line:314:86>
| | |     |-TextComment 0x563474781da0 <line:313:8, col:84> Text=" This deserializing constructor is provided instead of an Unserialize method."
| | |     `-TextComment 0x563474781dc0 <line:314:7, col:86> Text="  Unserialize is not possible, since it would require overwriting const fields. "
| | `-FullComment 0x563474781d30 <line:313:8, line:314:86>
| |   `-ParagraphComment 0x563474781d00 <line:313:8, line:314:86>
| |     |-TextComment 0x563474781cb0 <line:313:8, col:84> Text=" This deserializing constructor is provided instead of an Unserialize method."
| |     `-TextComment 0x563474781cd0 <line:314:7, col:86> Text="  Unserialize is not possible, since it would require overwriting const fields. "
| |-CXXMethodDecl 0x5634746eb218 <line:318:5, line:320:5> line:318:10 IsNull 'bool () const'
| | `-CompoundStmt 0x5634746ec3a0 <col:25, line:320:5>
| |-CXXMethodDecl 0x5634746eb2d8 <line:322:5, col:51> col:20 GetHash 'const uint256 &() const'
| | `-CompoundStmt 0x5634746ec3c0 <col:36, col:51>
| |-CXXMethodDecl 0x5634746eb398 <line:323:5, col:68> col:20 GetWitnessHash 'const uint256 &() const'
| | `-CompoundStmt 0x5634746ec3e0 <col:43, col:68>
| |-CXXMethodDecl 0x5634746eb458 <line:326:5, col:27> col:13 GetValueOut 'CAmount () const'
| |-CXXMethodDecl 0x5634746eb550 <line:335:5, col:33> col:18 GetTotalSize 'unsigned int () const'
| | `-FullComment 0x563474781fc0 <line:331:7, line:333:46>
| |   |-ParagraphComment 0x563474781f10 <line:331:7, line:333:7>
| |   | |-TextComment 0x563474781e90 <line:331:7, col:71> Text=" Get the total transaction size in bytes, including witness data."
| |   | |-TextComment 0x563474781eb0 <line:332:7, col:49> Text=" "Total Size" defined in BIP141 and BIP144."
| |   | `-TextComment 0x563474781ed0 <line:333:7> Text=" "
| |   `-BlockCommandComment 0x563474781f30 <col:8, col:46> Name="return"
| |     `-ParagraphComment 0x563474781f90 <col:15, col:46>
| |       `-TextComment 0x563474781f60 <col:15, col:46> Text=" Total transaction size in bytes"
| |-CXXMethodDecl 0x5634746eb610 <line:337:5, line:340:5> line:337:10 IsCoinBase 'bool () const'
| | `-CompoundStmt 0x5634746ec430 <line:338:5, line:340:5>
| |-FriendDecl 0x5634746eb8c8 <line:342:5, line:345:5> line:342:17
| | `-FunctionDecl 0x5634746eb808 parent 0x5634744cb688 <col:5, line:345:5> line:342:17 operator== 'bool (const CTransaction &, const CTransaction &)'
| |   |-ParmVarDecl 0x5634746eb6c0 <col:28, col:48> col:48 used a 'const CTransaction &'
| |   |-ParmVarDecl 0x5634746eb738 <col:51, col:71> col:71 used b 'const CTransaction &'
| |   `-CompoundStmt 0x5634746ec480 <line:343:5, line:345:5>
| |-FriendDecl 0x5634746ebae8 <line:347:5, line:350:5> line:347:17
| | `-FunctionDecl 0x5634746eba28 parent 0x5634744cb688 <col:5, line:350:5> line:347:17 operator!= 'bool (const CTransaction &, const CTransaction &)'
| |   |-ParmVarDecl 0x5634746eb918 <col:28, col:48> col:48 used a 'const CTransaction &'
| |   |-ParmVarDecl 0x5634746eb990 <col:51, col:71> col:71 used b 'const CTransaction &'
| |   `-CompoundStmt 0x5634746ec4d0 <line:348:5, line:350:5>
| |-CXXMethodDecl 0x5634746ebbe0 <line:352:5, col:28> col:17 invalid ToString 'int () const'
| |-CXXMethodDecl 0x5634746ebca0 <line:354:5, line:362:5> line:354:10 HasWitness 'bool () const'
| | `-CompoundStmt 0x5634746ec648 <line:355:5, line:362:5>
| |   `-ReturnStmt 0x5634746ec638 <line:361:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5634746ec628 <col:16> 'bool' false
| |-CXXConstructorDecl 0x5634746ebee0 <line:270:7> col:7 implicit constexpr CTransaction 'void (const CTransaction &)' inline default trivial noexcept-unevaluated 0x5634746ebee0
| | `-ParmVarDecl 0x5634746ebff8 <col:7> col:7 'const CTransaction &'
| |-CXXConstructorDecl 0x5634746ec098 <col:7> col:7 implicit constexpr CTransaction 'void (CTransaction &&)' inline default trivial noexcept-unevaluated 0x5634746ec098
| | `-ParmVarDecl 0x5634746ec1a8 <col:7> col:7 'CTransaction &&'
| `-CXXDestructorDecl 0x5634746ec2a8 <col:7> col:7 implicit referenced ~CTransaction 'void () noexcept' inline default trivial
|-CXXRecordDecl 0x5634746ec688 prev 0x5634746e6a18 <line:366:1, line:406:1> line:366:8 invalid struct CMutableTransaction definition
| |-DefinitionData empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474782090 <line:365:4, col:39>
| | `-ParagraphComment 0x563474782060 <col:4, col:39>
| |   `-TextComment 0x563474782030 <col:4, col:39> Text=" A mutable version of CTransaction. "
| |-CXXRecordDecl 0x5634746ec780 <line:366:1, col:8> col:8 implicit referenced struct CMutableTransaction
| |-FieldDecl 0x5634746ec878 <line:370:5, col:13> col:13 invalid nVersion 'int'
| |-FieldDecl 0x5634746ec8f0 <line:371:5, col:14> col:14 invalid nLockTime 'int'
| |-CXXConstructorDecl 0x5634746ec9a0 <line:373:5, col:25> col:5 CMutableTransaction 'void ()'
| |-CXXConstructorDecl 0x5634746ecae8 <line:374:5, col:56> col:14 CMutableTransaction 'void (const CTransaction &)'
| | `-ParmVarDecl 0x5634746eca58 <col:34, col:54> col:54 tx 'const CTransaction &'
| |-FunctionTemplateDecl 0x5634746ecde8 <line:376:5, line:379:5> line:377:17 Serialize
| | |-TemplateTypeParmDecl 0x5634746ecb98 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746ecd48 <line:377:5, line:379:5> line:377:17 Serialize 'void (Stream &) const' inline
| |   |-ParmVarDecl 0x5634746ecc58 <col:27, col:35> col:35 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746ed670 <col:44, line:379:5>
| |     `-CallExpr 0x5634746ed640 <line:378:9, col:38> '<dependent type>'
| |       |-UnresolvedLookupExpr 0x5634746ed5b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'SerializeTransaction' 0x5634746e9438
| |       |-UnaryOperator 0x5634746ed608 <col:30, col:31> 'const CMutableTransaction' lvalue prefix '*' cannot overflow
| |       | `-CXXThisExpr 0x5634746ed5f8 <col:31> 'const CMutableTransaction *' this
| |       `-DeclRefExpr 0x5634746ed620 <col:37> 'Stream' lvalue ParmVar 0x5634746ecc58 's' 'Stream &'
| |-FunctionTemplateDecl 0x5634746ed068 <line:382:5, line:385:5> line:383:17 Unserialize
| | |-TemplateTypeParmDecl 0x5634746ece48 <line:382:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | `-CXXMethodDecl 0x5634746ecfc8 <line:383:5, line:385:5> line:383:17 Unserialize 'void (Stream &)' inline
| |   |-ParmVarDecl 0x5634746ecf08 <col:29, col:37> col:37 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746ed748 <col:40, line:385:5>
| |     `-CallExpr 0x5634746ed718 <line:384:9, col:40> '<dependent type>'
| |       |-UnresolvedLookupExpr 0x5634746ed688 <col:9> '<overloaded function type>' lvalue (ADL) = 'UnserializeTransaction' 0x5634746e7ee8
| |       |-UnaryOperator 0x5634746ed6e0 <col:32, col:33> 'CMutableTransaction' lvalue prefix '*' cannot overflow
| |       | `-CXXThisExpr 0x5634746ed6d0 <col:33> 'CMutableTransaction *' this
| |       `-DeclRefExpr 0x5634746ed6f8 <col:39> 'Stream' lvalue ParmVar 0x5634746ecf08 's' 'Stream &'
| |-FunctionTemplateDecl 0x5634746ed380 <line:387:5, line:390:5> line:388:5 CMutableTransaction
| | |-TemplateTypeParmDecl 0x5634746ed0c8 <line:387:15, col:24> col:24 referenced typename depth 0 index 0 Stream
| | `-CXXConstructorDecl 0x5634746ed2d8 <line:388:5, line:390:5> line:388:5 CMutableTransaction 'void (deserialize_type, Stream &)'
| |   |-ParmVarDecl 0x5634746ed160 <col:25> col:41 'deserialize_type'
| |   |-ParmVarDecl 0x5634746ed208 <col:43, col:51> col:51 referenced s 'Stream &'
| |   `-CompoundStmt 0x5634746ed810 <col:54, line:390:5>
| |     `-CallExpr 0x5634746ed7e8 <line:389:9, col:22> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5634746ed770 <col:9> '<bound member function type>' lvalue
| |       `-DeclRefExpr 0x5634746ed7c8 <col:21> 'Stream' lvalue ParmVar 0x5634746ed208 's' 'Stream &'
| |-CXXMethodDecl 0x5634746ed438 <line:395:5, col:23> col:13 GetHash 'uint256 () const'
| | `-FullComment 0x563474782300 <line:392:8, line:393:80>
| |   `-ParagraphComment 0x5634747822d0 <line:392:8, line:393:80>
| |     |-TextComment 0x563474782280 <line:392:8, col:77> Text=" Compute the hash of this CMutableTransaction. This is computed on the"
| |     `-TextComment 0x5634747822a0 <line:393:7, col:80> Text=" fly, as opposed to GetHash() in CTransaction, which uses a cached result."
| `-CXXMethodDecl 0x5634746ed4f8 <line:397:5, line:405:5> line:397:10 HasWitness 'bool () const'
|   `-CompoundStmt 0x5634746ed990 <line:398:5, line:405:5>
|     `-ReturnStmt 0x5634746ed980 <line:404:9, col:16>
|       `-CXXBoolLiteralExpr 0x5634746ed970 <col:16> 'bool' false
|-FunctionDecl 0x5634746eda00 <line:409:1, col:101> col:31 invalid MakeTransactionRef 'int ()' static inline
| `-CompoundStmt 0x5634746edac0 <col:52, col:101>
|-FunctionTemplateDecl 0x5634746ee910 <line:410:1, col:155> col:54 invalid MakeTransactionRef
| |-TemplateTypeParmDecl 0x5634746edad0 <col:11, col:20> col:20 referenced typename depth 0 index 0 Tx
| `-FunctionDecl 0x5634746ee870 <col:24, col:155> col:54 invalid MakeTransactionRef 'int (Tx &&)' static inline
|   |-ParmVarDecl 0x5634746ee770 <col:73, col:78> col:78 referenced txIn 'Tx &&'
|   `-CompoundStmt 0x5634746ee9d0 <col:84, col:155>
|-CXXRecordDecl 0x5634746ee9e0 prev 0x5634745bfed0 <bitcoin/src/scheduler.h:37:1, line:85:1> line:37:7 referenced invalid class CScheduler definition
| |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5634746eead8 <col:1, col:7> col:7 implicit referenced class CScheduler
| |-AccessSpecDecl 0x5634746eeb68 <line:39:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634746eebf0 <line:40:5, col:16> col:5 CScheduler 'void ()'
| |-CXXDestructorDecl 0x5634746eece0 <line:41:5, col:17> col:5 ~CScheduler 'void ()' noexcept-unevaluated 0x5634746eece0
| |-CXXMethodDecl 0x5634746eef40 <line:46:5, col:107> col:10 invalid schedule 'void (int, int)'
| | |-ParmVarDecl 0x5634746eee18 <col:19, col:28> col:28 invalid f 'int'
| | `-ParmVarDecl 0x5634746eeea8 <col:31, col:72> col:71 invalid t 'int' cinit
| |   `-OpaqueValueExpr 0x5634746efcc8 <col:72> 'int'
| |-CXXMethodDecl 0x5634746ef140 <line:49:5, col:63> col:10 invalid scheduleFromNow 'void (int, int)'
| | |-ParmVarDecl 0x5634746ef018 <col:26, col:35> col:35 invalid f 'int'
| | `-ParmVarDecl 0x5634746ef0a8 <col:38, col:46> col:46 invalid deltaMilliSeconds 'int'
| |-CXXMethodDecl 0x5634746ef340 <line:56:5, col:61> col:10 invalid scheduleEvery 'void (int, int)'
| | |-ParmVarDecl 0x5634746ef218 <col:24, col:33> col:33 invalid f 'int'
| | `-ParmVarDecl 0x5634746ef2a8 <col:36, col:44> col:44 invalid deltaMilliSeconds 'int'
| |-CXXMethodDecl 0x5634746ef410 <line:62:5, col:23> col:10 serviceQueue 'void ()'
| |-CXXMethodDecl 0x5634746ef550 <line:67:5, col:31> col:10 stop 'void (bool)'
| | `-ParmVarDecl 0x5634746ef4c0 <col:15, col:26> col:20 drain 'bool' cinit
| |   `-CXXBoolLiteralExpr 0x5634746efce0 <col:26> 'bool' false
| |-CXXMethodDecl 0x5634746ef7d0 <line:71:5, line:72:72> line:71:12 invalid getQueueInfo 'int (int &, int &) const'
| | |-ParmVarDecl 0x5634746ef630 <col:25, col:66> col:66 invalid first 'int &'
| | `-ParmVarDecl 0x5634746ef6c0 <line:72:25, col:66> col:66 invalid last 'int &'
| |-CXXMethodDecl 0x5634746ef8a0 <line:75:5, col:37> col:10 AreThreadsServicingQueue 'bool () const'
| |-AccessSpecDecl 0x5634746ef940 <line:77:1, col:8> col:1 private
| |-FieldDecl 0x5634746ef9a0 <line:78:70> col:70 invalid taskQueue 'int'
| |-FieldDecl 0x5634746efa18 <line:79:5, col:31> col:31 invalid newTaskScheduled 'int'
| |-FieldDecl 0x5634746efa90 <line:80:5, col:26> col:26 invalid newTaskMutex 'int' mutable
| |-FieldDecl 0x5634746efaf8 <line:81:5, col:9> col:9 nThreadsServicingQueue 'int'
| |-FieldDecl 0x5634746efb58 <line:82:5, col:10> col:10 referenced stopRequested 'bool'
| |-FieldDecl 0x5634746efbb8 <line:83:5, col:10> col:10 referenced stopWhenEmpty 'bool'
| `-CXXMethodDecl 0x5634746efc28 <line:84:5, col:93> col:10 shouldStop 'bool () const'
|   `-CompoundStmt 0x5634746efd80 <col:29, col:93>
|-CXXRecordDecl 0x5634746efdb8 <line:97:1, line:124:1> line:97:7 invalid class SingleThreadedSchedulerClient definition
| |-DefinitionData standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474782560 <line:88:3, line:95:13>
| | `-ParagraphComment 0x563474782530 <line:88:3, line:95:13>
| |   |-TextComment 0x5634747823f0 <line:88:3, col:68> Text=" Class used by CScheduler clients which may schedule multiple jobs"
| |   |-TextComment 0x563474782410 <line:89:3, col:68> Text=" which are required to be run serially. Jobs may not be run on the"
| |   |-TextComment 0x563474782430 <line:90:3, col:48> Text=" same thread, but no two jobs will be executed"
| |   |-TextComment 0x563474782450 <line:91:3, col:65> Text=" at the same time and memory will be release-acquire consistent"
| |   |-TextComment 0x563474782470 <line:92:3, col:74> Text=" (the scheduler will internally do an acquire before invoking a callback"
| |   |-TextComment 0x563474782490 <line:93:3, col:75> Text=" as well as a release at the end). In practice this means that a callback"
| |   |-TextComment 0x5634747824b0 <line:94:3, col:80> Text=" B() will be able to observe all of the effects of callback A() which executed"
| |   `-TextComment 0x5634747824d0 <line:95:3, col:13> Text=" before it."
| |-CXXRecordDecl 0x5634746efed8 <line:97:1, col:7> col:7 implicit referenced class SingleThreadedSchedulerClient
| |-AccessSpecDecl 0x5634746eff68 <line:98:1, col:8> col:1 private
| |-FieldDecl 0x5634746effa0 <line:99:5, col:17> col:17 m_pscheduler 'CScheduler *'
| |-FieldDecl 0x5634746f0000 <line:101:5, col:22> col:22 referenced m_cs_callbacks_pending 'CCriticalSection':'int'
| |-FieldDecl 0x5634746f00a8 <line:102:39> col:39 invalid m_callbacks_pending 'int'
| |-FieldDecl 0x5634746f0108 <line:103:5, col:71> col:10 m_are_callbacks_running 'bool'
| | |-CXXBoolLiteralExpr 0x5634746f36e0 <col:71> 'bool' false
| | `-GuardedByAttr 0x5634746f3698 <bitcoin/src/threadsafety.h:18:38, col:50>
| |   `-MemberExpr 0x5634746f3668 <bitcoin/src/scheduler.h:103:45> 'CCriticalSection':'int' lvalue ->m_cs_callbacks_pending 0x5634746f0000 non_odr_use_unevaluated
| |     `-CXXThisExpr 0x5634746f3658 <col:45> 'SingleThreadedSchedulerClient *' implicit this
| |-CXXMethodDecl 0x5634746f01a8 <line:105:5, col:36> col:10 MaybeScheduleProcessQueue 'void ()'
| |-CXXMethodDecl 0x5634746f0268 <line:106:5, col:23> col:10 ProcessQueue 'void ()'
| |-AccessSpecDecl 0x5634746f0308 <line:108:1, col:7> col:1 public
| |-CXXConstructorDecl 0x5634746f0418 <line:109:5, col:100> col:14 SingleThreadedSchedulerClient 'void (CScheduler *)'
| | |-ParmVarDecl 0x5634746f0340 <col:44, col:56> col:56 used pschedulerIn 'CScheduler *'
| | |-CXXCtorInitializer Field 0x5634746effa0 'm_pscheduler' 'CScheduler *'
| | | `-ImplicitCastExpr 0x5634746f3730 <col:85> 'CScheduler *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5634746f36f0 <col:85> 'CScheduler *' lvalue ParmVar 0x5634746f0340 'pschedulerIn' 'CScheduler *'
| | |-CXXCtorInitializer Field 0x5634746f0108 'm_are_callbacks_running' 'bool'
| | | `-CXXDefaultInitExpr 0x5634746f3770 <col:14> 'bool'
| | `-CompoundStmt 0x5634746f37c8 <col:99, col:100>
| |-CXXMethodDecl 0x5634746f0548 <line:117:5, col:55> col:10 AddToProcessQueue 'void ()'
| | `-FullComment 0x5634747826a0 <line:112:7, line:115:35>
| |   `-ParagraphComment 0x563474782670 <line:112:7, line:115:35>
| |     |-TextComment 0x5634747825d0 <line:112:7, col:69> Text=" Add a callback to be executed. Callbacks are executed serially"
| |     |-TextComment 0x5634747825f0 <line:113:7, col:76> Text=" and memory is release-acquire consistent between callback executions."
| |     |-TextComment 0x563474782610 <line:114:7, col:80> Text=" Practically, this means that callbacks can behave as if they are executed"
| |     `-TextComment 0x563474782630 <line:115:7, col:35> Text=" in order by a single thread."
| |-CXXMethodDecl 0x5634746f0608 <line:121:5, col:21> col:10 EmptyQueue 'void ()'
| `-CXXMethodDecl 0x5634746f35a0 <line:123:5, col:29> col:12 invalid CallbacksPending 'int ()'
|-CXXRecordDecl 0x5634746f37d8 <bitcoin/src/ui_interface.h:14:1, col:7> col:7 referenced class CBlockIndex
|-NamespaceDecl 0x5634746f3890 <line:15:1, line:19:1> line:15:11 boost
| `-NamespaceDecl 0x5634746f3900 <line:16:1, line:18:1> line:16:11 signals2
|   `-CXXRecordDecl 0x5634746f3970 <line:17:1, col:7> col:7 referenced class connection
|-NamespaceDecl 0x5634746f3a20 <line:21:1, line:23:1> line:21:11 interfaces
| `-CXXRecordDecl 0x5634746f3a90 <line:22:1, col:7> col:7 referenced class Wallet
|-EnumDecl 0x5634746f3b68 <line:26:1, line:31:1> line:26:6 ChangeType
| |-FullComment 0x563474782770 <line:25:4, col:51>
| | `-ParagraphComment 0x563474782740 <col:4, col:51>
| |   `-TextComment 0x563474782710 <col:4, col:51> Text=" General change type (added, updated, removed). "
| |-EnumConstantDecl 0x5634746f3c30 <line:28:5> col:5 CT_NEW 'ChangeType'
| |-EnumConstantDecl 0x5634746f3c80 <line:29:5> col:5 CT_UPDATED 'ChangeType'
| `-EnumConstantDecl 0x5634746f3cd0 <line:30:5> col:5 CT_DELETED 'ChangeType'
|-CXXRecordDecl 0x5634746f3d48 prev 0x5634746c1ae0 <line:34:1, line:126:1> line:34:7 referenced class CClientUIInterface definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474782840 <line:33:4, col:34>
| | `-ParagraphComment 0x563474782810 <col:4, col:34>
| |   `-TextComment 0x5634747827e0 <col:4, col:34> Text=" Signals for UI communication. "
| |-CXXRecordDecl 0x5634746f3e40 <line:34:1, col:7> col:7 implicit class CClientUIInterface
| |-AccessSpecDecl 0x5634746f3ef8 <line:36:1, col:7> col:1 public
| |-EnumDecl 0x5634746f3f20 <line:38:5, line:82:5> line:38:10 MessageBoxFlags
| | |-FullComment 0x563474782910 <line:37:8, col:59>
| | | `-ParagraphComment 0x5634747828e0 <col:8, col:59>
| | |   `-TextComment 0x5634747828b0 <col:8, col:59> Text=" Flags for CClientUIInterface::ThreadSafeMessageBox "
| | |-EnumConstantDecl 0x5634746f4020 <line:40:9, col:31> col:9 referenced ICON_INFORMATION 'CClientUIInterface::MessageBoxFlags'
| | | `-ImplicitCastExpr 0x5634746f53a8 <col:31> 'unsigned int' <IntegralCast>
| | |   `-ConstantExpr 0x5634746f4000 <col:31> 'int' 0
| | |     `-IntegerLiteral 0x5634746f3fe0 <col:31> 'int' 0
| | |-EnumConstantDecl 0x5634746f4110 <line:41:9, col:39> col:9 referenced ICON_WARNING 'CClientUIInterface::MessageBoxFlags'
| | | `-ConstantExpr 0x5634746f40f0 <col:31, col:39> 'unsigned int' 1
| | |   `-ParenExpr 0x5634746f40d0 <col:31, col:39> 'unsigned int'
| | |     `-BinaryOperator 0x5634746f40b0 <col:32, col:38> 'unsigned int' '<<'
| | |       |-IntegerLiteral 0x5634746f4070 <col:32> 'unsigned int' 1
| | |       `-IntegerLiteral 0x5634746f4090 <col:38> 'int' 0
| | |-EnumConstantDecl 0x5634746f4200 <line:42:9, col:39> col:9 referenced ICON_ERROR 'CClientUIInterface::MessageBoxFlags'
| | | `-ConstantExpr 0x5634746f41e0 <col:31, col:39> 'unsigned int' 2
| | |   `-ParenExpr 0x5634746f41c0 <col:31, col:39> 'unsigned int'
| | |     `-BinaryOperator 0x5634746f41a0 <col:32, col:38> 'unsigned int' '<<'
| | |       |-IntegerLiteral 0x5634746f4160 <col:32> 'unsigned int' 1
| | |       `-IntegerLiteral 0x5634746f4180 <col:38> 'int' 1
| | |-EnumConstantDecl 0x5634746f4370 <line:47:9, col:66> col:9 ICON_MASK 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4350 <col:21, col:66> 'unsigned int' 3
| | | | `-ParenExpr 0x5634746f4330 <col:21, col:66> 'unsigned int'
| | | |   `-BinaryOperator 0x5634746f4310 <col:22, col:56> 'unsigned int' '|'
| | | |     |-BinaryOperator 0x5634746f42d0 <col:22, col:41> 'unsigned int' '|'
| | | |     | |-ImplicitCastExpr 0x5634746f42b8 <col:22> 'unsigned int' <IntegralCast>
| | | |     | | `-DeclRefExpr 0x5634746f4278 <col:22> 'int' EnumConstant 0x5634746f4020 'ICON_INFORMATION' 'CClientUIInterface::MessageBoxFlags'
| | | |     | `-DeclRefExpr 0x5634746f4298 <col:41> 'unsigned int' EnumConstant 0x5634746f4110 'ICON_WARNING' 'CClientUIInterface::MessageBoxFlags'
| | | |     `-DeclRefExpr 0x5634746f42f0 <col:56> 'unsigned int' EnumConstant 0x5634746f4200 'ICON_ERROR' 'CClientUIInterface::MessageBoxFlags'
| | | `-FullComment 0x563474782a00 <line:44:11, line:45:66>
| | |   `-ParagraphComment 0x5634747829d0 <line:44:11, line:45:66>
| | |     |-TextComment 0x563474782980 <line:44:11, col:77> Text=" Mask of all available icons in CClientUIInterface::MessageBoxFlags"
| | |     `-TextComment 0x5634747829a0 <line:45:11, col:66> Text=" This needs to be updated, when icons are changed there!"
| | |-EnumConstantDecl 0x5634746f4428 <line:50:9, col:23> col:9 referenced BTN_OK 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4408 <col:23> 'unsigned int' 1024
| | | | `-IntegerLiteral 0x5634746f43e8 <col:23> 'unsigned int' 1024
| | | `-FullComment 0x563474782ad0 <line:49:12, col:98>
| | |   `-ParagraphComment 0x563474782aa0 <col:12, col:98>
| | |     `-TextComment 0x563474782a70 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f44b8 <line:51:9, col:23> col:9 referenced BTN_YES 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4498 <col:23> 'unsigned int' 16384
| | | | `-IntegerLiteral 0x5634746f4478 <col:23> 'unsigned int' 16384
| | | `-FullComment 0x563474782ba0 <line:49:12, col:98>
| | |   `-ParagraphComment 0x563474782b70 <col:12, col:98>
| | |     `-TextComment 0x563474782b40 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f4548 <line:52:9, col:23> col:9 referenced BTN_NO 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4528 <col:23> 'unsigned int' 65536
| | | | `-IntegerLiteral 0x5634746f4508 <col:23> 'unsigned int' 65536
| | | `-FullComment 0x563474785350 <line:49:12, col:98>
| | |   `-ParagraphComment 0x563474785320 <col:12, col:98>
| | |     `-TextComment 0x5634747852f0 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f45d8 <line:53:9, col:23> col:9 referenced BTN_ABORT 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f45b8 <col:23> 'unsigned int' 262144
| | | | `-IntegerLiteral 0x5634746f4598 <col:23> 'unsigned int' 262144
| | | `-FullComment 0x563474785420 <line:49:12, col:98>
| | |   `-ParagraphComment 0x5634747853f0 <col:12, col:98>
| | |     `-TextComment 0x5634747853c0 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f4668 <line:54:9, col:23> col:9 referenced BTN_RETRY 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4648 <col:23> 'unsigned int' 524288
| | | | `-IntegerLiteral 0x5634746f4628 <col:23> 'unsigned int' 524288
| | | `-FullComment 0x5634747854f0 <line:49:12, col:98>
| | |   `-ParagraphComment 0x5634747854c0 <col:12, col:98>
| | |     `-TextComment 0x563474785490 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f46f8 <line:55:9, col:23> col:9 referenced BTN_IGNORE 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f46d8 <col:23> 'unsigned int' 1048576
| | | | `-IntegerLiteral 0x5634746f46b8 <col:23> 'unsigned int' 1048576
| | | `-FullComment 0x5634747855c0 <line:49:12, col:98>
| | |   `-ParagraphComment 0x563474785590 <col:12, col:98>
| | |     `-TextComment 0x563474785560 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f4788 <line:56:9, col:23> col:9 referenced BTN_CLOSE 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4768 <col:23> 'unsigned int' 2097152
| | | | `-IntegerLiteral 0x5634746f4748 <col:23> 'unsigned int' 2097152
| | | `-FullComment 0x563474785690 <line:49:12, col:98>
| | |   `-ParagraphComment 0x563474785660 <col:12, col:98>
| | |     `-TextComment 0x563474785630 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f4818 <line:57:9, col:23> col:9 referenced BTN_CANCEL 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f47f8 <col:23> 'unsigned int' 4194304
| | | | `-IntegerLiteral 0x5634746f47d8 <col:23> 'unsigned int' 4194304
| | | `-FullComment 0x563474785760 <line:49:12, col:98>
| | |   `-ParagraphComment 0x563474785730 <col:12, col:98>
| | |     `-TextComment 0x563474785700 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f48a8 <line:58:9, col:23> col:9 referenced BTN_DISCARD 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4888 <col:23> 'unsigned int' 8388608
| | | | `-IntegerLiteral 0x5634746f4868 <col:23> 'unsigned int' 8388608
| | | `-FullComment 0x563474785830 <line:49:12, col:98>
| | |   `-ParagraphComment 0x563474785800 <col:12, col:98>
| | |     `-TextComment 0x5634747857d0 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f4938 <line:59:9, col:23> col:9 referenced BTN_HELP 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4918 <col:23> 'unsigned int' 16777216
| | | | `-IntegerLiteral 0x5634746f48f8 <col:23> 'unsigned int' 16777216
| | | `-FullComment 0x563474785900 <line:49:12, col:98>
| | |   `-ParagraphComment 0x5634747858d0 <col:12, col:98>
| | |     `-TextComment 0x5634747858a0 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f49c8 <line:60:9, col:23> col:9 referenced BTN_APPLY 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f49a8 <col:23> 'unsigned int' 33554432
| | | | `-IntegerLiteral 0x5634746f4988 <col:23> 'unsigned int' 33554432
| | | `-FullComment 0x5634747859d0 <line:49:12, col:98>
| | |   `-ParagraphComment 0x5634747859a0 <col:12, col:98>
| | |     `-TextComment 0x563474785970 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f4a58 <line:61:9, col:23> col:9 referenced BTN_RESET 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4a38 <col:23> 'unsigned int' 67108864
| | | | `-IntegerLiteral 0x5634746f4a18 <col:23> 'unsigned int' 67108864
| | | `-FullComment 0x563474785aa0 <line:49:12, col:98>
| | |   `-ParagraphComment 0x563474785a70 <col:12, col:98>
| | |     `-TextComment 0x563474785a40 <col:12, col:98> Text=" These values are taken from qmessagebox.h "enum StandardButton" to be directly usable "
| | |-EnumConstantDecl 0x5634746f4df8 <line:66:9, line:67:92> line:66:9 BTN_MASK 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4dd8 <col:20, line:67:92> 'unsigned int' 134038528
| | | | `-ParenExpr 0x5634746f4db8 <line:66:20, line:67:92> 'unsigned int'
| | | |   `-BinaryOperator 0x5634746f4d98 <line:66:21, line:67:83> 'unsigned int' '|'
| | | |     |-BinaryOperator 0x5634746f4d58 <line:66:21, line:67:71> 'unsigned int' '|'
| | | |     | |-BinaryOperator 0x5634746f4d18 <line:66:21, line:67:60> 'unsigned int' '|'
| | | |     | | |-BinaryOperator 0x5634746f4cd8 <line:66:21, line:67:46> 'unsigned int' '|'
| | | |     | | | |-BinaryOperator 0x5634746f4c98 <line:66:21, line:67:33> 'unsigned int' '|'
| | | |     | | | | |-BinaryOperator 0x5634746f4c58 <line:66:21, line:67:21> 'unsigned int' '|'
| | | |     | | | | | |-BinaryOperator 0x5634746f4c18 <line:66:21, col:73> 'unsigned int' '|'
| | | |     | | | | | | |-BinaryOperator 0x5634746f4bd8 <col:21, col:61> 'unsigned int' '|'
| | | |     | | | | | | | |-BinaryOperator 0x5634746f4b98 <col:21, col:49> 'unsigned int' '|'
| | | |     | | | | | | | | |-BinaryOperator 0x5634746f4b58 <col:21, col:40> 'unsigned int' '|'
| | | |     | | | | | | | | | |-BinaryOperator 0x5634746f4b18 <col:21, col:30> 'unsigned int' '|'
| | | |     | | | | | | | | | | |-DeclRefExpr 0x5634746f4ad8 <col:21> 'unsigned int' EnumConstant 0x5634746f4428 'BTN_OK' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | | | | | | | | | `-DeclRefExpr 0x5634746f4af8 <col:30> 'unsigned int' EnumConstant 0x5634746f44b8 'BTN_YES' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | | | | | | | | `-DeclRefExpr 0x5634746f4b38 <col:40> 'unsigned int' EnumConstant 0x5634746f4548 'BTN_NO' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | | | | | | | `-DeclRefExpr 0x5634746f4b78 <col:49> 'unsigned int' EnumConstant 0x5634746f45d8 'BTN_ABORT' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | | | | | | `-DeclRefExpr 0x5634746f4bb8 <col:61> 'unsigned int' EnumConstant 0x5634746f4668 'BTN_RETRY' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | | | | | `-DeclRefExpr 0x5634746f4bf8 <col:73> 'unsigned int' EnumConstant 0x5634746f46f8 'BTN_IGNORE' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | | | | `-DeclRefExpr 0x5634746f4c38 <line:67:21> 'unsigned int' EnumConstant 0x5634746f4788 'BTN_CLOSE' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | | | `-DeclRefExpr 0x5634746f4c78 <col:33> 'unsigned int' EnumConstant 0x5634746f4818 'BTN_CANCEL' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | | `-DeclRefExpr 0x5634746f4cb8 <col:46> 'unsigned int' EnumConstant 0x5634746f48a8 'BTN_DISCARD' 'CClientUIInterface::MessageBoxFlags'
| | | |     | | `-DeclRefExpr 0x5634746f4cf8 <col:60> 'unsigned int' EnumConstant 0x5634746f4938 'BTN_HELP' 'CClientUIInterface::MessageBoxFlags'
| | | |     | `-DeclRefExpr 0x5634746f4d38 <col:71> 'unsigned int' EnumConstant 0x5634746f49c8 'BTN_APPLY' 'CClientUIInterface::MessageBoxFlags'
| | | |     `-DeclRefExpr 0x5634746f4d78 <col:83> 'unsigned int' EnumConstant 0x5634746f4a58 'BTN_RESET' 'CClientUIInterface::MessageBoxFlags'
| | | `-FullComment 0x563474785b90 <line:63:11, line:64:68>
| | |   `-ParagraphComment 0x563474785b60 <line:63:11, line:64:68>
| | |     |-TextComment 0x563474785b10 <line:63:11, col:79> Text=" Mask of all available buttons in CClientUIInterface::MessageBoxFlags"
| | |     `-TextComment 0x563474785b30 <line:64:11, col:68> Text=" This needs to be updated, when buttons are changed there!"
| | |-EnumConstantDecl 0x5634746f4eb8 <line:70:9, col:31> col:9 referenced MODAL 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4e98 <col:31> 'unsigned int' 268435456
| | | | `-IntegerLiteral 0x5634746f4e78 <col:31> 'unsigned int' 268435456
| | | `-FullComment 0x563474785c60 <line:69:12, col:80>
| | |   `-ParagraphComment 0x563474785c30 <col:12, col:80>
| | |     `-TextComment 0x563474785c00 <col:12, col:80> Text=" Force blocking, modal message box dialog (not just OS notification) "
| | |-EnumConstantDecl 0x5634746f4f78 <line:73:9, col:31> col:9 MSG_NOPREFIX 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f4f58 <col:31> 'unsigned int' 536870912
| | | | `-IntegerLiteral 0x5634746f4f38 <col:31> 'unsigned int' 536870912
| | | `-FullComment 0x563474785d30 <line:72:12, col:48>
| | |   `-ParagraphComment 0x563474785d00 <col:12, col:48>
| | |     `-TextComment 0x563474785cd0 <col:12, col:48> Text=" Do not prepend error/warning prefix "
| | |-EnumConstantDecl 0x5634746f5038 <line:76:9, col:31> col:9 SECURE 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f5018 <col:31> 'unsigned int' 1073741824
| | | | `-IntegerLiteral 0x5634746f4ff8 <col:31> 'unsigned int' 1073741824
| | | `-FullComment 0x563474785e00 <line:75:12, col:58>
| | |   `-ParagraphComment 0x563474785dd0 <col:12, col:58>
| | |     `-TextComment 0x563474785da0 <col:12, col:58> Text=" Do not print contents of message to debug log "
| | |-EnumConstantDecl 0x5634746f50f8 <line:79:9, col:27> col:9 MSG_INFORMATION 'CClientUIInterface::MessageBoxFlags'
| | | |-ImplicitCastExpr 0x5634746f53c0 <col:27> 'unsigned int' <IntegralCast>
| | | | `-ConstantExpr 0x5634746f50d8 <col:27> 'int' 0
| | | |   `-DeclRefExpr 0x5634746f50b8 <col:27> 'int' EnumConstant 0x5634746f4020 'ICON_INFORMATION' 'CClientUIInterface::MessageBoxFlags'
| | | `-FullComment 0x563474785ed0 <line:78:12, col:68>
| | |   `-ParagraphComment 0x563474785ea0 <col:12, col:68>
| | |     `-TextComment 0x563474785e70 <col:12, col:68> Text=" Predefined combinations for certain default usage cases "
| | |-EnumConstantDecl 0x5634746f5228 <line:80:9, col:53> col:9 MSG_WARNING 'CClientUIInterface::MessageBoxFlags'
| | | |-ConstantExpr 0x5634746f5208 <col:23, col:53> 'unsigned int' 268436481
| | | | `-ParenExpr 0x5634746f51e8 <col:23, col:53> 'unsigned int'
| | | |   `-BinaryOperator 0x5634746f51c8 <col:24, col:48> 'unsigned int' '|'
| | | |     |-BinaryOperator 0x5634746f5188 <col:24, col:39> 'unsigned int' '|'
| | | |     | |-DeclRefExpr 0x5634746f5148 <col:24> 'unsigned int' EnumConstant 0x5634746f4110 'ICON_WARNING' 'CClientUIInterface::MessageBoxFlags'
| | | |     | `-DeclRefExpr 0x5634746f5168 <col:39> 'unsigned int' EnumConstant 0x5634746f4428 'BTN_OK' 'CClientUIInterface::MessageBoxFlags'
| | | |     `-DeclRefExpr 0x5634746f51a8 <col:48> 'unsigned int' EnumConstant 0x5634746f4eb8 'MODAL' 'CClientUIInterface::MessageBoxFlags'
| | | `-FullComment 0x563474785fa0 <line:78:12, col:68>
| | |   `-ParagraphComment 0x563474785f70 <col:12, col:68>
| | |     `-TextComment 0x563474785f40 <col:12, col:68> Text=" Predefined combinations for certain default usage cases "
| | `-EnumConstantDecl 0x5634746f5358 <line:81:9, col:49> col:9 MSG_ERROR 'CClientUIInterface::MessageBoxFlags'
| |   |-ConstantExpr 0x5634746f5338 <col:21, col:49> 'unsigned int' 268436482
| |   | `-ParenExpr 0x5634746f5318 <col:21, col:49> 'unsigned int'
| |   |   `-BinaryOperator 0x5634746f52f8 <col:22, col:44> 'unsigned int' '|'
| |   |     |-BinaryOperator 0x5634746f52b8 <col:22, col:35> 'unsigned int' '|'
| |   |     | |-DeclRefExpr 0x5634746f5278 <col:22> 'unsigned int' EnumConstant 0x5634746f4200 'ICON_ERROR' 'CClientUIInterface::MessageBoxFlags'
| |   |     | `-DeclRefExpr 0x5634746f5298 <col:35> 'unsigned int' EnumConstant 0x5634746f4428 'BTN_OK' 'CClientUIInterface::MessageBoxFlags'
| |   |     `-DeclRefExpr 0x5634746f52d8 <col:44> 'unsigned int' EnumConstant 0x5634746f4eb8 'MODAL' 'CClientUIInterface::MessageBoxFlags'
| |   `-FullComment 0x563474786070 <line:78:12, col:68>
| |     `-ParagraphComment 0x563474786040 <col:12, col:68>
| |       `-TextComment 0x563474786010 <col:12, col:68> Text=" Predefined combinations for certain default usage cases "
| |-CXXMethodDecl 0x5634746f9cd8 <line:90:52, line:85:34> line:90:30 invalid ThreadSafeMessageBox 'bool (const int &, const int &, unsigned int)'
| | |-ParmVarDecl 0x5634746f5430 <col:58, col:77> col:77 invalid message 'const int &'
| | |-ParmVarDecl 0x5634746f54c0 <col:86, col:105> col:105 invalid caption 'const int &'
| | `-ParmVarDecl 0x5634746f9bf0 <col:114, col:127> col:127 style 'unsigned int'
| |-TypeAliasDecl 0x5634746f9f68 <line:86:5, col:47> <scratch space>:129:1 referenced ThreadSafeMessageBoxSig 'bool (const int &, const int &, unsigned int)'
| | `-FunctionProtoType 0x5634746f9c60 'bool (const int &, const int &, unsigned int)' cdecl
| |   |-BuiltinType 0x5634744cb700 'bool'
| |   |-LValueReferenceType 0x563474507700 'const int &'
| |   | `-QualType 0x5634744cb781 'const int' const
| |   |   `-BuiltinType 0x5634744cb780 'int'
| |   |-LValueReferenceType 0x563474507700 'const int &'
| |   | `-QualType 0x5634744cb781 'const int' const
| |   |   `-BuiltinType 0x5634744cb780 'int'
| |   `-BuiltinType 0x5634744cb820 'unsigned int'
| |-CXXMethodDecl 0x5634746fa128 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:130:1 ThreadSafeMessageBox_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fa4b8 <bitcoin/src/ui_interface.h:93:50, line:85:34> line:93:30 invalid ThreadSafeQuestion 'bool (const int &, const int &, const int &, unsigned int)'
| | |-ParmVarDecl 0x5634746fa220 <col:56, col:75> col:75 invalid message 'const int &'
| | |-ParmVarDecl 0x5634746fa2b0 <col:84, col:103> col:103 invalid noninteractive_message 'const int &'
| | |-ParmVarDecl 0x5634746fa340 <col:127, col:146> col:146 invalid caption 'const int &'
| | `-ParmVarDecl 0x5634746fa3c0 <col:155, col:168> col:168 style 'unsigned int'
| |-TypeAliasDecl 0x5634746fa7e8 <line:86:5, col:47> <scratch space>:132:1 referenced ThreadSafeQuestionSig 'bool (const int &, const int &, const int &, unsigned int)'
| | `-FunctionProtoType 0x5634746fa430 'bool (const int &, const int &, const int &, unsigned int)' cdecl
| |   |-BuiltinType 0x5634744cb700 'bool'
| |   |-LValueReferenceType 0x563474507700 'const int &'
| |   | `-QualType 0x5634744cb781 'const int' const
| |   |   `-BuiltinType 0x5634744cb780 'int'
| |   |-LValueReferenceType 0x563474507700 'const int &'
| |   | `-QualType 0x5634744cb781 'const int' const
| |   |   `-BuiltinType 0x5634744cb780 'int'
| |   |-LValueReferenceType 0x563474507700 'const int &'
| |   | `-QualType 0x5634744cb781 'const int' const
| |   |   `-BuiltinType 0x5634744cb780 'int'
| |   `-BuiltinType 0x5634744cb820 'unsigned int'
| |-CXXMethodDecl 0x5634746fa8f0 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:133:1 ThreadSafeQuestion_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746faa70 <bitcoin/src/ui_interface.h:96:43, line:85:34> line:96:30 invalid InitMessage 'void (const int &)'
| | `-ParmVarDecl 0x5634746fa9e0 <col:49, col:68> col:68 invalid message 'const int &'
| |-TypeAliasDecl 0x5634746fabd0 <line:86:5, col:47> <scratch space>:135:1 referenced InitMessageSig 'void (const int &)'
| | `-FunctionProtoType 0x563474508070 'void (const int &)' cdecl
| |   |-BuiltinType 0x5634744cb6e0 'void'
| |   `-LValueReferenceType 0x563474507700 'const int &'
| |     `-QualType 0x5634744cb781 'const int' const
| |       `-BuiltinType 0x5634744cb780 'int'
| |-CXXMethodDecl 0x5634746face0 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:136:1 InitMessage_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fae50 <bitcoin/src/ui_interface.h:99:59, line:85:34> line:99:30 used NotifyNumConnectionsChanged 'void (int)'
| | `-ParmVarDecl 0x5634746fadc0 <col:65, col:69> col:69 newNumConnections 'int'
| |-TypeAliasDecl 0x5634746fafa0 <line:86:5, col:47> <scratch space>:138:1 referenced NotifyNumConnectionsChangedSig 'void (int)'
| | `-FunctionProtoType 0x5634745b7fd0 'void (int)' cdecl
| |   |-BuiltinType 0x5634744cb6e0 'void'
| |   `-BuiltinType 0x5634744cb780 'int'
| |-CXXMethodDecl 0x5634746fb0b0 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:139:1 NotifyNumConnectionsChanged_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fb218 <bitcoin/src/ui_interface.h:102:58, line:85:34> line:102:30 NotifyNetworkActiveChanged 'void (bool)'
| | `-ParmVarDecl 0x5634746fb188 <col:64, col:69> col:69 networkActive 'bool'
| |-TypeAliasDecl 0x5634746fb360 <line:86:5, col:47> <scratch space>:141:1 referenced NotifyNetworkActiveChangedSig 'void (bool)'
| | `-FunctionProtoType 0x5634745e2e10 'void (bool)' cdecl
| |   |-BuiltinType 0x5634744cb6e0 'void'
| |   `-BuiltinType 0x5634744cb700 'bool'
| |-CXXMethodDecl 0x5634746fb470 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:142:1 NotifyNetworkActiveChanged_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fb558 <bitcoin/src/ui_interface.h:107:50, line:85:34> line:107:30 NotifyAlertChanged 'void ()'
| |-TypeAliasDecl 0x5634746fb618 <line:86:5, col:47> <scratch space>:144:1 referenced NotifyAlertChangedSig 'void ()'
| | `-FunctionProtoType 0x563474507b90 'void ()' cdecl
| |   `-BuiltinType 0x5634744cb6e0 'void'
| |-CXXMethodDecl 0x5634746fb720 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:145:1 NotifyAlertChanged_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fb8a8 <bitcoin/src/ui_interface.h:110:42, line:85:34> line:110:30 LoadWallet 'void ()'
| |-TypeAliasDecl 0x5634746fb9e0 <line:86:5, col:47> <scratch space>:147:1 referenced LoadWalletSig 'void':'void'
| | `-ParenType 0x5634746fb9a0 'void' sugar
| |   `-BuiltinType 0x5634744cb6e0 'void'
| |-CXXMethodDecl 0x5634746fbaf0 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:148:1 LoadWallet_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fbdd8 <bitcoin/src/ui_interface.h:116:44, line:85:34> line:116:30 invalid ShowProgress 'void (const int &, int, bool)'
| | |-ParmVarDecl 0x5634746fbc00 <col:50, col:69> col:69 invalid title 'const int &'
| | |-ParmVarDecl 0x5634746fbc80 <col:76, col:80> col:80 nProgress 'int'
| | `-ParmVarDecl 0x5634746fbcf8 <col:91, col:96> col:96 resume_possible 'bool'
| |-TypeAliasDecl 0x5634746fc050 <line:86:5, col:47> <scratch space>:150:1 referenced ShowProgressSig 'void (const int &, int, bool)'
| | `-FunctionProtoType 0x5634746fbd60 'void (const int &, int, bool)' cdecl
| |   |-BuiltinType 0x5634744cb6e0 'void'
| |   |-LValueReferenceType 0x563474507700 'const int &'
| |   | `-QualType 0x5634744cb781 'const int' const
| |   |   `-BuiltinType 0x5634744cb780 'int'
| |   |-BuiltinType 0x5634744cb780 'int'
| |   `-BuiltinType 0x5634744cb700 'bool'
| |-CXXMethodDecl 0x5634746fc160 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:151:1 ShowProgress_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fc3a8 <bitcoin/src/ui_interface.h:119:46, line:85:34> line:119:30 NotifyBlockTip 'void (bool, const CBlockIndex *)'
| | |-ParmVarDecl 0x5634746fc238 <col:52> col:56 'bool'
| | `-ParmVarDecl 0x5634746fc2d8 <col:58, col:75> line:85:34 'const CBlockIndex *'
| |-TypeAliasDecl 0x5634746fc578 <line:86:5, col:47> <scratch space>:153:1 referenced NotifyBlockTipSig 'void (bool, const CBlockIndex *)'
| | `-FunctionProtoType 0x5634746fc340 'void (bool, const CBlockIndex *)' cdecl
| |   |-BuiltinType 0x5634744cb6e0 'void'
| |   |-BuiltinType 0x5634744cb700 'bool'
| |   `-PointerType 0x5634746fc2a0 'const CBlockIndex *'
| |     `-QualType 0x5634746f3871 'const CBlockIndex' const
| |       `-RecordType 0x5634746f3870 'CBlockIndex'
| |         `-CXXRecord 0x5634746f37d8 'CBlockIndex'
| |-CXXMethodDecl 0x5634746fc680 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:154:1 NotifyBlockTip_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fc868 <bitcoin/src/ui_interface.h:122:47, line:85:34> line:122:30 NotifyHeaderTip 'void (bool, const CBlockIndex *)'
| | |-ParmVarDecl 0x5634746fc758 <col:53> col:57 'bool'
| | `-ParmVarDecl 0x5634746fc7d0 <col:59, col:76> line:85:34 'const CBlockIndex *'
| |-TypeAliasDecl 0x5634746fca38 <line:86:5, col:47> <scratch space>:156:1 referenced NotifyHeaderTipSig 'void (bool, const CBlockIndex *)'
| | `-FunctionProtoType 0x5634746fc340 'void (bool, const CBlockIndex *)' cdecl
| |   |-BuiltinType 0x5634744cb6e0 'void'
| |   |-BuiltinType 0x5634744cb700 'bool'
| |   `-PointerType 0x5634746fc2a0 'const CBlockIndex *'
| |     `-QualType 0x5634746f3871 'const CBlockIndex' const
| |       `-RecordType 0x5634746f3870 'CBlockIndex'
| |         `-CXXRecord 0x5634746f37d8 'CBlockIndex'
| |-CXXMethodDecl 0x5634746fcb40 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:157:1 NotifyHeaderTip_connect 'boost::signals2::connection ()'
| |-CXXMethodDecl 0x5634746fcca0 <bitcoin/src/ui_interface.h:125:49, line:85:34> line:125:30 BannedListChanged 'void ()'
| |-TypeAliasDecl 0x5634746fcdd8 <line:86:5, col:47> <scratch space>:159:1 referenced BannedListChangedSig 'void ()'
| | `-FunctionProtoType 0x563474507b90 'void ()' cdecl
| |   `-BuiltinType 0x5634744cb6e0 'void'
| `-CXXMethodDecl 0x5634746fcee0 <bitcoin/src/ui_interface.h:87:5, col:89> <scratch space>:160:1 BannedListChanged_connect 'boost::signals2::connection ()'
|-FunctionDecl 0x5634746fd080 <bitcoin/src/ui_interface.h:129:1, col:40> col:6 invalid InitWarning 'void (const int &)'
| |-ParmVarDecl 0x5634746fcff0 <col:18, col:37> col:37 invalid str 'const int &'
| `-FullComment 0x563474786140 <line:128:4, col:26>
|   `-ParagraphComment 0x563474786110 <col:4, col:26>
|     `-TextComment 0x5634747860e0 <col:4, col:26> Text=" Show warning message *"
|-FunctionDecl 0x5634746fd210 <line:132:1, col:38> col:6 invalid InitError 'bool (const int &)'
| |-ParmVarDecl 0x5634746fd180 <col:16, col:35> col:35 invalid str 'const int &'
| `-FullComment 0x563474786210 <line:131:4, col:24>
|   `-ParagraphComment 0x5634747861e0 <col:4, col:24>
|     `-TextComment 0x5634747861b0 <col:4, col:24> Text=" Show error message *"
|-VarDecl 0x5634746fd2c8 <line:134:1, col:27> col:27 uiInterface 'CClientUIInterface' extern
|-EnumDecl 0x5634746fd388 <bitcoin/src/util/strencodings.h:22:1, line:28:1> line:22:6 SafeChars
| |-FullComment 0x5634747862e0 <line:21:4, col:29>
| | `-ParagraphComment 0x5634747862b0 <col:4, col:29>
| |   `-TextComment 0x563474786280 <col:4, col:29> Text=" Used by SanitizeString() "
| |-EnumConstantDecl 0x5634746fd450 <line:24:5> col:5 referenced SAFE_CHARS_DEFAULT 'SafeChars'
| | `-FullComment 0x5634747863b0 <col:29, col:58>
| |   `-ParagraphComment 0x563474786380 <col:29, col:58>
| |     `-TextComment 0x563474786350 <col:29, col:58> Text=" The full set of allowed chars"
| |-EnumConstantDecl 0x5634746fd4c8 <line:25:5> col:5 SAFE_CHARS_UA_COMMENT 'SafeChars'
| | `-FullComment 0x563474786480 <col:32, col:47>
| |   `-ParagraphComment 0x563474786450 <col:32, col:47>
| |     `-TextComment 0x563474786420 <col:32, col:47> Text=" BIP-0014 subset"
| |-EnumConstantDecl 0x5634746fd548 <line:26:5> col:5 SAFE_CHARS_FILENAME 'SafeChars'
| | `-FullComment 0x563474786550 <col:30, col:56>
| |   `-ParagraphComment 0x563474786520 <col:30, col:56>
| |     `-TextComment 0x5634747864f0 <col:30, col:56> Text=" Chars allowed in filenames"
| `-EnumConstantDecl 0x5634746fd5c8 <line:27:5> col:5 SAFE_CHARS_URI 'SafeChars'
|   `-FullComment 0x563474786620 <col:25, col:57>
|     `-ParagraphComment 0x5634747865f0 <col:25, col:57>
|       `-TextComment 0x5634747865c0 <col:25, col:57> Text=" Chars allowed in URIs (RFC 3986)"
|-FunctionDecl 0x5634746fd840 <line:37:1, col:81> col:13 invalid SanitizeString 'int (const int &, int)'
| |-ParmVarDecl 0x5634746fd6b0 <col:28, col:47> col:47 invalid str 'const int &'
| |-ParmVarDecl 0x5634746fd730 <col:52, col:63> col:56 rule 'int' cinit
| | `-ImplicitCastExpr 0x5634746fd7b8 <col:63> 'int' <IntegralCast>
| |   `-DeclRefExpr 0x5634746fd798 <col:63> 'SafeChars' EnumConstant 0x5634746fd450 'SAFE_CHARS_DEFAULT' 'SafeChars'
| `-FullComment 0x5634747869c0 <line:31:2, line:35:53>
|   |-ParagraphComment 0x563474786760 <line:31:2, line:33:2>
|   | |-TextComment 0x563474786690 <line:31:2, col:76> Text=" Remove unsafe chars. Safe chars chosen to allow simple messages/URLs/email"
|   | |-TextComment 0x5634747866b0 <line:32:2, col:70> Text=" addresses, but avoid anything even possibly remotely dangerous like "
|   | |-TextComment 0x5634747866d0 <col:71> Text="&"
|   | |-TextComment 0x5634747866f0 <col:72, col:76> Text=" or >"
|   | `-TextComment 0x563474786710 <line:33:2> Text=" "
|   |-ParamCommandComment 0x563474786780 <col:3, line:34:2> [in] explicitly Param="str" ParamIndex=0
|   | `-ParagraphComment 0x563474786830 <line:33:17, line:34:2>
|   |   |-TextComment 0x5634747867e0 <line:33:17, col:42> Text="    The string to sanitize"
|   |   `-TextComment 0x563474786800 <line:34:2> Text=" "
|   |-ParamCommandComment 0x563474786850 <col:3, line:35:2> [in] explicitly Param="rule" ParamIndex=1
|   | `-ParagraphComment 0x563474786900 <line:34:18, line:35:2>
|   |   |-TextComment 0x5634747868b0 <line:34:18, col:80> Text="   The set of safe chars to choose (default: least restrictive)"
|   |   `-TextComment 0x5634747868d0 <line:35:2> Text=" "
|   `-BlockCommandComment 0x563474786920 <col:3, col:53> Name="return"
|     `-ParagraphComment 0x563474786980 <col:10, col:53>
|       `-TextComment 0x563474786950 <col:10, col:53> Text="           A new string without unsafe chars"
|-FunctionDecl 0x5634746fda20 <line:40:1, col:28> col:13 HexDigit 'signed char (char)'
| `-ParmVarDecl 0x5634746fd950 <col:22, col:27> col:27 c 'char'
|-FunctionDecl 0x5634747020e0 <line:43:1, col:34> col:6 invalid IsHex 'bool (const int &)'
| `-ParmVarDecl 0x5634746fdaf0 <col:12, col:31> col:31 invalid str 'const int &'
|-FunctionDecl 0x563474702270 <line:47:1, col:40> col:6 invalid IsHexNumber 'bool (const int &)'
| |-ParmVarDecl 0x5634747021e0 <col:18, col:37> col:37 invalid str 'const int &'
| `-FullComment 0x563474786a90 <line:45:2, col:74>
|   `-ParagraphComment 0x563474786a60 <col:2, col:74>
|     `-TextComment 0x563474786a30 <col:2, col:74> Text=" Return true if the string is a hex number, optionally prefixed with "0x""
|-FunctionDecl 0x563474702500 <line:49:1, col:76> col:13 invalid DecodeBase64 'int (const int &, bool *)'
| |-ParmVarDecl 0x563474702378 <col:26, col:45> col:45 invalid str 'const int &'
| `-ParmVarDecl 0x5634747023f8 <col:50, col:69> col:56 pf_invalid 'bool *' cinit
|   `-ImplicitCastExpr 0x563474702470 <col:69> 'bool *' <NullToPointer>
|     `-CXXNullPtrLiteralExpr 0x563474702460 <col:69> 'nullptr_t'
|-FunctionDecl 0x563474702740 <line:50:1, col:62> col:13 invalid EncodeBase64 'int (const unsigned char *, int)'
| |-ParmVarDecl 0x5634747025d8 <col:26, col:47> col:47 pch 'const unsigned char *'
| `-ParmVarDecl 0x563474702668 <col:52, col:59> col:59 invalid len 'int'
|-FunctionDecl 0x5634747028c0 <line:51:1, col:48> col:13 invalid EncodeBase64 'int (const int &)'
| `-ParmVarDecl 0x563474702828 <col:26, col:45> col:45 invalid str 'const int &'
|-FunctionDecl 0x563474702b10 <line:53:1, col:76> col:13 invalid DecodeBase32 'int (const int &, bool *)'
| |-ParmVarDecl 0x5634747029c8 <col:26, col:45> col:45 invalid str 'const int &'
| `-ParmVarDecl 0x563474702a48 <col:50, col:69> col:56 pf_invalid 'bool *' cinit
|   `-ImplicitCastExpr 0x563474702ac0 <col:69> 'bool *' <NullToPointer>
|     `-CXXNullPtrLiteralExpr 0x563474702ab0 <col:69> 'nullptr_t'
|-FunctionDecl 0x563474702d18 <line:54:1, col:62> col:13 invalid EncodeBase32 'int (const unsigned char *, int)'
| |-ParmVarDecl 0x563474702be8 <col:26, col:47> col:47 pch 'const unsigned char *'
| `-ParmVarDecl 0x563474702c78 <col:52, col:59> col:59 invalid len 'int'
|-FunctionDecl 0x563474702e98 <line:55:1, col:48> col:13 invalid EncodeBase32 'int (const int &)'
| `-ParmVarDecl 0x563474702e00 <col:26, col:45> col:45 invalid str 'const int &'
|-FunctionDecl 0x563474703158 <line:57:1, col:70> col:6 invalid SplitHostPort 'void (int, int &, int &)'
| |-ParmVarDecl 0x563474702f68 <col:20, col:32> col:32 invalid in 'int'
| |-ParmVarDecl 0x563474702fe8 <col:36, col:41> col:41 portOut 'int &'
| `-ParmVarDecl 0x563474703078 <col:50, col:63> col:63 invalid hostOut 'int &'
|-FunctionDecl 0x5634747032e0 <line:58:1, col:31> col:13 invalid i64tostr 'int (int)'
| `-ParmVarDecl 0x563474703248 <col:22, col:30> col:30 invalid n 'int'
|-FunctionDecl 0x563474703448 <line:59:1, col:25> col:13 invalid itostr 'int (int)'
| `-ParmVarDecl 0x5634747033b0 <col:20, col:24> col:24 n 'int'
|-FunctionDecl 0x5634747035e0 <line:60:1, col:31> col:9 invalid atoi64 'int (const char *)'
| `-ParmVarDecl 0x563474703518 <col:16, col:28> col:28 psz 'const char *'
|-FunctionDecl 0x563474703758 <line:61:1, col:38> col:9 invalid atoi64 'int (const int &)'
| `-ParmVarDecl 0x5634747036c0 <col:16, col:35> col:35 invalid str 'const int &'
|-FunctionDecl 0x5634747038c0 <line:62:1, col:32> col:5 invalid atoi 'int (const int &)'
| `-ParmVarDecl 0x563474703828 <col:10, col:29> col:29 invalid str 'const int &'
|-FunctionDecl 0x563474703a38 <line:69:1, line:72:1> line:69:16 constexpr IsDigit 'bool (char)'
| |-ParmVarDecl 0x5634747039a8 <col:24, col:29> col:29 used c 'char'
| |-CompoundStmt 0x563474703c78 <line:70:1, line:72:1>
| | `-ReturnStmt 0x563474703c40 <line:71:5, col:29>
| |   `-BinaryOperator 0x563474703c20 <col:12, col:29> 'bool' '&&'
| |     |-BinaryOperator 0x563474703b60 <col:12, col:17> 'bool' '>='
| |     | |-ImplicitCastExpr 0x563474703b30 <col:12> 'int' <IntegralCast>
| |     | | `-ImplicitCastExpr 0x563474703b18 <col:12> 'char' <LValueToRValue>
| |     | |   `-DeclRefExpr 0x563474703ae0 <col:12> 'char' lvalue ParmVar 0x5634747039a8 'c' 'char'
| |     | `-ImplicitCastExpr 0x563474703b48 <col:17> 'int' <IntegralCast>
| |     |   `-CharacterLiteral 0x563474703b00 <col:17> 'char' 48
| |     `-BinaryOperator 0x563474703c00 <col:24, col:29> 'bool' '<='
| |       |-ImplicitCastExpr 0x563474703bd0 <col:24> 'int' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563474703bb8 <col:24> 'char' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563474703b80 <col:24> 'char' lvalue ParmVar 0x5634747039a8 'c' 'char'
| |       `-ImplicitCastExpr 0x563474703be8 <col:29> 'int' <IntegralCast>
| |         `-CharacterLiteral 0x563474703ba0 <col:29> 'char' 57
| `-FullComment 0x563474786ce0 <line:65:3, line:67:77>
|   |-ParagraphComment 0x563474786b50 <line:65:3, line:66:3>
|   | |-TextComment 0x563474786b00 <line:65:3, col:51> Text=" Tests if the given character is a decimal digit."
|   | `-TextComment 0x563474786b20 <line:66:3> Text=" "
|   |-ParamCommandComment 0x563474786b70 <col:4, line:67:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x563474786c20 <line:66:16, line:67:3>
|   |   |-TextComment 0x563474786bd0 <line:66:16, col:37> Text="     character to test"
|   |   `-TextComment 0x563474786bf0 <line:67:3> Text=" "
|   `-BlockCommandComment 0x563474786c40 <col:4, col:77> Name="return"
|     `-ParagraphComment 0x563474786ca0 <col:11, col:77>
|       `-TextComment 0x563474786c70 <col:11, col:77> Text="          true if the argument is a decimal digit; otherwise false."
|-FunctionDecl 0x563474703d70 <line:85:1, line:87:1> line:85:23 constexpr IsSpace 'bool (char) noexcept' inline
| |-ParmVarDecl 0x563474703ca0 <col:31, col:36> col:36 used c 'char'
| |-CompoundStmt 0x5634747042c8 <col:48, line:87:1>
| | `-ReturnStmt 0x563474704290 <line:86:5, col:81>
| |   `-BinaryOperator 0x563474704270 <col:12, col:81> 'bool' '||'
| |     |-BinaryOperator 0x5634747041b0 <col:12, col:68> 'bool' '||'
| |     | |-BinaryOperator 0x5634747040f0 <col:12, col:55> 'bool' '||'
| |     | | |-BinaryOperator 0x563474704018 <col:12, col:42> 'bool' '||'
| |     | | | |-BinaryOperator 0x563474703f58 <col:12, col:29> 'bool' '||'
| |     | | | | |-BinaryOperator 0x563474703e98 <col:12, col:17> 'bool' '=='
| |     | | | | | |-ImplicitCastExpr 0x563474703e68 <col:12> 'int' <IntegralCast>
| |     | | | | | | `-ImplicitCastExpr 0x563474703e50 <col:12> 'char' <LValueToRValue>
| |     | | | | | |   `-DeclRefExpr 0x563474703e18 <col:12> 'char' lvalue ParmVar 0x563474703ca0 'c' 'char'
| |     | | | | | `-ImplicitCastExpr 0x563474703e80 <col:17> 'int' <IntegralCast>
| |     | | | | |   `-CharacterLiteral 0x563474703e38 <col:17> 'char' 32
| |     | | | | `-BinaryOperator 0x563474703f38 <col:24, col:29> 'bool' '=='
| |     | | | |   |-ImplicitCastExpr 0x563474703f08 <col:24> 'int' <IntegralCast>
| |     | | | |   | `-ImplicitCastExpr 0x563474703ef0 <col:24> 'char' <LValueToRValue>
| |     | | | |   |   `-DeclRefExpr 0x563474703eb8 <col:24> 'char' lvalue ParmVar 0x563474703ca0 'c' 'char'
| |     | | | |   `-ImplicitCastExpr 0x563474703f20 <col:29> 'int' <IntegralCast>
| |     | | | |     `-CharacterLiteral 0x563474703ed8 <col:29> 'char' 12
| |     | | | `-BinaryOperator 0x563474703ff8 <col:37, col:42> 'bool' '=='
| |     | | |   |-ImplicitCastExpr 0x563474703fc8 <col:37> 'int' <IntegralCast>
| |     | | |   | `-ImplicitCastExpr 0x563474703fb0 <col:37> 'char' <LValueToRValue>
| |     | | |   |   `-DeclRefExpr 0x563474703f78 <col:37> 'char' lvalue ParmVar 0x563474703ca0 'c' 'char'
| |     | | |   `-ImplicitCastExpr 0x563474703fe0 <col:42> 'int' <IntegralCast>
| |     | | |     `-CharacterLiteral 0x563474703f98 <col:42> 'char' 10
| |     | | `-BinaryOperator 0x5634747040b8 <col:50, col:55> 'bool' '=='
| |     | |   |-ImplicitCastExpr 0x563474704088 <col:50> 'int' <IntegralCast>
| |     | |   | `-ImplicitCastExpr 0x563474704070 <col:50> 'char' <LValueToRValue>
| |     | |   |   `-DeclRefExpr 0x563474704038 <col:50> 'char' lvalue ParmVar 0x563474703ca0 'c' 'char'
| |     | |   `-ImplicitCastExpr 0x5634747040a0 <col:55> 'int' <IntegralCast>
| |     | |     `-CharacterLiteral 0x563474704058 <col:55> 'char' 13
| |     | `-BinaryOperator 0x563474704190 <col:63, col:68> 'bool' '=='
| |     |   |-ImplicitCastExpr 0x563474704160 <col:63> 'int' <IntegralCast>
| |     |   | `-ImplicitCastExpr 0x563474704148 <col:63> 'char' <LValueToRValue>
| |     |   |   `-DeclRefExpr 0x563474704110 <col:63> 'char' lvalue ParmVar 0x563474703ca0 'c' 'char'
| |     |   `-ImplicitCastExpr 0x563474704178 <col:68> 'int' <IntegralCast>
| |     |     `-CharacterLiteral 0x563474704130 <col:68> 'char' 9
| |     `-BinaryOperator 0x563474704250 <col:76, col:81> 'bool' '=='
| |       |-ImplicitCastExpr 0x563474704220 <col:76> 'int' <IntegralCast>
| |       | `-ImplicitCastExpr 0x563474704208 <col:76> 'char' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5634747041d0 <col:76> 'char' lvalue ParmVar 0x563474703ca0 'c' 'char'
| |       `-ImplicitCastExpr 0x563474704238 <col:81> 'int' <IntegralCast>
| |         `-CharacterLiteral 0x5634747041f0 <col:81> 'char' 11
| `-FullComment 0x5634747872c0 <line:75:3, line:83:83>
|   |-ParagraphComment 0x563474787050 <line:75:3, line:77:39>
|   | |-TextComment 0x563474786d50 <line:75:3, col:84> Text=" Tests if the given character is a whitespace character. The whitespace characters"
|   | |-TextComment 0x563474786d70 <line:76:3, col:27> Text=" are: space, form-feed ('"
|   | |-InlineCommandComment 0x563474786dc0 <col:28, col:29> Name="f" RenderNormal
|   | |-TextComment 0x563474786de0 <col:30, col:43> Text="'), newline ('"
|   | |-InlineCommandComment 0x563474786e30 <col:44, col:45> Name="n" RenderNormal
|   | |-TextComment 0x563474786e50 <col:46, col:67> Text="'), carriage return ('"
|   | |-InlineCommandComment 0x563474786ea0 <col:68, col:69> Name="r" RenderNormal
|   | |-TextComment 0x563474786ec0 <col:70, col:83> Text="'), horizontal"
|   | |-TextComment 0x563474786ee0 <line:77:3, col:9> Text=" tab ('"
|   | |-InlineCommandComment 0x563474786f30 <col:10, col:11> Name="t" RenderNormal
|   | |-TextComment 0x563474786f50 <col:12, col:34> Text="'), and vertical tab ('"
|   | |-InlineCommandComment 0x563474786fa0 <col:35, col:36> Name="v" RenderNormal
|   | `-TextComment 0x563474786fc0 <col:37, col:39> Text="')."
|   |-ParagraphComment 0x5634747870c0 <line:79:3, line:80:31>
|   | |-TextComment 0x563474787070 <line:79:3, col:82> Text=" This function is locale independent. Under the C locale this function gives the"
|   | `-TextComment 0x563474787090 <line:80:3, col:31> Text=" same result as std::isspace."
|   |-ParagraphComment 0x563474787110 <line:82:3>
|   | `-TextComment 0x5634747870e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563474787130 <col:4, line:83:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x5634747871e0 <line:82:16, line:83:3>
|   |   |-TextComment 0x563474787190 <line:82:16, col:37> Text="     character to test"
|   |   `-TextComment 0x5634747871b0 <line:83:3> Text=" "
|   `-BlockCommandComment 0x563474787200 <col:4, col:83> Name="return"
|     `-ParagraphComment 0x563474787260 <col:11, col:83>
|       `-TextComment 0x563474787230 <col:11, col:83> Text="          true if the argument is a whitespace character; otherwise false"
|-FunctionDecl 0x563474704480 <line:94:1, col:63> col:16 invalid ParseInt32 'int (const int &, int *)'
| |-ParmVarDecl 0x563474704318 <col:27, col:46> col:46 invalid str 'const int &'
| |-ParmVarDecl 0x5634747043a8 <col:51, col:60> col:60 invalid out 'int *'
| `-FullComment 0x563474787450 <line:90:3, line:92:91>
|   |-ParagraphComment 0x563474787380 <line:90:3, line:91:3>
|   | |-TextComment 0x563474787330 <line:90:3, col:76> Text=" Convert string to signed 32-bit integer with strict parse error feedback."
|   | `-TextComment 0x563474787350 <line:91:3> Text=" "
|   `-BlockCommandComment 0x5634747873a0 <col:4, line:92:91> Name="returns"
|     `-ParagraphComment 0x563474787420 <line:91:12, line:92:91>
|       |-TextComment 0x5634747873d0 <line:91:12, col:71> Text=" true if the entire string could be parsed as valid integer,"
|       `-TextComment 0x5634747873f0 <line:92:3, col:91> Text="   false if not the entire string could be parsed or when overflow or underflow occurred."
|-FunctionDecl 0x5634747046c0 <line:101:1, col:63> col:16 invalid ParseInt64 'int (const int &, int *)'
| |-ParmVarDecl 0x563474704590 <col:27, col:46> col:46 invalid str 'const int &'
| |-ParmVarDecl 0x563474704620 <col:51, col:60> col:60 invalid out 'int *'
| `-FullComment 0x5634747875e0 <line:97:3, line:99:91>
|   |-ParagraphComment 0x563474787510 <line:97:3, line:98:3>
|   | |-TextComment 0x5634747874c0 <line:97:3, col:76> Text=" Convert string to signed 64-bit integer with strict parse error feedback."
|   | `-TextComment 0x5634747874e0 <line:98:3> Text=" "
|   `-BlockCommandComment 0x563474787530 <col:4, line:99:91> Name="returns"
|     `-ParagraphComment 0x5634747875b0 <line:98:12, line:99:91>
|       |-TextComment 0x563474787560 <line:98:12, col:71> Text=" true if the entire string could be parsed as valid integer,"
|       `-TextComment 0x563474787580 <line:99:3, col:91> Text="   false if not the entire string could be parsed or when overflow or underflow occurred."
|-FunctionDecl 0x563474704900 <line:108:1, col:65> col:16 invalid ParseUInt32 'int (const int &, int *)'
| |-ParmVarDecl 0x5634747047d0 <col:28, col:47> col:47 invalid str 'const int &'
| |-ParmVarDecl 0x563474704860 <col:52, col:62> col:62 invalid out 'int *'
| `-FullComment 0x563474787770 <line:104:3, line:106:91>
|   |-ParagraphComment 0x5634747876a0 <line:104:3, line:105:3>
|   | |-TextComment 0x563474787650 <line:104:3, col:86> Text=" Convert decimal string to unsigned 32-bit integer with strict parse error feedback."
|   | `-TextComment 0x563474787670 <line:105:3> Text=" "
|   `-BlockCommandComment 0x5634747876c0 <col:4, line:106:91> Name="returns"
|     `-ParagraphComment 0x563474787740 <line:105:12, line:106:91>
|       |-TextComment 0x5634747876f0 <line:105:12, col:71> Text=" true if the entire string could be parsed as valid integer,"
|       `-TextComment 0x563474787710 <line:106:3, col:91> Text="   false if not the entire string could be parsed or when overflow or underflow occurred."
|-FunctionDecl 0x563474704b40 <line:115:1, col:65> col:16 invalid ParseUInt64 'int (const int &, int *)'
| |-ParmVarDecl 0x563474704a10 <col:28, col:47> col:47 invalid str 'const int &'
| |-ParmVarDecl 0x563474704aa0 <col:52, col:62> col:62 invalid out 'int *'
| `-FullComment 0x563474787900 <line:111:3, line:113:91>
|   |-ParagraphComment 0x563474787830 <line:111:3, line:112:3>
|   | |-TextComment 0x5634747877e0 <line:111:3, col:86> Text=" Convert decimal string to unsigned 64-bit integer with strict parse error feedback."
|   | `-TextComment 0x563474787800 <line:112:3> Text=" "
|   `-BlockCommandComment 0x563474787850 <col:4, line:113:91> Name="returns"
|     `-ParagraphComment 0x5634747878d0 <line:112:12, line:113:91>
|       |-TextComment 0x563474787880 <line:112:12, col:71> Text=" true if the entire string could be parsed as valid integer,"
|       `-TextComment 0x5634747878a0 <line:113:3, col:91> Text="   false if not the entire string could be parsed or when overflow or underflow occurred."
|-FunctionDecl 0x563474704de0 <line:122:1, col:63> col:16 invalid ParseDouble 'int (const int &, double *)'
| |-ParmVarDecl 0x563474704c50 <col:28, col:47> col:47 invalid str 'const int &'
| |-ParmVarDecl 0x563474704d00 <col:52, col:60> col:60 out 'double *'
| `-FullComment 0x563474787a90 <line:118:3, line:120:91>
|   |-ParagraphComment 0x5634747879c0 <line:118:3, line:119:3>
|   | |-TextComment 0x563474787970 <line:118:3, col:61> Text=" Convert string to double with strict parse error feedback."
|   | `-TextComment 0x563474787990 <line:119:3> Text=" "
|   `-BlockCommandComment 0x5634747879e0 <col:4, line:120:91> Name="returns"
|     `-ParagraphComment 0x563474787a60 <line:119:12, line:120:91>
|       |-TextComment 0x563474787a10 <line:119:12, col:70> Text=" true if the entire string could be parsed as valid double,"
|       `-TextComment 0x563474787a30 <line:120:3, col:91> Text="   false if not the entire string could be parsed or when overflow or underflow occurred."
|-FunctionTemplateDecl 0x563474705170 <line:124:1, line:138:1> line:125:13 invalid HexStr
| |-TemplateTypeParmDecl 0x563474704e90 <line:124:10, col:19> col:19 referenced typename depth 0 index 0 T
| `-FunctionDecl 0x5634747050d0 <line:125:1, line:138:1> line:125:13 invalid HexStr 'int (const T, const T)'
|   |-ParmVarDecl 0x563474704f40 <col:20, col:28> col:28 referenced itbegin 'const T'
|   |-ParmVarDecl 0x563474704fb8 <col:37, col:45> col:45 referenced itend 'const T'
|   `-CompoundStmt 0x563474705b78 <line:126:1, line:138:1>
|     |-DeclStmt 0x563474705268 <line:127:5, col:19>
|     | `-VarDecl 0x563474705200 <col:5, col:17> col:17 invalid rv 'int'
|     |-DeclStmt 0x563474705648 <line:128:5, line:129:78>
|     | `-VarDecl 0x5634747052e0 <line:128:5, line:129:77> line:128:23 referenced hexmap 'const char [16]' static cinit
|     |   `-InitListExpr 0x563474705588 <col:36, line:129:77> 'const char [16]'
|     |     |-CharacterLiteral 0x563474705348 <line:128:38> 'char' 48
|     |     |-CharacterLiteral 0x563474705360 <col:43> 'char' 49
|     |     |-CharacterLiteral 0x563474705378 <col:48> 'char' 50
|     |     |-CharacterLiteral 0x563474705390 <col:53> 'char' 51
|     |     |-CharacterLiteral 0x5634747053a8 <col:58> 'char' 52
|     |     |-CharacterLiteral 0x5634747053c0 <col:63> 'char' 53
|     |     |-CharacterLiteral 0x5634747053d8 <col:68> 'char' 54
|     |     |-CharacterLiteral 0x5634747053f0 <col:73> 'char' 55
|     |     |-CharacterLiteral 0x563474705408 <line:129:38> 'char' 56
|     |     |-CharacterLiteral 0x563474705420 <col:43> 'char' 57
|     |     |-CharacterLiteral 0x563474705438 <col:48> 'char' 97
|     |     |-CharacterLiteral 0x563474705450 <col:53> 'char' 98
|     |     |-CharacterLiteral 0x563474705468 <col:58> 'char' 99
|     |     |-CharacterLiteral 0x563474705480 <col:63> 'char' 100
|     |     |-CharacterLiteral 0x563474705498 <col:68> 'char' 101
|     |     `-CharacterLiteral 0x5634747054b0 <col:73> 'char' 102
|     `-ForStmt 0x563474705b40 <line:131:5, line:136:5>
|       |-DeclStmt 0x563474705758 <line:131:9, col:23>
|       | `-VarDecl 0x5634747056d0 <col:9, col:16> col:11 referenced it 'T' cinit
|       |   `-DeclRefExpr 0x563474705738 <col:16> 'const T' lvalue ParmVar 0x563474704f40 'itbegin' 'const T'
|       |-<<<NULL>>>
|       |-BinaryOperator 0x5634747057b0 <col:25, col:30> '<dependent type>' '<'
|       | |-DeclRefExpr 0x563474705770 <col:25> 'T' lvalue Var 0x5634747056d0 'it' 'T'
|       | `-DeclRefExpr 0x563474705790 <col:30> 'const T' lvalue ParmVar 0x563474704fb8 'itend' 'const T'
|       |-UnaryOperator 0x5634747057f0 <col:37, col:39> '<dependent type>' prefix '++' cannot overflow
|       | `-DeclRefExpr 0x5634747057d0 <col:39> 'T' lvalue Var 0x5634747056d0 'it' 'T'
|       `-CompoundStmt 0x563474705b28 <line:132:5, line:136:5>
|         `-DeclStmt 0x563474705940 <line:133:9, col:49>
|           `-VarDecl 0x563474705820 <col:9, col:48> col:23 referenced val 'unsigned char' cinit
|             `-CStyleCastExpr 0x563474705918 <col:29, col:48> 'unsigned char' <Dependent>
|               `-ParenExpr 0x5634747058f8 <col:44, col:48> '<dependent type>'
|                 `-UnaryOperator 0x5634747058a8 <col:45, col:46> '<dependent type>' prefix '*' cannot overflow
|                   `-DeclRefExpr 0x563474705888 <col:46> 'T' lvalue Var 0x5634747056d0 'it' 'T'
|-FunctionTemplateDecl 0x563474705e10 <line:140:1, line:144:1> line:141:20 invalid HexStr
| |-TemplateTypeParmDecl 0x563474705ba0 <line:140:10, col:19> col:19 referenced typename depth 0 index 0 T
| `-FunctionDecl 0x563474705d70 <line:141:1, line:144:1> line:141:20 invalid HexStr 'int (const T &)' inline
|   |-ParmVarDecl 0x563474705c78 <col:27, col:36> col:36 referenced vch 'const T &'
|   `-CompoundStmt 0x563474706038 <line:142:1, line:144:1>
|     `-ReturnStmt 0x563474705ff8 <line:143:5, col:41>
|       `-CallExpr 0x563474705fc8 <col:12, col:41> '<dependent type>'
|         |-UnresolvedLookupExpr 0x563474705e70 <col:12> '<overloaded function type>' lvalue (ADL) = 'HexStr' 0x563474705170
|         |-CallExpr 0x563474705f20 <col:19, col:29> '<dependent type>'
|         | `-CXXDependentScopeMemberExpr 0x563474705ed8 <col:19, col:23> '<dependent type>' lvalue .begin
|         |   `-DeclRefExpr 0x563474705eb8 <col:19> 'const T' lvalue ParmVar 0x563474705c78 'vch' 'const T &'
|         `-CallExpr 0x563474705fa8 <col:32, col:40> '<dependent type>'
|           `-CXXDependentScopeMemberExpr 0x563474705f60 <col:32, col:36> '<dependent type>' lvalue .end
|             `-DeclRefExpr 0x563474705f40 <col:32> 'const T' lvalue ParmVar 0x563474705c78 'vch' 'const T &'
|-FunctionDecl 0x5634747062e0 <line:150:1, col:88> col:13 invalid FormatParagraph 'int (const int &, int, int)'
| |-ParmVarDecl 0x563474706088 <col:29, col:48> col:48 invalid in 'const int &'
| |-ParmVarDecl 0x563474706128 <col:52, col:67> col:59 invalid width 'int' cinit
| | `-IntegerLiteral 0x563474706190 <col:67> 'int' 79
| |-ParmVarDecl 0x5634747061d8 <col:71, col:87> col:78 invalid indent 'int' cinit
| | `-IntegerLiteral 0x563474706240 <col:87> 'int' 0
| `-FullComment 0x563474787c80 <line:147:3, line:148:33>
|   `-ParagraphComment 0x563474787c50 <line:147:3, line:148:33>
|     |-TextComment 0x563474787c00 <line:147:3, col:65> Text=" Format a paragraph of text to a fixed width, adding spaces for"
|     `-TextComment 0x563474787c20 <line:148:3, col:33> Text=" indentation to any added line."
|-FunctionTemplateDecl 0x5634747066b8 <line:157:1, line:165:1> line:158:6 TimingResistantEqual
| |-TemplateTypeParmDecl 0x5634747063c8 <line:157:11, col:20> col:20 referenced typename depth 0 index 0 T
| |-FunctionDecl 0x563474706618 <line:158:1, line:165:1> line:158:6 TimingResistantEqual 'bool (const T &, const T &)'
| | |-ParmVarDecl 0x563474706488 <col:27, col:36> col:36 referenced a 'const T &'
| | |-ParmVarDecl 0x563474706500 <col:39, col:48> col:48 referenced b 'const T &'
| | |-CompoundStmt 0x563474706d18 <line:159:1, line:165:1>
| | | |-IfStmt 0x5634747068c0 <line:160:5, col:43>
| | | | |-BinaryOperator 0x5634747067c8 <col:9, col:21> '<dependent type>' '=='
| | | | | |-CallExpr 0x563474706788 <col:9, col:16> '<dependent type>'
| | | | | | `-CXXDependentScopeMemberExpr 0x563474706740 <col:9, col:11> '<dependent type>' lvalue .size
| | | | | |   `-DeclRefExpr 0x563474706720 <col:9> 'const T' lvalue ParmVar 0x563474706500 'b' 'const T &'
| | | | | `-IntegerLiteral 0x5634747067a8 <col:21> 'int' 0
| | | | `-ReturnStmt 0x5634747068b0 <col:24, col:43>
| | | |   `-BinaryOperator 0x563474706890 <col:31, col:43> '<dependent type>' '=='
| | | |     |-CallExpr 0x563474706850 <col:31, col:38> '<dependent type>'
| | | |     | `-CXXDependentScopeMemberExpr 0x563474706808 <col:31, col:33> '<dependent type>' lvalue .size
| | | |     |   `-DeclRefExpr 0x5634747067e8 <col:31> 'const T' lvalue ParmVar 0x563474706488 'a' 'const T &'
| | | |     `-IntegerLiteral 0x563474706870 <col:43> 'int' 0
| | | `-DeclStmt 0x563474706a98 <line:161:5, col:45>
| | |   `-VarDecl 0x563474706900 <col:5, col:12> col:12 invalid accumulator 'int'
| | `-FullComment 0x563474787f40 <line:153:3, line:155:21>
| |   `-ParagraphComment 0x563474787f10 <line:153:3, line:155:21>
| |     |-TextComment 0x563474787e90 <line:153:3, col:38> Text=" Timing-attack-resistant comparison."
| |     |-TextComment 0x563474787eb0 <line:154:3, col:36> Text=" Takes time proportional to length"
| |     `-TextComment 0x563474787ed0 <line:155:3, col:21> Text=" of first argument."
| `-FullComment 0x563474787e20 <line:153:3, line:155:21>
|   `-ParagraphComment 0x563474787df0 <line:153:3, line:155:21>
|     |-TextComment 0x563474787d70 <line:153:3, col:38> Text=" Timing-attack-resistant comparison."
|     |-TextComment 0x563474787d90 <line:154:3, col:36> Text=" Takes time proportional to length"
|     `-TextComment 0x563474787db0 <line:155:3, col:21> Text=" of first argument."
|-FunctionDecl 0x563474706f70 <line:172:1, col:89> col:16 invalid ParseFixedPoint 'int (const int &, int, int *)'
| |-ParmVarDecl 0x563474706d70 <col:32, col:51> col:51 invalid val 'const int &'
| |-ParmVarDecl 0x563474706df0 <col:56, col:60> col:60 decimals 'int'
| |-ParmVarDecl 0x563474706e80 <col:70, col:79> col:79 invalid amount_out 'int *'
| `-FullComment 0x563474788190 <line:167:4, line:170:98>
|   |-ParagraphComment 0x563474788030 <line:167:4, line:169:3>
|   | |-TextComment 0x563474787fb0 <line:167:4, col:64> Text=" Parse number as fixed point according to JSON number syntax."
|   | |-TextComment 0x563474787fd0 <line:168:3, col:33> Text=" See http://json.org/number.gif"
|   | `-TextComment 0x563474787ff0 <line:169:3> Text=" "
|   |-BlockCommandComment 0x563474788050 <col:4, line:170:3> Name="returns"
|   | `-ParagraphComment 0x5634747880d0 <line:169:12, line:170:3>
|   |   |-TextComment 0x563474788080 <line:169:12, col:44> Text=" true on success, false on error."
|   |   `-TextComment 0x5634747880a0 <line:170:3> Text=" "
|   `-BlockCommandComment 0x5634747880f0 <col:4, col:98> Name="note"
|     `-ParagraphComment 0x563474788150 <col:9, col:98>
|       `-TextComment 0x563474788120 <col:9, col:98> Text=" The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger."
|-FunctionTemplateDecl 0x5634747075b8 <line:175:1, line:196:1> line:176:6 ConvertBits
| |-NonTypeTemplateParmDecl 0x563474707070 <line:175:10, col:14> col:14 referenced 'int' depth 0 index 0 frombits
| |-NonTypeTemplateParmDecl 0x5634747070e8 <col:24, col:28> col:28 referenced 'int' depth 0 index 1 tobits
| |-NonTypeTemplateParmDecl 0x563474707158 <col:36, col:41> col:41 referenced 'bool' depth 0 index 2 pad
| |-TemplateTypeParmDecl 0x5634747071b8 <col:46, col:55> col:55 referenced typename depth 0 index 3 O
| |-TemplateTypeParmDecl 0x563474707228 <col:58, col:67> col:67 referenced typename depth 0 index 4 I
| |-FunctionDecl 0x563474707518 <line:176:1, line:196:1> line:176:6 ConvertBits 'bool (const O &, I, I)'
| | |-ParmVarDecl 0x563474707308 <col:18, col:27> col:27 referenced outfn 'const O &'
| | |-ParmVarDecl 0x563474707380 <col:34, col:36> col:36 referenced it 'I'
| | |-ParmVarDecl 0x5634747073f8 <col:40, col:42> col:42 referenced end 'I'
| | |-CompoundStmt 0x563474707e68 <col:47, line:196:1>
| | | |-DeclStmt 0x5634747076d8 <line:177:5, col:19>
| | | | `-VarDecl 0x563474707650 <col:5, col:12> col:12 invalid acc 'int'
| | | |-DeclStmt 0x5634747077a0 <line:178:5, col:20>
| | | | `-VarDecl 0x563474707718 <col:5, col:12> col:12 invalid bits 'int'
| | | |-DeclStmt 0x563474707908 <line:179:5, col:46>
| | | | `-VarDecl 0x5634747077e0 <col:5, col:22> col:22 invalid maxv 'const int' constexpr
| | | |-DeclStmt 0x563474707b10 <line:180:5, col:66>
| | | | `-VarDecl 0x563474707948 <col:5, col:22> col:22 invalid max_acc 'const int' constexpr
| | | |-WhileStmt 0x563474707cc0 <line:181:5, line:189:5>
| | | | |-BinaryOperator 0x563474707b68 <line:181:12, col:18> '<dependent type>' '!='
| | | | | |-DeclRefExpr 0x563474707b28 <col:12> 'I' lvalue ParmVar 0x563474707380 'it' 'I'
| | | | | `-DeclRefExpr 0x563474707b48 <col:18> 'I' lvalue ParmVar 0x5634747073f8 'end' 'I'
| | | | `-CompoundStmt 0x563474707ca8 <col:23, line:189:5>
| | | |   `-UnaryOperator 0x563474707c90 <line:188:9, col:11> '<dependent type>' prefix '++' cannot overflow
| | | |     `-DeclRefExpr 0x563474707c70 <col:11> 'I' lvalue ParmVar 0x563474707380 'it' 'I'
| | | |-IfStmt 0x563474707df0 <line:190:5, line:194:5> has_else
| | | | |-DeclRefExpr 0x563474707cd8 <line:190:9> 'bool' NonTypeTemplateParm 0x563474707158 'pad' 'bool'
| | | | |-CompoundStmt 0x563474707d38 <col:14, line:192:5>
| | | | `-IfStmt 0x563474707dd8 <col:12, line:194:5>
| | | |   |-OpaqueValueExpr 0x563474707dc0 <<invalid sloc>> 'bool'
| | | |   `-CompoundStmt 0x563474707da8 <line:192:71, line:194:5>
| | | |     `-ReturnStmt 0x563474707d98 <line:193:9, col:16>
| | | |       `-CXXBoolLiteralExpr 0x563474707d88 <col:16> 'bool' false
| | | `-ReturnStmt 0x563474707e28 <line:195:5, col:12>
| | |   `-CXXBoolLiteralExpr 0x563474707e18 <col:12> 'bool' true
| | `-FullComment 0x5634747883b0 <line:174:4, col:56>
| |   `-ParagraphComment 0x563474788380 <col:4, col:56>
| |     `-TextComment 0x563474788350 <col:4, col:56> Text=" Convert from one power-of-2 number base to another. "
| `-FullComment 0x5634747882e0 <col:4, col:56>
|   `-ParagraphComment 0x5634747882b0 <col:4, col:56>
|     `-TextComment 0x563474788280 <col:4, col:56> Text=" Convert from one power-of-2 number base to another. "
|-FunctionDecl 0x563474707f88 <line:208:1, line:211:1> line:208:16 constexpr ToLower 'char (char)'
| |-ParmVarDecl 0x563474707ec0 <col:24, col:29> col:29 used c 'char'
| |-CompoundStmt 0x5634747083b8 <line:209:1, line:211:1>
| | `-ReturnStmt 0x563474708378 <line:210:5, col:55>
| |   `-ImplicitCastExpr 0x563474708360 <col:12, col:55> 'char' <IntegralCast>
| |     `-ParenExpr 0x563474708340 <col:12, col:55> 'int'
| |       `-ConditionalOperator 0x563474708310 <col:13, col:54> 'int'
| |         |-BinaryOperator 0x563474708190 <col:13, col:30> 'bool' '&&'
| |         | |-BinaryOperator 0x5634747080b0 <col:13, col:18> 'bool' '>='
| |         | | |-ImplicitCastExpr 0x563474708080 <col:13> 'int' <IntegralCast>
| |         | | | `-ImplicitCastExpr 0x563474708068 <col:13> 'char' <LValueToRValue>
| |         | | |   `-DeclRefExpr 0x563474708030 <col:13> 'char' lvalue ParmVar 0x563474707ec0 'c' 'char'
| |         | | `-ImplicitCastExpr 0x563474708098 <col:18> 'int' <IntegralCast>
| |         | |   `-CharacterLiteral 0x563474708050 <col:18> 'char' 65
| |         | `-BinaryOperator 0x563474708170 <col:25, col:30> 'bool' '<='
| |         |   |-ImplicitCastExpr 0x563474708140 <col:25> 'int' <IntegralCast>
| |         |   | `-ImplicitCastExpr 0x563474708128 <col:25> 'char' <LValueToRValue>
| |         |   |   `-DeclRefExpr 0x5634747080d0 <col:25> 'char' lvalue ParmVar 0x563474707ec0 'c' 'char'
| |         |   `-ImplicitCastExpr 0x563474708158 <col:30> 'int' <IntegralCast>
| |         |     `-CharacterLiteral 0x563474708110 <col:30> 'char' 90
| |         |-BinaryOperator 0x5634747082a0 <col:36, col:48> 'int' '+'
| |         | |-ParenExpr 0x563474708250 <col:36, col:44> 'int'
| |         | | `-BinaryOperator 0x563474708230 <col:37, col:41> 'int' '-'
| |         | |   |-ImplicitCastExpr 0x563474708200 <col:37> 'int' <IntegralCast>
| |         | |   | `-ImplicitCastExpr 0x5634747081e8 <col:37> 'char' <LValueToRValue>
| |         | |   |   `-DeclRefExpr 0x5634747081b0 <col:37> 'char' lvalue ParmVar 0x563474707ec0 'c' 'char'
| |         | |   `-ImplicitCastExpr 0x563474708218 <col:41> 'int' <IntegralCast>
| |         | |     `-CharacterLiteral 0x5634747081d0 <col:41> 'char' 65
| |         | `-ImplicitCastExpr 0x563474708288 <col:48> 'int' <IntegralCast>
| |         |   `-CharacterLiteral 0x563474708270 <col:48> 'char' 97
| |         `-ImplicitCastExpr 0x5634747082f8 <col:54> 'int' <IntegralCast>
| |           `-ImplicitCastExpr 0x5634747082e0 <col:54> 'char' <LValueToRValue>
| |             `-DeclRefExpr 0x5634747082c0 <col:54> 'char' lvalue ParmVar 0x563474707ec0 'c' 'char'
| `-FullComment 0x5634747886c0 <line:199:3, line:206:49>
|   |-ParagraphComment 0x5634747884c0 <line:199:3, line:202:39>
|   | |-TextComment 0x563474788420 <line:199:3, col:60> Text=" Converts the given character to its lowercase equivalent."
|   | |-TextComment 0x563474788440 <line:200:3, col:66> Text=" This function is locale independent. It only converts uppercase"
|   | |-TextComment 0x563474788460 <line:201:3, col:48> Text=" characters in the standard 7-bit ASCII range."
|   | `-TextComment 0x563474788480 <line:202:3, col:39> Text=" This is a feature, not a limitation."
|   |-ParagraphComment 0x563474788510 <line:204:3>
|   | `-TextComment 0x5634747884e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563474788530 <col:4, line:205:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x5634747885e0 <line:204:16, line:205:3>
|   |   |-TextComment 0x563474788590 <line:204:16, col:58> Text="     the character to convert to lowercase."
|   |   `-TextComment 0x5634747885b0 <line:205:3> Text=" "
|   `-BlockCommandComment 0x563474788600 <col:4, line:206:49> Name="return"
|     `-ParagraphComment 0x563474788680 <line:205:11, line:206:49>
|       |-TextComment 0x563474788630 <line:205:11, col:66> Text="          the lowercase equivalent of c; or the argument"
|       `-TextComment 0x563474788650 <line:206:3, col:49> Text="                  if no conversion is possible."
|-FunctionDecl 0x5634747084a0 <line:222:1, col:43> col:13 invalid ToLower 'int (const int &)'
| |-ParmVarDecl 0x563474708408 <col:21, col:40> col:40 invalid str 'const int &'
| `-FullComment 0x5634747889b0 <line:214:3, line:220:48>
|   |-ParagraphComment 0x5634747887d0 <line:214:3, line:217:39>
|   | |-TextComment 0x563474788730 <line:214:3, col:56> Text=" Returns the lowercase equivalent of the given string."
|   | |-TextComment 0x563474788750 <line:215:3, col:66> Text=" This function is locale independent. It only converts uppercase"
|   | |-TextComment 0x563474788770 <line:216:3, col:48> Text=" characters in the standard 7-bit ASCII range."
|   | `-TextComment 0x563474788790 <line:217:3, col:39> Text=" This is a feature, not a limitation."
|   |-ParagraphComment 0x563474788820 <line:219:3>
|   | `-TextComment 0x5634747887f0 <col:3> Text=" "
|   |-ParamCommandComment 0x563474788840 <col:4, line:220:3> [in] explicitly Param="str" ParamIndex=0
|   | `-ParagraphComment 0x5634747888f0 <line:219:18, line:220:3>
|   |   |-TextComment 0x5634747888a0 <line:219:18, col:55> Text="   the string to convert to lowercase."
|   |   `-TextComment 0x5634747888c0 <line:220:3> Text=" "
|   `-BlockCommandComment 0x563474788910 <col:4, col:48> Name="returns"
|     `-ParagraphComment 0x563474788970 <col:12, col:48>
|       `-TextComment 0x563474788940 <col:12, col:48> Text="         lowercased equivalent of str"
|-FunctionDecl 0x563474708618 <line:234:1, line:237:1> line:234:16 constexpr ToUpper 'char (char)'
| |-ParmVarDecl 0x563474708588 <col:24, col:29> col:29 used c 'char'
| |-CompoundStmt 0x563474708a28 <line:235:1, line:237:1>
| | `-ReturnStmt 0x5634747089e8 <line:236:5, col:55>
| |   `-ImplicitCastExpr 0x5634747089d0 <col:12, col:55> 'char' <IntegralCast>
| |     `-ParenExpr 0x5634747089b0 <col:12, col:55> 'int'
| |       `-ConditionalOperator 0x563474708980 <col:13, col:54> 'int'
| |         |-BinaryOperator 0x563474708800 <col:13, col:30> 'bool' '&&'
| |         | |-BinaryOperator 0x563474708740 <col:13, col:18> 'bool' '>='
| |         | | |-ImplicitCastExpr 0x563474708710 <col:13> 'int' <IntegralCast>
| |         | | | `-ImplicitCastExpr 0x5634747086f8 <col:13> 'char' <LValueToRValue>
| |         | | |   `-DeclRefExpr 0x5634747086c0 <col:13> 'char' lvalue ParmVar 0x563474708588 'c' 'char'
| |         | | `-ImplicitCastExpr 0x563474708728 <col:18> 'int' <IntegralCast>
| |         | |   `-CharacterLiteral 0x5634747086e0 <col:18> 'char' 97
| |         | `-BinaryOperator 0x5634747087e0 <col:25, col:30> 'bool' '<='
| |         |   |-ImplicitCastExpr 0x5634747087b0 <col:25> 'int' <IntegralCast>
| |         |   | `-ImplicitCastExpr 0x563474708798 <col:25> 'char' <LValueToRValue>
| |         |   |   `-DeclRefExpr 0x563474708760 <col:25> 'char' lvalue ParmVar 0x563474708588 'c' 'char'
| |         |   `-ImplicitCastExpr 0x5634747087c8 <col:30> 'int' <IntegralCast>
| |         |     `-CharacterLiteral 0x563474708780 <col:30> 'char' 122
| |         |-BinaryOperator 0x563474708910 <col:36, col:48> 'int' '+'
| |         | |-ParenExpr 0x5634747088c0 <col:36, col:44> 'int'
| |         | | `-BinaryOperator 0x5634747088a0 <col:37, col:41> 'int' '-'
| |         | |   |-ImplicitCastExpr 0x563474708870 <col:37> 'int' <IntegralCast>
| |         | |   | `-ImplicitCastExpr 0x563474708858 <col:37> 'char' <LValueToRValue>
| |         | |   |   `-DeclRefExpr 0x563474708820 <col:37> 'char' lvalue ParmVar 0x563474708588 'c' 'char'
| |         | |   `-ImplicitCastExpr 0x563474708888 <col:41> 'int' <IntegralCast>
| |         | |     `-CharacterLiteral 0x563474708840 <col:41> 'char' 97
| |         | `-ImplicitCastExpr 0x5634747088f8 <col:48> 'int' <IntegralCast>
| |         |   `-CharacterLiteral 0x5634747088e0 <col:48> 'char' 65
| |         `-ImplicitCastExpr 0x563474708968 <col:54> 'int' <IntegralCast>
| |           `-ImplicitCastExpr 0x563474708950 <col:54> 'char' <LValueToRValue>
| |             `-DeclRefExpr 0x563474708930 <col:54> 'char' lvalue ParmVar 0x563474708588 'c' 'char'
| `-FullComment 0x563474788cc0 <line:225:3, line:232:49>
|   |-ParagraphComment 0x563474788ac0 <line:225:3, line:228:39>
|   | |-TextComment 0x563474788a20 <line:225:3, col:60> Text=" Converts the given character to its uppercase equivalent."
|   | |-TextComment 0x563474788a40 <line:226:3, col:66> Text=" This function is locale independent. It only converts lowercase"
|   | |-TextComment 0x563474788a60 <line:227:3, col:48> Text=" characters in the standard 7-bit ASCII range."
|   | `-TextComment 0x563474788a80 <line:228:3, col:39> Text=" This is a feature, not a limitation."
|   |-ParagraphComment 0x563474788b10 <line:230:3>
|   | `-TextComment 0x563474788ae0 <col:3> Text=" "
|   |-ParamCommandComment 0x563474788b30 <col:4, line:231:3> [in] explicitly Param="c" ParamIndex=0
|   | `-ParagraphComment 0x563474788be0 <line:230:16, line:231:3>
|   |   |-TextComment 0x563474788b90 <line:230:16, col:58> Text="     the character to convert to uppercase."
|   |   `-TextComment 0x563474788bb0 <line:231:3> Text=" "
|   `-BlockCommandComment 0x563474788c00 <col:4, line:232:49> Name="return"
|     `-ParagraphComment 0x563474788c80 <line:231:11, line:232:49>
|       |-TextComment 0x563474788c30 <line:231:11, col:66> Text="          the uppercase equivalent of c; or the argument"
|       `-TextComment 0x563474788c50 <line:232:3, col:49> Text="                  if no conversion is possible."
|-FunctionDecl 0x563474708b10 <line:248:1, col:43> col:13 invalid ToUpper 'int (const int &)'
| |-ParmVarDecl 0x563474708a78 <col:21, col:40> col:40 invalid str 'const int &'
| `-FullComment 0x563474788fb0 <line:240:3, line:246:48>
|   |-ParagraphComment 0x563474788dd0 <line:240:3, line:243:39>
|   | |-TextComment 0x563474788d30 <line:240:3, col:56> Text=" Returns the uppercase equivalent of the given string."
|   | |-TextComment 0x563474788d50 <line:241:3, col:66> Text=" This function is locale independent. It only converts lowercase"
|   | |-TextComment 0x563474788d70 <line:242:3, col:48> Text=" characters in the standard 7-bit ASCII range."
|   | `-TextComment 0x563474788d90 <line:243:3, col:39> Text=" This is a feature, not a limitation."
|   |-ParagraphComment 0x563474788e20 <line:245:3>
|   | `-TextComment 0x563474788df0 <col:3> Text=" "
|   |-ParamCommandComment 0x563474788e40 <col:4, line:246:3> [in] explicitly Param="str" ParamIndex=0
|   | `-ParagraphComment 0x563474788ef0 <line:245:18, line:246:3>
|   |   |-TextComment 0x563474788ea0 <line:245:18, col:55> Text="   the string to convert to uppercase."
|   |   `-TextComment 0x563474788ec0 <line:246:3> Text=" "
|   `-BlockCommandComment 0x563474788f10 <col:4, col:48> Name="returns"
|     `-ParagraphComment 0x563474788f70 <col:12, col:48>
|       `-TextComment 0x563474788f40 <col:12, col:48> Text="         UPPERCASED EQUIVALENT OF str"
|-FunctionDecl 0x563474708cb8 <line:259:1, col:39> col:13 invalid Capitalize 'int (int)'
| |-ParmVarDecl 0x563474708c20 <col:24, col:36> col:36 invalid str 'int'
| `-FullComment 0x563474789b10 <line:251:3, line:257:61>
|   |-ParagraphComment 0x5634747890c0 <line:251:3, line:254:39>
|   | |-TextComment 0x563474789020 <line:251:3, col:55> Text=" Capitalizes the first character of the given string."
|   | |-TextComment 0x563474789040 <line:252:3, col:66> Text=" This function is locale independent. It only converts lowercase"
|   | |-TextComment 0x563474789060 <line:253:3, col:48> Text=" characters in the standard 7-bit ASCII range."
|   | `-TextComment 0x563474789080 <line:254:3, col:39> Text=" This is a feature, not a limitation."
|   |-ParagraphComment 0x563474789110 <line:256:3>
|   | `-TextComment 0x5634747890e0 <col:3> Text=" "
|   |-ParamCommandComment 0x563474789130 <col:4, line:257:3> [in] explicitly Param="str" ParamIndex=0
|   | `-ParagraphComment 0x5634747891e0 <line:256:18, line:257:3>
|   |   |-TextComment 0x563474789190 <line:256:18, col:45> Text="   the string to capitalize."
|   |   `-TextComment 0x5634747891b0 <line:257:3> Text=" "
|   `-BlockCommandComment 0x563474789200 <col:4, col:61> Name="returns"
|     `-ParagraphComment 0x563474789260 <col:12, col:61>
|       `-TextComment 0x563474789230 <col:12, col:61> Text="         string with the first letter capitalized."
|-CXXRecordDecl 0x563474708d88 <bitcoin/src/util/translation.h:17:1, line:20:1> line:17:8 referenced invalid struct bilingual_str definition
| |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FullComment 0x563474789c30 <line:13:3, line:15:43>
| | `-ParagraphComment 0x563474789c00 <line:13:3, line:15:43>
| |   |-TextComment 0x563474789b80 <line:13:3, col:22> Text=" Bilingual messages:"
| |   |-TextComment 0x563474789ba0 <line:14:3, col:67> Text="   - in GUI: user's native language + untranslated (i.e. English)"
| |   `-TextComment 0x563474789bc0 <line:15:3, col:43> Text="   - in log and stderr: untranslated only"
| |-CXXRecordDecl 0x563474708ea8 <line:17:1, col:8> col:8 implicit struct bilingual_str
| |-FieldDecl 0x563474708f60 <line:18:5, col:17> col:17 invalid original 'int'
| `-FieldDecl 0x563474708fd8 <line:19:5, col:17> col:17 invalid translated 'int'
|-NamespaceDecl 0x563474709040 <line:22:1, line:28:1> line:22:11 tinyformat
| `-FunctionTemplateDecl 0x563474709408 <line:23:1, line:27:1> line:24:15 format
|   |-TemplateTypeParmDecl 0x5634747090b0 <line:23:11, col:23> col:23 referenced typename depth 0 index 0 ... Args
|   `-FunctionDecl 0x563474709368 <line:24:1, line:27:1> line:24:15 format 'bilingual_str (const bilingual_str &, const Args &...)'
|     |-ParmVarDecl 0x563474709178 <col:22, col:43> col:43 referenced fmt 'const bilingual_str &'
|     |-ParmVarDecl 0x563474709250 <col:48, col:63> col:63 referenced args 'const Args &...' pack
|     `-CompoundStmt 0x5634747095d0 <line:25:1, line:27:1>
|-VarDecl 0x563474709630 <line:31:1, col:54> col:54 invalid G_TRANSLATION_FUN 'const int' extern
| `-FullComment 0x563474789d80 <line:30:4, col:60>
|   `-ParagraphComment 0x563474789d50 <col:4, col:60>
|     `-TextComment 0x563474789d20 <col:4, col:60> Text=" Translate a message to the native language of the user. "
|-FunctionDecl 0x5634747097a8 <line:37:1, line:40:1> line:37:22 _ 'bilingual_str (const char *)' inline
| |-ParmVarDecl 0x5634747096e0 <col:24, col:36> col:36 used psz 'const char *'
| |-CompoundStmt 0x5634747098c0 <line:38:1, line:40:1>
| `-FullComment 0x563474789e70 <line:34:3, line:35:62>
|   `-ParagraphComment 0x563474789e40 <line:34:3, line:35:62>
|     |-TextComment 0x563474789df0 <line:34:3, col:24> Text=" Translation function."
|     `-TextComment 0x563474789e10 <line:35:3, col:62> Text=" If no translation function is set, simply return the input."
|-VarDecl 0x5634747098e8 <bitcoin/src/net.cpp:51:1, col:49> col:22 DUMP_PEERS_INTERVAL 'const int' static constexpr cinit
| `-BinaryOperator 0x563474709990 <col:44, col:49> 'int' '*'
|   |-IntegerLiteral 0x563474709950 <col:44> 'int' 15
|   `-IntegerLiteral 0x563474709970 <col:49> 'int' 60
|-VarDecl 0x563474709a50 <line:54:1, col:50> col:22 DNSSEEDS_TO_QUERY_AT_ONCE 'const int' static constexpr cinit
| |-IntegerLiteral 0x563474709ab8 <col:50> 'int' 3
| `-FullComment 0x563474789f40 <line:53:4, col:72>
|   `-ParagraphComment 0x563474789f10 <col:4, col:72>
|     `-TextComment 0x563474789ee0 <col:4, col:72> Text=" Number of DNS seeds to query when the number of connections is low. "
|-EnumDecl 0x563474709b58 <line:70:1, line:74:1> line:70:6 BindFlags
| |-FullComment 0x56347478a010 <line:69:4, col:46>
| | `-ParagraphComment 0x563474789fe0 <col:4, col:46>
| |   `-TextComment 0x563474789fb0 <col:4, col:46> Text=" Used to pass flags to the Bind() function "
| |-EnumConstantDecl 0x563474709c60 <line:71:5, col:23> col:5 BF_NONE 'BindFlags'
| | `-ImplicitCastExpr 0x563474709e90 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x563474709c40 <col:23> 'int' 0
| |     `-IntegerLiteral 0x563474709c20 <col:23> 'int' 0
| |-EnumConstantDecl 0x563474709d50 <line:72:5, col:31> col:5 BF_EXPLICIT 'BindFlags'
| | `-ConstantExpr 0x563474709d30 <col:23, col:31> 'unsigned int' 1
| |   `-ParenExpr 0x563474709d10 <col:23, col:31> 'unsigned int'
| |     `-BinaryOperator 0x563474709cf0 <col:24, col:30> 'unsigned int' '<<'
| |       |-IntegerLiteral 0x563474709cb0 <col:24> 'unsigned int' 1
| |       `-IntegerLiteral 0x563474709cd0 <col:30> 'int' 0
| `-EnumConstantDecl 0x563474709e40 <line:73:5, col:31> col:5 BF_REPORT_ERROR 'BindFlags'
|   `-ConstantExpr 0x563474709e20 <col:23, col:31> 'unsigned int' 2
|     `-ParenExpr 0x563474709e00 <col:23, col:31> 'unsigned int'
|       `-BinaryOperator 0x563474709de0 <col:24, col:30> 'unsigned int' '<<'
|         |-IntegerLiteral 0x563474709da0 <col:24> 'unsigned int' 1
|         `-IntegerLiteral 0x563474709dc0 <col:30> 'int' 1
|-VarDecl 0x563474709ed0 <line:78:1, col:23> col:23 invalid SELECT_TIMEOUT_MILLISECONDS 'const int' static
|-VarDecl 0x563474709f80 <line:80:1, col:19> col:19 invalid NET_MESSAGE_COMMAND_OTHER 'const int'
|-VarDecl 0x56347470a030 <line:82:1, col:23> col:23 invalid RANDOMIZER_ID_NETGROUP 'const int' static
|-VarDecl 0x56347470c620 <line:83:1, col:23> col:23 invalid RANDOMIZER_ID_LOCALHOSTNONCE 'const int' static
|-VarDecl 0x56347470c6b8 prev 0x5634746ae7e8 <line:87:1, col:18> col:6 used fDiscover 'bool' cinit
| `-CXXBoolLiteralExpr 0x56347470c720 <col:18> 'bool' true
|-VarDecl 0x56347470c740 prev 0x5634746ae860 <line:88:1, col:16> col:6 used fListen 'bool' cinit
| `-CXXBoolLiteralExpr 0x56347470c7a8 <col:16> 'bool' true
|-VarDecl 0x56347470c7c8 prev 0x5634746ae8d8 <line:89:1, col:22> col:6 g_relay_txes 'bool' cinit
| `-UnaryOperator 0x56347470c888 <col:21, col:22> 'bool' prefix '!' cannot overflow
|   `-ImplicitCastExpr 0x56347470c870 <col:22> 'bool' <LValueToRValue>
|     `-DeclRefExpr 0x56347470c850 <col:22> 'const bool' lvalue Var 0x563474695138 'DEFAULT_BLOCKSONLY' 'const bool' non_odr_use_constant
|-VarDecl 0x56347470c8b0 prev 0x5634746aeca0 <line:90:1, col:18> col:18 referenced cs_mapLocalHost 'CCriticalSection':'int'
|-VarDecl 0x56347470ca08 <line:92:1, col:63> col:13 used vfLimited 'bool [5]' static cinit
| |-InitListExpr 0x56347470caf8 <col:62, col:63> 'bool [5]'
| | `-array_filler: ImplicitValueInitExpr 0x56347470cb38 <<invalid sloc>> 'bool'
| `-GuardedByAttr 0x56347470ca70 <bitcoin/src/threadsafety.h:18:38, col:50>
|   `-DeclRefExpr 0x56347470c968 <bitcoin/src/net.cpp:92:43> 'CCriticalSection':'int' lvalue Var 0x56347470c8b0 'cs_mapLocalHost' 'CCriticalSection':'int' non_odr_use_unevaluated
|-VarDecl 0x56347470cb70 <line:93:1, col:13> col:13 invalid strSubVersion 'int'
|-CXXMethodDecl 0x56347470ccb0 parent 0x5634746986b0 <line:95:1, line:99:1> line:95:16 invalid AddOneShot 'void (const int &)'
| |-ParmVarDecl 0x56347470cc20 <col:27, col:46> col:46 invalid strDest 'const int &'
| `-CompoundStmt 0x56347470ce78 <line:96:1, line:99:1>
|-FunctionDecl 0x56347470ceb0 prev 0x5634746ab260 <line:101:1, line:104:1> line:101:16 used GetListenPort 'unsigned short ()'
| `-CompoundStmt 0x56347470d120 <line:102:1, line:104:1>
|-FunctionDecl 0x56347470d250 prev 0x5634746ae518 <line:107:1, line:129:1> line:107:6 used GetLocal 'bool (CService &, const CNetAddr *)'
| |-ParmVarDecl 0x56347470d140 <col:15, col:25> col:25 used addr 'CService &'
| |-ParmVarDecl 0x56347470d1b8 <col:31, col:47> col:47 used paddrPeer 'const CNetAddr *' cinit
| | `-ImplicitCastExpr 0x5634746ae490 <bitcoin/src/net.h:554:59> 'const CNetAddr *' <NullToPointer>
| |   `-CXXNullPtrLiteralExpr 0x5634746ae480 <col:59> 'nullptr_t'
| `-CompoundStmt 0x56347470dc08 <bitcoin/src/net.cpp:108:1, line:129:1>
|   |-IfStmt 0x56347470d370 <line:109:5, line:110:16>
|   | |-UnaryOperator 0x56347470d338 <line:109:9, col:10> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x56347470d320 <col:10> 'bool' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56347470d300 <col:10> 'bool' lvalue Var 0x56347470c740 'fListen' 'bool'
|   | `-ReturnStmt 0x56347470d360 <line:110:9, col:16>
|   |   `-CXXBoolLiteralExpr 0x56347470d350 <col:16> 'bool' false
|   |-DeclStmt 0x56347470d440 <line:112:5, col:24>
|   | `-VarDecl 0x56347470d3a0 <col:5, col:23> col:9 used nBestScore 'int' cinit
|   |   `-UnaryOperator 0x56347470d428 <col:22, col:23> 'int' prefix '-'
|   |     `-IntegerLiteral 0x56347470d408 <col:23> 'int' 1
|   |-DeclStmt 0x56347470d510 <line:113:5, col:31>
|   | `-VarDecl 0x56347470d470 <col:5, col:30> col:9 used nBestReachability 'int' cinit
|   |   `-UnaryOperator 0x56347470d4f8 <col:29, col:30> 'int' prefix '-'
|   |     `-IntegerLiteral 0x56347470d4d8 <col:30> 'int' 1
|   |-CompoundStmt 0x56347470db48 <line:114:5, line:127:5>
|   `-ReturnStmt 0x56347470dbd0 <line:128:5, col:26>
|     `-BinaryOperator 0x56347470dbb0 <col:12, col:26> 'bool' '>='
|       |-ImplicitCastExpr 0x56347470db98 <col:12> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x56347470db58 <col:12> 'int' lvalue Var 0x56347470d3a0 'nBestScore' 'int'
|       `-IntegerLiteral 0x56347470db78 <col:26> 'int' 0
|-FunctionDecl 0x56347470dd80 prev 0x5634746ae728 <line:156:1, line:166:1> line:156:10 GetLocalAddress 'CAddress (const CNetAddr *, ServiceFlags)'
| |-ParmVarDecl 0x56347470dc70 <col:26, col:42> col:42 used paddrPeer 'const CNetAddr *'
| |-ParmVarDecl 0x56347470dce8 <col:53, col:66> col:66 used nLocalServices 'ServiceFlags'
| `-CompoundStmt 0x56347470ede0 <line:157:1, line:166:1>
|   |-DeclStmt 0x56347470e128 <line:158:5, col:71>
|   | `-VarDecl 0x56347470de88 <col:5, col:70> col:14 used ret 'CAddress' nrvo callinit
|   |   `-ExprWithCleanups 0x56347470e110 <col:14, col:70> 'CAddress'
|   |     `-CXXConstructExpr 0x56347470e0d8 <col:14, col:70> 'CAddress' 'void (CService, ServiceFlags)'
|   |       |-CXXConstructExpr 0x56347470e090 <col:18, col:53> 'CService' 'void (CService &&) noexcept' elidable
|   |       | `-MaterializeTemporaryExpr 0x56347470e078 <col:18, col:53> 'CService' xvalue
|   |       |   `-CXXTemporaryObjectExpr 0x56347470dff0 <col:18, col:53> 'CService' 'void (const CNetAddr &, unsigned short)'
|   |       |     |-MaterializeTemporaryExpr 0x56347470dfd8 <col:27, col:36> 'const CNetAddr' lvalue
|   |       |     | `-ImplicitCastExpr 0x56347470dfc0 <col:27, col:36> 'const CNetAddr' <NoOp>
|   |       |     |   `-CXXTemporaryObjectExpr 0x56347470df10 <col:27, col:36> 'CNetAddr' 'void ()'
|   |       |     `-CallExpr 0x56347470dfa0 <col:38, col:52> 'unsigned short'
|   |       |       `-ImplicitCastExpr 0x56347470df88 <col:38> 'unsigned short (*)()' <FunctionToPointerDecay>
|   |       |         `-DeclRefExpr 0x56347470df40 <col:38> 'unsigned short ()' lvalue Function 0x56347470ceb0 'GetListenPort' 'unsigned short ()'
|   |       `-ImplicitCastExpr 0x56347470e0c0 <col:56> 'ServiceFlags' <LValueToRValue>
|   |         `-DeclRefExpr 0x56347470e030 <col:56> 'ServiceFlags' lvalue ParmVar 0x56347470dce8 'nLocalServices' 'ServiceFlags'
|   |-DeclStmt 0x56347470e1e0 <line:159:5, col:18>
|   | `-VarDecl 0x56347470e150 <col:5, col:14> col:14 used addr 'CService' callinit
|   |   `-CXXConstructExpr 0x56347470e1b8 <col:14> 'CService' 'void ()'
|   |-IfStmt 0x56347470ecf8 <line:160:5, line:163:5>
|   | |-CallExpr 0x56347470e2e0 <line:160:9, col:33> 'bool'
|   | | |-ImplicitCastExpr 0x56347470e2c8 <col:9> 'bool (*)(CService &, const CNetAddr *)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x56347470e280 <col:9> 'bool (CService &, const CNetAddr *)' lvalue Function 0x56347470d250 'GetLocal' 'bool (CService &, const CNetAddr *)'
|   | | |-DeclRefExpr 0x56347470e240 <col:18> 'CService' lvalue Var 0x56347470e150 'addr' 'CService'
|   | | `-ImplicitCastExpr 0x56347470e310 <col:24> 'const CNetAddr *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56347470e260 <col:24> 'const CNetAddr *' lvalue ParmVar 0x56347470dc70 'paddrPeer' 'const CNetAddr *'
|   | `-CompoundStmt 0x56347470ece0 <line:161:5, line:163:5>
|   |   `-ExprWithCleanups 0x56347470ecc8 <line:162:9, col:44> 'CAddress' lvalue
|   |     `-CXXOperatorCallExpr 0x56347470ec90 <col:9, col:44> 'CAddress' lvalue
|   |       |-ImplicitCastExpr 0x56347470ec78 <col:13> 'CAddress &(*)(CAddress &&) noexcept' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x56347470ec00 <col:13> 'CAddress &(CAddress &&) noexcept' lvalue CXXMethod 0x56347470ea40 'operator=' 'CAddress &(CAddress &&) noexcept'
|   |       |-DeclRefExpr 0x56347470e328 <col:9> 'CAddress' lvalue Var 0x56347470de88 'ret' 'CAddress'
|   |       `-MaterializeTemporaryExpr 0x56347470ebb8 <col:15, col:44> 'CAddress' xvalue
|   |         `-CXXTemporaryObjectExpr 0x56347470e3f8 <col:15, col:44> 'CAddress' 'void (CService, ServiceFlags)'
|   |           |-CXXConstructExpr 0x56347470e3b0 <col:24> 'CService' 'void (const CService &) noexcept'
|   |           | `-ImplicitCastExpr 0x56347470e398 <col:24> 'const CService' lvalue <NoOp>
|   |           |   `-DeclRefExpr 0x56347470e358 <col:24> 'CService' lvalue Var 0x56347470e150 'addr' 'CService'
|   |           `-ImplicitCastExpr 0x56347470e3e0 <col:30> 'ServiceFlags' <LValueToRValue>
|   |             `-DeclRefExpr 0x56347470e378 <col:30> 'ServiceFlags' lvalue ParmVar 0x56347470dce8 'nLocalServices' 'ServiceFlags'
|   `-ReturnStmt 0x56347470edc8 <line:165:5, col:12>
|     `-CXXConstructExpr 0x56347470ed98 <col:12> 'CAddress' 'void (CAddress &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56347470ed80 <col:12> 'CAddress' xvalue <NoOp>
|         `-DeclRefExpr 0x56347470ed60 <col:12> 'CAddress' lvalue Var 0x56347470de88 'ret' 'CAddress'
|-FunctionDecl 0x56347470eef0 <line:168:1, line:173:1> line:168:12 GetnScore 'int (const CService &)' static
| |-ParmVarDecl 0x56347470ee20 <col:22, col:38> col:38 used addr 'const CService &'
| `-CompoundStmt 0x56347470f108 <line:169:1, line:173:1>
|   `-IfStmt 0x56347470f0d0 <line:171:5, col:47>
|     |-OpaqueValueExpr 0x56347470f0b8 <<invalid sloc>> 'bool'
|     `-ReturnStmt 0x56347470f0a8 <col:40, col:47>
|       `-IntegerLiteral 0x56347470f088 <col:47> 'int' 0
|-FunctionDecl 0x56347470f1c0 prev 0x5634746ad280 <line:176:1, line:181:1> line:176:6 used IsPeerAddrLocalGood 'bool (CNode *)'
| |-ParmVarDecl 0x56347470f130 <col:26, col:33> col:33 used pnode 'CNode *'
| `-CompoundStmt 0x56347470f580 <line:177:1, line:181:1>
|   `-DeclStmt 0x56347470f3e0 <line:178:5, col:47>
|     `-VarDecl 0x56347470f278 <col:5, col:46> col:14 used addrLocal 'CService' cinit
|       `-ExprWithCleanups 0x56347470f3c8 <col:26, col:46> 'CService'
|         `-CXXConstructExpr 0x56347470f398 <col:26, col:46> 'CService' 'void (CService &&) noexcept' elidable
|           `-MaterializeTemporaryExpr 0x56347470f380 <col:26, col:46> 'CService' xvalue
|             `-CXXMemberCallExpr 0x56347470f348 <col:26, col:46> 'CService'
|               `-MemberExpr 0x56347470f318 <col:26, col:33> '<bound member function type>' ->GetAddrLocal 0x5634746b7738
|                 `-ImplicitCastExpr 0x56347470f368 <col:26> 'const CNode *' <NoOp>
|                   `-ImplicitCastExpr 0x56347470f300 <col:26> 'CNode *' <LValueToRValue>
|                     `-DeclRefExpr 0x56347470f2e0 <col:26> 'CNode *' lvalue ParmVar 0x56347470f130 'pnode' 'CNode *'
|-FunctionDecl 0x56347470f638 prev 0x5634746ad3c8 <line:184:1, line:208:1> line:184:6 AdvertiseLocal 'void (CNode *)'
| |-ParmVarDecl 0x56347470f5a8 <col:21, col:28> col:28 used pnode 'CNode *'
| `-CompoundStmt 0x563474710738 <line:185:1, line:208:1>
|   `-IfStmt 0x563474710720 <line:186:5, line:207:5>
|     |-OpaqueValueExpr 0x563474710708 <<invalid sloc>> 'bool'
|     `-CompoundStmt 0x5634747106d0 <line:187:5, line:207:5>
|       |-DeclStmt 0x56347470f8d0 <line:188:9, col:86>
|       | `-VarDecl 0x56347470f748 <col:9, col:18> col:18 used addrLocal 'CAddress'
|       |-IfStmt 0x56347470ff60 <line:189:9, line:192:9>
|       | |-OpaqueValueExpr 0x56347470ff48 <<invalid sloc>> 'bool'
|       | `-CompoundStmt 0x56347470ff30 <line:189:54, line:192:9>
|       |   `-ExprWithCleanups 0x56347470ff18 <line:191:13, col:114> 'CAddress' lvalue
|       |     `-CXXOperatorCallExpr 0x56347470fee0 <col:13, col:114> 'CAddress' lvalue
|       |       |-ImplicitCastExpr 0x56347470fec8 <col:23> 'CAddress &(*)(const CAddress &) noexcept' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x56347470fe50 <col:23> 'CAddress &(const CAddress &) noexcept' lvalue CXXMethod 0x56347470e468 'operator=' 'CAddress &(const CAddress &) noexcept'
|       |       |-DeclRefExpr 0x56347470f9c0 <col:13> 'CAddress' lvalue Var 0x56347470f748 'addrLocal' 'CAddress'
|       |       `-MaterializeTemporaryExpr 0x56347470fe00 <col:25, col:114> 'const CAddress' lvalue
|       |         `-ImplicitCastExpr 0x56347470fde8 <col:25, col:114> 'const CAddress' <NoOp>
|       |           `-CXXTemporaryObjectExpr 0x56347470fda8 <col:25, col:114> 'CAddress' 'void (CService, ServiceFlags)'
|       |             |-CXXConstructExpr 0x56347470fd78 <col:34, col:86> 'CService' 'void (CService &&) noexcept' elidable
|       |             | `-MaterializeTemporaryExpr 0x56347470fd60 <col:34, col:86> 'CService' xvalue
|       |             |   `-CXXFunctionalCastExpr 0x56347470fc98 <col:34, col:86> 'CService' functional cast to class CService <ConstructorConversion>
|       |             |     `-CXXConstructExpr 0x56347470fc68 <col:34, col:86> 'CService' 'void (CService &&) noexcept' elidable
|       |             |       `-MaterializeTemporaryExpr 0x56347470fc50 <col:43, col:85> 'CService' xvalue
|       |             |         `-CallExpr 0x56347470fbf0 <col:43, col:85> 'CService'
|       |             |           |-ImplicitCastExpr 0x56347470fbd8 <col:43> 'CService (*)(const char *, int)' <FunctionToPointerDecay>
|       |             |           | `-DeclRefExpr 0x56347470fb90 <col:43> 'CService (const char *, int)' lvalue Function 0x5634746daff0 'LookupNumeric' 'CService (const char *, int)'
|       |             |           |-ImplicitCastExpr 0x56347470fc20 <col:57> 'const char *' <ArrayToPointerDecay>
|       |             |           | `-StringLiteral 0x56347470fac8 <col:57> 'const char [10]' lvalue "127.0.0.1"
|       |             |           `-ImplicitCastExpr 0x56347470fc38 <col:70, col:84> 'int' <IntegralCast>
|       |             |             `-CallExpr 0x56347470fb70 <col:70, col:84> 'unsigned short'
|       |             |               `-ImplicitCastExpr 0x56347470fb58 <col:70> 'unsigned short (*)()' <FunctionToPointerDecay>
|       |             |                 `-DeclRefExpr 0x56347470fb38 <col:70> 'unsigned short ()' lvalue Function 0x56347470ceb0 'GetListenPort' 'unsigned short ()'
|       |             `-CXXMemberCallExpr 0x56347470fd28 <col:89, col:113> 'ServiceFlags'
|       |               `-MemberExpr 0x56347470fcf8 <col:89, col:96> '<bound member function type>' ->GetLocalServices 0x5634746bad70
|       |                 `-ImplicitCastExpr 0x56347470fd48 <col:89> 'const CNode *' <NoOp>
|       |                   `-ImplicitCastExpr 0x56347470fce0 <col:89> 'CNode *' <LValueToRValue>
|       |                     `-DeclRefExpr 0x56347470fcc0 <col:89> 'CNode *' lvalue ParmVar 0x56347470f5a8 'pnode' 'CNode *'
|       |-DeclStmt 0x563474710040 <line:196:9, col:30>
|       | `-VarDecl 0x56347470ff88 <col:9, col:27> col:27 used rng 'FastRandomContext' callinit
|       |   `-CXXConstructExpr 0x563474710010 <col:27> 'FastRandomContext' 'void (bool) noexcept'
|       |     `-CXXDefaultArgExpr 0x56347470fff0 <<invalid sloc>> 'bool'
|       |-IfStmt 0x563474710418 <line:197:9, line:201:9>
|       | |-OpaqueValueExpr 0x563474710400 <<invalid sloc>> 'bool'
|       | `-CompoundStmt 0x5634747103f0 <line:199:9, line:201:9>
|       `-IfStmt 0x5634747106b8 <line:202:9, line:206:9>
|         |-OpaqueValueExpr 0x5634747106a0 <<invalid sloc>> 'bool'
|         `-CompoundStmt 0x563474710688 <line:203:9, line:206:9>
|           `-CXXMemberCallExpr 0x563474710640 <line:205:13, col:46> 'void'
|             |-MemberExpr 0x5634747105d0 <col:13, col:20> '<bound member function type>' ->PushAddress 0x5634746b7d98
|             | `-ImplicitCastExpr 0x5634747105b8 <col:13> 'CNode *' <LValueToRValue>
|             |   `-DeclRefExpr 0x563474710598 <col:13> 'CNode *' lvalue ParmVar 0x56347470f5a8 'pnode' 'CNode *'
|             |-ImplicitCastExpr 0x563474710670 <col:32> 'const CAddress' lvalue <NoOp>
|             | `-DeclRefExpr 0x563474710600 <col:32> 'CAddress' lvalue Var 0x56347470f748 'addrLocal' 'CAddress'
|             `-DeclRefExpr 0x563474710620 <col:43> 'FastRandomContext' lvalue Var 0x56347470ff88 'rng' 'FastRandomContext'
|-FunctionDecl 0x563474710878 prev 0x5634746adbe8 <line:211:1, line:235:1> line:211:6 used AddLocal 'bool (const CService &, int)'
| |-ParmVarDecl 0x563474710760 <col:15, col:31> col:31 used addr 'const CService &'
| |-ParmVarDecl 0x5634747107e0 <col:37, col:41> col:41 used nScore 'int' cinit
| | `-ImplicitCastExpr 0x5634746adb68 <bitcoin/src/net.h:549:50> 'int' <IntegralCast>
| |   `-DeclRefExpr 0x5634746adb48 <col:50> '(anonymous enum at bitcoin/src/net.h:525:1)' EnumConstant 0x5634746ad000 'LOCAL_NONE' '(anonymous enum at bitcoin/src/net.h:525:1)'
| `-CompoundStmt 0x563474711330 <bitcoin/src/net.cpp:212:1, line:235:1>
|   |-IfStmt 0x5634747109d0 <line:213:5, line:214:16>
|   | |-OpaqueValueExpr 0x5634747109b8 <<invalid sloc>> 'bool'
|   | `-ReturnStmt 0x5634747109a8 <col:9, col:16>
|   |   `-CXXBoolLiteralExpr 0x563474710998 <col:16> 'bool' false
|   |-IfStmt 0x563474710b20 <line:216:5, line:217:16>
|   | |-BinaryOperator 0x563474710ae0 <line:216:9, col:32> 'bool' '&&'
|   | | |-UnaryOperator 0x563474710a20 <col:9, col:10> 'bool' prefix '!' cannot overflow
|   | | | `-ImplicitCastExpr 0x563474710a08 <col:10> 'bool' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x5634747109e8 <col:10> 'bool' lvalue Var 0x56347470c6b8 'fDiscover' 'bool'
|   | | `-BinaryOperator 0x563474710ac0 <col:23, col:32> 'bool' '<'
|   | |   |-ImplicitCastExpr 0x563474710a90 <col:23> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x563474710a50 <col:23> 'int' lvalue ParmVar 0x5634747107e0 'nScore' 'int'
|   | |   `-ImplicitCastExpr 0x563474710aa8 <col:32> 'int' <IntegralCast>
|   | |     `-DeclRefExpr 0x563474710a70 <col:32> '(anonymous enum at bitcoin/src/net.h:525:1)' EnumConstant 0x5634746ad140 'LOCAL_MANUAL' '(anonymous enum at bitcoin/src/net.h:525:1)'
|   | `-ReturnStmt 0x563474710b10 <line:217:9, col:16>
|   |   `-CXXBoolLiteralExpr 0x563474710b00 <col:16> 'bool' false
|   |-IfStmt 0x563474710be0 <line:219:5, line:220:16>
|   | |-OpaqueValueExpr 0x563474710bc8 <<invalid sloc>> 'bool'
|   | `-ReturnStmt 0x563474710bb8 <col:9, col:16>
|   |   `-CXXBoolLiteralExpr 0x563474710ba8 <col:16> 'bool' false
|   |-CompoundStmt 0x5634747112e8 <line:224:5, line:232:5>
|   | |-DeclStmt 0x563474710e00 <line:226:9, col:53>
|   | | `-VarDecl 0x563474710d58 <col:9, col:14> col:14 used fAlready 'bool'
|   | |-DeclStmt 0x563474710ee0 <line:227:9, col:52>
|   | | `-VarDecl 0x563474710e58 <col:9, col:27> col:27 used info 'LocalServiceInfo &'
|   | `-IfStmt 0x5634747112d0 <line:228:9, line:231:9>
|   |   |-BinaryOperator 0x563474711008 <line:228:13, col:41> 'bool' '||'
|   |   | |-UnaryOperator 0x563474710f30 <col:13, col:14> 'bool' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x563474710f18 <col:14> 'bool' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x563474710ef8 <col:14> 'bool' lvalue Var 0x563474710d58 'fAlready' 'bool'
|   |   | `-BinaryOperator 0x563474710fe8 <col:26, col:41> 'bool' '>='
|   |   |   |-ImplicitCastExpr 0x563474710fb8 <col:26> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x563474710f48 <col:26> 'int' lvalue ParmVar 0x5634747107e0 'nScore' 'int'
|   |   |   `-ImplicitCastExpr 0x563474710fd0 <col:36, col:41> 'int' <LValueToRValue>
|   |   |     `-MemberExpr 0x563474710f88 <col:36, col:41> 'int' lvalue .nScore 0x5634746aebc0
|   |   |       `-DeclRefExpr 0x563474710f68 <col:36> 'LocalServiceInfo' lvalue Var 0x563474710e58 'info' 'LocalServiceInfo &'
|   |   `-CompoundStmt 0x5634747112b0 <col:49, line:231:9>
|   |     |-BinaryOperator 0x563474711198 <line:229:13, col:53> 'int' lvalue '='
|   |     | |-MemberExpr 0x563474711048 <col:13, col:18> 'int' lvalue .nScore 0x5634746aebc0
|   |     | | `-DeclRefExpr 0x563474711028 <col:13> 'LocalServiceInfo' lvalue Var 0x563474710e58 'info' 'LocalServiceInfo &'
|   |     | `-BinaryOperator 0x563474711178 <col:27, col:53> 'int' '+'
|   |     |   |-ImplicitCastExpr 0x563474711160 <col:27> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x563474711078 <col:27> 'int' lvalue ParmVar 0x5634747107e0 'nScore' 'int'
|   |     |   `-ParenExpr 0x563474711140 <col:36, col:53> 'int'
|   |     |     `-ConditionalOperator 0x563474711110 <col:37, col:52> 'int'
|   |     |       |-ImplicitCastExpr 0x5634747110f8 <col:37> 'bool' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x563474711098 <col:37> 'bool' lvalue Var 0x563474710d58 'fAlready' 'bool'
|   |     |       |-IntegerLiteral 0x5634747110b8 <col:48> 'int' 1
|   |     |       `-IntegerLiteral 0x5634747110d8 <col:52> 'int' 0
|   |     `-BinaryOperator 0x563474711290 <line:230:13, col:39> 'int' lvalue '='
|   |       |-MemberExpr 0x5634747111d8 <col:13, col:18> 'int' lvalue .nPort 0x5634746aec28
|   |       | `-DeclRefExpr 0x5634747111b8 <col:13> 'LocalServiceInfo' lvalue Var 0x563474710e58 'info' 'LocalServiceInfo &'
|   |       `-ImplicitCastExpr 0x563474711278 <col:26, col:39> 'int' <IntegralCast>
|   |         `-CXXMemberCallExpr 0x563474711258 <col:26, col:39> 'unsigned short'
|   |           `-MemberExpr 0x563474711228 <col:26, col:31> '<bound member function type>' .GetPort 0x5634745d1da0
|   |             `-DeclRefExpr 0x563474711208 <col:26> 'const CService' lvalue ParmVar 0x563474710760 'addr' 'const CService &'
|   `-ReturnStmt 0x563474711320 <line:234:5, col:12>
|     `-CXXBoolLiteralExpr 0x563474711310 <col:12> 'bool' true
|-FunctionDecl 0x563474711490 prev 0x5634746ade38 <line:237:1, line:240:1> line:237:6 AddLocal 'bool (const CNetAddr &, int)'
| |-ParmVarDecl 0x563474711378 <col:15, col:31> col:31 used addr 'const CNetAddr &'
| |-ParmVarDecl 0x5634747113f8 <col:37, col:41> col:41 used nScore 'int' cinit
| | `-ImplicitCastExpr 0x5634746addb0 <bitcoin/src/net.h:550:50> 'int' <IntegralCast>
| |   `-DeclRefExpr 0x5634746add90 <col:50> '(anonymous enum at bitcoin/src/net.h:525:1)' EnumConstant 0x5634746ad000 'LOCAL_NONE' '(anonymous enum at bitcoin/src/net.h:525:1)'
| `-CompoundStmt 0x5634747117c0 <bitcoin/src/net.cpp:238:1, line:240:1>
|   `-ReturnStmt 0x5634747117b0 <line:239:5, col:60>
|     `-ExprWithCleanups 0x563474711798 <col:12, col:60> 'bool'
|       `-CallExpr 0x563474711720 <col:12, col:60> 'bool'
|         |-ImplicitCastExpr 0x563474711708 <col:12> 'bool (*)(const CService &, int)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5634747116c0 <col:12> 'bool (const CService &, int)' lvalue Function 0x563474710878 'AddLocal' 'bool (const CService &, int)'
|         |-MaterializeTemporaryExpr 0x563474711768 <col:21, col:51> 'const CService' lvalue
|         | `-ImplicitCastExpr 0x563474711750 <col:21, col:51> 'const CService' <NoOp>
|         |   `-CXXTemporaryObjectExpr 0x563474711660 <col:21, col:51> 'CService' 'void (const CNetAddr &, unsigned short)'
|         |     |-DeclRefExpr 0x5634747115a0 <col:30> 'const CNetAddr' lvalue ParmVar 0x563474711378 'addr' 'const CNetAddr &'
|         |     `-CallExpr 0x563474711640 <col:36, col:50> 'unsigned short'
|         |       `-ImplicitCastExpr 0x563474711628 <col:36> 'unsigned short (*)()' <FunctionToPointerDecay>
|         |         `-DeclRefExpr 0x563474711608 <col:36> 'unsigned short ()' lvalue Function 0x56347470ceb0 'GetListenPort' 'unsigned short ()'
|         `-ImplicitCastExpr 0x563474711780 <col:54> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5634747116a0 <col:54> 'int' lvalue ParmVar 0x5634747113f8 'nScore' 'int'
|-FunctionDecl 0x563474711878 prev 0x5634746adf88 <line:242:1, line:247:1> line:242:6 RemoveLocal 'void (const CService &)'
| |-ParmVarDecl 0x5634747117e8 <col:18, col:34> col:34 used addr 'const CService &'
| `-CompoundStmt 0x563474711a70 <line:243:1, line:247:1>
|-FunctionDecl 0x563474711bb0 prev 0x5634746ad648 <line:249:1, line:255:1> line:249:6 SetReachable 'void (enum Network, bool)'
| |-ParmVarDecl 0x563474711aa0 <col:19, col:32> col:32 used net 'enum Network':'Network'
| |-ParmVarDecl 0x563474711b18 <col:37, col:42> col:42 used reachable 'bool'
| `-CompoundStmt 0x563474711fa8 <line:250:1, line:255:1>
|   |-IfStmt 0x563474711de0 <line:251:5, line:252:9>
|   | |-BinaryOperator 0x563474711db0 <line:251:9, col:41> 'bool' '||'
|   | | |-BinaryOperator 0x563474711ce8 <col:9, col:16> 'bool' '=='
|   | | | |-ImplicitCastExpr 0x563474711cb8 <col:9> 'int' <IntegralCast>
|   | | | | `-ImplicitCastExpr 0x563474711ca0 <col:9> 'enum Network':'Network' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x563474711c60 <col:9> 'enum Network':'Network' lvalue ParmVar 0x563474711aa0 'net' 'enum Network':'Network'
|   | | | `-ImplicitCastExpr 0x563474711cd0 <col:16> 'int' <IntegralCast>
|   | | |   `-DeclRefExpr 0x563474711c80 <col:16> 'Network' EnumConstant 0x5634745c5ce0 'NET_UNROUTABLE' 'Network'
|   | | `-BinaryOperator 0x563474711d90 <col:34, col:41> 'bool' '=='
|   | |   |-ImplicitCastExpr 0x563474711d60 <col:34> 'int' <IntegralCast>
|   | |   | `-ImplicitCastExpr 0x563474711d48 <col:34> 'enum Network':'Network' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x563474711d08 <col:34> 'enum Network':'Network' lvalue ParmVar 0x563474711aa0 'net' 'enum Network':'Network'
|   | |   `-ImplicitCastExpr 0x563474711d78 <col:41> 'int' <IntegralCast>
|   | |     `-DeclRefExpr 0x563474711d28 <col:41> 'Network' EnumConstant 0x5634745c5e20 'NET_INTERNAL' 'Network'
|   | `-ReturnStmt 0x563474711dd0 <line:252:9>
|   `-BinaryOperator 0x563474711f88 <line:254:5, col:23> 'bool' lvalue '='
|     |-ArraySubscriptExpr 0x563474711f18 <col:5, col:18> 'bool' lvalue
|     | |-ImplicitCastExpr 0x563474711ee8 <col:5> 'bool *' <ArrayToPointerDecay>
|     | | `-DeclRefExpr 0x563474711ea8 <col:5> 'bool [5]' lvalue Var 0x56347470ca08 'vfLimited' 'bool [5]'
|     | `-ImplicitCastExpr 0x563474711f00 <col:15> 'enum Network':'Network' <LValueToRValue>
|     |   `-DeclRefExpr 0x563474711ec8 <col:15> 'enum Network':'Network' lvalue ParmVar 0x563474711aa0 'net' 'enum Network':'Network'
|     `-UnaryOperator 0x563474711f70 <col:22, col:23> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x563474711f58 <col:23> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x563474711f38 <col:23> 'bool' lvalue ParmVar 0x563474711b18 'reachable' 'bool'
|-FunctionDecl 0x563474712078 prev 0x5634746ad838 <line:257:1, line:261:1> line:257:6 used IsReachable 'bool (enum Network)'
| |-ParmVarDecl 0x563474711fe8 <col:18, col:31> col:31 used net 'enum Network':'Network'
| `-CompoundStmt 0x563474712298 <line:258:1, line:261:1>
|   `-ReturnStmt 0x563474712288 <line:260:5, col:26>
|     `-UnaryOperator 0x563474712270 <col:12, col:26> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x563474712258 <col:13, col:26> 'bool' <LValueToRValue>
|         `-ArraySubscriptExpr 0x563474712238 <col:13, col:26> 'bool' lvalue
|           |-ImplicitCastExpr 0x563474712208 <col:13> 'bool *' <ArrayToPointerDecay>
|           | `-DeclRefExpr 0x5634747121c8 <col:13> 'bool [5]' lvalue Var 0x56347470ca08 'vfLimited' 'bool [5]'
|           `-ImplicitCastExpr 0x563474712220 <col:23> 'enum Network':'Network' <LValueToRValue>
|             `-DeclRefExpr 0x5634747121e8 <col:23> 'enum Network':'Network' lvalue ParmVar 0x563474711fe8 'net' 'enum Network':'Network'
|-FunctionDecl 0x563474712350 prev 0x5634746ad9a8 <line:263:1, line:266:1> line:263:6 IsReachable 'bool (const CNetAddr &)'
| |-ParmVarDecl 0x5634747122c0 <col:18, col:34> col:34 used addr 'const CNetAddr &'
| `-CompoundStmt 0x5634747125b8 <line:264:1, line:266:1>
|   `-ReturnStmt 0x563474712578 <line:265:5, col:41>
|     `-CallExpr 0x563474712550 <col:12, col:41> 'bool'
|       |-ImplicitCastExpr 0x563474712538 <col:12> 'bool (*)(enum Network)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5634747124b8 <col:12> 'bool (enum Network)' lvalue Function 0x563474712078 'IsReachable' 'bool (enum Network)'
|       `-CXXMemberCallExpr 0x563474712498 <col:24, col:40> 'enum Network':'Network'
|         `-MemberExpr 0x563474712468 <col:24, col:29> '<bound member function type>' .GetNetwork 0x5634745cc8e0
|           `-DeclRefExpr 0x563474712448 <col:24> 'const CNetAddr' lvalue ParmVar 0x5634747122c0 'addr' 'const CNetAddr &'
|-FunctionDecl 0x563474712670 prev 0x5634746ae108 <line:269:1, line:278:1> line:269:6 SeenLocal 'bool (const CService &)'
| |-ParmVarDecl 0x5634747125e0 <col:16, col:32> col:32 used addr 'const CService &'
| |-CompoundStmt 0x5634747128d8 <line:270:1, line:278:1>
| | |-CompoundStmt 0x563474712878 <line:271:5, line:276:5>
| | | `-IfStmt 0x563474712840 <line:273:9, line:274:20>
| | |   |-OpaqueValueExpr 0x563474712828 <<invalid sloc>> 'bool'
| | |   `-ReturnStmt 0x563474712818 <col:13, col:20>
| | |     `-CXXBoolLiteralExpr 0x563474712808 <col:20> 'bool' false
| | `-ReturnStmt 0x5634747128a0 <line:277:5, col:12>
| |   `-CXXBoolLiteralExpr 0x563474712890 <col:12> 'bool' true
| `-FullComment 0x56347478a0e0 <line:268:4, col:29>
|   `-ParagraphComment 0x56347478a0b0 <col:4, col:29>
|     `-TextComment 0x56347478a080 <col:4, col:29> Text=" vote for a local address "
|-FunctionDecl 0x563474712998 prev 0x5634746ae250 <line:282:1, line:286:1> line:282:6 IsLocal 'bool (const CService &)'
| |-ParmVarDecl 0x563474712908 <col:14, col:30> col:30 used addr 'const CService &'
| |-CompoundStmt 0x563474712b38 <line:283:1, line:286:1>
| `-FullComment 0x56347478a1b0 <line:281:4, col:55>
|   `-ParagraphComment 0x56347478a180 <col:4, col:55>
|     `-TextComment 0x56347478a150 <col:4, col:55> Text=" check whether a given address is potentially local "
|-CXXMethodDecl 0x563474712bf0 parent 0x5634746986b0 prev 0x5634746a5168 <line:288:1, line:297:1> line:288:18 FindNode 'CNode *(const CNetAddr &)'
| |-ParmVarDecl 0x563474712b60 <col:27, col:43> col:43 used ip 'const CNetAddr &'
| `-CompoundStmt 0x563474712ee8 <line:289:1, line:297:1>
|   `-ReturnStmt 0x563474712ed8 <line:296:5, col:12>
|     `-ImplicitCastExpr 0x563474712ec0 <col:12> 'CNode *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x563474712eb0 <col:12> 'nullptr_t'
|-CXXMethodDecl 0x563474712fa8 parent 0x5634746986b0 prev 0x5634746a52e8 <line:299:1, line:308:1> line:299:18 FindNode 'CNode *(const CSubNet &)'
| |-ParmVarDecl 0x563474712f18 <col:27, col:42> col:42 used subNet 'const CSubNet &'
| `-CompoundStmt 0x5634747132d8 <line:300:1, line:308:1>
|   `-ReturnStmt 0x5634747132c8 <line:307:5, col:12>
|     `-ImplicitCastExpr 0x5634747132b0 <col:12> 'CNode *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x5634747132a0 <col:12> 'nullptr_t'
|-CXXMethodDecl 0x5634747133b0 parent 0x5634746986b0 <line:310:1, line:319:1> line:310:18 invalid FindNode 'CNode *(const int &)'
| |-ParmVarDecl 0x563474713320 <col:27, col:46> col:46 invalid addrName 'const int &'
| `-CompoundStmt 0x563474713688 <line:311:1, line:319:1>
|   `-ReturnStmt 0x563474713678 <line:318:5, col:12>
|     `-ImplicitCastExpr 0x563474713660 <col:12> 'CNode *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x563474713650 <col:12> 'nullptr_t'
|-CXXMethodDecl 0x563474713748 parent 0x5634746986b0 prev 0x5634746a55f8 <line:321:1, line:330:1> line:321:18 FindNode 'CNode *(const CService &)'
| |-ParmVarDecl 0x5634747136b8 <col:27, col:43> col:43 used addr 'const CService &'
| `-CompoundStmt 0x563474713a48 <line:322:1, line:330:1>
|   `-ReturnStmt 0x563474713a38 <line:329:5, col:12>
|     `-ImplicitCastExpr 0x563474713a20 <col:12> 'CNode *' <NullToPointer>
|       `-CXXNullPtrLiteralExpr 0x563474713a10 <col:12> 'nullptr_t'
|-CXXMethodDecl 0x563474713b20 parent 0x5634746986b0 <line:332:1, line:340:1> line:332:16 invalid CheckIncomingNonce 'bool (int)'
| |-ParmVarDecl 0x563474713a90 <col:35, col:44> col:44 invalid nonce 'int'
| `-CompoundStmt 0x563474713e18 <line:333:1, line:340:1>
|   `-ReturnStmt 0x563474713de0 <line:339:5, col:12>
|     `-CXXBoolLiteralExpr 0x563474713dd0 <col:12> 'bool' true
|-FunctionDecl 0x563474713f38 <line:343:1, line:356:1> line:343:17 used GetBindAddress 'CAddress (SOCKET)' static
| |-ParmVarDecl 0x563474713e40 <col:32, col:39> col:39 used sock 'SOCKET':'unsigned int'
| |-CompoundStmt 0x563474714640 <line:344:1, line:356:1>
| | |-DeclStmt 0x563474714080 <line:345:5, col:23>
| | | `-VarDecl 0x563474713ff0 <col:5, col:14> col:14 used addr_bind 'CAddress' nrvo callinit
| | |   `-CXXConstructExpr 0x563474714058 <col:14> 'CAddress' 'void ()'
| | |-DeclStmt 0x563474714228 <line:346:5, col:42>
| | | |-CXXRecordDecl 0x563474714098 <col:5, col:12> col:12 struct sockaddr_storage
| | | `-VarDecl 0x5634747141a8 <col:5, col:29> col:29 invalid sockaddr_bind 'struct sockaddr_storage':'sockaddr_storage'
| | |-DeclStmt 0x5634747142d0 <line:347:5, col:56>
| | | `-VarDecl 0x563474714268 <col:5, col:15> col:15 invalid sockaddr_bind_len 'int'
| | |-IfStmt 0x5634747145a8 <line:348:5, line:354:5>
| | | |-BinaryOperator 0x5634747143e8 <line:348:9, bitcoin/src/compat.h:59:40> 'bool' '!='
| | | | |-ImplicitCastExpr 0x5634747143d0 <bitcoin/src/net.cpp:348:9> 'SOCKET':'unsigned int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x5634747142e8 <col:9> 'SOCKET':'unsigned int' lvalue ParmVar 0x563474713e40 'sock' 'SOCKET':'unsigned int'
| | | | `-CStyleCastExpr 0x5634747143a8 <bitcoin/src/compat.h:59:29, col:40> 'SOCKET':'unsigned int' <NoOp>
| | | |   `-ImplicitCastExpr 0x563474714390 <col:37, col:40> 'SOCKET':'unsigned int' <IntegralCast> part_of_explicit_cast
| | | |     `-ParenExpr 0x563474714370 <col:37, col:40> 'int'
| | | |       `-UnaryOperator 0x563474714328 <col:38, col:39> 'int' prefix '~' cannot overflow
| | | |         `-IntegerLiteral 0x563474714308 <col:39> 'int' 0
| | | `-CompoundStmt 0x563474714590 <bitcoin/src/net.cpp:348:33, line:354:5>
| | |   `-IfStmt 0x563474714568 <line:349:9, line:353:9> has_else
| | |     |-OpaqueValueExpr 0x563474714550 <<invalid sloc>> 'bool'
| | |     |-CompoundStmt 0x5634747144b8 <line:349:87, line:351:9>
| | |     `-CompoundStmt 0x563474714540 <col:16, line:353:9>
| | `-ReturnStmt 0x563474714628 <line:355:5, col:12>
| |   `-CXXConstructExpr 0x5634747145f8 <col:12> 'CAddress' 'void (CAddress &&) noexcept' elidable
| |     `-ImplicitCastExpr 0x5634747145e0 <col:12> 'CAddress' xvalue <NoOp>
| |       `-DeclRefExpr 0x5634747145c0 <col:12> 'CAddress' lvalue Var 0x563474713ff0 'addr_bind' 'CAddress'
| `-FullComment 0x56347478a280 <line:342:4, col:50>
|   `-ParagraphComment 0x56347478a250 <col:4, col:50>
|     `-TextComment 0x56347478a220 <col:4, col:50> Text=" Get the bind address for a socket as CAddress "
|-CXXMethodDecl 0x563474714928 parent 0x5634746986b0 prev 0x5634746a5a58 <line:358:1, line:452:1> line:358:18 ConnectNode 'CNode *(CAddress, const char *, bool, bool, bool)'
| |-ParmVarDecl 0x563474714690 <col:30, col:39> col:39 used addrConnect 'CAddress'
| |-ParmVarDecl 0x563474714710 <col:52, col:64> col:64 used pszDest 'const char *'
| |-ParmVarDecl 0x563474714788 <col:73, col:78> col:78 used fCountFailure 'bool'
| |-ParmVarDecl 0x563474714800 <col:93, col:98> col:98 used manual_connection 'bool'
| |-ParmVarDecl 0x563474714878 <col:117, col:122> col:122 used block_relay_only 'bool'
| `-CompoundStmt 0x5634746a0ae8 <line:359:1, line:452:1>
|   |-IfStmt 0x56347469deb0 <line:360:5, line:371:5>
|   | |-BinaryOperator 0x56347469da70 <line:360:9, col:20> 'bool' '=='
|   | | |-ImplicitCastExpr 0x56347469da40 <col:9> 'const char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x563474714a38 <col:9> 'const char *' lvalue ParmVar 0x563474714710 'pszDest' 'const char *'
|   | | `-ImplicitCastExpr 0x56347469da58 <col:20> 'const char *' <NullToPointer>
|   | |   `-CXXNullPtrLiteralExpr 0x56347469da30 <col:20> 'nullptr_t'
|   | `-CompoundStmt 0x56347469de88 <col:29, line:371:5>
|   |   |-IfStmt 0x56347469db48 <line:361:9, line:362:20>
|   |   | |-OpaqueValueExpr 0x56347469db30 <<invalid sloc>> 'bool'
|   |   | `-ReturnStmt 0x56347469db20 <col:13, col:20>
|   |   |   `-ImplicitCastExpr 0x56347469db08 <col:20> 'CNode *' <NullToPointer>
|   |   |     `-CXXNullPtrLiteralExpr 0x56347469daf8 <col:20> 'nullptr_t'
|   |   |-DeclStmt 0x56347469dc80 <line:365:9, col:68>
|   |   | `-VarDecl 0x56347469db70 <col:9, col:16> col:16 used pnode 'CNode *'
|   |   `-IfStmt 0x56347469de48 <line:366:9, line:370:9>
|   |     |-ImplicitCastExpr 0x56347469dcd0 <line:366:13> 'bool' <PointerToBoolean>
|   |     | `-ImplicitCastExpr 0x56347469dcb8 <col:13> 'CNode *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x56347469dc98 <col:13> 'CNode *' lvalue Var 0x56347469db70 'pnode' 'CNode *'
|   |     `-CompoundStmt 0x56347469de30 <line:367:9, line:370:9>
|   |       `-ReturnStmt 0x56347469de20 <line:369:13, col:20>
|   |         `-ImplicitCastExpr 0x56347469de08 <col:20> 'CNode *' <NullToPointer>
|   |           `-CXXNullPtrLiteralExpr 0x56347469ddf8 <col:20> 'nullptr_t'
|   |-DeclStmt 0x56347469e2a0 <line:379:5, col:55>
|   | `-VarDecl 0x56347469e0f0 <col:5, col:54> col:15 used default_port 'const int' cinit
|   |   `-CXXMemberCallExpr 0x56347469e228 <col:30, col:54> 'int'
|   |     `-MemberExpr 0x56347469e1f8 <col:30, col:39> '<bound member function type>' .GetDefaultPort 0x5634746cef28
|   |       `-CallExpr 0x56347469e1d8 <col:30, col:37> 'const CChainParams' lvalue
|   |         `-ImplicitCastExpr 0x56347469e1c0 <col:30> 'const CChainParams &(*)()' <FunctionToPointerDecay>
|   |           `-DeclRefExpr 0x56347469e1a0 <col:30> 'const CChainParams &()' lvalue Function 0x5634746d18e8 'Params' 'const CChainParams &()'
|   |-IfStmt 0x56347469eb30 <line:380:5, line:401:5>
|   | |-ImplicitCastExpr 0x56347469e2f0 <line:380:9> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56347469e2d8 <col:9> 'const char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56347469e2b8 <col:9> 'const char *' lvalue ParmVar 0x563474714710 'pszDest' 'const char *'
|   | `-CompoundStmt 0x56347469eb18 <col:18, line:401:5>
|   |   `-IfStmt 0x56347469eb00 <line:382:9, line:400:9>
|   |     |-OpaqueValueExpr 0x56347469eae8 <<invalid sloc>> 'bool'
|   |     `-CompoundStmt 0x56347469eac0 <line:382:114, line:400:9>
|   |       |-IfStmt 0x56347469e700 <line:384:13, line:387:13>
|   |       | |-OpaqueValueExpr 0x56347469e6e8 <<invalid sloc>> 'bool'
|   |       | `-CompoundStmt 0x56347469e6d0 <line:384:41, line:387:13>
|   |       |   `-ReturnStmt 0x56347469e6c0 <line:386:17, col:24>
|   |       |     `-ImplicitCastExpr 0x56347469e6a8 <col:24> 'CNode *' <NullToPointer>
|   |       |       `-CXXNullPtrLiteralExpr 0x56347469e698 <col:24> 'nullptr_t'
|   |       |-DeclStmt 0x56347469e908 <line:393:13, col:72>
|   |       | `-VarDecl 0x56347469e7f8 <col:13, col:20> col:20 used pnode 'CNode *'
|   |       `-IfStmt 0x56347469eaa8 <line:394:13, line:399:13>
|   |         |-ImplicitCastExpr 0x56347469e958 <line:394:17> 'bool' <PointerToBoolean>
|   |         | `-ImplicitCastExpr 0x56347469e940 <col:17> 'CNode *' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56347469e920 <col:17> 'CNode *' lvalue Var 0x56347469e7f8 'pnode' 'CNode *'
|   |         `-CompoundStmt 0x56347469ea90 <line:395:13, line:399:13>
|   |           `-ReturnStmt 0x56347469ea80 <line:398:17, col:24>
|   |             `-ImplicitCastExpr 0x56347469ea68 <col:24> 'CNode *' <NullToPointer>
|   |               `-CXXNullPtrLiteralExpr 0x56347469ea58 <col:24> 'nullptr_t'
|   |-DeclStmt 0x56347469ebd0 <line:404:5, col:27>
|   | `-VarDecl 0x56347469eb58 <col:5, col:22> col:10 used connected 'bool' cinit
|   |   `-CXXBoolLiteralExpr 0x56347469ebc0 <col:22> 'bool' false
|   |-DeclStmt 0x56347469ed28 <line:405:5, col:36>
|   | `-VarDecl 0x56347469ebf8 <col:5, bitcoin/src/compat.h:59:40> bitcoin/src/net.cpp:405:12 used hSocket 'SOCKET':'unsigned int' cinit
|   |   `-CStyleCastExpr 0x56347469ed00 <bitcoin/src/compat.h:59:29, col:40> 'SOCKET':'unsigned int' <NoOp>
|   |     `-ImplicitCastExpr 0x56347469ece8 <col:37, col:40> 'SOCKET':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |       `-ParenExpr 0x56347469ecc8 <col:37, col:40> 'int'
|   |         `-UnaryOperator 0x56347469ec80 <col:38, col:39> 'int' prefix '~' cannot overflow
|   |           `-IntegerLiteral 0x56347469ec60 <col:39> 'int' 0
|   |-DeclStmt 0x56347469f110 <bitcoin/src/net.cpp:406:5, col:20>
|   | `-VarDecl 0x56347469ed50 <col:5, col:15> col:15 used proxy 'proxyType' callinit
|   |   `-CXXConstructExpr 0x56347469f0e8 <col:15> 'proxyType' 'void ()'
|   |-IfStmt 0x5634746a0108 <line:407:5, line:438:5> has_else
|   | |-OpaqueValueExpr 0x5634746a00f0 <<invalid sloc>> 'bool'
|   | |-CompoundStmt 0x56347469faa8 <line:407:32, line:429:5>
|   | | |-DeclStmt 0x56347469f220 <line:408:9, col:43>
|   | | | `-VarDecl 0x56347469f1a8 <col:9, col:38> col:14 used proxyConnectionFailed 'bool' cinit
|   | | |   `-CXXBoolLiteralExpr 0x56347469f210 <col:38> 'bool' false
|   | | |-IfStmt 0x56347469f9a8 <line:410:9, line:423:9> has_else
|   | | | |-OpaqueValueExpr 0x56347469f990 <<invalid sloc>> 'bool'
|   | | | |-CompoundStmt 0x56347469f668 <line:410:56, line:416:9>
|   | | | | `-IfStmt 0x56347469f508 <line:412:13, line:414:13>
|   | | | |   |-BinaryOperator 0x56347469f498 <line:412:17, bitcoin/src/compat.h:59:40> 'bool' '=='
|   | | | |   | |-ImplicitCastExpr 0x56347469f480 <bitcoin/src/net.cpp:412:17> 'SOCKET':'unsigned int' <LValueToRValue>
|   | | | |   | | `-DeclRefExpr 0x56347469f398 <col:17> 'SOCKET':'unsigned int' lvalue Var 0x56347469ebf8 'hSocket' 'SOCKET':'unsigned int'
|   | | | |   | `-CStyleCastExpr 0x56347469f458 <bitcoin/src/compat.h:59:29, col:40> 'SOCKET':'unsigned int' <NoOp>
|   | | | |   |   `-ImplicitCastExpr 0x56347469f440 <col:37, col:40> 'SOCKET':'unsigned int' <IntegralCast> part_of_explicit_cast
|   | | | |   |     `-ParenExpr 0x56347469f420 <col:37, col:40> 'int'
|   | | | |   |       `-UnaryOperator 0x56347469f3d8 <col:38, col:39> 'int' prefix '~' cannot overflow
|   | | | |   |         `-IntegerLiteral 0x56347469f3b8 <col:39> 'int' 0
|   | | | |   `-CompoundStmt 0x56347469f4f0 <bitcoin/src/net.cpp:412:44, line:414:13>
|   | | | |     `-ReturnStmt 0x56347469f4e0 <line:413:17, col:24>
|   | | | |       `-ImplicitCastExpr 0x56347469f4c8 <col:24> 'CNode *' <NullToPointer>
|   | | | |         `-CXXNullPtrLiteralExpr 0x56347469f4b8 <col:24> 'nullptr_t'
|   | | | `-CompoundStmt 0x56347469f978 <line:416:16, line:423:9>
|   | | |   `-IfStmt 0x56347469f878 <line:419:13, line:421:13>
|   | | |     |-BinaryOperator 0x56347469f808 <line:419:17, bitcoin/src/compat.h:59:40> 'bool' '=='
|   | | |     | |-ImplicitCastExpr 0x56347469f7f0 <bitcoin/src/net.cpp:419:17> 'SOCKET':'unsigned int' <LValueToRValue>
|   | | |     | | `-DeclRefExpr 0x56347469f708 <col:17> 'SOCKET':'unsigned int' lvalue Var 0x56347469ebf8 'hSocket' 'SOCKET':'unsigned int'
|   | | |     | `-CStyleCastExpr 0x56347469f7c8 <bitcoin/src/compat.h:59:29, col:40> 'SOCKET':'unsigned int' <NoOp>
|   | | |     |   `-ImplicitCastExpr 0x56347469f7b0 <col:37, col:40> 'SOCKET':'unsigned int' <IntegralCast> part_of_explicit_cast
|   | | |     |     `-ParenExpr 0x56347469f790 <col:37, col:40> 'int'
|   | | |     |       `-UnaryOperator 0x56347469f748 <col:38, col:39> 'int' prefix '~' cannot overflow
|   | | |     |         `-IntegerLiteral 0x56347469f728 <col:39> 'int' 0
|   | | |     `-CompoundStmt 0x56347469f860 <bitcoin/src/net.cpp:419:44, line:421:13>
|   | | |       `-ReturnStmt 0x56347469f850 <line:420:17, col:24>
|   | | |         `-ImplicitCastExpr 0x56347469f838 <col:24> 'CNode *' <NullToPointer>
|   | | |           `-CXXNullPtrLiteralExpr 0x56347469f828 <col:24> 'nullptr_t'
|   | | `-IfStmt 0x56347469fa90 <line:424:9, line:428:9>
|   | |   |-UnaryOperator 0x56347469fa08 <line:424:13, col:14> 'bool' prefix '!' cannot overflow
|   | |   | `-ImplicitCastExpr 0x56347469f9f0 <col:14> 'bool' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x56347469f9d0 <col:14> 'bool' lvalue Var 0x56347469f1a8 'proxyConnectionFailed' 'bool'
|   | |   `-CompoundStmt 0x56347469fa80 <col:37, line:428:9>
|   | `-IfStmt 0x5634746a00d8 <line:429:12, line:438:5>
|   |   |-BinaryOperator 0x56347469fc18 <line:429:16, col:45> 'bool' '&&'
|   |   | |-ImplicitCastExpr 0x56347469fc00 <col:16> 'bool' <PointerToBoolean>
|   |   | | `-ImplicitCastExpr 0x56347469fbe8 <col:16> 'const char *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x56347469fad0 <col:16> 'const char *' lvalue ParmVar 0x563474714710 'pszDest' 'const char *'
|   |   | `-CallExpr 0x56347469fbc0 <col:27, col:45> 'bool'
|   |   |   |-ImplicitCastExpr 0x56347469fba8 <col:27> 'bool (*)(proxyType &)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x56347469fb58 <col:27> 'bool (proxyType &)' lvalue Function 0x5634746da408 'GetNameProxy' 'bool (proxyType &)'
|   |   |   `-DeclRefExpr 0x56347469fb38 <col:40> 'proxyType' lvalue Var 0x56347469ed50 'proxy' 'proxyType'
|   |   `-CompoundStmt 0x5634746a00b0 <col:48, line:438:5>
|   |     |-IfStmt 0x56347469fe30 <line:431:9, line:433:9>
|   |     | |-BinaryOperator 0x56347469fdc0 <line:431:13, bitcoin/src/compat.h:59:40> 'bool' '=='
|   |     | | |-ImplicitCastExpr 0x56347469fda8 <bitcoin/src/net.cpp:431:13> 'SOCKET':'unsigned int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x56347469fcc0 <col:13> 'SOCKET':'unsigned int' lvalue Var 0x56347469ebf8 'hSocket' 'SOCKET':'unsigned int'
|   |     | | `-CStyleCastExpr 0x56347469fd80 <bitcoin/src/compat.h:59:29, col:40> 'SOCKET':'unsigned int' <NoOp>
|   |     | |   `-ImplicitCastExpr 0x56347469fd68 <col:37, col:40> 'SOCKET':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     | |     `-ParenExpr 0x56347469fd48 <col:37, col:40> 'int'
|   |     | |       `-UnaryOperator 0x56347469fd00 <col:38, col:39> 'int' prefix '~' cannot overflow
|   |     | |         `-IntegerLiteral 0x56347469fce0 <col:39> 'int' 0
|   |     | `-CompoundStmt 0x56347469fe18 <bitcoin/src/net.cpp:431:40, line:433:9>
|   |     |   `-ReturnStmt 0x56347469fe08 <line:432:13, col:20>
|   |     |     `-ImplicitCastExpr 0x56347469fdf0 <col:20> 'CNode *' <NullToPointer>
|   |     |       `-CXXNullPtrLiteralExpr 0x56347469fde0 <col:20> 'nullptr_t'
|   |     |-DeclStmt 0x56347469fed8 <line:434:9, col:25>
|   |     | `-VarDecl 0x56347469fe70 <col:9, col:21> col:21 invalid host 'int'
|   |     `-DeclStmt 0x56347469ffa8 <line:435:9, col:32>
|   |       `-VarDecl 0x56347469ff08 <col:9, col:20> col:13 used port 'int' cinit
|   |         `-ImplicitCastExpr 0x56347469ff90 <col:20> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x56347469ff70 <col:20> 'const int' lvalue Var 0x56347469e0f0 'default_port' 'const int'
|   |-IfStmt 0x5634746a0300 <line:439:5, line:442:5>
|   | |-UnaryOperator 0x5634746a0168 <line:439:9, col:10> 'bool' prefix '!' cannot overflow
|   | | `-ImplicitCastExpr 0x5634746a0150 <col:10> 'bool' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5634746a0130 <col:10> 'bool' lvalue Var 0x56347469eb58 'connected' 'bool'
|   | `-CompoundStmt 0x5634746a02e0 <col:21, line:442:5>
|   |   |-CallExpr 0x5634746a0280 <line:440:9, col:28> 'bool'
|   |   | |-ImplicitCastExpr 0x5634746a0268 <col:9> 'bool (*)(SOCKET &)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x5634746a01e8 <col:9> 'bool (SOCKET &)' lvalue Function 0x5634746dbfd8 'CloseSocket' 'bool (SOCKET &)'
|   |   | `-DeclRefExpr 0x5634746a01c8 <col:21> 'SOCKET':'unsigned int' lvalue Var 0x56347469ebf8 'hSocket' 'SOCKET':'unsigned int'
|   |   `-ReturnStmt 0x5634746a02d0 <line:441:9, col:16>
|   |     `-ImplicitCastExpr 0x5634746a02b8 <col:16> 'CNode *' <NullToPointer>
|   |       `-CXXNullPtrLiteralExpr 0x5634746a02a8 <col:16> 'nullptr_t'
|   |-DeclStmt 0x5634746a03f0 <line:445:5, col:31>
|   | `-VarDecl 0x5634746a0328 <col:5, col:30> col:12 used id 'NodeId':'int' cinit
|   |   `-CXXMemberCallExpr 0x5634746a03d0 <col:17, col:30> 'NodeId':'int'
|   |     `-MemberExpr 0x5634746a03a0 <col:17> '<bound member function type>' ->GetNewNodeId 0x5634746a5eb8
|   |       `-CXXThisExpr 0x5634746a0390 <col:17> 'CConnman *' implicit this
|   |-DeclStmt 0x5634746a04c8 <line:446:5, col:99>
|   | `-VarDecl 0x5634746a0430 <col:5, col:14> col:14 invalid nonce 'int'
|   |-DeclStmt 0x5634746a06f0 <line:447:5, col:49>
|   | `-VarDecl 0x5634746a04f0 <col:5, col:48> col:14 used addr_bind 'CAddress' cinit
|   |   `-ExprWithCleanups 0x5634746a06d8 <col:26, col:48> 'CAddress'
|   |     `-CXXConstructExpr 0x5634746a06a8 <col:26, col:48> 'CAddress' 'void (CAddress &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5634746a0690 <col:26, col:48> 'CAddress' xvalue
|   |         `-CallExpr 0x5634746a0650 <col:26, col:48> 'CAddress'
|   |           |-ImplicitCastExpr 0x5634746a0638 <col:26> 'CAddress (*)(SOCKET)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x5634746a05c0 <col:26> 'CAddress (SOCKET)' lvalue Function 0x563474713f38 'GetBindAddress' 'CAddress (SOCKET)'
|   |           `-ImplicitCastExpr 0x5634746a0678 <col:41> 'SOCKET':'unsigned int' <LValueToRValue>
|   |             `-DeclRefExpr 0x5634746a05a0 <col:41> 'SOCKET':'unsigned int' lvalue Var 0x56347469ebf8 'hSocket' 'SOCKET':'unsigned int'
|   |-DeclStmt 0x5634746a0a00 <line:448:5, col:192>
|   | `-VarDecl 0x5634746a0718 <col:5, col:12> col:12 used pnode 'CNode *'
|   |-CXXMemberCallExpr 0x5634746a0a80 <line:449:5, col:19> 'CNode *'
|   | `-MemberExpr 0x5634746a0a50 <col:5, col:12> '<bound member function type>' ->AddRef 0x5634746b7998
|   |   `-ImplicitCastExpr 0x5634746a0a38 <col:5> 'CNode *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5634746a0a18 <col:5> 'CNode *' lvalue Var 0x5634746a0718 'pnode' 'CNode *'
|   `-ReturnStmt 0x5634746a0ad8 <line:451:5, col:12>
|     `-ImplicitCastExpr 0x5634746a0ac0 <col:12> 'CNode *' <LValueToRValue>
|       `-DeclRefExpr 0x5634746a0aa0 <col:12> 'CNode *' lvalue Var 0x5634746a0718 'pnode' 'CNode *'
|-CXXMethodDecl 0x5634746a0ba8 parent 0x5634746b1418 prev 0x5634746b8270 <line:454:1, line:463:1> line:454:13 used CloseSocketDisconnect 'void ()'
| `-CompoundStmt 0x5634746a1100 <line:455:1, line:463:1>
|   `-IfStmt 0x5634746a10e8 <line:458:5, line:462:5>
|     |-BinaryOperator 0x5634746a0e98 <line:458:9, bitcoin/src/compat.h:59:40> 'bool' '!='
|     | |-ImplicitCastExpr 0x5634746a0e80 <bitcoin/src/net.cpp:458:9> 'SOCKET':'unsigned int' <LValueToRValue>
|     | | `-MemberExpr 0x5634746a0d88 <col:9> 'SOCKET':'unsigned int' lvalue ->hSocket 0x5634746b15f8
|     | |   `-CXXThisExpr 0x5634746a0d78 <col:9> 'CNode *' implicit this
|     | `-CStyleCastExpr 0x5634746a0e58 <bitcoin/src/compat.h:59:29, col:40> 'SOCKET':'unsigned int' <NoOp>
|     |   `-ImplicitCastExpr 0x5634746a0e40 <col:37, col:40> 'SOCKET':'unsigned int' <IntegralCast> part_of_explicit_cast
|     |     `-ParenExpr 0x5634746a0e20 <col:37, col:40> 'int'
|     |       `-UnaryOperator 0x5634746a0dd8 <col:38, col:39> 'int' prefix '~' cannot overflow
|     |         `-IntegerLiteral 0x5634746a0db8 <col:39> 'int' 0
|     `-CompoundStmt 0x5634746a10d0 <bitcoin/src/net.cpp:459:5, line:462:5>
|       `-CallExpr 0x5634746a10a8 <line:461:9, col:28> 'bool'
|         |-ImplicitCastExpr 0x5634746a1090 <col:9> 'bool (*)(SOCKET &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5634746a1070 <col:9> 'bool (SOCKET &)' lvalue Function 0x5634746dbfd8 'CloseSocket' 'bool (SOCKET &)'
|         `-MemberExpr 0x5634746a1040 <col:21> 'SOCKET':'unsigned int' lvalue ->hSocket 0x5634746b15f8
|           `-CXXThisExpr 0x5634746a1030 <col:21> 'CNode *' implicit this
|-CXXMethodDecl 0x5634746a1240 parent 0x5634746986b0 prev 0x5634746a5c78 <line:465:1, line:469:1> line:465:16 used AddWhitelistPermissionFlags 'void (NetPermissionFlags &, const CNetAddr &) const'
| |-ParmVarDecl 0x5634746a1130 <col:44, col:64> col:64 used flags 'NetPermissionFlags &'
| |-ParmVarDecl 0x5634746a11a8 <col:71, col:87> col:87 used addr 'const CNetAddr &'
| `-CompoundStmt 0x5634746a1480 <col:99, line:469:1>
|-CXXMethodDecl 0x5634746a14d0 parent 0x5634746b1418 <line:471:1, line:474:1> line:471:20 invalid GetAddrName 'int () const'
| `-CompoundStmt 0x5634746a1698 <col:40, line:474:1>
|-CXXMethodDecl 0x5634746a1768 parent 0x5634746b1418 <line:476:1, line:481:1> line:476:13 invalid MaybeSetAddrName 'void (const int &)'
| |-ParmVarDecl 0x5634746a16d8 <col:30, col:49> col:49 invalid addrNameIn 'const int &'
| `-CompoundStmt 0x5634746a1988 <col:61, line:481:1>
|   `-IfStmt 0x5634746a1970 <line:478:5, line:480:5>
|     |-OpaqueValueExpr 0x5634746a1958 <<invalid sloc>> 'bool'
|     `-CompoundStmt 0x5634746a1948 <line:478:27, line:480:5>
|-CXXMethodDecl 0x563474720a60 parent 0x5634746b1418 prev 0x5634746b7738 <line:483:1, line:486:1> line:483:17 used GetAddrLocal 'CService () const'
| `-CompoundStmt 0x563474720c28 <col:38, line:486:1>
|-CXXMethodDecl 0x563474720ce0 parent 0x5634746b1418 prev 0x5634746b78a8 <line:488:1, line:495:1> line:488:13 SetAddrLocal 'void (const CService &)'
| |-ParmVarDecl 0x563474720c50 <col:26, col:42> col:42 used addrLocalIn 'const CService &'
| `-CompoundStmt 0x5634747210c8 <col:55, line:495:1>
|   `-IfStmt 0x5634747210a0 <line:490:5, line:494:5> has_else
|     |-OpaqueValueExpr 0x563474721088 <<invalid sloc>> 'bool'
|     |-CompoundStmt 0x563474721038 <line:490:30, line:492:5>
|     `-CompoundStmt 0x563474721078 <col:12, line:494:5>
|-CXXMethodDecl 0x563474721188 parent 0x5634746b1418 prev 0x5634746baca8 <line:499:1, line:562:1> line:499:13 copyStats 'void (CNodeStats &)'
| |-ParmVarDecl 0x5634747210f8 <col:23, col:35> col:35 used stats 'CNodeStats &'
| `-CompoundStmt 0x5634747224f8 <line:500:1, line:562:1>
|   |-BinaryOperator 0x563474721340 <line:501:5, col:32> 'NodeId':'int' lvalue '='
|   | |-MemberExpr 0x563474721298 <col:5, col:11> 'NodeId':'int' lvalue .nodeid 0x5634746af018
|   | | `-DeclRefExpr 0x563474721278 <col:5> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   | `-CXXMemberCallExpr 0x563474721308 <col:20, col:32> 'NodeId':'int'
|   |   `-MemberExpr 0x5634747212d8 <col:20, col:26> '<bound member function type>' ->GetId 0x5634746b6d08
|   |     `-ImplicitCastExpr 0x563474721328 <col:20> 'const CNode *' <NoOp>
|   |       `-CXXThisExpr 0x5634747212c8 <col:20> 'CNode *' this
|   |-IfStmt 0x563474721540 <line:505:5, line:510:5> has_else
|   | |-OpaqueValueExpr 0x563474721528 <<invalid sloc>> 'bool'
|   | |-CompoundStmt 0x563474721480 <line:505:32, line:508:5>
|   | `-CompoundStmt 0x563474721510 <col:12, line:510:5>
|   |   `-BinaryOperator 0x5634747214f0 <line:509:9, col:28> 'bool' lvalue '='
|   |     |-MemberExpr 0x5634747214b0 <col:9, col:15> 'bool' lvalue .fRelayTxes 0x5634746af0d8
|   |     | `-DeclRefExpr 0x563474721490 <col:9> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   |     `-CXXBoolLiteralExpr 0x5634747214e0 <col:28> 'bool' false
|   |-CompoundStmt 0x5634747216f8 <line:517:5, line:520:5>
|   |-BinaryOperator 0x5634747217b0 <line:498:17, line:521:7> 'bool' lvalue '='
|   | |-MemberExpr 0x563474721728 <line:498:17, line:521:7> 'bool' lvalue .fInbound 0x5634746af470
|   | | `-DeclRefExpr 0x563474721708 <line:498:17> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   | `-ImplicitCastExpr 0x563474721798 <line:521:7> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563474721768 <col:7> 'const bool' lvalue ->fInbound 0x5634746b3430
|   |     `-CXXThisExpr 0x563474721758 <col:7> 'CNode *' implicit this
|   |-BinaryOperator 0x563474721878 <line:498:17, line:522:7> 'bool' lvalue '='
|   | |-MemberExpr 0x5634747217f0 <line:498:17, line:522:7> 'bool' lvalue .m_manual_connection 0x5634746af4d0
|   | | `-DeclRefExpr 0x5634747217d0 <line:498:17> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   | `-ImplicitCastExpr 0x563474721860 <line:522:7> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563474721830 <col:7> 'bool' lvalue ->m_manual_connection 0x5634746b22b0
|   |     `-CXXThisExpr 0x563474721820 <col:7> 'CNode *' implicit this
|   |-CompoundStmt 0x563474721ab0 <line:524:5, line:528:5>
|   | `-BinaryOperator 0x563474721a60 <line:498:17, line:526:11> 'mapMsgCmdSize':'int' lvalue '='
|   |   |-MemberExpr 0x5634747219d8 <line:498:17, line:526:11> 'mapMsgCmdSize':'int' lvalue .mapSendBytesPerMsgCmd 0x5634746af630
|   |   | `-DeclRefExpr 0x5634747219b8 <line:498:17> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   |   `-ImplicitCastExpr 0x563474721a48 <line:526:11> 'mapMsgCmdSize':'int' <LValueToRValue>
|   |     `-MemberExpr 0x563474721a18 <col:11> 'mapMsgCmdSize':'int' lvalue ->mapSendBytesPerMsgCmd 0x5634746b37f8
|   |       `-CXXThisExpr 0x563474721a08 <col:11> 'CNode *' implicit this
|   |-CompoundStmt 0x563474721c90 <line:529:5, line:533:5>
|   | `-BinaryOperator 0x563474721c40 <line:498:17, line:531:11> 'mapMsgCmdSize':'int' lvalue '='
|   |   |-MemberExpr 0x563474721bb8 <line:498:17, line:531:11> 'mapMsgCmdSize':'int' lvalue .mapRecvBytesPerMsgCmd 0x5634746af708
|   |   | `-DeclRefExpr 0x563474721b98 <line:498:17> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   |   `-ImplicitCastExpr 0x563474721c28 <line:531:11> 'mapMsgCmdSize':'int' <LValueToRValue>
|   |     `-MemberExpr 0x563474721bf8 <col:11> 'mapMsgCmdSize':'int' lvalue ->mapRecvBytesPerMsgCmd 0x5634746b3858
|   |       `-CXXThisExpr 0x563474721be8 <col:11> 'CNode *' implicit this
|   |-BinaryOperator 0x563474721d50 <line:498:17, line:534:7> 'bool' lvalue '='
|   | |-MemberExpr 0x563474721cc8 <line:498:17, line:534:7> 'bool' lvalue .m_legacyWhitelisted 0x5634746af7c8
|   | | `-DeclRefExpr 0x563474721ca8 <line:498:17> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   | `-ImplicitCastExpr 0x563474721d38 <line:534:7> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x563474721d08 <col:7> 'bool' lvalue ->m_legacyWhitelisted 0x5634746b2190
|   |     `-CXXThisExpr 0x563474721cf8 <col:7> 'CNode *' implicit this
|   |-BinaryOperator 0x563474721e18 <line:498:17, line:535:7> 'NetPermissionFlags' lvalue '='
|   | |-MemberExpr 0x563474721d90 <line:498:17, line:535:7> 'NetPermissionFlags' lvalue .m_permissionFlags 0x5634746af768
|   | | `-DeclRefExpr 0x563474721d70 <line:498:17> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   | `-ImplicitCastExpr 0x563474721e00 <line:535:7> 'NetPermissionFlags' <LValueToRValue>
|   |   `-MemberExpr 0x563474721dd0 <col:7> 'NetPermissionFlags' lvalue ->m_permissionFlags 0x5634746b6a88
|   |     `-CXXThisExpr 0x563474721dc0 <col:7> 'CNode *' implicit this
|   |-IfStmt 0x563474721f78 <line:536:5, line:541:5> has_else
|   | |-OpaqueValueExpr 0x563474721f60 <<invalid sloc>> 'bool'
|   | |-CompoundStmt 0x563474721ea8 <line:536:32, line:539:5>
|   | `-CompoundStmt 0x563474721f48 <col:12, line:541:5>
|   |   `-BinaryOperator 0x563474721f28 <line:540:9, col:30> 'CAmount':'int' lvalue '='
|   |     |-MemberExpr 0x563474721ed8 <col:9, col:15> 'CAmount':'int' lvalue .minFeeFilter 0x5634746af960
|   |     | `-DeclRefExpr 0x563474721eb8 <col:9> 'CNodeStats' lvalue ParmVar 0x5634747210f8 'stats' 'CNodeStats &'
|   |     `-IntegerLiteral 0x563474721f08 <col:30> 'int' 0
|   |-DeclStmt 0x563474722050 <line:549:5, col:30>
|   | `-VarDecl 0x563474721fc8 <col:5, col:13> col:13 invalid nPingUsecWait 'int'
|   |-IfStmt 0x563474722140 <line:550:5, line:552:5>
|   | |-OpaqueValueExpr 0x563474722128 <<invalid sloc>> 'bool'
|   | `-CompoundStmt 0x563474722118 <line:550:57, line:552:5>
|   `-DeclStmt 0x563474722418 <line:560:5, col:48>
|     `-VarDecl 0x5634747222d8 <col:5, col:47> col:14 used addrLocalUnlocked 'CService' cinit
|       `-ExprWithCleanups 0x563474722400 <col:34, col:47> 'CService'
|         `-CXXConstructExpr 0x5634747223d0 <col:34, col:47> 'CService' 'void (CService &&) noexcept' elidable
|           `-MaterializeTemporaryExpr 0x5634747223b8 <col:34, col:47> 'CService' xvalue
|             `-CXXMemberCallExpr 0x563474722380 <col:34, col:47> 'CService'
|               `-MemberExpr 0x563474722350 <col:34> '<bound member function type>' ->GetAddrLocal 0x563474720a60
|                 `-ImplicitCastExpr 0x5634747223a0 <col:34> 'const CNode *' <NoOp>
|                   `-CXXThisExpr 0x563474722340 <col:34> 'CNode *' implicit this
|-CXXMethodDecl 0x563474722730 parent 0x5634746b1418 prev 0x5634746b7208 <line:565:1, line:614:1> line:565:13 ReceiveMsgBytes 'bool (const char *, unsigned int, bool &)'
| |-ParmVarDecl 0x563474722590 <col:29, col:41> col:41 used pch 'const char *'
| |-ParmVarDecl 0x563474722610 <col:46, col:59> col:59 used nBytes 'unsigned int'
| |-ParmVarDecl 0x563474722690 <col:67, col:73> col:73 used complete 'bool &'
| `-CompoundStmt 0x563474723d40 <line:566:1, line:614:1>
|   |-BinaryOperator 0x563474722860 <line:567:5, col:16> 'bool' lvalue '='
|   | |-DeclRefExpr 0x563474722830 <col:5> 'bool' lvalue ParmVar 0x563474722690 'complete' 'bool &'
|   | `-CXXBoolLiteralExpr 0x563474722850 <col:16> 'bool' false
|   |-DeclStmt 0x563474722950 <line:568:5, col:42>
|   | `-VarDecl 0x5634747228a8 <col:5, col:13> col:13 invalid nTimeMicros 'int'
|   |-WhileStmt 0x563474723d08 <line:572:5, line:611:5>
|   | |-BinaryOperator 0x563474722b30 <line:572:12, col:21> 'bool' '>'
|   | | |-ImplicitCastExpr 0x563474722b00 <col:12> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x563474722ac0 <col:12> 'unsigned int' lvalue ParmVar 0x563474722610 'nBytes' 'unsigned int'
|   | | `-ImplicitCastExpr 0x563474722b18 <col:21> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x563474722ae0 <col:21> 'int' 0
|   | `-CompoundStmt 0x563474723cb8 <col:24, line:611:5>
|   |   |-DeclStmt 0x563474723120 <line:579:9, col:43>
|   |   | `-VarDecl 0x5634747230b8 <col:9, col:22> col:22 used msg 'CNetMessage &'
|   |   |-DeclStmt 0x5634747231b8 <line:582:9, col:20>
|   |   | `-VarDecl 0x563474723150 <col:9, col:13> col:13 used handled 'int'
|   |   |-IfStmt 0x5634747234b0 <line:583:9, line:586:47> has_else
|   |   | |-UnaryOperator 0x563474723238 <line:583:13, col:18> 'bool' prefix '!' cannot overflow
|   |   | | `-ImplicitCastExpr 0x563474723220 <col:14, col:18> 'bool' <LValueToRValue>
|   |   | |   `-MemberExpr 0x5634747231f0 <col:14, col:18> 'bool' lvalue .in_data 0x5634746afdc8
|   |   | |     `-DeclRefExpr 0x5634747231d0 <col:14> 'CNetMessage' lvalue Var 0x5634747230b8 'msg' 'CNetMessage &'
|   |   | |-BinaryOperator 0x563474723360 <line:584:13, col:49> 'int' lvalue '='
|   |   | | |-DeclRefExpr 0x563474723250 <col:13> 'int' lvalue Var 0x563474723150 'handled' 'int'
|   |   | | `-CXXMemberCallExpr 0x563474723300 <col:23, col:49> 'int'
|   |   | |   |-MemberExpr 0x563474723290 <col:23, col:27> '<bound member function type>' .readHeader 0x5634746b0950
|   |   | |   | `-DeclRefExpr 0x563474723270 <col:23> 'CNetMessage' lvalue Var 0x5634747230b8 'msg' 'CNetMessage &'
|   |   | |   |-ImplicitCastExpr 0x563474723330 <col:38> 'const char *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x5634747232c0 <col:38> 'const char *' lvalue ParmVar 0x563474722590 'pch' 'const char *'
|   |   | |   `-ImplicitCastExpr 0x563474723348 <col:43> 'unsigned int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x5634747232e0 <col:43> 'unsigned int' lvalue ParmVar 0x563474722610 'nBytes' 'unsigned int'
|   |   | `-BinaryOperator 0x563474723490 <line:586:13, col:47> 'int' lvalue '='
|   |   |   |-DeclRefExpr 0x563474723380 <col:13> 'int' lvalue Var 0x563474723150 'handled' 'int'
|   |   |   `-CXXMemberCallExpr 0x563474723430 <col:23, col:47> 'int'
|   |   |     |-MemberExpr 0x5634747233c0 <col:23, col:27> '<bound member function type>' .readData 0x5634746b0b38
|   |   |     | `-DeclRefExpr 0x5634747233a0 <col:23> 'CNetMessage' lvalue Var 0x5634747230b8 'msg' 'CNetMessage &'
|   |   |     |-ImplicitCastExpr 0x563474723460 <col:36> 'const char *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5634747233f0 <col:36> 'const char *' lvalue ParmVar 0x563474722590 'pch' 'const char *'
|   |   |     `-ImplicitCastExpr 0x563474723478 <col:41> 'unsigned int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x563474723410 <col:41> 'unsigned int' lvalue ParmVar 0x563474722610 'nBytes' 'unsigned int'
|   |   |-IfStmt 0x563474723570 <line:588:9, line:589:20>
|   |   | |-BinaryOperator 0x563474723530 <line:588:13, col:23> 'bool' '<'
|   |   | | |-ImplicitCastExpr 0x563474723518 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x5634747234d8 <col:13> 'int' lvalue Var 0x563474723150 'handled' 'int'
|   |   | | `-IntegerLiteral 0x5634747234f8 <col:23> 'int' 0
|   |   | `-ReturnStmt 0x563474723560 <line:589:13, col:20>
|   |   |   `-CXXBoolLiteralExpr 0x563474723550 <col:20> 'bool' false
|   |   |-IfStmt 0x5634747237e8 <line:591:9, line:594:9>
|   |   | |-OpaqueValueExpr 0x5634747237d0 <<invalid sloc>> 'bool'
|   |   | `-CompoundStmt 0x5634747237b8 <line:591:80, line:594:9>
|   |   |   `-ReturnStmt 0x5634747237a8 <line:593:13, col:20>
|   |   |     `-CXXBoolLiteralExpr 0x563474723798 <col:20> 'bool' false
|   |   |-CompoundAssignOperator 0x563474723858 <line:596:9, col:16> 'const char *' lvalue '+=' ComputeLHSTy='const char *' ComputeResultTy='const char *'
|   |   | |-DeclRefExpr 0x563474723800 <col:9> 'const char *' lvalue ParmVar 0x563474722590 'pch' 'const char *'
|   |   | `-ImplicitCastExpr 0x563474723840 <col:16> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x563474723820 <col:16> 'int' lvalue Var 0x563474723150 'handled' 'int'
|   |   |-CompoundAssignOperator 0x5634747238f8 <line:597:9, col:19> 'unsigned int' lvalue '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |   | |-DeclRefExpr 0x563474723888 <col:9> 'unsigned int' lvalue ParmVar 0x563474722610 'nBytes' 'unsigned int'
|   |   | `-ImplicitCastExpr 0x5634747238e0 <col:19> 'unsigned int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x5634747238c8 <col:19> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x5634747238a8 <col:19> 'int' lvalue Var 0x563474723150 'handled' 'int'
|   |   `-IfStmt 0x563474723ca0 <line:599:9, line:610:9>
|   |     |-CXXMemberCallExpr 0x563474723978 <line:599:13, col:26> 'bool'
|   |     | `-MemberExpr 0x563474723948 <col:13, col:17> '<bound member function type>' .complete 0x5634746b04f8
|   |     |   `-ImplicitCastExpr 0x563474723998 <col:13> 'const CNetMessage' lvalue <NoOp>
|   |     |     `-DeclRefExpr 0x563474723928 <col:13> 'CNetMessage' lvalue Var 0x5634747230b8 'msg' 'CNetMessage &'
|   |     `-CompoundStmt 0x563474723c80 <col:29, line:610:9>
|   |       |-DeclStmt 0x563474723aa0 <line:602:13, col:87>
|   |       | `-VarDecl 0x5634747239d8 <col:13, col:37> col:37 invalid i 'int'
|   |       `-BinaryOperator 0x563474723c60 <line:609:13, col:24> 'bool' lvalue '='
|   |         |-DeclRefExpr 0x563474723c30 <col:13> 'bool' lvalue ParmVar 0x563474722690 'complete' 'bool &'
|   |         `-CXXBoolLiteralExpr 0x563474723c50 <col:24> 'bool' true
|   `-ReturnStmt 0x563474723d30 <line:613:5, col:12>
|     `-CXXBoolLiteralExpr 0x563474723d20 <col:12> 'bool' true
|-CXXMethodDecl 0x563474723e20 parent 0x5634746b1418 prev 0x5634746b7580 <line:616:1, line:628:1> line:616:13 SetSendVersion 'void (int)'
| |-ParmVarDecl 0x563474723d90 <col:28, col:32> col:32 used nVersionIn 'int'
| `-CompoundStmt 0x563474724298 <line:617:1, line:628:1>
|   `-IfStmt 0x563474724270 <line:623:5, line:627:5> has_else
|     |-BinaryOperator 0x563474723f88 <line:623:9, col:25> 'bool' '!='
|     | |-ImplicitCastExpr 0x563474723f70 <col:9> 'int' <LValueToRValue>
|     | | `-MemberExpr 0x563474723f20 <col:9> 'int' lvalue ->nSendVersion 0x5634746b6a28
|     | |   `-CXXThisExpr 0x563474723f10 <col:9> 'CNode *' implicit this
|     | `-IntegerLiteral 0x563474723f50 <col:25> 'int' 0
|     |-CompoundStmt 0x5634747241b0 <col:28, line:625:5>
|     `-CompoundStmt 0x563474724258 <col:12, line:627:5>
|       `-BinaryOperator 0x563474724238 <line:626:9, col:24> 'int' lvalue '='
|         |-MemberExpr 0x5634747241d0 <col:9> 'int' lvalue ->nSendVersion 0x5634746b6a28
|         | `-CXXThisExpr 0x5634747241c0 <col:9> 'CNode *' implicit this
|         `-ImplicitCastExpr 0x563474724220 <col:24> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x563474724200 <col:24> 'int' lvalue ParmVar 0x563474723d90 'nVersionIn' 'int'
|-CXXMethodDecl 0x5634747242e0 parent 0x5634746b1418 prev 0x5634746b7650 <line:630:1, line:640:1> line:630:12 GetSendVersion 'int () const'
| `-CompoundStmt 0x563474724708 <line:631:1, line:640:1>
|   |-IfStmt 0x563474724688 <line:635:5, line:638:5>
|   | |-BinaryOperator 0x563474724440 <line:635:9, col:25> 'bool' '=='
|   | | |-ImplicitCastExpr 0x563474724428 <col:9> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x5634747243d8 <col:9> 'const int' lvalue ->nSendVersion 0x5634746b6a28
|   | | |   `-CXXThisExpr 0x5634747243c8 <col:9> 'const CNode *' implicit this
|   | | `-IntegerLiteral 0x563474724408 <col:25> 'int' 0
|   | `-CompoundStmt 0x563474724670 <col:28, line:638:5>
|   |   `-ReturnStmt 0x563474724660 <line:637:9, col:16>
|   |     `-ImplicitCastExpr 0x563474724648 <col:16> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x563474724628 <col:16> 'const int' lvalue Var 0x5634745dc810 'INIT_PROTO_VERSION' 'const int' non_odr_use_constant
|   `-ReturnStmt 0x5634747246f8 <line:639:5, col:12>
|     `-ImplicitCastExpr 0x5634747246e0 <col:12> 'int' <LValueToRValue>
|       `-MemberExpr 0x5634747246b0 <col:12> 'const int' lvalue ->nSendVersion 0x5634746b6a28
|         `-CXXThisExpr 0x5634747246a0 <col:12> 'const CNode *' implicit this
|-CXXMethodDecl 0x563474724880 parent 0x5634746afb00 prev 0x5634746b0950 <line:643:1, line:672:1> line:643:18 used readHeader 'int (const char *, unsigned int)'
| |-ParmVarDecl 0x563474724760 <col:29, col:41> col:41 used pch 'const char *'
| |-ParmVarDecl 0x5634747247e0 <col:46, col:59> col:59 used nBytes 'unsigned int'
| `-CompoundStmt 0x563474725280 <line:644:1, line:672:1>
|   |-DeclStmt 0x563474724ab8 <line:646:5, col:43>
|   | `-VarDecl 0x563474724990 <col:5, col:36> col:18 used nRemaining 'unsigned int' cinit
|   |   `-BinaryOperator 0x563474724a98 <col:31, col:36> 'unsigned int' '-'
|   |     |-ImplicitCastExpr 0x563474724a80 <col:31> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5634747249f8 <col:31> 'int' 24
|   |     `-ImplicitCastExpr 0x563474724a58 <col:36> 'unsigned int' <LValueToRValue>
|   |       `-MemberExpr 0x563474724a28 <col:36> 'unsigned int' lvalue ->nHdrPos 0x5634746afef0
|   |         `-CXXThisExpr 0x563474724a18 <col:36> 'CNetMessage *' implicit this
|   |-DeclStmt 0x563474724b90 <line:647:5, col:54>
|   | `-VarDecl 0x563474724ae8 <col:5, col:18> col:18 used nCopy 'unsigned int'
|   |-CompoundAssignOperator 0x563474724e20 <line:650:5, col:16> 'unsigned int' lvalue '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-MemberExpr 0x563474724db8 <col:5> 'unsigned int' lvalue ->nHdrPos 0x5634746afef0
|   | | `-CXXThisExpr 0x563474724da8 <col:5> 'CNetMessage *' implicit this
|   | `-ImplicitCastExpr 0x563474724e08 <col:16> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563474724de8 <col:16> 'unsigned int' lvalue Var 0x563474724ae8 'nCopy' 'unsigned int'
|   |-IfStmt 0x563474724f60 <line:653:5, line:654:16>
|   | |-BinaryOperator 0x563474724ee0 <line:653:9, col:19> 'bool' '<'
|   | | |-ImplicitCastExpr 0x563474724eb0 <col:9> 'unsigned int' <LValueToRValue>
|   | | | `-MemberExpr 0x563474724e60 <col:9> 'unsigned int' lvalue ->nHdrPos 0x5634746afef0
|   | | |   `-CXXThisExpr 0x563474724e50 <col:9> 'CNetMessage *' implicit this
|   | | `-ImplicitCastExpr 0x563474724ec8 <col:19> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x563474724e90 <col:19> 'int' 24
|   | `-ReturnStmt 0x563474724f50 <line:654:9, col:16>
|   |   `-ImplicitCastExpr 0x563474724f38 <col:16> 'int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x563474724f20 <col:16> 'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x563474724f00 <col:16> 'unsigned int' lvalue Var 0x563474724ae8 'nCopy' 'unsigned int'
|   |-CXXTryStmt 0x5634747250e8 <line:657:5, line:662:5>
|   | |-CompoundStmt 0x563474724fc8 <line:657:9, line:659:5>
|   | `-CXXCatchStmt 0x5634747250c8 <line:660:5, line:662:5>
|   |   |-VarDecl 0x563474725000 <line:660:12, <invalid sloc>> col:33 invalid 'const int &'
|   |   `-CompoundStmt 0x5634747250b0 <col:35, line:662:5>
|   |     `-ReturnStmt 0x5634747250a0 <line:661:9, col:17>
|   |       `-UnaryOperator 0x563474725088 <col:16, col:17> 'int' prefix '-'
|   |         `-IntegerLiteral 0x563474725068 <col:17> 'int' 1
|   |-IfStmt 0x563474725198 <line:665:5, line:666:17>
|   | |-OpaqueValueExpr 0x563474725180 <<invalid sloc>> 'bool'
|   | `-ReturnStmt 0x563474725170 <col:9, col:17>
|   |   `-UnaryOperator 0x563474725158 <col:16, col:17> 'int' prefix '-'
|   |     `-IntegerLiteral 0x563474725138 <col:17> 'int' 1
|   |-BinaryOperator 0x563474725200 <line:669:5, col:15> 'bool' lvalue '='
|   | |-MemberExpr 0x5634747251c0 <col:5> 'bool' lvalue ->in_data 0x5634746afdc8
|   | | `-CXXThisExpr 0x5634747251b0 <col:5> 'CNetMessage *' implicit this
|   | `-CXXBoolLiteralExpr 0x5634747251f0 <col:15> 'bool' true
|   `-ReturnStmt 0x563474725270 <line:671:5, col:12>
|     `-ImplicitCastExpr 0x563474725258 <col:12> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x563474725240 <col:12> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x563474725220 <col:12> 'unsigned int' lvalue Var 0x563474724ae8 'nCopy' 'unsigned int'
|-CXXMethodDecl 0x563474725410 parent 0x5634746afb00 prev 0x5634746b0b38 <line:674:1, line:689:1> line:674:18 used readData 'int (const char *, unsigned int)'
| |-ParmVarDecl 0x5634747252f0 <col:27, col:39> col:39 used pch 'const char *'
| |-ParmVarDecl 0x563474725370 <col:44, col:57> col:57 used nBytes 'unsigned int'
| `-CompoundStmt 0x563474725d98 <line:675:1, line:689:1>
|   |-DeclStmt 0x5634747255d8 <line:676:5, col:58>
|   | `-VarDecl 0x563474725520 <col:5, col:18> col:18 used nRemaining 'unsigned int'
|   |-DeclStmt 0x5634747256b0 <line:677:5, col:54>
|   | `-VarDecl 0x563474725608 <col:5, col:18> col:18 used nCopy 'unsigned int'
|   |-IfStmt 0x563474725a30 <line:679:5, line:682:5>
|   | |-BinaryOperator 0x563474725838 <line:679:9, col:35> 'bool' '<'
|   | | |-ImplicitCastExpr 0x563474725820 <col:9, col:20> 'unsigned int' <IntegralCast>
|   | | | `-CXXMemberCallExpr 0x563474725738 <col:9, col:20> 'CDataStream::size_type':'int'
|   | | |   `-MemberExpr 0x563474725708 <col:9, col:15> '<bound member function type>' .size 0x563474670de8
|   | | |     `-ImplicitCastExpr 0x563474725758 <col:9> 'const CDataStream' lvalue <NoOp>
|   | | |       `-MemberExpr 0x5634747256d8 <col:9> 'CDataStream' lvalue ->vRecv 0x5634746aff50
|   | | |         `-CXXThisExpr 0x5634747256c8 <col:9> 'CNetMessage *' implicit this
|   | | `-BinaryOperator 0x563474725800 <col:24, col:35> 'unsigned int' '+'
|   | |   |-ImplicitCastExpr 0x5634747257d0 <col:24> 'unsigned int' <LValueToRValue>
|   | |   | `-MemberExpr 0x563474725780 <col:24> 'unsigned int' lvalue ->nDataPos 0x5634746affb8
|   | |   |   `-CXXThisExpr 0x563474725770 <col:24> 'CNetMessage *' implicit this
|   | |   `-ImplicitCastExpr 0x5634747257e8 <col:35> 'unsigned int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x5634747257b0 <col:35> 'unsigned int' lvalue Var 0x563474725608 'nCopy' 'unsigned int'
|   | `-CompoundStmt 0x563474725a20 <col:42, line:682:5>
|   |-CompoundAssignOperator 0x563474725d08 <line:686:5, col:17> 'unsigned int' lvalue '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   | |-MemberExpr 0x563474725ca0 <col:5> 'unsigned int' lvalue ->nDataPos 0x5634746affb8
|   | | `-CXXThisExpr 0x563474725c90 <col:5> 'CNetMessage *' implicit this
|   | `-ImplicitCastExpr 0x563474725cf0 <col:17> 'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x563474725cd0 <col:17> 'unsigned int' lvalue Var 0x563474725608 'nCopy' 'unsigned int'
|   `-ReturnStmt 0x563474725d88 <line:688:5, col:12>
|     `-ImplicitCastExpr 0x563474725d70 <col:12> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x563474725d58 <col:12> 'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x563474725d38 <col:12> 'unsigned int' lvalue Var 0x563474725608 'nCopy' 'unsigned int'
|-CXXMethodDecl 0x563474725df8 parent 0x5634746afb00 prev 0x5634746b05e8 <line:691:1, line:697:1> line:691:29 GetMessageHash 'const uint256 &() const'
| `-CompoundStmt 0x563474725fc0 <line:692:1, line:697:1>
|-CXXMethodDecl 0x563474726090 parent 0x5634746986b0 <line:699:1, line:749:1> line:699:18 invalid SocketSendData 'int (CNode *) const'
| |-ParmVarDecl 0x563474725ff8 <col:33, col:40> col:40 used pnode 'CNode *'
| |-CompoundStmt 0x563474727438 <line:700:1, line:749:1>
| | |-DeclStmt 0x5634747262e8 <line:701:5, col:38>
| | | `-VarDecl 0x563474726248 <col:5, col:10> col:10 invalid it 'auto'
| | |-DeclStmt 0x5634747263b0 <line:702:5, col:25>
| | | `-VarDecl 0x563474726328 <col:5, col:12> col:12 invalid nSentSize 'int'
| | `-IfStmt 0x5634747273b0 <line:743:5, line:746:5>
| |   |-OpaqueValueExpr 0x563474727398 <<invalid sloc>> 'bool'
| |   `-CompoundStmt 0x563474727388 <line:743:38, line:746:5>
| `-RequiresCapabilityAttr 0x5634747261e8 <bitcoin/src/threadsafety.h:31:54, col:90> exclusive_locks_required
|   `-MemberExpr 0x5634747261b8 <bitcoin/src/net.cpp:699:78, col:85> 'CCriticalSection':'int' lvalue ->cs_vSend 0x5634746b1860 non_odr_use_unevaluated
|     `-ImplicitCastExpr 0x5634747261a0 <col:78> 'CNode *' <LValueToRValue>
|       `-DeclRefExpr 0x563474726180 <col:78> 'CNode *' lvalue ParmVar 0x563474725ff8 'pnode' 'CNode *' non_odr_use_unevaluated
|-CXXRecordDecl 0x563474727460 <line:751:1, line:764:1> line:751:8 referenced invalid struct NodeEvictionCandidate definition
| |-DefinitionData aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x563474727578 <col:1, col:8> col:8 implicit struct NodeEvictionCandidate
| |-FieldDecl 0x563474727618 <line:753:5, col:12> col:12 id 'NodeId':'int'
| |-FieldDecl 0x563474727690 <line:754:5, col:13> col:13 invalid nTimeConnected 'int'
| |-FieldDecl 0x563474727708 <line:755:5, col:13> col:13 invalid nMinPingUsecTime 'int'
| |-FieldDecl 0x563474727780 <line:756:5, col:13> col:13 invalid nLastBlockTime 'int'
| |-FieldDecl 0x5634747277f8 <line:757:5, col:13> col:13 invalid nLastTXTime 'int'
| |-FieldDecl 0x563474727858 <line:758:5, col:10> col:10 referenced fRelevantServices 'bool'
| |-FieldDecl 0x5634747278b8 <line:759:5, col:10> col:10 referenced fRelayTxes 'bool'
| |-FieldDecl 0x563474727918 <line:760:5, col:10> col:10 referenced fBloomFilter 'bool'
| |-FieldDecl 0x563474727978 <line:761:5, col:14> col:14 invalid addr 'CAddress'
| |-FieldDecl 0x5634747279f0 <line:762:5, col:14> col:14 invalid nKeyedNetGroup 'int'
| `-FieldDecl 0x563474727a50 <line:763:5, col:10> col:10 referenced prefer_evict 'bool'
|-FunctionDecl 0x563474727c48 <line:766:1, line:769:1> line:766:13 used ReverseCompareNodeMinPingTime 'bool (const NodeEvictionCandidate &, const NodeEvictionCandidate &)' static
| |-ParmVarDecl 0x563474727af8 <col:43, col:72> col:72 used a 'const NodeEvictionCandidate &'
| |-ParmVarDecl 0x563474727b70 <col:75, col:104> col:104 used b 'const NodeEvictionCandidate &'
| `-CompoundStmt 0x563474727d38 <line:767:1, line:769:1>
|-FunctionDecl 0x563474727e68 <line:771:1, line:774:1> line:771:13 used ReverseCompareNodeTimeConnected 'bool (const NodeEvictionCandidate &, const NodeEvictionCandidate &)' static
| |-ParmVarDecl 0x563474727d58 <col:45, col:74> col:74 used a 'const NodeEvictionCandidate &'
| |-ParmVarDecl 0x563474727dd0 <col:77, col:106> col:106 used b 'const NodeEvictionCandidate &'
| `-CompoundStmt 0x563474727f58 <line:772:1, line:774:1>
|-FunctionDecl 0x563474728088 <line:776:1, line:778:1> line:776:13 used CompareNetGroupKeyed 'bool (const NodeEvictionCandidate &, const NodeEvictionCandidate &)' static
| |-ParmVarDecl 0x563474727f78 <col:34, col:63> col:63 used a 'const NodeEvictionCandidate &'
| |-ParmVarDecl 0x563474727ff0 <col:66, col:95> col:95 used b 'const NodeEvictionCandidate &'
| `-CompoundStmt 0x563474728178 <col:98, line:778:1>
|-FunctionDecl 0x5634747282a8 <line:780:1, line:786:1> line:780:13 used CompareNodeBlockTime 'bool (const NodeEvictionCandidate &, const NodeEvictionCandidate &)' static
| |-ParmVarDecl 0x563474728198 <col:34, col:63> col:63 used a 'const NodeEvictionCandidate &'
| |-ParmVarDecl 0x563474728210 <col:66, col:95> col:95 used b 'const NodeEvictionCandidate &'
| `-CompoundStmt 0x5634747285c8 <line:781:1, line:786:1>
|   `-IfStmt 0x563474728570 <line:784:5, col:62>
|     |-BinaryOperator 0x5634747284d8 <col:9, col:34> 'bool' '!='
|     | |-ImplicitCastExpr 0x5634747284a8 <col:9, col:11> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x563474728478 <col:9, col:11> 'bool' <LValueToRValue>
|     | |   `-MemberExpr 0x5634747283f8 <col:9, col:11> 'const bool' lvalue .fRelevantServices 0x563474727858
|     | |     `-DeclRefExpr 0x5634747283d8 <col:9> 'const NodeEvictionCandidate' lvalue ParmVar 0x563474728198 'a' 'const NodeEvictionCandidate &'
|     | `-ImplicitCastExpr 0x5634747284c0 <col:32, col:34> 'int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x563474728490 <col:32, col:34> 'bool' <LValueToRValue>
|     |     `-MemberExpr 0x563474728448 <col:32, col:34> 'const bool' lvalue .fRelevantServices 0x563474727858
|     |       `-DeclRefExpr 0x563474728428 <col:32> 'const NodeEvictionCandidate' lvalue ParmVar 0x563474728210 'b' 'const NodeEvictionCandidate &'
|     `-ReturnStmt 0x563474728560 <col:53, col:62>
|       `-ImplicitCastExpr 0x563474728548 <col:60, col:62> 'bool' <LValueToRValue>
|         `-MemberExpr 0x563474728518 <col:60, col:62> 'const bool' lvalue .fRelevantServices 0x563474727858
|           `-DeclRefExpr 0x5634747284f8 <col:60> 'const NodeEvictionCandidate' lvalue ParmVar 0x563474728210 'b' 'const NodeEvictionCandidate &'
|-FunctionDecl 0x563474728700 <line:788:1, line:795:1> line:788:13 used CompareNodeTXTime 'bool (const NodeEvictionCandidate &, const NodeEvictionCandidate &)' static
| |-ParmVarDecl 0x5634747285f0 <col:31, col:60> col:60 used a 'const NodeEvictionCandidate &'
| |-ParmVarDecl 0x563474728668 <col:63, col:92> col:92 used b 'const NodeEvictionCandidate &'
| `-CompoundStmt 0x563474728c18 <line:789:1, line:795:1>
|   |-IfStmt 0x5634747289c8 <line:792:5, col:48>
|   | |-BinaryOperator 0x563474728930 <col:9, col:27> 'bool' '!='
|   | | |-ImplicitCastExpr 0x563474728900 <col:9, col:11> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x5634747288d0 <col:9, col:11> 'bool' <LValueToRValue>
|   | | |   `-MemberExpr 0x563474728850 <col:9, col:11> 'const bool' lvalue .fRelayTxes 0x5634747278b8
|   | | |     `-DeclRefExpr 0x563474728830 <col:9> 'const NodeEvictionCandidate' lvalue ParmVar 0x5634747285f0 'a' 'const NodeEvictionCandidate &'
|   | | `-ImplicitCastExpr 0x563474728918 <col:25, col:27> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x5634747288e8 <col:25, col:27> 'bool' <LValueToRValue>
|   | |     `-MemberExpr 0x5634747288a0 <col:25, col:27> 'const bool' lvalue .fRelayTxes 0x5634747278b8
|   | |       `-DeclRefExpr 0x563474728880 <col:25> 'const NodeEvictionCandidate' lvalue ParmVar 0x563474728668 'b' 'const NodeEvictionCandidate &'
|   | `-ReturnStmt 0x5634747289b8 <col:39, col:48>
|   |   `-ImplicitCastExpr 0x5634747289a0 <col:46, col:48> 'bool' <LValueToRValue>
|   |     `-MemberExpr 0x563474728970 <col:46, col:48> 'const bool' lvalue .fRelayTxes 0x5634747278b8
|   |       `-DeclRefExpr 0x563474728950 <col:46> 'const NodeEvictionCandidate' lvalue ParmVar 0x563474728668 'b' 'const NodeEvictionCandidate &'
|   `-IfStmt 0x563474728b98 <line:793:5, col:52>
|     |-BinaryOperator 0x563474728b00 <col:9, col:29> 'bool' '!='
|     | |-ImplicitCastExpr 0x563474728ad0 <col:9, col:11> 'int' <IntegralCast>
|     | | `-ImplicitCastExpr 0x563474728aa0 <col:9, col:11> 'bool' <LValueToRValue>
|     | |   `-MemberExpr 0x563474728a00 <col:9, col:11> 'const bool' lvalue .fBloomFilter 0x563474727918
|     | |     `-DeclRefExpr 0x5634747289e0 <col:9> 'const NodeEvictionCandidate' lvalue ParmVar 0x5634747285f0 'a' 'const NodeEvictionCandidate &'
|     | `-ImplicitCastExpr 0x563474728ae8 <col:27, col:29> 'int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x563474728ab8 <col:27, col:29> 'bool' <LValueToRValue>
|     |     `-MemberExpr 0x563474728a50 <col:27, col:29> 'const bool' lvalue .fBloomFilter 0x563474727918
|     |       `-DeclRefExpr 0x563474728a30 <col:27> 'const NodeEvictionCandidate' lvalue ParmVar 0x563474728668 'b' 'const NodeEvictionCandidate &'
|     `-ReturnStmt 0x563474728b88 <col:43, col:52>
|       `-ImplicitCastExpr 0x563474728b70 <col:50, col:52> 'bool' <LValueToRValue>
|         `-MemberExpr 0x563474728b40 <col:50, col:52> 'const bool' lvalue .fBloomFilter 0x563474727918
|           `-DeclRefExpr 0x563474728b20 <col:50> 'const NodeEvictionCandidate' lvalue ParmVar 0x5634747285f0 'a' 'const NodeEvictionCandidate &'
|-VarTemplateDecl 0x563474728dd0 <line:799:1, line:800:13> col:13 invalid EraseLastKElements
| |-TemplateTypeParmDecl 0x563474728c38 <line:799:10, col:19> col:19 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563474728ca8 <col:22, col:31> col:31 typename depth 0 index 1 Comparator
| |-VarDecl 0x563474728d68 <line:800:1, col:13> col:13 invalid EraseLastKElements 'void' static
| | `-FullComment 0x56347478a500 <line:798:4, col:78>
| |   `-ParagraphComment 0x56347478a4d0 <col:4, col:78>
| |     `-TextComment 0x56347478a4a0 <col:4, col:78> Text=" Sort an array by the specified comparator, then erase the last K elements."
| `-FullComment 0x56347478a430 <col:4, col:78>
|   `-ParagraphComment 0x56347478a400 <col:4, col:78>
|     `-TextComment 0x56347478a3d0 <col:4, col:78> Text=" Sort an array by the specified comparator, then erase the last K elements."
|-CXXMethodDecl 0x563474728e80 parent 0x5634746986b0 prev 0x5634746a56c0 <line:815:1, line:903:1> line:815:16 used AttemptToEvictConnection 'bool ()'
| |-CompoundStmt 0x56347472be88 <line:816:1, line:903:1>
| | |-CompoundStmt 0x563474729520 <line:818:5, line:842:5>
| | |-IfStmt 0x5634747296a8 <line:862:5, col:45>
| | | |-OpaqueValueExpr 0x563474729690 <<invalid sloc>> 'bool'
| | | `-ReturnStmt 0x563474729680 <col:38, col:45>
| | |   `-CXXBoolLiteralExpr 0x563474729670 <col:45> 'bool' false
| | |-IfStmt 0x56347472a6d8 <line:867:5, line:870:5>
| | | |-OpaqueValueExpr 0x56347472a6c0 <<invalid sloc>> 'bool'
| | | `-CompoundStmt 0x56347472a6b0 <line:867:136, line:870:5>
| | |-DeclStmt 0x56347472a780 <line:874:5, col:31>
| | | `-VarDecl 0x56347472a718 <col:5, col:14> col:14 invalid naMostConnections 'int'
| | |-DeclStmt 0x56347472a850 <line:875:5, col:38>
| | | `-VarDecl 0x56347472a7b0 <col:5, col:37> col:18 used nMostConnections 'unsigned int' cinit
| | |   `-ImplicitCastExpr 0x56347472a838 <col:37> 'unsigned int' <IntegralCast>
| | |     `-IntegerLiteral 0x56347472a818 <col:37> 'int' 0
| | |-DeclStmt 0x56347472a918 <line:876:5, col:37>
| | | `-VarDecl 0x56347472a890 <col:5, col:13> col:13 invalid nMostConnectionsTime 'int'
| | |-DeclStmt 0x56347472bc40 <line:894:5, col:52>
| | | `-VarDecl 0x56347472bbd8 <col:5, col:12> col:12 used evicted 'NodeId':'int'
| | `-ReturnStmt 0x56347472be78 <line:902:5, col:12>
| |   `-CXXBoolLiteralExpr 0x56347472be68 <col:12> 'bool' false
| `-FullComment 0x56347478a6c0 <line:807:4, line:813:60>
|   `-ParagraphComment 0x56347478a690 <line:807:4, line:813:60>
|     |-TextComment 0x56347478a570 <line:807:4, col:60> Text=" Try to find a connection to evict when the node is full."
|     |-TextComment 0x56347478a590 <line:808:3, col:68> Text="  Extreme care must be taken to avoid opening the node to attacker"
|     |-TextComment 0x56347478a5b0 <line:809:3, col:36> Text="   triggered network partitioning."
|     |-TextComment 0x56347478a5d0 <line:810:3, col:64> Text="  The strategy used here is to protect a small number of peers"
|     |-TextComment 0x56347478a5f0 <line:811:3, col:69> Text="   for each of several distinct characteristics which are difficult"
|     |-TextComment 0x56347478a610 <line:812:3, col:65> Text="   to forge.  In order to partition a node the attacker must be"
|     `-TextComment 0x56347478a630 <line:813:3, col:60> Text="   simultaneously better at all of them than honest peers."
|-CXXMethodDecl 0x56347472bf80 parent 0x5634746986b0 prev 0x56347463a848 <line:905:1, line:1007:1> line:905:16 AcceptConnection 'void (const CConnman::ListenSocket &)'
| |-ParmVarDecl 0x56347472bef0 <col:33, col:53> col:53 used hListenSocket 'const CConnman::ListenSocket &'
| `-CompoundStmt 0x56347472f898 <col:68, line:1007:1>
|   |-DeclStmt 0x56347472c1f8 <line:906:5, col:37>
|   | |-CXXRecordDecl 0x56347472c070 <col:5, col:12> col:12 struct sockaddr_storage
|   | `-VarDecl 0x56347472c178 <col:5, col:29> col:29 invalid sockaddr 'struct sockaddr_storage':'sockaddr_storage'
|   |-DeclStmt 0x56347472c2a0 <line:907:5, col:37>
|   | `-VarDecl 0x56347472c238 <col:5, col:15> col:15 invalid len 'int'
|   |-DeclStmt 0x56347472c3c0 <line:908:5, col:85>
|   | `-VarDecl 0x56347472c2c8 <col:5, col:12> col:12 used hSocket 'SOCKET':'unsigned int'
|   |-DeclStmt 0x56347472c478 <line:909:5, col:18>
|   | `-VarDecl 0x56347472c3e8 <col:5, col:14> col:14 used addr 'CAddress' callinit
|   |   `-CXXConstructExpr 0x56347472c450 <col:14> 'CAddress' 'void ()'
|   |-DeclStmt 0x56347472c530 <line:910:5, col:21>
|   | `-VarDecl 0x56347472c4a8 <col:5, col:20> col:9 used nInbound 'int' cinit
|   |   `-IntegerLiteral 0x56347472c510 <col:20> 'int' 0
|   |-DeclStmt 0x56347472c698 <line:911:5, col:55>
|   | `-VarDecl 0x56347472c560 <col:5, col:41> col:9 used nMaxInbound 'int' cinit
|   |   `-BinaryOperator 0x56347472c678 <col:23, col:41> 'int' '-'
|   |     |-ImplicitCastExpr 0x56347472c648 <col:23> 'int' <LValueToRValue>
|   |     | `-MemberExpr 0x56347472c5d8 <col:23> 'int' lvalue ->nMaxConnections 0x5634746a7000
|   |     |   `-CXXThisExpr 0x56347472c5c8 <col:23> 'CConnman *' implicit this
|   |     `-ImplicitCastExpr 0x56347472c660 <col:41> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x56347472c618 <col:41> 'int' lvalue ->m_max_outbound 0x5634746a7208
|   |         `-CXXThisExpr 0x56347472c608 <col:41> 'CConnman *' implicit this
|   |-IfStmt 0x56347472c8f0 <line:913:5, line:917:5>
|   | |-BinaryOperator 0x56347472c7b0 <line:913:9, bitcoin/src/compat.h:59:40> 'bool' '!='
|   | | |-ImplicitCastExpr 0x56347472c798 <bitcoin/src/net.cpp:913:9> 'SOCKET':'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x56347472c6b0 <col:9> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   | | `-CStyleCastExpr 0x56347472c770 <bitcoin/src/compat.h:59:29, col:40> 'SOCKET':'unsigned int' <NoOp>
|   | |   `-ImplicitCastExpr 0x56347472c758 <col:37, col:40> 'SOCKET':'unsigned int' <IntegralCast> part_of_explicit_cast
|   | |     `-ParenExpr 0x56347472c738 <col:37, col:40> 'int'
|   | |       `-UnaryOperator 0x56347472c6f0 <col:38, col:39> 'int' prefix '~' cannot overflow
|   | |         `-IntegerLiteral 0x56347472c6d0 <col:39> 'int' 0
|   | `-CompoundStmt 0x56347472c8d8 <bitcoin/src/net.cpp:913:36, line:917:5>
|   |   `-IfStmt 0x56347472c8c0 <line:914:9, line:916:9>
|   |     |-OpaqueValueExpr 0x56347472c8a8 <<invalid sloc>> 'bool'
|   |     `-CompoundStmt 0x56347472c898 <line:914:67, line:916:9>
|   |-DeclStmt 0x56347472ca00 <line:919:5, col:69>
|   | `-VarDecl 0x56347472c918 <col:5, col:62> col:24 used permissionFlags 'NetPermissionFlags' cinit
|   |   `-DeclRefExpr 0x56347472c9d0 <col:42, col:62> 'NetPermissionFlags' EnumConstant 0x56347465cc10 'PF_NONE' 'NetPermissionFlags'
|   |-CXXMemberCallExpr 0x56347472ca88 <line:920:5, col:59> 'void'
|   | |-MemberExpr 0x56347472ca38 <col:5, col:19> '<bound member function type>' .AddSocketPermissionFlags 0x5634746397a8
|   | | `-DeclRefExpr 0x56347472ca18 <col:5> 'const CConnman::ListenSocket' lvalue ParmVar 0x56347472bef0 'hListenSocket' 'const CConnman::ListenSocket &'
|   | `-DeclRefExpr 0x56347472ca68 <col:44> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   |-DeclStmt 0x56347472cc00 <line:922:5, col:35>
|   | `-VarDecl 0x56347472cb88 <col:5, col:30> col:10 used legacyWhitelisted 'bool' cinit
|   |   `-CXXBoolLiteralExpr 0x56347472cbf0 <col:30> 'bool' false
|   |-IfStmt 0x56347472d3e0 <line:923:5, line:930:5>
|   | |-CallExpr 0x56347472cd20 <line:923:9, col:83> 'bool'
|   | | |-ImplicitCastExpr 0x56347472cd08 <col:9, col:25> 'bool (*)(const NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x56347472cc50 <col:9, col:25> 'bool (const NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465d988 'HasFlag' 'bool (const NetPermissionFlags &, NetPermissionFlags)'
|   | | |-ImplicitCastExpr 0x56347472cd50 <col:33> 'const NetPermissionFlags' lvalue <NoOp>
|   | | | `-DeclRefExpr 0x56347472cc80 <col:33> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   | | `-DeclRefExpr 0x56347472ccd8 <col:50, col:70> 'NetPermissionFlags' EnumConstant 0x56347465d1f0 'PF_ISIMPLICIT' 'NetPermissionFlags'
|   | `-CompoundStmt 0x56347472d3a0 <col:86, line:930:5>
|   |   |-CallExpr 0x56347472ce28 <line:924:9, col:65> 'void'
|   |   | |-ImplicitCastExpr 0x56347472ce10 <col:9, col:25> 'void (*)(NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x56347472cda0 <col:9, col:25> 'void (NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465dd98 'ClearFlag' 'void (NetPermissionFlags &, NetPermissionFlags)'
|   |   | |-DeclRefExpr 0x56347472cdd0 <col:35> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   |   | `-DeclRefExpr 0x56347472cdf0 <col:52> 'NetPermissionFlags' EnumConstant 0x56347465d1f0 'PF_ISIMPLICIT' 'NetPermissionFlags'
|   |   |-IfStmt 0x56347472cfd0 <line:925:9, col:138>
|   |   | |-OpaqueValueExpr 0x56347472cfb8 <<invalid sloc>> 'bool'
|   |   | `-CallExpr 0x56347472cf88 <col:84, col:138> 'void'
|   |   |   |-ImplicitCastExpr 0x56347472cf70 <col:84, col:100> 'void (*)(NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x56347472cf00 <col:84, col:100> 'void (NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465dbc8 'AddFlag' 'void (NetPermissionFlags &, NetPermissionFlags)'
|   |   |   |-DeclRefExpr 0x56347472cf30 <col:108> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   |   |   `-DeclRefExpr 0x56347472cf50 <col:125> 'NetPermissionFlags' EnumConstant 0x56347465cf20 'PF_FORCERELAY' 'NetPermissionFlags'
|   |   |-IfStmt 0x56347472d158 <line:926:9, col:123>
|   |   | |-OpaqueValueExpr 0x56347472d140 <<invalid sloc>> 'bool'
|   |   | `-CallExpr 0x56347472d110 <col:74, col:123> 'void'
|   |   |   |-ImplicitCastExpr 0x56347472d0f8 <col:74, col:90> 'void (*)(NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x56347472d088 <col:74, col:90> 'void (NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465dbc8 'AddFlag' 'void (NetPermissionFlags &, NetPermissionFlags)'
|   |   |   |-DeclRefExpr 0x56347472d0b8 <col:98> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   |   |   `-DeclRefExpr 0x56347472d0d8 <col:115> 'NetPermissionFlags' EnumConstant 0x56347465cdf0 'PF_RELAY' 'NetPermissionFlags'
|   |   |-CallExpr 0x56347472d230 <line:927:9, col:60> 'void'
|   |   | |-ImplicitCastExpr 0x56347472d218 <col:9, col:25> 'void (*)(NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x56347472d1a8 <col:9, col:25> 'void (NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465dbc8 'AddFlag' 'void (NetPermissionFlags &, NetPermissionFlags)'
|   |   | |-DeclRefExpr 0x56347472d1d8 <col:33> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   |   | `-DeclRefExpr 0x56347472d1f8 <col:50> 'NetPermissionFlags' EnumConstant 0x56347465d100 'PF_MEMPOOL' 'NetPermissionFlags'
|   |   |-CallExpr 0x56347472d320 <line:928:9, col:58> 'void'
|   |   | |-ImplicitCastExpr 0x56347472d308 <col:9, col:25> 'void (*)(NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x56347472d298 <col:9, col:25> 'void (NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465dbc8 'AddFlag' 'void (NetPermissionFlags &, NetPermissionFlags)'
|   |   | |-DeclRefExpr 0x56347472d2c8 <col:33> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   |   | `-DeclRefExpr 0x56347472d2e8 <col:50> 'NetPermissionFlags' EnumConstant 0x56347465d010 'PF_NOBAN' 'NetPermissionFlags'
|   |   `-BinaryOperator 0x56347472d380 <line:929:9, col:29> 'bool' lvalue '='
|   |     |-DeclRefExpr 0x56347472d350 <col:9> 'bool' lvalue Var 0x56347472cb88 'legacyWhitelisted' 'bool'
|   |     `-CXXBoolLiteralExpr 0x56347472d370 <col:29> 'bool' true
|   |-CompoundStmt 0x56347472d5d8 <line:932:5, line:937:5>
|   |-IfStmt 0x56347472d888 <line:939:5, line:945:5>
|   | |-BinaryOperator 0x56347472d6e8 <line:939:9, bitcoin/src/compat.h:59:40> 'bool' '=='
|   | | |-ImplicitCastExpr 0x56347472d6d0 <bitcoin/src/net.cpp:939:9> 'SOCKET':'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x56347472d5e8 <col:9> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   | | `-CStyleCastExpr 0x56347472d6a8 <bitcoin/src/compat.h:59:29, col:40> 'SOCKET':'unsigned int' <NoOp>
|   | |   `-ImplicitCastExpr 0x56347472d690 <col:37, col:40> 'SOCKET':'unsigned int' <IntegralCast> part_of_explicit_cast
|   | |     `-ParenExpr 0x56347472d670 <col:37, col:40> 'int'
|   | |       `-UnaryOperator 0x56347472d628 <col:38, col:39> 'int' prefix '~' cannot overflow
|   | |         `-IntegerLiteral 0x56347472d608 <col:39> 'int' 0
|   | `-CompoundStmt 0x56347472d868 <bitcoin/src/net.cpp:940:5, line:945:5>
|   |   |-DeclStmt 0x56347472d788 <line:941:9, col:37>
|   |   | `-VarDecl 0x56347472d720 <col:9, col:13> col:13 used nErr 'int'
|   |   `-ReturnStmt 0x56347472d858 <line:944:9>
|   |-IfStmt 0x56347472daf8 <line:947:5, line:951:5>
|   | |-OpaqueValueExpr 0x56347472dae0 <<invalid sloc>> 'bool'
|   | `-CompoundStmt 0x56347472daa8 <line:947:26, line:951:5>
|   |   |-CallExpr 0x56347472da70 <line:949:9, col:28> 'bool'
|   |   | |-ImplicitCastExpr 0x56347472da58 <col:9> 'bool (*)(SOCKET &)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x56347472da38 <col:9> 'bool (SOCKET &)' lvalue Function 0x5634746dbfd8 'CloseSocket' 'bool (SOCKET &)'
|   |   | `-DeclRefExpr 0x56347472da18 <col:21> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   |   `-ReturnStmt 0x56347472da98 <line:950:9>
|   |-IfStmt 0x56347472de90 <line:953:5, line:958:5>
|   | |-UnaryOperator 0x56347472dc50 <line:953:9, col:36> 'bool' prefix '!' cannot overflow
|   | | `-CallExpr 0x56347472dc10 <col:10, col:36> 'bool'
|   | |   |-ImplicitCastExpr 0x56347472dbf8 <col:10> 'bool (*)(const SOCKET &)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x56347472db78 <col:10> 'bool (const SOCKET &)' lvalue Function 0x5634745c5af8 'IsSelectableSocket' 'bool (const SOCKET &)'
|   | |   `-ImplicitCastExpr 0x56347472dc38 <col:29> 'const SOCKET':'const unsigned int' lvalue <NoOp>
|   | |     `-DeclRefExpr 0x56347472db58 <col:29> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   | `-CompoundStmt 0x56347472de70 <line:954:5, line:958:5>
|   |   |-CallExpr 0x56347472de38 <line:956:9, col:28> 'bool'
|   |   | |-ImplicitCastExpr 0x56347472de20 <col:9> 'bool (*)(SOCKET &)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x56347472de00 <col:9> 'bool (SOCKET &)' lvalue Function 0x5634746dbfd8 'CloseSocket' 'bool (SOCKET &)'
|   |   | `-DeclRefExpr 0x56347472dde0 <col:21> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   |   `-ReturnStmt 0x56347472de60 <line:957:9>
|   |-CallExpr 0x56347472df48 <line:962:5, col:29> 'bool'
|   | |-ImplicitCastExpr 0x56347472df30 <col:5> 'bool (*)(const SOCKET &)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x56347472df10 <col:5> 'bool (const SOCKET &)' lvalue Function 0x5634746dc3c8 'SetSocketNoDelay' 'bool (const SOCKET &)'
|   | `-ImplicitCastExpr 0x56347472df70 <col:22> 'const SOCKET':'const unsigned int' lvalue <NoOp>
|   |   `-DeclRefExpr 0x56347472def0 <col:22> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   |-DeclStmt 0x56347472e138 <line:964:5, col:67>
|   | `-VarDecl 0x56347472dfa0 <col:5, col:9> col:9 used bannedlevel 'int'
|   |-IfStmt 0x56347472e6c0 <line:968:5, line:973:5>
|   | |-BinaryOperator 0x56347472e490 <line:968:9, col:135> 'bool' '&&'
|   | | |-UnaryOperator 0x56347472e2a0 <col:9, col:79> 'bool' prefix '!' cannot overflow
|   | | | `-CallExpr 0x56347472e258 <col:10, col:79> 'bool'
|   | | |   |-ImplicitCastExpr 0x56347472e240 <col:10, col:26> 'bool (*)(const NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x56347472e188 <col:10, col:26> 'bool (const NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465d988 'HasFlag' 'bool (const NetPermissionFlags &, NetPermissionFlags)'
|   | | |   |-ImplicitCastExpr 0x56347472e288 <col:34> 'const NetPermissionFlags' lvalue <NoOp>
|   | | |   | `-DeclRefExpr 0x56347472e1b8 <col:34> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   | | |   `-DeclRefExpr 0x56347472e210 <col:51, col:71> 'NetPermissionFlags' EnumConstant 0x56347465d010 'PF_NOBAN' 'NetPermissionFlags'
|   | | `-BinaryOperator 0x56347472e470 <col:84, col:135> 'bool' '>'
|   | |   |-ImplicitCastExpr 0x56347472e458 <col:84> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x56347472e2b8 <col:84> 'int' lvalue Var 0x56347472dfa0 'bannedlevel' 'int'
|   | |   `-ParenExpr 0x56347472e438 <col:98, col:135> 'int'
|   | |     `-ConditionalOperator 0x56347472e408 <col:99, col:134> 'int'
|   | |       |-ParenExpr 0x56347472e3a8 <col:99, col:126> 'bool'
|   | |       | `-BinaryOperator 0x56347472e388 <col:100, col:115> 'bool' '<'
|   | |       |   |-BinaryOperator 0x56347472e330 <col:100, col:111> 'int' '+'
|   | |       |   | |-ImplicitCastExpr 0x56347472e318 <col:100> 'int' <LValueToRValue>
|   | |       |   | | `-DeclRefExpr 0x56347472e2d8 <col:100> 'int' lvalue Var 0x56347472c4a8 'nInbound' 'int'
|   | |       |   | `-IntegerLiteral 0x56347472e2f8 <col:111> 'int' 1
|   | |       |   `-ImplicitCastExpr 0x56347472e370 <col:115> 'int' <LValueToRValue>
|   | |       |     `-DeclRefExpr 0x56347472e350 <col:115> 'int' lvalue Var 0x56347472c560 'nMaxInbound' 'int'
|   | |       |-IntegerLiteral 0x56347472e3c8 <col:130> 'int' 1
|   | |       `-IntegerLiteral 0x56347472e3e8 <col:134> 'int' 0
|   | `-CompoundStmt 0x56347472e6a0 <line:969:5, line:973:5>
|   |   |-CallExpr 0x56347472e668 <line:971:9, col:28> 'bool'
|   |   | |-ImplicitCastExpr 0x56347472e650 <col:9> 'bool (*)(SOCKET &)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x56347472e630 <col:9> 'bool (SOCKET &)' lvalue Function 0x5634746dbfd8 'CloseSocket' 'bool (SOCKET &)'
|   |   | `-DeclRefExpr 0x56347472e610 <col:21> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   |   `-ReturnStmt 0x56347472e690 <line:972:9>
|   |-IfStmt 0x56347472ea20 <line:975:5, line:983:5>
|   | |-BinaryOperator 0x56347472e748 <line:975:9, col:21> 'bool' '>='
|   | | |-ImplicitCastExpr 0x56347472e718 <col:9> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x56347472e6d8 <col:9> 'int' lvalue Var 0x56347472c4a8 'nInbound' 'int'
|   | | `-ImplicitCastExpr 0x56347472e730 <col:21> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56347472e6f8 <col:21> 'int' lvalue Var 0x56347472c560 'nMaxInbound' 'int'
|   | `-CompoundStmt 0x56347472ea08 <line:976:5, line:983:5>
|   |   `-IfStmt 0x56347472e9f0 <line:977:9, line:982:9>
|   |     |-UnaryOperator 0x56347472e7c8 <line:977:13, col:39> 'bool' prefix '!' cannot overflow
|   |     | `-CXXMemberCallExpr 0x56347472e7a8 <col:14, col:39> 'bool'
|   |     |   `-MemberExpr 0x56347472e778 <col:14> '<bound member function type>' ->AttemptToEvictConnection 0x563474728e80
|   |     |     `-CXXThisExpr 0x56347472e768 <col:14> 'CConnman *' implicit this
|   |     `-CompoundStmt 0x56347472e9d0 <col:42, line:982:9>
|   |       |-CallExpr 0x56347472e998 <line:980:13, col:32> 'bool'
|   |       | |-ImplicitCastExpr 0x56347472e980 <col:13> 'bool (*)(SOCKET &)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x56347472e960 <col:13> 'bool (SOCKET &)' lvalue Function 0x5634746dbfd8 'CloseSocket' 'bool (SOCKET &)'
|   |       | `-DeclRefExpr 0x56347472e940 <col:25> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   |       `-ReturnStmt 0x56347472e9c0 <line:981:13>
|   |-DeclStmt 0x56347472eb10 <line:985:5, col:31>
|   | `-VarDecl 0x56347472ea48 <col:5, col:30> col:12 used id 'NodeId':'int' cinit
|   |   `-CXXMemberCallExpr 0x56347472eaf0 <col:17, col:30> 'NodeId':'int'
|   |     `-MemberExpr 0x56347472eac0 <col:17> '<bound member function type>' ->GetNewNodeId 0x5634746a5eb8
|   |       `-CXXThisExpr 0x56347472eab0 <col:17> 'CConnman *' implicit this
|   |-DeclStmt 0x56347472ebe8 <line:986:5, col:99>
|   | `-VarDecl 0x56347472eb50 <col:5, col:14> col:14 invalid nonce 'int'
|   |-DeclStmt 0x56347472edb8 <line:987:5, col:49>
|   | `-VarDecl 0x56347472ec10 <col:5, col:48> col:14 used addr_bind 'CAddress' cinit
|   |   `-ExprWithCleanups 0x56347472eda0 <col:26, col:48> 'CAddress'
|   |     `-CXXConstructExpr 0x56347472ed70 <col:26, col:48> 'CAddress' 'void (CAddress &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56347472ed58 <col:26, col:48> 'CAddress' xvalue
|   |         `-CallExpr 0x56347472ed18 <col:26, col:48> 'CAddress'
|   |           |-ImplicitCastExpr 0x56347472ed00 <col:26> 'CAddress (*)(SOCKET)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x56347472ece0 <col:26> 'CAddress (SOCKET)' lvalue Function 0x563474713f38 'GetBindAddress' 'CAddress (SOCKET)'
|   |           `-ImplicitCastExpr 0x56347472ed40 <col:41> 'SOCKET':'unsigned int' <LValueToRValue>
|   |             `-DeclRefExpr 0x56347472ecc0 <col:41> 'SOCKET':'unsigned int' lvalue Var 0x56347472c2c8 'hSocket' 'SOCKET':'unsigned int'
|   |-DeclStmt 0x56347472eea0 <line:989:5, col:47>
|   | `-VarDecl 0x56347472ede0 <col:5, col:33> col:18 used nodeServices 'ServiceFlags' cinit
|   |   `-ImplicitCastExpr 0x56347472ee88 <col:33> 'ServiceFlags' <LValueToRValue>
|   |     `-MemberExpr 0x56347472ee58 <col:33> 'ServiceFlags' lvalue ->nLocalServices 0x5634746a6f58
|   |       `-CXXThisExpr 0x56347472ee48 <col:33> 'CConnman *' implicit this
|   |-IfStmt 0x56347472f100 <line:990:5, line:992:5>
|   | |-CallExpr 0x56347472ef78 <line:990:9, col:64> 'bool'
|   | | |-ImplicitCastExpr 0x56347472ef60 <col:9, col:25> 'bool (*)(const NetPermissionFlags &, NetPermissionFlags)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x56347472eef0 <col:9, col:25> 'bool (const NetPermissionFlags &, NetPermissionFlags)' lvalue CXXMethod 0x56347465d988 'HasFlag' 'bool (const NetPermissionFlags &, NetPermissionFlags)'
|   | | |-ImplicitCastExpr 0x56347472efa8 <col:33> 'const NetPermissionFlags' lvalue <NoOp>
|   | | | `-DeclRefExpr 0x56347472ef20 <col:33> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   | | `-DeclRefExpr 0x56347472ef40 <col:50> 'NetPermissionFlags' EnumConstant 0x56347465cd00 'PF_BLOOMFILTER' 'NetPermissionFlags'
|   | `-CompoundStmt 0x56347472f0e8 <col:67, line:992:5>
|   |   `-BinaryOperator 0x56347472f0c8 <line:991:9, col:75> 'ServiceFlags' lvalue '='
|   |     |-DeclRefExpr 0x56347472efc0 <col:9> 'ServiceFlags' lvalue Var 0x56347472ede0 'nodeServices' 'ServiceFlags'
|   |     `-CXXStaticCastExpr 0x56347472f098 <col:24, col:75> 'ServiceFlags' static_cast<enum ServiceFlags> <IntegralCast>
|   |       `-BinaryOperator 0x56347472f068 <col:50, col:65> 'int' '|'
|   |         |-ImplicitCastExpr 0x56347472f038 <col:50> 'int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x56347472f020 <col:50> 'ServiceFlags' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x56347472efe0 <col:50> 'ServiceFlags' lvalue Var 0x56347472ede0 'nodeServices' 'ServiceFlags'
|   |         `-ImplicitCastExpr 0x56347472f050 <col:65> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x56347472f000 <col:65> 'ServiceFlags' EnumConstant 0x5634745e29a0 'NODE_BLOOM' 'ServiceFlags'
|   |-DeclStmt 0x56347472f300 <line:993:5, col:137>
|   | `-VarDecl 0x56347472f128 <col:5, col:12> col:12 used pnode 'CNode *'
|   |-CXXMemberCallExpr 0x56347472f380 <line:994:5, col:19> 'CNode *'
|   | `-MemberExpr 0x56347472f350 <col:5, col:12> '<bound member function type>' ->AddRef 0x5634746b7998
|   |   `-ImplicitCastExpr 0x56347472f338 <col:5> 'CNode *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56347472f318 <col:5> 'CNode *' lvalue Var 0x56347472f128 'pnode' 'CNode *'
|   |-BinaryOperator 0x56347472f440 <line:995:5, col:32> 'NetPermissionFlags' lvalue '='
|   | |-MemberExpr 0x56347472f3d8 <col:5, col:12> 'NetPermissionFlags' lvalue ->m_permissionFlags 0x5634746b6a88
|   | | `-ImplicitCastExpr 0x56347472f3c0 <col:5> 'CNode *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56347472f3a0 <col:5> 'CNode *' lvalue Var 0x56347472f128 'pnode' 'CNode *'
|   | `-ImplicitCastExpr 0x56347472f428 <col:32> 'NetPermissionFlags' <LValueToRValue>
|   |   `-DeclRefExpr 0x56347472f408 <col:32> 'NetPermissionFlags' lvalue Var 0x56347472c918 'permissionFlags' 'NetPermissionFlags'
|   |-BinaryOperator 0x56347472f500 <line:997:5, col:34> 'bool' lvalue '='
|   | |-MemberExpr 0x56347472f498 <col:5, col:12> 'bool' lvalue ->m_legacyWhitelisted 0x5634746b2190
|   | | `-ImplicitCastExpr 0x56347472f480 <col:5> 'CNode *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56347472f460 <col:5> 'CNode *' lvalue Var 0x56347472f128 'pnode' 'CNode *'
|   | `-ImplicitCastExpr 0x56347472f4e8 <col:34> 'bool' <LValueToRValue>
|   |   `-DeclRefExpr 0x56347472f4c8 <col:34> 'bool' lvalue Var 0x56347472cb88 'legacyWhitelisted' 'bool'
|   |-BinaryOperator 0x56347472f600 <line:998:5, col:43> 'bool' lvalue '='
|   | |-MemberExpr 0x56347472f558 <col:5, col:12> 'bool' lvalue ->m_prefer_evict 0x5634746b1fb0
|   | | `-ImplicitCastExpr 0x56347472f540 <col:5> 'CNode *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x56347472f520 <col:5> 'CNode *' lvalue Var 0x56347472f128 'pnode' 'CNode *'
|   | `-BinaryOperator 0x56347472f5e0 <col:29, col:43> 'bool' '>'
|   |   |-ImplicitCastExpr 0x56347472f5c8 <col:29> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56347472f588 <col:29> 'int' lvalue Var 0x56347472dfa0 'bannedlevel' 'int'
|   |   `-IntegerLiteral 0x56347472f5a8 <col:43> 'int' 0
|   |-CXXMemberCallExpr 0x56347472f6c8 <line:999:5, col:36> 'void'
|   | |-MemberExpr 0x56347472f678 <col:5, col:16> '<bound member function type>' ->InitializeNode 0x5634746ac8d8
|   | | `-ImplicitCastExpr 0x56347472f660 <col:5> 'NetEventsInterface *' <LValueToRValue>
|   | |   `-MemberExpr 0x56347472f630 <col:5> 'NetEventsInterface *' lvalue ->m_msgproc 0x5634746a7350
|   | |     `-CXXThisExpr 0x56347472f620 <col:5> 'CConnman *' implicit this
|   | `-ImplicitCastExpr 0x56347472f6f0 <col:31> 'CNode *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56347472f6a8 <col:31> 'CNode *' lvalue Var 0x56347472f128 'pnode' 'CNode *'
|   `-CompoundStmt 0x56347472f888 <line:1003:5, line:1006:5>
|-CXXMethodDecl 0x56347472f9c8 parent 0x5634746986b0 prev 0x56347463a910 <line:1009:1, line:1069:1> line:1009:16 DisconnectNodes 'void ()'
| `-CompoundStmt 0x563474730258 <line:1010:1, line:1069:1>
|   |-CompoundStmt 0x56347472fe98 <line:1011:5, line:1044:5>
|   | `-IfStmt 0x56347472fd38 <line:1014:9, line:1022:9>
|   |   |-OpaqueValueExpr 0x56347472fd20 <<invalid sloc>> 'bool'
|   |   `-CompoundStmt 0x56347472fd10 <line:1014:30, line:1022:9>
|   `-CompoundStmt 0x563474730248 <line:1045:5, line:1068:5>
|-CXXMethodDecl 0x5634747302a0 parent 0x5634746986b0 prev 0x56347463a9d0 <line:1071:1, line:1083:1> line:1071:16 NotifyNumConnectionsChanged 'void ()'
| `-CompoundStmt 0x5634747306c0 <line:1072:1, line:1083:1>
|   |-DeclStmt 0x563474730418 <line:1073:5, col:22>
|   | `-VarDecl 0x5634747303b0 <col:5, col:12> col:12 invalid vNodesSize 'int'
|   |-CompoundStmt 0x5634747304f8 <line:1074:5, line:1077:5>
|   `-IfStmt 0x5634747306a8 <line:1078:5, line:1082:5>
|     |-OpaqueValueExpr 0x563474730690 <<invalid sloc>> 'bool'
|     `-CompoundStmt 0x563474730680 <line:1078:38, line:1082:5>
|-CXXMethodDecl 0x563474730790 parent 0x5634746986b0 prev 0x5634746a4a58 <line:1085:1, line:1116:1> line:1085:16 InactivityCheck 'void (CNode *)'
| |-ParmVarDecl 0x563474730700 <col:32, col:39> col:39 used pnode 'CNode *'
| `-CompoundStmt 0x563474731670 <line:1086:1, line:1116:1>
|   |-DeclStmt 0x563474730950 <line:1087:5, col:45>
|   | `-VarDecl 0x5634747308a8 <col:5, col:13> col:13 invalid nTime 'int'
|   `-IfStmt 0x563474731658 <line:1088:5, line:1115:5>
|     |-OpaqueValueExpr 0x563474731640 <<invalid sloc>> 'bool'
|     `-CompoundStmt 0x563474731628 <line:1089:5, line:1115:5>
|       `-IfStmt 0x563474731600 <line:1090:9, line:1114:9> has_else
|         |-OpaqueValueExpr 0x5634747315e8 <<invalid sloc>> 'bool'
|         |-CompoundStmt 0x563474730c98 <line:1091:9, line:1094:9>
|         `-IfStmt 0x5634747315c0 <line:1095:14, line:1114:9> has_else
|           |-OpaqueValueExpr 0x5634747315a8 <<invalid sloc>> 'bool'
|           |-CompoundStmt 0x563474730df8 <line:1096:9, line:1099:9>
|           `-IfStmt 0x563474731580 <line:1100:14, line:1114:9> has_else
|             |-OpaqueValueExpr 0x563474731568 <<invalid sloc>> 'bool'
|             |-CompoundStmt 0x563474731010 <line:1101:9, line:1104:9>
|             `-IfStmt 0x563474731540 <line:1105:14, line:1114:9> has_else
|               |-OpaqueValueExpr 0x563474731528 <<invalid sloc>> 'bool'
|               |-CompoundStmt 0x563474731338 <line:1106:9, line:1109:9>
|               `-IfStmt 0x563474731510 <line:1110:14, line:1114:9>
|                 |-OpaqueValueExpr 0x5634747314f8 <<invalid sloc>> 'bool'
|                 `-CompoundStmt 0x5634747314e8 <line:1111:9, line:1114:9>
|-VarDecl 0x5634747316c8 parent 0x5634746986b0 <line:1118:1, col:16> col:16 invalid GenerateSelectSet 'bool'
|-VarDecl 0x5634747317e0 <line:2325:1, col:20> col:20 invalid instance_of_cnetcleanup 'int' static
|-CXXMethodDecl 0x563474731870 parent 0x5634746986b0 prev 0x56347469a018 <line:2327:1, line:2349:1> line:2327:16 used Interrupt 'void ()'
| `-CompoundStmt 0x563474734ff8 <line:2328:1, line:2349:1>
|   |-CompoundStmt 0x563474731a38 <line:2329:5, line:2332:5>
|   | `-DeclStmt 0x563474731a10 <line:2330:37, col:55>
|   |   `-VarDecl 0x5634747319a8 <col:37, <invalid sloc>> col:42 invalid mutexMsgProc 'int':'int'
|   |-CallExpr 0x563474734b70 <line:2336:5, col:25> 'void'
|   | |-ImplicitCastExpr 0x563474734b58 <col:5> 'void (*)(bool)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x563474731ac8 <col:5> 'void (bool)' lvalue Function 0x5634746dc818 'InterruptSocks5' 'void (bool)'
|   | `-CXXBoolLiteralExpr 0x563474731ab8 <col:21> 'bool' true
|   |-IfStmt 0x563474734db0 <line:2338:5, line:2342:5>
|   | |-OpaqueValueExpr 0x563474734d98 <<invalid sloc>> 'bool'
|   | `-CompoundStmt 0x563474734d80 <line:2338:22, line:2342:5>
|   |   `-ForStmt 0x563474734d48 <line:2339:9, line:2341:9>
|   |     |-DeclStmt 0x563474734c38 <line:2339:14, col:21>
|   |     | `-VarDecl 0x563474734bb0 <col:14, col:20> col:18 used i 'int' cinit
|   |     |   `-IntegerLiteral 0x563474734c18 <col:20> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x563474734ce0 <col:23, col:25> 'bool' '<'
|   |     | |-ImplicitCastExpr 0x563474734cb0 <col:23> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x563474734c50 <col:23> 'int' lvalue Var 0x563474734bb0 'i' 'int'
|   |     | `-ImplicitCastExpr 0x563474734cc8 <col:25> 'int' <LValueToRValue>
|   |     |   `-MemberExpr 0x563474734c80 <col:25> 'int' lvalue ->m_max_outbound 0x5634746a7208
|   |     |     `-CXXThisExpr 0x563474734c70 <col:25> 'CConnman *' implicit this
|   |     |-UnaryOperator 0x563474734d20 <col:41, col:42> 'int' postfix '++'
|   |     | `-DeclRefExpr 0x563474734d00 <col:41> 'int' lvalue Var 0x563474734bb0 'i' 'int'
|   |     `-CompoundStmt 0x563474734d38 <col:46, line:2341:9>
|   `-IfStmt 0x563474734fe0 <line:2344:5, line:2348:5>
|     |-OpaqueValueExpr 0x563474734fc8 <<invalid sloc>> 'bool'
|     `-CompoundStmt 0x563474734fb0 <line:2344:21, line:2348:5>
|       `-ForStmt 0x563474734f78 <line:2345:9, line:2347:9>
|         |-DeclStmt 0x563474734e68 <line:2345:14, col:21>
|         | `-VarDecl 0x563474734de0 <col:14, col:20> col:18 used i 'int' cinit
|         |   `-IntegerLiteral 0x563474734e48 <col:20> 'int' 0
|         |-<<<NULL>>>
|         |-BinaryOperator 0x563474734f10 <col:23, col:25> 'bool' '<'
|         | |-ImplicitCastExpr 0x563474734ee0 <col:23> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563474734e80 <col:23> 'int' lvalue Var 0x563474734de0 'i' 'int'
|         | `-ImplicitCastExpr 0x563474734ef8 <col:25> 'int' <LValueToRValue>
|         |   `-MemberExpr 0x563474734eb0 <col:25> 'int' lvalue ->nMaxAddnode 0x5634746a7138
|         |     `-CXXThisExpr 0x563474734ea0 <col:25> 'CConnman *' implicit this
|         |-UnaryOperator 0x563474734f50 <col:38, col:39> 'int' postfix '++'
|         | `-DeclRefExpr 0x563474734f30 <col:38> 'int' lvalue Var 0x563474734de0 'i' 'int'
|         `-CompoundStmt 0x563474734f68 <col:43, line:2347:9>
|-CXXMethodDecl 0x563474735050 parent 0x5634746986b0 prev 0x563474699f18 <line:2351:1, line:2390:1> line:2351:16 used Stop 'void ()'
| |-CompoundStmt 0x5634747358a0 <line:2352:1, line:2390:1>
| | `-IfStmt 0x563474735360 <line:2364:5, line:2368:5>
| |   |-ImplicitCastExpr 0x563474735258 <line:2364:9> 'bool' <LValueToRValue>
| |   | `-MemberExpr 0x563474735228 <col:9> 'bool' lvalue ->fAddressesInitialized 0x5634746a6b70
| |   |   `-CXXThisExpr 0x563474735218 <col:9> 'CConnman *' implicit this
| |   `-CompoundStmt 0x563474735340 <line:2365:5, line:2368:5>
| |     |-CXXMemberCallExpr 0x5634747352b0 <line:2366:9, col:23> 'void'
| |     | `-MemberExpr 0x563474735280 <col:9> '<bound member function type>' ->DumpAddresses 0x5634746a6108
| |     |   `-CXXThisExpr 0x563474735270 <col:9> 'CConnman *' implicit this
| |     `-BinaryOperator 0x563474735320 <line:2367:9, col:33> 'bool' lvalue '='
| |       |-MemberExpr 0x5634747352e0 <col:9> 'bool' lvalue ->fAddressesInitialized 0x5634746a6b70
| |       | `-CXXThisExpr 0x5634747352d0 <col:9> 'CConnman *' implicit this
| |       `-CXXBoolLiteralExpr 0x563474735310 <col:33> 'bool' false
| `-NoThreadSafetyAnalysisAttr 0x563474735168 <bitcoin/src/threadsafety.h:33:50> Inherited
|-CXXMethodDecl 0x563474735960 parent 0x5634746986b0 prev 0x5634746a5dc8 <bitcoin/src/net.cpp:2392:1, line:2401:1> line:2392:16 used DeleteNode 'void (CNode *)'
| |-ParmVarDecl 0x5634747358d0 <col:27, col:34> col:34 used pnode 'CNode *'
| `-CompoundStmt 0x563474736370 <line:2393:1, line:2401:1>
|   |-DeclStmt 0x563474735b38 <line:2395:5, col:39>
|   | `-VarDecl 0x563474735ac0 <col:5, col:34> col:10 used fUpdateConnectionTime 'bool' cinit
|   |   `-CXXBoolLiteralExpr 0x563474735b28 <col:34> 'bool' false
|   |-CXXMemberCallExpr 0x563474735c98 <line:2396:5, col:66> 'void'
|   | |-MemberExpr 0x563474735ba8 <col:5, col:16> '<bound member function type>' ->FinalizeNode 0x5634746acb28
|   | | `-ImplicitCastExpr 0x563474735b90 <col:5> 'NetEventsInterface *' <LValueToRValue>
|   | |   `-MemberExpr 0x563474735b60 <col:5> 'NetEventsInterface *' lvalue ->m_msgproc 0x5634746a7350
|   | |     `-CXXThisExpr 0x563474735b50 <col:5> 'CConnman *' implicit this
|   | |-CXXMemberCallExpr 0x563474735c40 <col:29, col:42> 'NodeId':'int'
|   | | `-MemberExpr 0x563474735c10 <col:29, col:36> '<bound member function type>' ->GetId 0x5634746b6d08
|   | |   `-ImplicitCastExpr 0x563474735c60 <col:29> 'const CNode *' <NoOp>
|   | |     `-ImplicitCastExpr 0x563474735bf8 <col:29> 'CNode *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x563474735bd8 <col:29> 'CNode *' lvalue ParmVar 0x5634747358d0 'pnode' 'CNode *'
|   | `-DeclRefExpr 0x563474735c78 <col:45> 'bool' lvalue Var 0x563474735ac0 'fUpdateConnectionTime' 'bool'
|   |-IfStmt 0x563474735d58 <line:2397:5, line:2399:5>
|   | |-ImplicitCastExpr 0x563474735ce8 <line:2397:8> 'bool' <LValueToRValue>
|   | | `-DeclRefExpr 0x563474735cc8 <col:8> 'bool' lvalue Var 0x563474735ac0 'fUpdateConnectionTime' 'bool'
|   | `-CompoundStmt 0x563474735d48 <col:31, line:2399:5>
|   `-CXXDeleteExpr 0x563474736350 <line:2400:5, col:12> 'void' Function 0x5634747360b0 'operator delete' 'void (void *) noexcept'
|     `-ImplicitCastExpr 0x563474735d90 <col:12> 'CNode *' <LValueToRValue>
|       `-DeclRefExpr 0x563474735d70 <col:12> 'CNode *' lvalue ParmVar 0x5634747358d0 'pnode' 'CNode *'
|-FunctionDecl 0x563474735de0 <<invalid sloc>> <invalid sloc> implicit operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x563474735ec0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x563474735e80 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x563474735f30 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x563474736010 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| `-VisibilityAttr 0x563474735fd0 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x5634747360b0 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x563474736190 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x563474736150 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x563474736200 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x5634747362e0 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x5634747362a0 <<invalid sloc>> Implicit Default
|-CXXDestructorDecl 0x5634747363f0 parent 0x5634746986b0 prev 0x563474699bd8 <line:2403:1, line:2407:1> line:2403:11 ~CConnman 'void () noexcept'
| `-CompoundStmt 0x5634747365c8 <line:2404:1, line:2407:1>
|   |-CXXMemberCallExpr 0x563474736548 <line:2405:5, col:15> 'void'
|   | `-MemberExpr 0x563474736518 <col:5> '<bound member function type>' ->Interrupt 0x563474731870
|   |   `-CXXThisExpr 0x563474736508 <col:5> 'CConnman *' implicit this
|   `-CXXMemberCallExpr 0x5634747365a8 <line:2406:5, col:10> 'void'
|     `-MemberExpr 0x563474736578 <col:5> '<bound member function type>' ->Stop 0x563474735050
|       `-CXXThisExpr 0x563474736568 <col:5> 'CConnman *' implicit this
|-CXXMethodDecl 0x563474736628 parent 0x5634746986b0 <line:2409:1, line:2412:1> line:2409:18 invalid GetAddressCount 'int () const'
| `-CompoundStmt 0x563474736720 <line:2410:1, line:2412:1>
|-CXXMethodDecl 0x563474736858 parent 0x5634746986b0 prev 0x56347469bed8 <line:2414:1, line:2417:1> line:2414:16 SetServices 'void (const CService &, ServiceFlags)'
| |-ParmVarDecl 0x563474736748 <col:28, col:44> col:44 used addr 'const CService &'
| |-ParmVarDecl 0x5634747367c0 <col:50, col:63> col:63 used nServices 'ServiceFlags'
| `-CompoundStmt 0x5634747369a0 <line:2415:1, line:2417:1>
|-CXXMethodDecl 0x563474736a58 parent 0x5634746986b0 prev 0x56347469c028 <line:2419:1, line:2422:1> line:2419:16 MarkAddressGood 'void (const CAddress &)'
| |-ParmVarDecl 0x5634747369c8 <col:32, col:48> col:48 used addr 'const CAddress &'
| `-CompoundStmt 0x5634747373b0 <line:2420:1, line:2422:1>
|-CXXMethodDecl 0x563474737490 parent 0x5634746986b0 <line:2424:1, line:2427:1> line:2424:16 invalid AddNewAddresses 'void (const int)'
| |-ParmVarDecl 0x563474737400 <col:32, <invalid sloc>> col:59 invalid 'const int'
| `-CompoundStmt 0x563474737590 <line:2425:1, line:2427:1>
|-CXXMethodDecl 0x563474737680 parent 0x5634746986b0 <line:2434:1, line:2443:1> line:2434:16 invalid AddNode 'bool (const int &)'
| |-ParmVarDecl 0x5634747375f0 <col:24, col:43> col:43 invalid strNode 'const int &'
| `-CompoundStmt 0x563474737988 <line:2435:1, line:2443:1>
|   `-ReturnStmt 0x563474737978 <line:2442:5, col:12>
|     `-CXXBoolLiteralExpr 0x563474737968 <col:12> 'bool' true
|-CXXMethodDecl 0x563474737a60 parent 0x5634746986b0 <line:2445:1, line:2455:1> line:2445:16 invalid RemoveAddedNode 'bool (const int &)'
| |-ParmVarDecl 0x5634747379d0 <col:32, col:51> col:51 invalid strNode 'const int &'
| `-CompoundStmt 0x563474737db0 <line:2446:1, line:2455:1>
|   `-ReturnStmt 0x563474737da0 <line:2454:5, col:12>
|     `-CXXBoolLiteralExpr 0x563474737d90 <col:12> 'bool' false
|-CXXMethodDecl 0x563474737e88 parent 0x5634746986b0 <line:2457:1, line:2471:1> line:2457:18 invalid GetNodeCount 'int (CConnman::NumConnections)'
| |-ParmVarDecl 0x563474737df0 <col:31, col:46> col:46 used flags 'CConnman::NumConnections'
| `-CompoundStmt 0x5634747383c0 <line:2458:1, line:2471:1>
|   |-DeclStmt 0x5634747381d8 <line:2463:5, col:17>
|   | `-VarDecl 0x563474738150 <col:5, col:16> col:9 used nNum 'int' cinit
|   |   `-IntegerLiteral 0x5634747381b8 <col:16> 'int' 0
|   `-ReturnStmt 0x5634747383b0 <line:2470:5, col:12>
|     `-ImplicitCastExpr 0x563474738398 <col:12> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x563474738378 <col:12> 'int' lvalue Var 0x563474738150 'nNum' 'int'
`-VarDecl 0x563474738418 parent 0x5634746986b0 <line:2473:1, col:16> col:16 invalid GetNodeStats 'void'
